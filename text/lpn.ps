%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: lpn.dvi
%%Pages: 279
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: Times-Roman Times-Bold Times-Italic CMTT10 CMSS12
%%+ CMMI10 CMSY10 CMTT12 CMR10 CMTT9 CMR7 CMEX10 CMMI7 CMSY7
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips lpn.dvi -o -Pwww
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.04.17:0913
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 4, 04/05/10
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
  z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def /x x Coef mul def /y1 y1 Coef mul def /x1 x1 Coef mul def
  x1 0 gt y1 0 gt x 0 gt y 0 gt and { [ y x y1 x1 ] 1 a sub y mul}
  { [ 1 0] 0 } ifelse setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
    n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "30 October 2002",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: cmtt10.pfb 0 0
%!PS-AdobeFont-1.1: CMTT10 1.00B
%%CreationDate: 1992 Apr 26 10:42:42

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /arrowup put
dup 175 /arrowdown put
dup 176 /quotesingle put
dup 177 /exclamdown put
dup 178 /questiondown put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /visiblespace put
dup 196 /dieresis put
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /arrowup put
dup 12 /arrowdown put
dup 13 /quotesingle put
dup 14 /exclamdown put
dup 15 /questiondown put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /visiblespace put
dup 33 /exclam put
dup 34 /quotedbl put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /backslash put
dup 93 /bracketright put
dup 94 /asciicircum put
dup 95 /underscore put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
dup 126 /asciitilde put
dup 127 /dieresis put
dup 128 /visiblespace put
dup 160 /space put
readonly def
/FontBBox{-4 -235 731 800}readonly def
/UniqueID 5000832 def
currentdict end
currentfile eexec

8053514D28EC28DA1630165FAB262882D3FCA78881823C5537FE6C3DDA8EE5B897E17CB027F5
C73FDBB56B0A7C25FC3512B55FE8F3ACFBFFCC7F4A382D8299CC8FD37D3CEA49DABDCA92847A
F0560B404EF71134B0F3D99934FC9D0B4E602011B9CFB856C23F958F3C5A2FBE0EF8587D1F57
74879C324E51FCB22888B74F241550D7401EB990D4F3A7AF635198422283CAC1B6CD446DDBCB
D915DB9BFF88844E784C6BF7389803D9450B0C21756A017306462C563D51ECEFAACD079732F1
2C29315E4B9623A5752C6F1D8145869E120D910B2644887CEA7E30B15676A92537C29D3AA80D
C30082ABA94B40990B82FB1A877E805E0C8C48F61E9F2EDAC05B944EE4D8084EC1D5CC517AAE
EC5B3EA379DD011EEB454CECAB3AD2443C887C58278972355673E503AFFE0394FC7DB31DE364
E4F56C24033C7DF2265C56445EC63A1D5695A6041EA1B94407E1CDB7C5635603A4FD047E6EDC
AEB2D0DA6C9E0E9396D51A4A58E8FDC1578730F992435560A6E2D3E3687703EE2F78F5896389
AC8470BC806169EB01762E89B6DC9ADF857EAD656620E2589AAE722C37A2ED7A2941C360B067
EE34D8D5CA3BF68DB725614D936BCB207781F4D4EC2AC67B13A5AD161F3F059ADD7B5E3D9048
31E31C20C04546FAE83CA93A35989E65C201756888F727B97E5313C9870EC96E4CEC3901EA03
A5C744754485E7D169BBC98BF872D0796E189D43B712950C3786257D8BE06AB6080B9D939231
3298327549A8A41C00A2CEA3690B4A333E45AA815A64FACAE1C2B44640860B8B8687AFBEFDBD
5B4A541A72514EE7D3E0752AF3E96A88C95D31FA16D34BA2F02FDB0088B165844F02611C734A
DBCC2037BF741FDEA7E8BCDC130C70C33772F777D8BCDDF4611DB99001CCFF14D7AF2BB05DEF
C3480BDAB312A0EFF2F375AFB4E0DF2F803C594B7C93F71CA4AF861AE1711932FEF19BFE2F9B
7ADB69D68E5A70EA4D1A3D5BD85231B16993F65EFB37A0A823F0542F8C2340A073DC1BE4A834
7F9D3068A6435CD8278B0DB1809E8AF9664C2C989B9F16873C009449B6284B85DA4DEE11C96A
05BA83292F0EDBD92CF674AAD6AC1A5FF966FFC37E88A66048DEED053565B55EF6BDB8C2F2F6
7832F8939A32442EA54F13D003494D6350A2864B427A9126A9C26A031909FE53FA8463B80C3F
FD536C9A5DD29CEB03148DBC24C0033AEE72DDD159F2E8A6FC113F428070EB36CE5A38A72ED5
BD94D81AB4DAF08EBD42C8E5BC695622E02AECD4004E6D4CFE72534CA56291FF5F2F83361BCD
B9489A993F663289B6DD492499DD5713227210F89370928ADA0085E2AF277F53E4CEC34D6C4B
8CD5F2E016052A04C20AAECE8B81AF9E9F33643C0FA69A5BA864D2A173221071A965F9970D72
93DCDE8C3FF60A86A4D3706850CBC45440DCD22F307261E2F6FAA3EE156A58069DF979C9B5EA
A326C5A36B6E0FC0333D7B4046D636461CA2EF70648C37A953F96FAED6266EC9022753EBC390
BE93C0CCB7C318C4314D9F6E54274C8046A8C5CC7EEBE625BF59A03F5405733ED120841560CB
93210EA1EAAF3402ADCF1FAB986521BDB7CBA72A2353942FBEA4A0D1B67ECDE589A65AF8E7A5
FA4B87672AD55F57D783C66DE1D11E0A16BCF32530692380C730D12834777AC6750F85131D77
B0F53B626635CAD3BB8E9F0454FA085CBCCB0339034F5FB2E225E62CE12E8C792F5B7E234688
D2AA8F627A4670339E646399F91E94424263E5C12F9F3D411FA44449611EA9785A20FBA733FF
2A7892D1641F836CD42C58CCB81E41D6E2A5AE30FA18DE9846AD981923604C799B16A99779FC
CBA11044740BBCC78116E857B4B390DE0E66921376101D621E1FA003F01AE344FEA0215F2577
E9C92C6AD07F2F4674A00FE42AC51FE5A9186C3C1956B535FF1DD64BA514534DDD73C0C61C54
FBD6FAC3B4FD9010FC55DF2A37A111BD1402D4E90FD8B3601DD3E9FE25634D709C289E524A66
DFC33CDA640D397269BD9ECB9D0EE84A7D7B93A97DC522A16B6965B7D5D7790A3002341ECB3E
80985371A5169B38133B13FC5C1DEBE2D90C43BA5D2CEC7D3B972D32AA1A932B750D6CC83439
73FBB9972D84670AC5CAC5D0B5E75CE021F99493CE29AE90BCA0CB75058BB0A47DFAE6C8D075
043BFD738991C2A0B80BE18386D7A6FAF89FEBC4AD142A1B0EEA8884EBFA87817E22C222170C
B6D04BC6DDB541284E16400028EEA275244B69B033D200AD997BE7D1DEBE13CF783BE1137278
24006CE4B5E3F34D09FAB236749D3E72C033997A652982829376DF91ABF533F0100BF224C279
D3515176DFD56C325B3D7A3EFE0BEFF84233B5A7EE262557F84D754F03817C900945DBD5DC59
B46BE8847D1FBEDD70799DC42D0148841DE2F816F894ADD5EB2C0E1BF19F52558AF84DE5B693
86020DF814DE7647FD41127459D65798B06EC5D132AC0F181BE211624E97F8096C0A22E6B216
0878909D00A918E90B435C8C87D1033E40B56B4F15752D5A8AC019837604DB9E1AF709A2EA36
4F174DC2EB1957F0E5F477CE06A0EB78026BD1B23D76102C6862156C47040EC259FF4E89F83A
42D8DFE53F96127C8AB4037EFEF724ED011928C2CEECB4A8A4B5A480595A2AAF93228EE37205
2428BCCCB4685246BF3E9FFDB2845CA05DFD4902E74483626C2FEBB4E76C78B2AD6A96372D0E
AE47FDF4B8D1F068FF0D1EED01C6860C86275A2EE3C2A97AA6033AAAC489E1A540432BF92A75
7205428AEE30CCD48DC234C521003D7EF7B88BDA8E72A12AD36C2BEAB1177CA82BB2458997A4
B5094A9DABAAE0A83D7ACF4F7727223303D5D8ACB9B265B3326CFB1AAC4BDB80B28E828DA936
BCA574722A73B05D447C9F7E506D78B33F582B3BBEA37BF8380CDD32B15E74ACFEA5BD635C2D
FC3A6090E7D96DB7E9127A3660024258A3A7DA06D08C4691B19F88D0BC719B1414E953B26F09
6A0379BD71ADCE16DA6EB552A50EC318456CFDE8FBED1DD92200A9EBE83849AE3FDE58B5400E
0C173E01F5E23E883119421C7BF5F12ACAE87B3C3DF0D824A67A320273D41607306B14A63D46
2C042A6C6A31B92D54E01D7AFEE232DDAC002D012B950A71C2F065BD478196779544093A5B61
93247AAD7970AB5E306EDBDC24EB4C6B71A174ADC6565A99EBD7EC83E01ECEA533D364C2F07D
8A48C84C0A3941DD6B75422FCB49AE7BB79245CFE9ADC2C9B3E6B48A46867CC72F26D8C82C2B
F5E8F60763CB9B473473F521FB016CD1D07B3216C496CDC68F72C6E9AC5B8193CB3E20EA84C5
A7CAE4905261B554D6BA006C787658463215646AE218972219EB34A5964F0A277A1D1A20CBBC
94FBE359573A672EFD0019B2C0A6A02F4B15D14B961383630F0CC578168F9DF7D33D3509CE75
D272141AC8EAD6C708227A193A5542A213E6435AB543754A75D066C000A1FA060053A862A013
799F762B5403BEF0E52C8208D3E690393BD3FF71C8EAA08C49C77F33BFD9A6F9370A88CDC3E5
B1012FB13C784E637A4891503B5FFB4A0BEB105458413D3FC880B92671E786BFD03F158429E1
E80EE252159C6B61079092C2035748A3C0D1B7C400B88666F94601D53C2EB3308AA791F66E40
DB8CD2CD53ABE4A018A2BEFF566806C6CA7108EFE8C70C7E4058853019425AA8EE77D3E75973
1A80FFFB59CDECD15D099E336A63A605DCCCAAD3FC55300B12402FB10A9FA4292D61F8967C21
8E008343617BE44D29AA7DD755609EBEEF555F8291543623BE6CDAD4F46CA20063DDE0EC4F24
B9052D6092BA0FB03EC7277643F178CFDD5314F597B93139183823C2049FA4FE0E1F7913348E
B83F151E13251C3C2ED100CB9C907969669D98C5F349FD064A677FB689671C27B658C3118B20
6AFA9478A4F0AC3E6325139045C83C046D0F81BB002757DE25E9778A4D835E6D61E563293923
CCF415FF132B34BA9ADC441B806151561C59662867F91CDDA7579CB77326D5C34BE9149E9629
8787F98EAE3B5A2E2190D932581F36C547680C3266770786DF978FDFBF96D7DAD68969EFC46F
5A39567D97CCF08BD361FE650629A6CEC31DDF856640E6A2842447A87264503B7917AF46D7D5
14BDCC09B23E7DA51C47816EF27100FA60AE3FBDC320B6E792AF15CCE9412C8C80B3A46F5E31
E380D93EE3D17A5F674684AE28C56381892B66AA5A37B67B6E7CB9D65D359791E8EE0A36A4B6
537315C99505BF6264B6C3BDB62A368AA4C5784409166831B36AC6241C24C9EBEE261196E7C5
B55480CDFADA76C0F979FBFC9F3AB5A53CAC4C6DE0BC8CC9BC93221347EC17FC024CEF796410
67DE49A3460AE6C83464CE27DB329E16605DC22D727F578F14764720F4D6BDC24E171B27EAF1
43EB293A70525452FEE8100DBB2D7ABCC5177C7BA96CD07A8667103312BC495FD7813A5DC7BD
37C1C96B1DDD53841B9DE37C5BE008AD67706045EC1AB4F418F60A17C0786136A5B9617CAEA4
BF319CA20636691BCA83918785CC15FA19B4E8CB5AFFA398DCB868AE139124E6DF8BC1CA29C4
3E4F7D57AD6D625D570B498FD8D2B3FB7080E312D95DBED16A8FD3ADCFAC9FC0EDA131913647
6EA4C0FA1B6EEAC95FFC35326124EB2DDA055EC0FF6A304EF0CBFB3DEA094810A52D5193F041
D99872CC6A71DFE5B46ED2EFC3F45D6560276FDBA056A78F9D76EDA2467AD4C44930558DB88E
ED42F6C88B0C1E3DD5101A6590ECBF56E32BE0BF76B515235D00121CF0ADC12346997AB62DC2
A1FC37DA89CC3992BC1C6D5380D0D5AB94551833B65A2336EBC9923E58CB1E47444BC6E49BE3
042C94624373B1C34F593E7C8E043A6DE75A27DE4E305272EC9996499517F1577DEE3F9ADC0E
3C21B61F81D165E903E1457BF33830E5369CFED65ABC46089647B5C01CD089DDCC7CB8CBBE01
EDD7BF01C3636CE3D274A7C59B937E4547BE0DDB0FE9616E0EBC5078ADF5D7C8984C5DC85FF5
099A00B84E44178D78B293288F664F19C7FFB7C52C04ADCF8718DBC94021C28290E2E5808687
5C2B23EDF938C52CF0274F8150CB577FA02A7BDDD290839B69F6D5AF1B70896ECBC07CA8F1F8
6EA38CFC5F852A5F5249BCF04A878BB56EAB61A1F53B60697DB77FEE8327166B399D413C62B7
42870C3D77544FBF9B63511669E778C3CB1C009D17EAA536B93EEB5D15DF014673A66B43A102
02C424DB51D501610A59B01D5ADDB4A62B7E86688D86A3786B08F14D5BBB93C63C88D7F70D57
4AD84DE70430799DB3C19FC1EBC35D44C8661ECC763B46445AED62F1BB25A6C7D1A7E8C685DD
1ECC9660FE97CE2CDF6D259CF0869BB93F00D98D4BF87969636FB6DDAA09FD32F6F31DA2F1B2
47ADFE919932298D32C8C96FE9DCE6F4A75F071EEA657935F7F30C32353DC4B25819F7070F6B
518C909BE0CEE0FB262EAC59C893DCA6C2B69CB0147206BDD4ECA2C4C8A232FE1B1DDB9C9B7E
EE10FD8A0259364B697AB94D2481FF1751FA9782EB84DD7B481D0FE16D09AA95C00861F081C4
04B638F1086D8C108953B5828960BE46BAC02B635F7E4290EDECDE73860DDB2E987467C70E20
D93CAD40AE9BE998D64B3BD4D600EA6C8E2F5155A9264F9D090567FB7ABE1B4E2E1EC5D4E298
66D289B5647146B7989DBAFEFB7AC0DBEC9DE8D12749113212DA3C5E9CF4224825F9AAA5ABC1
662AE3B3FABD40D17408BBCB0FFAA37EA2C05569ADAE243114BE87B6421590A440036A071E70
B77968A4A6C6AA4FB68D32417DA597F5396A4ACDB74BDB1FDEA82BAD3B998B8399029F0726C8
F83C65AD45D14A1AEBC019F885BA60B0B6A260899BECA00C0F01E1AC25490DD78CF40924901F
E877E66F23C977B8754623D1D0F7ABD00753C3A0D124FC297D647F78380C139C2F82EFA9C9D6
7600079805EA3BBB31C79716E3A4DACB2BB00A21F34220BE2A202FE29265024AAE48C23B0FCF
6142EC6587DA235577B6E57345FCDF32B83F6532023F8A3DDF97B01FBFC8B853E90536165AC9
29DF10E253D8C4569616F297F7E09C06489E67618FD7148E6A89E249C62898E64A03D958EB88
F6E3361F0EF2148BE4576E4D97D320B4CB7F412FEDBAABBFAE057AC533AF9CF9627BBFAED3A6
C6CA676148B005038149259589FE227CBB4B8576810EFACA8EBFB5B52ACD96B373462336D791
9FE2D926C0B23BAFA3024F15EA433414CEA280F1E20650F1EFDD04959A61A5C362C98B855361
F2971287F63D512AF98695C02A5473AC45088D478509C2BA84967AEC0FC1D538654523791773
D8A5B9D73C2EB52FEE2586333FBF6241A829811E06C2CE93EE1F0FA3CE620AD06984347CB30C
2AEC9CDB0F97CE991ADD184ABA3783B556662C833A874E5C38A64B6438CE5348ED802000631D
B9B3B33F0D90941BA80E92D4F00C64E62A7A0520D94E76F782CC734DE498ECFF23A5F24BCAA9
7150F721064114CCA8CD690993A1274A5BD3F15A6D6EE5C237D7823E18661667B593FEFA30EC
07E974AC8C6629A8DCC41F3F02D14F620BD415841709E7296D2E606D040D29D501927F9CEE38
A4FEEC83A2FF45814700D41437C65AE671A5A6E83964EE131D909E56926D3BE03871341FF7FB
BD19437C7A0C3FFE3D6B50479B56D774F8D2EFB59006AF71B47C7BED0DBFA8E8D95CEB3E5B1C
65111377CB66E0817B2AF45607708868976661C469D4C1A3719B90B43FAC9BD8F0FA5558DA8A
158B31D4866017BD8E144C630CB3FB547A0C6035D3D4565536D88D219D98FE96580B651FE0B6
4FF75E13BFB841137459E93A0779616B9F67865F5F72503E60EA30AC387ECB6BBB2039582DBD
891BB344D685BD7B4A44C73B3ACAF4BFD4170B2A529E8181763CF0990EEC3310B321F4D6D5F8
84824ACD20B409B7DAA1186B998DE184C41A1C815F09C5902EFA03BCD1AC9DB7B844353B399C
184088DA2DE7A98D789F1F7B56FD8375ECF32AC7AE6B9645C3EBD42D333061835230C4068720
4AB8AF146DB9E945A631AFA80CD3237A27C6ADA5DF3F1E65DD74289E58048A40AB6374A4F479
13A872042CCA0CF0BC34A30ABB0AB215BB09AA2FEF09CD664AC1F76736CB236AACB271B9783E
1A94EF666A52B5A56A0BC90DB43762B33CECA87E1C8BC43B6B1FC6F0D8D8829A1DDC6A87A8EC
8287A7D9FA52C848A76BF04EB015DC3C79DE6AACDF7316415280AFF2DFD989F8C7887253E6AD
B49D6C78C8350F6764BA14AD14ADE05C76D9BC480B394753468AE029865248C2C760E3BBF647
178F10A294506950073262EAFF3E956E7484636D18F2F4B4AC01F7F3DBA5C647209C29CC0ECB
195764FE2AF2DB0C9086B587EC51A76AF1590D67102AD6BCEBF7B6D845FAE94D6BDF6BD0E910
14DD679F56DA651F747FD08494A136E401A8E23772D3EC931A7524673346AC575756E278AB36
4A1055CC920294D276373C881D8AB49CEC190A4DC921BBEB75A413CBCC503F96B862F1F446F2
CE232E45652292A02349D7856904B46F9606D6AC8446F91B03118E28ECB7DB4BFAA9D79A12ED
57B1F9086541F1D2AD9C55834A5061B1434BDA4F001BB74A3EBC61CE7D8353B6C57A7DAD0FD2
403CB55B1111DB56CA38D2F5BDF3FCB687B08BA9CA70380EF03E837B95CA0C7812EB9D7D0B51
00E052493BCFCC91B26D64B3B95BEA68F7AB187F5BC4B15CD5B2182103FF8C21D7B23FE7E302
69E19619103362EF40128B0E1A0285299853239D28EA3EAE1F32ADCC813FA4C2D2FE80D3124F
4BB2BC57F386DE387454AADAFF1CE4FE5769DB0B7A53B49DAF9E6B501834A117988081D2AF14
56160BDF52CE6E1EEB12FD7B4C8B4C8C71D766C71A99F768B16EF1574583006FBA51963655ED
C565B7306093E356B223DBE43B25162600F4E0254F9D8BF36306ABAE55C77640A63F4F7EB19F
091F533DAEF035E5F7BFEEB59AF6A3DC336D953CDC9B527B1E6CB4E75BC0D6704AB8AFF7C511
35EE9EC739B4DB64B145E42D7CE5C33FA78310654E0E02359BD52B49074CDE8768741ACB2922
4EB52BABE235547A693E94D591673F5070045973D20AA8B76A525F6F3BC6E456A1BB17DB2556
04A60A8344A7CF57411CB1626CEB4E02375AD6F549E6B21AF25C18418908ED928057525C9C84
71F15F7EB1A471F57C314ED9EC16CA55B2D2492EF44BD9104AF9C7283FD1B192457AC32F8760
32F204BA71A9010FF71FA0A74E6649BC382F883FA09EC0C46410E3AA49A39CD0A56F30A74233
844F786EB37AE9E0FF1891EA5A7BA07A826D3A543462B30F5DDB9398B3618D06AEFC7221C8C5
D1313BDD8179E2C38571CE735ED88592E1464E0A27876F40C2AC6CDC00D6B6BB2093AB39C825
57D0DF90654D57EB09E4978BD9F5AEF16B76F80154EDC4CB61A17E2DEA5EAB9032101B259058
4600FE5F74E288B16B41B18D42410D91E391F31FBD5B9DBC1A42BBF529F33EDA35757560AC9A
13336809D78CA855015D9B3254F54FA9047CCAC1A1DECD2359FD6C5388A54F21C009402E5E6C
5B2E4A504FCFD286EB6448E94012BF6AEA62AB724D774589B1818D2372E76200C1E13194A2B3
4C2445AF8E6A63E7E270F54694CD71967FECB36CB10F9B7C7EB9C53B98128FA6A2D8171FB911
20FA46D522C6682030000BB239F8BF8D1D9A923AF7104DE7DE2125425951040FB14466EC2B77
E04DADC9CFA4E13C52CF0E75237E3CA0500857930D1B5BFF827AAAB103F5E220D1FA7FC206F3
6967E00346C436BF3D15B0DDED15E17A33EF57991C0727C12863177BE68654EB63B242CE4D8A
B2992DDB37130156C9D380F721C6B954ED6062033A11291332F32763B7DE9A35CFD34DFE9D76
8C5187FAB040057769D2E52AFB30F7D5372165827680E85C3BC7645AF4441B11712C9DD1935D
32C58B92709B7ECAFB1F9008582C8E0FD93FDF6BA3F93E38666F37C79DA45E8A7F0017F3A887
A4F54923C9C107801AC9736E344693D57BA6648B44B9F6ACF6A9D940CA7960F35E0734213EBC
6745E5AB6424B0F1FADAEB69C35319266314003C80EF00DD1C373DB42EBCF5ABE5D16142B44D
BAD5C8E9E291C912F828D2BAF4965CBE826AC4D2081C8C382752C3EE0BCFD391A46B2A304187
3BD2B28D7038EADFC4B031D06E4150801DDAC8B18264BE969DFA3C80C4FF17D29BAF3AF53F93
6DD506C33704055B0AC76E436F2D54F4AA3CBD545FF1B67CD57325D48F28F3F7FC171548C106
8AF2AF4414B92A014FAC72BB51A0279CB33B881DD767DFEAB867D0069273EE9DE19FF1D63A59
AE534DA02495E0E4E5AA0B52F923228AC819E084F4E94CA631BD44B01B3025D8CAAB06F57D23
1652FEFE73803221E39F284150DC944B0D2CD9A1F208AB552CA3C6A23D5ED3E0A350FBC963A3
16B37D2CDB610A9FCC069B7669E2CB7505DE6D003D7F4F695DB88BC696AB9F87CCCB1EB635BB
CB1978F46F4D1EE5A5ACB380BB435E424A7FE8A20F6F3F1E8745781601D76567AD9C1076FA1A
1EFBDFF6F9969DF3C0F337B805B1AE318124274C0D7E0EC6F43299EE7DC48AFE50D428430524
73CCA6ECA462CE40CBD2ADDCE28D3676DD125D404EB2C2706170EB35DA0FF60C1A8A9E36A659
00C02D19219C6AF5BC3DBE759153B27658663F7C6ABA6327031A37F58F948FA4F636FA989C95
3FA91EE86B93617C3369C51841B3FC5A533FB1754ACFB5BC80E97B002B34388D365CE95067B7
F31DF8D6BB61DB83C0FC5C3FB54350C9B3A2F69153620AA7D2639116DB4A06166BB58FA0B9EC
87726935BC6324D503017B679F52840957DE5C018C4F02F86D2F555CBE67568AC075877B1B96
A759556EF292881CC358114E60A1B72F589F749E64BE973B6BF41692AA93F7604AD7D8376A94
37A13EBE498DEE73F6E22BACC58108C83791C496773240B7BCFE6702FEDB9C4A3BEC1CE45396
C5E88A770A61BCFE8755519D7E4007CFEE9919D528C651E40E05D7D03B28839255B7182CFAAF
FEEAB7B7BD2DF6C56F52F7201351BA2B7705054B418E691276A78984A2EA2E7D991721C368BA
22A7C8B738F1A9266064FF5DC036A20C8570A2CC0BBF74B25D7A691A20A1C1A5FB1400C66AEB
CD3013C43D1328F5F5D0635631A3A21AC4884F0306623EE1C2EAE491DCB845E34D749A6CE4CC
80B2E2049C0907249284BBBDBDE08588D5D1FE1031B2A2FF3756E7E2F670FF768F638D83216A
2270902867F072D9E4E6735CEDE427730B942FA67D89494D959D0FCCB923A85C07EA3272FE4D
018F1EB2A34FA95FDB6D31650AC2D6355EC338D36DE42547A6432CB847D27C74834036DB59A9
344F59C9F610091E2D5FA6157C8BA4232937DB379D43F922E2A7581819A4598B436C60510B95
6450A6DD2AC04FEC337B443463B4336008DB2289A8F9B126F0A998431D8E503B1781F42443E4
0BE700D6C47D1D65EDC74E665C0EA196767E46BB11BC0ED69199F32DA3F4398342DD22EFC529
6CB169043C3C902DF485A8B50A94C307FC14A6274570F878C6CBF18AF910EC20B0726684ED02
1F862FD1F9273F32826D6D9569BFCD3DAC8B6D9BEC14562E22031BD61B4CFDA7B2C95F25E78F
045E616A6090417F1DFC14A7A168B1B121C229598FDB040B336E1959BE810C03401D601A63E2
7F8D501F830A591884EDCFED1C2A44409DAB3CFCEF74FA27D44734D071E33EC9C23A525E4612
32135D02388D032BB8B9B8C1C8F46EDB55C98EAE149619244642D2926D3180BB66CB7D0C0146
561E452B59FC7437D42B5F3424D5F30509EF1914E75D4B73E483701026F269169934EA1AD0EE
3D1DBD25DE247F866E6FF52999DEFE6F5D5DDE98E974FF9DB4D9B99688652D209EC49AA0E0EC
F73574CCC419039056CDD2D2EB3290D0784E295400ABE8331D978DE83A2B4001D35F51E39034
E0BF49945B9B7C4EA6CA382684B996F12EC9438567A20C6C7713D4A6CCB3389B2934E45A1796
42CC9E65199AD61C07769C3030D87E9F23E85469C583DB065691EE228FC2AF56632E9EF15646
67ABFDD20776425AE23D22C16C3C005518590DED8A5DB841CE25BFB4C1BEDA4FA6575726517A
269274B1517662BDFEEC6018FF525B4604446520067198FFE83C950F3D2880B5C9FB91DAA169
91BFE63CFB48A3EBF24B7A33F43E1C7827D81CA611DF3476CACCE15A7978271C3DE2B48E1929
B4233CE6A62F54BAC964C9ACBD1DC4B64C5CFAD4682FFC880B8B6E14DBA2234D6CE8F0494E02
9A2123FE0D63B39DF8DC30F65969B8A659C0C40DF04B603EDAE85E81E634E58D053FB8826603
96B30790E8D2613B273B238365F35F21631335882693410ECFA8749E23D34371FD28F3CE9AE7
192389D7162E3F180D161B3A46B371F27E4596209057C4EF994E2D63791F32B77F9ACCE54577
A56B50B4FA026D6C1573F45542D9B9338BBD2D4695F124C83D489606103807B66385C5E70078
5418C29853BEC2D18985AE0640DC7F2FEE566599EC473AB3E04052BCA6F6BB26C27D6CE87187
A3D4C69845A242FCAD1B66F5CD67D7F70422577DF10B05CC54D9F7FB036C289948F0387CBCEA
D3A91CDEB9C2D1547BC6CB7B4A2581F39DBB75EA08A22542A723CDFFE7CFDE9D9FD926D1003B
A3137A003FEFBB9FC84B0665D5B2DA9B37A3951A3E6EE16CE6F2216575C7C53061E5D64250C0
9E8EEA685306DD9F693CBBAFDEE2A6A188B21EC458230E078BF9C7CAFC1FD601449F647C4B59
B37CF7DB2B3070356900B3056B9272B476277AA35B97486585983EB96361D26F6714B49E000D
16007B397175B0AC21D7064AF77144D1C0800689468351A1605E21FE5175320701DFEFBAF066
2B93D79B0E5E7CCCCF8CEA636AB27E0A852F67B2C5F201081335D3C2B4EE9BC5D7F342B49848
E6DBC3D2BC0F4274C2C6F54DF2EB4A23D2D736BF0823581C1EB35C8C0471AD17FD0E177F4C85
A33522F002954E8BFB33C0ACE5DCF7B8310D71678C0EEB45A6F0014F0080B4DAF40BE2D890BD
3FD44E14F04AFF9FBA9D98466BDED50680BDFA0C95011E2026053FCF08E0C67AF107D50CE001
C7AAAE3FE75F5C3505BE54CC683FC9660425C17C9740D27C0634F04B784F758A6947A4F69010
8FACB2D6B08C7FAE8D40A4183CC6329F8B921660E54420E2FBC44E43724E8F30196888AECD45
5CFF68E47E28F68A8D82E0E7FDA8CCCE35EBDE0D146D120B1044A6E0BBD91B29A38FCF4DC8BE
9158C1C698DDEE07E0BB6D0AF5DFF5C1020E8406CD1449E012EEC3A82D6CDB42F8318BDFF262
54F3B528F01E8D09C147934DF965ECE201038EE90F5982CDA85381C2431A2BBC8DD5BA1FDB8D
9236B699215626F78172D3B4135716D592EC1DA0F30B6EFA498CC3192847C45F2019DC74F618
A7414DE75988D8AB737EE75A0CC778B00D6A84A647105664A6D147715C2CD14B78F261C05464
490115BEF6A00282BF422807BA6E62E5D6FDD7D838E8C39EC86970CC7D86BB6EF72E885987EC
8D919C37112C63FBE1993071D9B5B467E0917B35BBACB4ED99D4DD7E037B9AF008A5F7EB8308
037E0E5C6862864C9F77CE7054ECED04E93A1FE549E1200368F3702A95B519D50AC654CDE6ED
297A3C6A60EF1BB36A036900D4BE955EB4D72CB719B08694DCFB3125386C7CDA2DADD0AFE974
C974E18501F4A21AEFD4E0B4A9D2124EAD0F97C5F20F67C7100921B151E8D492B0D607D0A208
ADD6F315FAF3F054CDBB8EB9C5D39B56752B0AF1187F076A7CB7FC79DD1D01394FA6529C309A
77F74E0614E79A84FE47A6518F74376B4E4E76A6E0BBA7043066C177BC8B979A6F5EE3EB5BC3
16FF17BA8C4026F9BC861D524B223208CF94D89633DEDC9D80E79C0B8A620A5AF902879CEBDF
1E0EDE231BDBEF0BAB71952B8D04A1D572EC97FCA725883FB2D4CAB5572261FAC4BDF70615D1
5A1B79B856F0B393F2A065555FD2522EA74FED08700EFA68270627E09B91ED5D02299E75B066
C5908A5790E45376C149AD782BBC1DD01D49B555B7F3B4BE829E3D28878F575C778D26FA2CC1
74683854E0FA65D3969A3F9200F91258F274CF60978E45534514703BD6F1B7D69B41526CB310
2FC836D074C3FAD523CFE04EF705552C365A82E2376D208AC859E308CB61603C59C80FDBEE2D
15E1950EC314F2039B03B0FC16F45B2579CE2D45AEB8B978872E19E55CB9841859BC72AEFE96
BC6CD048DD1F2FDAF87E31AD8292B7BFB9623B1D1DF85325B5F757206F8228A5F81BB4D93A77
550632DDD41E61DECC1441152D3743A5074B6381F5842D8C9B5B468AF871978DA6B8A7301640
323C65FDDB483A6F7CC512D523AC9A2F47616BB4847A61D187408664C758A79904D81DD29127
9E8134FE1EE90AC55B2DA653FFD91E2D9D0B3594D19FF546DB593C8A699046C0F841B5F19758
749A14CFB0AB686D7E17C58468E950255FD299DC7E6435A303B5100FF844DCDF52E3FCDA4A20
8F42CC3BB0960E28B8ED5906AEE9C176BA5FDD3EF8BEF2A6C00E01D44AF23ED706E740ABA3D6
FE39A0E806A2FAC4E5D7BDF53322682A8D0DC5FE490815F388223B0316592FB2DA05434BF842
29DFB33DB898A5CC233102E29AB9C0DDEC5163E8D8E5FECF77C3D829FC98099C1F43A56161BD
DE9373A14F69D5C35FB258CB96508DDB7B35A191C49ECD2A14C1907107BFB583E7B9BFCA5C7E
E6D72F573E067990572BBC240D4C828E61F6394B4A071608637338987115F7437A65DF30ABBF
5DED1A9DD5059610EB306071E42F46A55EB396EA11832FEFD4BE1E6F8704E5124A162CF209D9
27F725D8D528408E8CDDA8BB494EB5EF2EF90DADEAF45E8624E89FE5080A04D2625DE67AD601
DFB2131AF164F8169239A4478434FC2C2D882FF899721938BD643A41298DF0BFE1EE3F3698C5
128028FF6BE57E6700B20649CEB0FB3C78B2BEF03BA238615FB8AE5201B111607CBE45241AF2
AD6473AA54E9739E20F3F84DDDE871F1C881705E2C75FD0143398D968F49BE08899FF79A6076
B4F283588F2DB488B2B58275E6E28739D80D0B4D18EE94EA308C01EA16F856C94C95DAAAA0AC
A857F66E40498FD7CC3A8A98DB095BF04C6411A90A534E5FCFAFB3A2EAF29D2C9B24863F1D9E
12A63FEF41A06F1BA5D26962C6A12D1A73DA880AD379F14BF568C90F206CFB6D5D53FF552D15
C261F08B12965ACC6D86C25C0D1278A0F929EB931436A24875A01CC6E793EBBE243D880F9D38
9C96E63793DD75CECD3D86895117F3AE55D9921A1968AAC765AA2B99AA4B21B203EE68F644EC
5C1E965BE0885CEFD3FD0A2E0537BD02EB24102C8F3B365E255AEEBBC1CEDC7BC2A8DD1EAEC5
7EC0E642A22805F2BC745A778E25A9723B420C1FFCDD3E641445E18AE18097A7A8E54E1C9DDA
53E7EBD84CE3C18D56BBDC54C180E899D4BCF87C1CED04E10C401FDB83C6F353A28688BA6317
D51A09250E1C2C63A6F9E8707D4B578CC61CC39E60B29EC86FE27FE12CD893C0C4CE3EC5F88E
837623E202D5CF939AD560888684DF0A6C0BEBC5478F588F5234EDC52384895A564AF2145FE1
E11228F9BF5106D900011F9A9A953B768B5CFDD595987C6F5A1F2031261C2AAB5B5CEDB11F76
BED3147F301F821662B24D3FEED7A7A2D08F1009BD80593A7B885A4998E59683EC88DEC130BF
CA01BD0A9265D74CC75A2560280FEF13012351B99176CE25E7BBB0E3CFB46BD5D7C64494478C
87E7060C80CA5D5AC356CFE128783D6513670E1574FB06F009BB2671F0201B847460A54C669D
8059A0056B75EAA5236216911B9FF62DB67979DE3DF71977EA93B3626961CE1D174A10B675A5
763B8126E0E7E9D862ED49D82F1CFAB85CE6C94AED40A3E28EC2C7130C1BB420AB7DB578EAF4
D81E4FADECC7E639F154D90E1194E1FBA01F611AAF2D634CAC03A34E9E25CD247DA54A1FB27B
2888342850824E004B167D9EE44BCFB4541344E4F7884591622DB99132B1AF86A261CA17DA15
FD4A2584681C7189FE4CE25B2986CDDED549BB0DA8C06FDEBF64C80B0B1A89D2585B9190EF58
847BA4559EFB7C7BAAE64D37D95549061A8064637238FE3DE8AE31F06AE4E7FA588F85C45766
EED78D8E2D9E8D96E40CD161D820C00CB0312463FEDE8441E6CD3AA8777F8D4FA553FE9A747B
416A83FA728A52AC033A2DC128EFAE88808CCC435F1FD45CBCF963B263E714CD8C11715B4BFD
8E0F5613101E11720C2EBEED9879894FC85927DD8303B990A2062198CE7F3A0A48528FE25497
0DDBEBCA2C1A2160548C1E97EF58769EB684598ABA001EC66A278D4E353CDCFFF720AFDE2481
B9DBCAC57EE38D9C464FC1F331A45D1CEEB585388E00B139F638BAED8F6ADF8D11FBD0677716
AB72017C1349B72739749FFD24D00D8435AFE78805E455DAD15F6F4500A041E25E4E890DC0FB
A5E88B7354302F59D03203997948AEF1FD05116A2856CC2A44BD0C2147C7CFE5AE9A9575A49E
1EDAFB0FE0C7F18D1466946398B8099D3CD61F38950BADDAB531B2757395B3718FD42651344F
CBB9AE1783CEEBD9F1AE5260AFEE7A037D195E25C673BE0389CA160BBF2D117DDFCC409DDB63
DCD48185ADF29955FDB42537EC1C19A0B5E51D8785F06769C0ADCC90F5632A9F58F89D333F04
623ADC50F2C78661B84FADFC524445374F394EF24EBB0FCF338FE9F86B654F112E8C987BE7A9
A23C0AE29841F69B6F936E22507882D1A557E36B4F9F2C3D5D054A0167CF2890EDC16E5D260F
3D48E5117E6B8758DA5CB55694862564D0060AFB15641040F1BFC982926BDD21FAEA2264C8BC
94F5E4F882DC8772C4A0E049AD5561F0F240C28F7F863AA572E1743E27C1E9C1FD00D0C501E3
A90E9F86536B2695B38955C97095E1892ADFC6A6BE12A986F2C79F218B1F0BE6BF3364A29B20
3FDDE896664EACA5D770C769A36BCB8AA57083B55E9A31457EA37E4B83EA4C28EAADF56256CC
630EC37F5CA96952F816EC04A3797A8DD0A33CFF1C4171AE5163D786105B0AFC689BC96336B5
B28396E0F56193E684163234A361A57C826E805477BFA84F78BED285E64C5C0B0173A82EEC75
A897AA2739DB136529C9CA30E67832981685D75F7B51360A97256CF5CF87E2A0CD4FCB59E64B
3B506871549892DE880F4C39D40865E1A643D72B5CF0AD4A56FF0A6E68B356E2FF10265B069E
954D2E1C5F6D0BF4633F5CA75617C42D53A35AF4EA98654303B54BF58EA419F054E4786704AB
99B67A3F293A027B6F3D6EC6ED3AAF74B7CFE18ACEFE143F65CD7774191CBB8F00B3027BA684
194B6CBE20796A9A85E205D774C47EDD8D68D754C8EED1211044BB4DCC0E7E14A1F1EB857BB2
5D4191E0984EEFDBB7CD70958673AD34A0D182687DADC837139F087F94F526B93189C2AD5495
56621F38A8D492B144881C69C76E611DEEE5606E8D9A3620B946571711ABC30BD4C2BD2153D5
E557F53B667F996199989CB477381AAF8B554E4B0D0B3B41CD2DA66E120856DDFBE6894484C8
8EC36E804C598C9DE38490313ABFC3B2E9E67F6E304B347F537995416CF9B00CD0DA9045003D
7D3F6C7F358C00BCF66C9924D4D0ABF8BA9EAB1F37ABC4FC276D18ABCD2CF5E583004A4787A1
0DD260923D86CD83BCB52B8E1A7643EC39F4EAAE5F4C7FA0B93177D273492F0EE0688F63A0C7
765168619C5793BFF01FB5E65557D3452BDB63377DEA0462A0294114C125D79A59BAA2DB0B61
0E9A5DDBA3A298AB82E721674656EBADAF525861D924DD0BE6182B74B548ED0912E6D0216F94
D2DE6103F81C8DFEE4E771DA478E303D5A19170CC4CCE2DECDFCE2260A491DC221A04CE42EA8
2AC34011E8DF80DDDBB11D5CD87C77EFEB80179BB5834D4D4F84CD7ED478DC2D5D6C20E9F666
B5345B4C34DA11391C607CB413BC8C7169ACB9C2BA5CD27436B274C5342B2AF7AF334A2D6307
6DA21B66E87F86F916C03AE2D514931A8251DF60C4E50780F4622279B8A8612377401411A808
2EE7A7363381C053BB136FBEF76B96B3AD7D1018C9991A4D17CE2F3B626169F606787B2A54EE
FA97EDA191919F4C9511ADA863E93135BE665ADBE9C523813004175CDA72A880C72FE711ABC6
7446CBD6DB20D7EE6C0EC8CE999A4E28B7125086B0600AB0F34C5AF47892FE3FB9403AF0EB4C
7C8E39E2229A2512A6944119F10C7136F81385372B28D39F1850E77DDF02E7A0FE4063915E12
BCCEFA52086840D7E26B6FB8BCE852311CAD8B0FECA03DC393B896B0EF334BD4A25D80EFCFAE
9398CE495A8176810DF51AC2C7D6145DFCE312860248C802EA7373D7B1F59BAE9A8EBC594E2B
11C184AD793E8F9F0C03F2BD30EB454101EE8ED0FB66B9AE0594897F908273E591849F822285
35D122BEAED330283C76080394C89B534029B637E895A8F1A36B01CCDA7924FE2AC9F0442520
47D9979C77F4F52442A806A9CC723EDAFC8B9AE8AB884E9AC1309C9E55AE8B5935AB1F70F413
41E718E995262DAA8716A2BE97F1506441317E556690684E040D23A1B83A32B747E7C44F3046
58E9B8A364028086EA8BB8E654B4612BA44D8E39A1163E7103912B98894A79BD5EAE70815A16
8229B8965DF0D76B20B081B527F16039AD39FE609510F68BD48D8B6CFE02A9784E282FE64DC3
061AC3094BF3BE7E9E7F7EC1807F0EEBB0225CB37A4443CD9E4B2F25DAC8196ADA984DC31CD3
52424CAB7FD0497A3FBF2F02435B8E661F0F73D21DA704FA37C69407AE9DF10DB5723CF9AEF4
0D3A860F9027D0B1431CD2A92409E1E4D986D34B64DE243CA561293D0569648D5BC9CAD90581
C666709DED4565C386907F9397C442A2C0D358701AC2AF50D5F376B384D52E395D52BF6A741D
18E6AD76914D68C7E3FE1246CEAE4BFFFFEFBD7178BD8EBD239EF6D5D59F2BD71E899E763A3B
EE734080790DE33CD9D0FE3D1289E80C3EB0C8ACAFD4F3BD4DF6537B1ACD2BBCA186CE615A9D
0F0735048268D370AE929E84D2953882F8762D3819F61C0ED85A115C6037BCB108B66C7CD1C8
3673914FE883AE6331BF32C3E199F7235FEFF1895577D216C8ED6E77DC5708F4CBA32CF1EEB1
3D9C0145713A954072637DB4FCC1C1FDF0B5FE965DB518500063090DA4BEB238EF9F67F92B1B
ABD56D2D82975D246E6AFA021E0C23E88A70554C2B5F0A328BE693E22400BA163AEA84453BFB
05396E1C1A90AE9EE51F5C8A98EACE0A0CCDFE699B5DD368CBC7F6FB25A237FF848C01414DE5
63BC991CC1A0A5AE840E8EC328303206D4FDC06BC7D89EB8498B611A91DC1037378AFFBF21EE
248D15C95BC9F07A856771546E28EF1954445155DF4689527EE4B72A3F54D2F66696371B6AB5
848A50D4A3F5534BE82FF257BF014769B253DEE02AC57A1CC3325B5DC44895D210671E7C77B3
0C8266A1C9D9552DBEB49177A44A6F5F018C1D6DAD19F65C5ABA1F7FE55D80E93507338B0F0B
3FEFA0565E6BF4334D98AE53911433146731E6399A8E5783BDBEFA8EF739FEC5353E07E423DF
FE5CAA3DA0A486E4DA42E84618ED89E60ECC6E103BE8E61ED5C396EE9D800CC83AFB6E532BFD
DD96ADDAD7DD85146F410B40C43BF1F12BC27E07982099BC4718170D8043297DB95A571E1268
638621D6E295CAA2739F9251E7644EEA31715A42FC9A56EC891B5366F3C4F26C77AAEBDC1BC1
FDD5E1AF4A140D6AE1EAAF67C0C28B2B4F886F0D8674B7C0FA6E7AE7F05D56457D1A9E055C2B
30B809E3A84E706CE981107FC33D61FB6B6BBC9FE5952EFAAB183C994A2C606AEDA95E949231
926FA1CFEFF17B86469CB504ACAB435E8CDC732380E4B887DD9E08618BB8134F4E75417EE647
8B9BFB11DA7595E042B8D1BA639A1606441872AC2BBF7065341604565B8D266D64340B9B1810
8B9A065E9614107C3B2A6E1E7FC4C65331D63278F113D9724A92C0AE7A1F98D5C07DD09A7802
A77F14A551508B77316E4DF79497DA97823812A6153D81DF7F172C96E5827A5BEC3BF2401009
E212C8AD794D49548485B72C67DB2815DDDC3055ADB819C1461DBCF71FE60F7E0D5BBFD010ED
BDB843603BF2DBF73B69A9685CB4D282B4B5CFBD47D805B9E9BF38949A59B4DBEE9FFFD200E1
8E163866CFB2300DC446A7F7BFD22AA5474B706573FB73336840A60CD62906CACA961B801AF7
8DE0CEF472C0B96413847AE7A911CD28638F44BD04E6D1A1F6847A50407CA9A351B914EC5906
540B097448B4473F56E77E568DC0822CB54B312E4F9AE5742F6E61C1A5557BC04BC08F39AAA4
2AB36A10996E1412D7B046EBE11C4131F1859178DFE84AC8CFBE05CC3B919D5BC91DF294640D
4FD5835CC5CDA37E9062634745E5F3D3C310CF73F810100EF5945725FBF38496AC8763E28B9E
69566C0F8032129D569ED8B93FB794473094700911A2090A9F6D8FC5186ED4DB8648C32BA583
65D1DC247BA2FE69FE4A42F5423EC4A8D1B9B07A836B83201EC205D158A80A8918143CAED74A
60A4D022EFEE3C44FA24FAAFD7E0B08106AC9B851DF68C1643D9BCDDC72905440C980113BD78
91394313840F7B4ACFD26CA6C1FC757436AE7D499801FE39594393E0FB3699AE6A7F387AAA2A
6D955739B2729CBD00BEFFE282E12D0E938D512C451E186E82703BFAC1FC85C57957B482CABD
8D3032CEC83C3F75D981129A6B5736577CF55C417D11F26BA143D197B53FD97B7766971DBDC2
BE12F9EFA47A0DAF683F504EF5726AAFDF01FF5B5D941722C6D1973FF92DEFA5DAAE8554DD48
B01FF2660B6A31A210F504BEF75C1E8EA6E243972114DB296D19C790F1806E58CEF7F17673EE
6254A4D8D14C3ECF591AEBBC869861604E181BC8E70E19A178F0118FA307C16778810FDBDA4B
148BA33FF3A4B38F3175267E7924E7912C52CD78352688C45644794CBB843A501F6DCB88BAB4
6CBBD6F36E31DD0FDFE755081BF4F0168AC57D32E63BCD9E95C6C55D9E56690B7ABCBFB535C8
0AF3825F921CF6C3953E40BAEC3795A32B04328750932DDA02B0408EB74210EAA082D7E81C04
DEFE9E7923DBC0A175EE616161F96FEA8BC29953EC47B82951DDFD4996A6573C40220A36355A
C3E696C07F61D6C0B16D2124F2CAC8766C65BBC7B8BC8B8B0D5D766533868A1664E319719863
F29BB802EEAEB5D384E95FB9A784F894CE477D8A41DF73E6B560447644F54EE71741AA8C3CFC
F40547426B5D397F873D38051A1C37C05DC2BF7C77F4068D01DBB0E5FC2E3CF2524774C37525
8AB840929F058BB06B958E6C9157425C3D7A2C047272C387E92ED820C92583E3624E6E498A5C
23264DE1CD9000C7B97081E40023C071EC3968D22331DA058AB5DC1A4039B0A313D70255281A
B7CDF91FCB32A991EEB82E6AFB4313D4E236E57819ED4739863997EFBF139624F650842DCF91
A3782B41851EDA4B45FD9E46BD4002379C66F700AFCF7B04328948841749EDC07B03277B01DC
DF1527F14E261788FBD4D326177246589B5D6003653154D8CF5B262FFEF2BC3C5A4F2C1000CF
1E22408F1C4C972969EA4156B3B0DE2905EDCC99326C3F72438C659BCFE4E420C643BF6FE226
5CE6EC9092859A20C8A8D0BBEE2FC3FB0D14217E973E4C7B318CB7A8F6ECE8021EFBA044B1FD
CA1BB763C1E37D622F833FAC366C66CCB1C44D8EDD405087D720BAB0EC695D22D86272BFD95F
35FEBDE770C397DA6D5B212AF2DBF1A16FF5F125F3F524F53B98BA064535346D0DCDD2CC02E1
C55EA0E0F847F766720D6A9D45B9D9776F35B65DA3D8A3C78BB235B0E5FF8819217B77B86A46
FA0ECC6ACA8C6A053562FAFFD3350F2A056D2622A3A4D673A6A586A03042815ABA31AEAA78F1
09410D270DDE0CC99110A420B54AD9CE4B54D4687B07EB3AF950C1D4B88B0AFC37D792407D94
50EC4D77EE6DDFF803CFD0F67354DE749FCCBFE296924AEC3A305857E94B65E91FDD9F11B289
CA47B191C7613DF209896366E9D07431BEA6A229652AB7FE6A210277334784C8D6627D7D8ECA
43D4B8E75E1E6AE21651E7B9942FC0E781D502D8D51D7ED6F9576A12A2CDC40F3781AB70437F
9D958EB6477833B9B85F391AA10201E89C70C0A6B053E5D95A550BD380809C3D9249602F7EFD
81EF86F7BEA0CEBEE78FF7E51FFDC2CAC7BC2692E3096A1642F40687ADC3CAB1626F7311CDC3
B1EDBCF3BC8A56153580484B30875BD19B65F77320A26A4540C1079D23B07C48FE5D69EBD7E8
AC5C11333D9837FD706D1C52FDCC2AE9D13B3CEAD494B7D0AF602A57E5032F872EF41C71BD1C
53896529E6050BFB85998F489CDCEFFCF9B70E5D7371422F031AC9C00D00E8C436B6EC76C9A1
1B9F92AEF7246D46EA779C051C539A5D0B537F05ACAB9C2C22BE43EEA3D56F52CC7087EBA41A
894CF633481422F5E6270A4E6445496DD020BD3CD846F98CB64061BC16E6C7E5430EC1BBE8CA
2A9390EC2B3EBF282226EB70D5AAB4B911EF1347299FDE67868D6C1ECD96B2A8377068808629
E2BEF81138EE0966A059BB6058CDB7D418CD5F217DE21C03C596471AD4125FF448B5DE9D50EF
DA9CCF04B3D4D74B452BD00C7AE549FD0F2F1E7919DEC06ACB53D39A38E75397296A32E61A43
5D4554A1DB7757288ED367DC6989FAE7F428A8E28E806EF90C4CE040D1478FBE47E2CED9C3C2
4716AB2E4A138046BF7F7C5C6ADBC75A3283CCB5F9F53E1FF05D09186C8EAD24CE641DF1844B
A76AA15586A93049EA5C279CD92F070B162F59A7023B716D9901F332C7C05DF88C27BEB76A50
4BFB2F9DD053627942AD6F04315B51140A6DD16A9CE1A4AF46AF3EEDEB07EFF17F6BCC85BD86
6E763C64CE25F9F9D278F04AC4B12A03EA26BE39FEC35434A1A105DD410FFFE7B99C0AADA93C
6A834BA7774BAA5C01D2A8D89812433D5AFA22507ECE5014737136641953F6B053E93500B069
34C25D5F2E7F45B00D78A4702A086AD89A965EBFAEDE1CCB95DCB9B8F0BC376CF29EAB1288CE
A94F572383D358AA48EE8DFF88B20A78262813BC1A2849716F6FE7295CC153069E511281DE2E
1135B90F14A9AF09AB377E76A38D0A8C87AA352130228BE170E0845B1FD3C115E7BCD94A807D
0B079CF9D0A4FBA455CA2CE547F24A5AF1A58EE39CA617E2C15ADFD2AF1B6625EB8310CF7831
EA2744FB523816373E69139B2014771C6D7C9DE12CDC486943D716B9ED76F5500455641DBC52
D5D20D43A41D28FBD23D557AFE215ED0E7B9ABED8A5F908CC8331E3FB61C9A9E73546AF3ED88
A024607B738849BCF80112E995BEB93433174D2FA06F12B159979743EA404625BA7448F54DE4
46C9252A6A2769506905F8448A938EC2BF8EEF3F73BD5C7B5B5DD81416DCE2EC74AA7ED2D510
CC6F591D0C51F2DC4B8379D06775F0C2BEF70343097C44EC7FA8F711A745F3330DF7B8BB7742
EDE598BED07CC879A10B0B34B20335A36383A01057A53A5243363855C70AFF48F259A5B2882B
B302D320E533225326249E426BA07FBE02C76D5193DBDAA10FB23DFFEAC7E2AD096F324E86E5
A6B76FCD07D6129338D14A893EE8D92F71A9DE75D6195F71DBB650F0AF3989A02002DC32D1EA
DCDB40CA3ADB7B50286F2618EC285B822EBE484E9AD72591F5DDB07F3A31EA9FFC3B26039676
D1BB14983439F0E7517674C9E36D1F86FF8032E6BF2801ADA6BD004454BC61FBDF33A2788CEA
419B4BA1A0AC2E19660D6173F539E7EFE000AB18CE9F724E5CC641D6052A70F994A38E050030
ED2CF32A037B56E9CB96C149A10F34932FEB06AAF48C2BD54D25B58412CA1FEC65891DB9064F
3CAF93D6FCC90EDCB298BCD09ED00AB7B46F5E776DB5AE0E397F8E780C4F9F19A339CFF8C9D6
6920AC9E95B3D90F335B7B5BBEA40082EE405AFEB3397A4090BF854F0A34DDBB7D80FC30BDF6
DA9032106C0A090004D0DAD25B27B99470796E5C4402D05D82FE0533A2FC0641E06086D5A63D
FB4C9E35A8A6ECAA9259F93B812796C4A331895EA2547ECEA1EB254B1AB777FD3EF87E583817
4BD6919E04FA04FF349906D4AA7AD2CE33BA754276E5712F3EF752065019563446103EF6713F
E9ABEEB69D73A66FE463A37EFBD1A37A53B42F445D13DC40C1042C38B09478E35901501053E5
6E98C2EC86B364594FA23DEB6EC3D4B16C41A5FE34A13B880066B3DDFE51D5DD7C74CAE27085
9934A57FDE18D4BCCEA46CF0B05C2EDED63629700526B0FC9B40A3ED89A3718DDF61A554FAC0
6F4722CBCC8FAABD7960DD7D733A73E820787F5AE1F5B0526A76FE49057AFAA7D42654C95B39
C9294C20F36694DEE69404A8F1FAE78CD75FBF9F59AA7D9887DF8783775F26CFACBA6CB01B30
602446E1754E2F6BC3CA692B4A6F078736F9FC74312DD87AD5974C45B386CDC5E64205AFAEED
297B40BEDD7630660FF644A7A9734113E58ED8893C3B93A73F183C1CCE12035FFEE9A515C349
16A92220D07F065436313638617BF3780BE2C9173472B8A69E9EF800CD93709AAFECC61734D5
DFBE4DF2AA1AF855786753A0CF176BF74CCB46D2CF239BFC37B2554F17C1DCBD693786A0B5EB
82831F9E8A4B42EFAEA6B10E7942AD1B783B1D644DBA9B5EE4B45CFC496FDA6F98881689760F
734AA938CDEA288427833C4F24999E85DC610EF3A484587266F72E1D9EC3ED7798DD3A9EFAD9
854133875C0F42453C21287E5A4D1854CDD50DF26F572A5933CBF0944F611366C6E6E3B80D2C
4C44DD99E80FB8351C9DFBF38CA541892804DC2FBD14B1CB344555FE484BF649C9308B751AE3
F27D7FA779B59C3D796493D14426A31C4825DAE251B80D462C98F287C5E60B782153854E29FC
3BF95B2C4B3A987909ED65D3345F947DF42A7C0249602EC342404301F2D1D1DF0CB61DDC5F38
C3A967A0CBB707EF6D2458AC4F51388F803C2D4ABAE337F604D8508BF79A9A1BC185C5030DEF
FAC72A16CB51EA6FA8DA134DEE3EF13226FC0C5C5A00573CCC71B7F414E93442B0558A328805
786DBAF0E9470431002F0EA58A40AC74DBD1805734CEC67FF5B8E3AD354FCF9AAA26FC636EA3
0B026DDB98B7749DE54C37EED9B0C614C1CC5F1DBFD618BE5728772E67F85AFE1DA3E907AD8A
BF69F6CA96E5452DDE3C047E35FC55AE164729E59AE10FE733FE1B58FAB7EBAB46120ADFBE71
3529D6B8728C772DCF0B43D42E9D7B7DE2FD45B042DABB9D573FD68BBDAFD6E26ECA6672A425
5D591136049F9C2CD467299EEE7766880F5B174C2CD570011824C958D102EB97BDEEDADC9B07
33BDDF99CF1C20136F34EE2461C6D5CD1A77DA5A901A66B2E3D57910CEBB30C60AB149336F2A
91A9CCD9C6771D4A48DF99FA4683DB39A8161B83CD29E70D51E2ECDA3DD5A34455585899F61E
7E4FC376111D29CAB945D3FFA57E7DB12B894948A37DCB2BA9E79537E3FF095C81CDC6A4B228
19D7E579355B281A4F44C5F475AC8F984B78A91B20D4B11EB47BE5905059A211A6696DC066D2
A5792F6AA667BD5AFE92C81CCE1753DD689FA80010DBC4E0BC917CD4FC8171C991D6FCBE5D42
CCD8EA0017C0DA02CF307EF321A0F883FE33731655A5528AF87F05C406C7A05DDFD4D6889654
99A3ACA7E82F3F2D85941653AC8E45C3956CFFDAF91CEF1F1AEBA26EE5495A3A28073D190A38
1DF5F2384D12C1FDE082378B6FCEED74831C12A54337D64A6352E2EA85E67DE10B4CB5E09E5A
B6A356F2345EB68EDE34CCCBFA9AA7DE38B5FBFDC6973531B20F85D127EAA05DF03AD933D546
0C50933F551493AE28544F62D126F2964E834DAA0C652C2EB4DE3B0FEF10C974FCC7C10F0196
AB56D47E268AF927A96EAFADA234F1030E58A257163B72793D8340957515D2E7FF6153923E5E
3EE290B6284960967479B4D81BAEB242B327D6B2D0FF46F77E43B4A0F820F66204D507E7C1E7
BBAF0927478F9F9F7121E11CA789C0E0418217CDAF10875F96FD05D49913091B920DCA3BB373
99A1D88109D834742524CDA2FEC84E86F232E5DD433F924E9E01BF6E446A63DC40741D349420
26DBFC8D3888A3A834BD4AEF3F5D38000FE075AFD4CB3DEC0415EFE16FA1820341A48EC4B3A1
086BBF729E68EC9DA96296A4C9D551E099E3D3BD8F464FAA5735B99963DE4C2AC96BD0FAEC57
E61C59133EF494085A9DD295B45B5B86307C7FA720F7170DEE2728CC31C58BA1360EF0733918
D1663BD355295CB8363E9C53B1F271D5CAA6D53B80D8DAA29E9B834271422637CCBE92D7D9F2
7B3D3BFB8B3FDE5C6959CD831B09948F92943A455E911801BB69CDC4AF15ED67529D529B9915
2AB50B8ADA7690135C54465F46AA2D6E17FBC36E92E3C9A2EE01CA9693646DDBCCB439F3405E
A6C6FB477B56BEF0FA5C5EBCC067C959C4453046959C4A9F1B166AACE020CA94F082899CD9B0
FEC62E8B60851D872E56D48C6CD9D69D5540D1B3F1102E0B641BC40E17FD99A9FCF1048E44F6
ABF60352446E3C8520273DED902ED39EB7BAE21995A6F48D89A74A31C40E585D6206D90434DF
E9E3FD3DAF501AA292BDAE3040FCE06586D10B19612590DF6D9D60C086C9BE4D2467DFC042D3
4BC7C37C93E58924BDF35C5380B84B5BB19F3658696D32AD3E48F95A0EBD2005E50423C9E3F5
DF1DF53F001CF6A914D3F7545531E578422D99F9D914C7D83FAB83424C583F4A78C51B194E0C
5A80BD051BB9C62553EC3443315DED169EA666119BF3C5730391FC08EBFE0F2B8D6B18EF38FE
726E9EB4C41E11C9A22351C374341AB728D0224582689A104A8B3E7DE0FCAE31EE8BD13397DF
DFD04211B18938BCA715A66A1C7AEC553A14C20C909AFD757241C62DCA34D6CF7ABA262066C6
3BDA13D3ED508F90AC4CC8F34A3C7B8596A47A24B0C048898CA14D7DBE9C48B8D1DF2057BF83
1C0C89C470F3E526DCC94D247E54757DE9AB8516A1EDE99EA0902025818A06C68064AA4A7706
3908CCFFE4751E161EBB1F5BF09AB351D39D0FC2CB8021B73A8CBFC7BE80FF63577CD226554F
A9DB429B058B02314ADC063D859740747B54961512B3160EA441AD31F6DC6A0D8AE9BA50B0DB
545870A451690DADBE35FD8BF54D32C06BAC67C886516BDC7FC91CB9B6435525073E37CF4670
708805243C6F9809C610CCA49C7D53A638B04B15FE1FDC4F6C2C6C274D18DE17284A4A6E871C
22D1D525C23FFD924AAD6367E6F3E576667A2766102BA4754E6E3BF0F854B328874BEAE2065B
5984E0FD540F228BC854E6DDE07788975FA64CB562656490CD30C95D4DDBD8171E4FB1A2B5C6
D50755375446CDD0B405B47143538D4FDBDA098AF40A06B1CF7A0565009458CD116069C86746
DAD2C0E2F24AF45B40BE740E7485BAA6B776D99ABA9BB0A25C53E3AA56EDAAC25BCA78BA2A7D
0AE5DC30D2D80493F95AE152DC0C07946BC5B5EEC417E1903B3ADA7D1738A3EFCD223F743CDB
75F34A83E3EE70339BE05C352D8A8C3D3BB7B3F934A43C26EB2A849A2B390D779C9989E57006
AE913F406998391013A463175E9E4C8DFA17ADD0A743322734CE5BEA82CD7A4CC1115FB00D1B
212C8A340B0AFE77568219B9A3C523090ECE0515CA21C05264BF1934F557AA0197934B8D27DC
634A30C5C325309E6E7704E97BA8C06A8200B041FCBD0D539D972FFC6B1250F047C4D6C5D549
7B3FDDC7DFC0AE135AF47C31446D8EBB91190847F870897CD034F87F76C4AB03901B37B18746
0A32360B86D753C9FA87EFA92B79919BC2D181A81CEA92C438E05EB257839443FDB5E96A4CC9
898801D4D69EABCE3B92AB3427930C462290300E334EC1DBC9E54453F466B9CE2374CAB66535
DCF6312784A708A25165D6667088BEC143F05A827EBA0A9F6AB536B69F8EECC44CA548F7072D
B51B6A189B4260ABF269B0A1869763ADA330A595CEBE655FAAD08D62415ED6587B393360DD36
6E5350EBBBC3098317B97581BE36742DCC36CCDBB3B42420C791A20CD92FE82947EE6144787C
4C3A6EAE1B13EB6BCF4D0BFDCF25DC941B47FEEBDF2D49293DAADE949AE1CE74037676E01A39
C2AAC54ECE35A8630A1756AB03059A7456E1048033C7F1248324643395FA6FACAB5E915F76D4
40CBF009E1AB1F39E87D9D5F2B5F6BEB9034A987A18F05A558C173B145BB865FBD5EEEAC935C
70E207BFCD63C514FFEA2250B6EBB33EAFCDA4CCFD0503E5842D6B1E27E546BE5FBED519603A
EE73CBF5B83C51C1BAE439A559477FD7BABE6B33AFF69EBBA394355679A1518928FBEED5A751
6488EDC265BE1C1BAED666E33FC9CFFC35347FF8834489A916F048B25E96AD4E8DEE3AE05C75
D3AECEB30547329D9FFC69BA98E2FBB7D1D78FB6355CCDA87826AACCE1AD13C39D718AE32310
14EEEA3A5C79309FF453C8461A4C66C3751F1CBC06CB25B9DC60BF3583B142AFB8334EE23DF3
C69F8AC7C2CBEE75CD7F4A33DAB9C8481B6282FC58ED195F1780E493541C208686B71EAAD9F5
358C0DE284D54F0B6341807BE697E3D737BA6D7796529FC73843722507DFC1598C1B808BDC6B
12A4259862FE387617B2E189B194D96AC95DA4DE3663FBB4770341BCEEF13C75D76C655B40FF
EBC66713A3416E7BE641F5F8875D36495DE4E94A8B6508E6F3EDABAB9FF52829CC674340DB57
B248864BB9365AEA3A6C84B6A1D0D6928D275B5A79ECADBC1836F4768A715556B98FAF6AB81B
289831B71AAD06F5217610CD7BF4F92B48F7681EEC635B26E9DA602962E4BB9B3FC4E561E629
767C0816DDF8073E7E387A125FD81592A714B58A03768A8309BFFE17F7BF45FC0C0820F0137B
398E2DFA6376F9A7808E9F7987F7E8D4898CC8D16500BF4BBD6BE2B9A166DF05DA84AAA132EC
B88A11BE7929811EAEA87299F26CCC439A374173B6AB3CACC2645781F787F3EEEDCE87427F6F
FDCE837946A0D5171769FB3F150A51E16448C08B8F8D78CFAE3A98D5F18F26E745CF9DC64403
91AECB0B61C713978EA17623CC5ECCD22F4BFA6E655BD0A3212B9E2ED3BA6E85D61F099983AA
1EA8CF1D1D852C03B2BD92F0F51E09C154DA9EC5C879CF489BF99923DB4D9B68A6EC66EF1D37
B8A1B27D50CB931B87E74B65A9130423C162E66AF90B61A32C63B1C92F9A01C4A3917407FE69
A2F64FA60C808EEDD1825A02C9AC689641B6AD379D64F153D063CF3664751B06FAE88D17014E
5E0B0DB0D41A5817149DF3773F81541EBA95093B338EA9CA58ADEE6578A540B59927384F0F08
536A57686AAB0AD877E29AB626E9B14FA7B1C4710300583DD5AF73098E1CF1B807D647149523
E1B64427E7E5D1CE78EE1E7025A34041E87D9F6A97CD1B37BE324571FF184EF3DB86EBF77894
5F7277D0C194419CCE2546727552660115002034E6DA52BDF3FA669EA30318BEDDA7E7C02588
8C1DEC52925AF96697919C162167E3746FDA83CBFEB79DF4D2E8576C8F186C31ED02BB428817
B0F8BDA82D74DB4903CC1F7B18872EBE75C7EEF577BE9309DEA7ADA7565B6943A28BAB624C0E
7FD1783314A82C41097031886D8D70FDF368E95BAD9CED5F620A11031ED312FFC1C2A587BB5A
6570AD89CC3FFF6F5AF56C361BA367A5FAF9C1E4D9F2F799479730FAD7DDE0F1557225054646
9C9C64EA50DD1071701D2E0CF69F227C2400F01B5ADBD34887C95CE68F26A6879CD224D2B1C1
8F11E02E3CD42E35D3C3D30084688F798FF91EB3D0A82F11AC9212B2F7D9E135BD3411CC7188
76775573497F2E5D97F5FD3D0C8AD2FEF53654D0E016A39D4E5717D09CCC87367E1F3193A4ED
5714F783794436403209E50D8B96533F76CC66151CC6124CD63F33BD572D25FF824AD44D5163
7BBB017453E4B3B37C0140075422BCAC441047654119577EC6ECFF0B580655C21772F99DE072
503A7688E22BDD7723AE7E7537ABEDA2064A1C48424B0BFCE52607CAC741B762622E6BDE5B27
794B4989FFE55F4F2EBF290B0FFB53C62A2BF670946C8CFD089242341637B237C37269FC32B3
E61A27DDEDDAF2897844A3AAC99E2E23AD7EF3010D2AD92EA14FCA6D68448E961212AD79962F
1608F0193E7C301F5117C3B7CA92DCD9613F4F90FE4235916F17598AE3CBD144CCFE9F2937FB
44CE9CEA13CB7298B02621DDCDF2CCEAC48D2A22177E244592FDB96BC75B0D4D9C2108DE86A0
1D197E13FDF277FEC5D59A04380AAEE76ED736324239FE2103240000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: cmsy10.pfb 0 0
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 164 /asteriskmath put
dup 165 /divide put
dup 166 /diamondmath put
dup 167 /plusminus put
dup 168 /minusplus put
dup 169 /circleplus put
dup 170 /circleminus put
dup 173 /circlemultiply put
dup 174 /circledivide put
dup 175 /circledot put
dup 176 /circlecopyrt put
dup 177 /openbullet put
dup 178 /bullet put
dup 179 /equivasymptotic put
dup 180 /equivalence put
dup 181 /reflexsubset put
dup 182 /reflexsuperset put
dup 183 /lessequal put
dup 184 /greaterequal put
dup 185 /precedesequal put
dup 186 /followsequal put
dup 187 /similar put
dup 188 /approxequal put
dup 189 /propersubset put
dup 190 /propersuperset put
dup 191 /lessmuch put
dup 192 /greatermuch put
dup 193 /precedes put
dup 194 /follows put
dup 195 /arrowleft put
dup 196 /spade put
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 4 /divide put
dup 5 /diamondmath put
dup 6 /plusminus put
dup 7 /minusplus put
dup 8 /circleplus put
dup 9 /circleminus put
dup 10 /circlemultiply put
dup 11 /circledivide put
dup 12 /circledot put
dup 13 /circlecopyrt put
dup 14 /openbullet put
dup 15 /bullet put
dup 16 /equivasymptotic put
dup 17 /equivalence put
dup 18 /reflexsubset put
dup 19 /reflexsuperset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 22 /precedesequal put
dup 23 /followsequal put
dup 24 /similar put
dup 25 /approxequal put
dup 26 /propersubset put
dup 27 /propersuperset put
dup 28 /lessmuch put
dup 29 /greatermuch put
dup 30 /precedes put
dup 31 /follows put
dup 32 /arrowleft put
dup 33 /arrowright put
dup 34 /arrowup put
dup 35 /arrowdown put
dup 36 /arrowboth put
dup 37 /arrownortheast put
dup 38 /arrowsoutheast put
dup 39 /similarequal put
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 42 /arrowdblup put
dup 43 /arrowdbldown put
dup 44 /arrowdblboth put
dup 45 /arrownorthwest put
dup 46 /arrowsouthwest put
dup 47 /proportional put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 51 /owner put
dup 52 /triangle put
dup 53 /triangleinv put
dup 54 /negationslash put
dup 55 /mapsto put
dup 56 /universal put
dup 57 /existential put
dup 58 /logicalnot put
dup 59 /emptyset put
dup 60 /Rfractur put
dup 61 /Ifractur put
dup 62 /latticetop put
dup 63 /perpendicular put
dup 64 /aleph put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /union put
dup 92 /intersection put
dup 93 /unionmulti put
dup 94 /logicaland put
dup 95 /logicalor put
dup 96 /turnstileleft put
dup 97 /turnstileright put
dup 98 /floorleft put
dup 99 /floorright put
dup 100 /ceilingleft put
dup 101 /ceilingright put
dup 102 /braceleft put
dup 103 /braceright put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 107 /bardbl put
dup 108 /arrowbothv put
dup 109 /arrowdblbothv put
dup 110 /backslash put
dup 111 /wreathproduct put
dup 112 /radical put
dup 113 /coproduct put
dup 114 /nabla put
dup 115 /integral put
dup 116 /unionsq put
dup 117 /intersectionsq put
dup 118 /subsetsqequal put
dup 119 /supersetsqequal put
dup 120 /section put
dup 121 /dagger put
dup 122 /daggerdbl put
dup 123 /paragraph put
dup 124 /club put
dup 125 /diamond put
dup 126 /heart put
dup 127 /spade put
dup 128 /arrowleft put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
/UniqueID 5000820 def
currentdict end
currentfile eexec

9B9C1569015F2C1D2BF560F4C0D52257BAC8CED9B09A275AB231194ECF82935205826F4E975D
CECEC72B2CF3A18899CCDE1FD935D09D813B096CC6B83CDF4F23B9A60DB41F9976AC333263C9
08DCEFCDBD4C8402ED00A36E7487634D089FD45AF4A38A56A4412C3B0BAFFAEB717BF0DE9FFB
7A8460BF475A6718B0C73C571145D026957276530530A2FBEFC6C8F67052788E6703BB5EE495
33870BCA1F113AD83750D597B842D8D96C423BA1273DDD32F3A54A912A443FCD44F7C3A6FE39
56B0AA1E784AAEC6FCE08DAE0C76DA9D0A3EBA57B98A6233D9E9F0C3F00FCC6B2C6A9BA23AF3
89E6DFFF4EFEC3DE05D6276C6BE417703CE508377F25960EF4ED83B49B01B873F3A639CE00F3
56229B6477A081933FEF3BB80E2B9DFFA7F75567B1FA4D739B772F8D674E567534C6C5BBF1CF
615372BE20B18472F7AA58BE8C216DBDDF81CC0A86B6D8318CA68FE22C8AF13B54D7576FE4CA
5A7AF9005EA5CC4EDB79C0AB668E4FEC4B7F5A9EB5F0E4C088CD818ECC4FEB4B40EC8BD2981B
F2336074B64C4302807FA25AFE29D1EDFF68FBD0141698DA0A0FD3FE352AEF6618408EBA8063
0FBCF58909B21CA4B9514EB27F9FC7B78FF460D374798DABAB857F6DD422BC7983C7CA213870
1652B6C3901B98B43B641F905F54AFBE00822DD60E2BCEB957BCE7CABFC51F153F3DE4095395
28E20DEE4B8C15E2AEAEA9A46FFADE11A3EBFA3456633B298DEC6DDA6D6CA41DAE03F5C6B56F
68E58C0706D3A97E34FD845F8F2C6126BB6FFB72FF4005A1385A1EF92F2BC0FE7441C157B1E4
AFFA17A5D2057DC2BA87A77C45F8442A36BB895C4FC24FC83BE3831D0588E9D66DC2E71D11E8
8E9F110493314AE48233D708568062829ECB94AF0441975CD8F1FDF4F626E6B0DB35683B790B
EFD89B94894C3CCC5AE9A57EDE5B4C5F71CE1A7C5F34108EF589711E2E4572D90CB501068859
E2E333876FC9251E6A574543E1C2E7A55E186CC9A194DBDA51724FFFE506B0B754666C59F449
3D069431CDF764DD7E62720625B3E02C1403427A93362205A4BA5AA6727E3D486795D7EA749D
AA5A46A7C3FF9EBE73DE35ED38DE2A0E9BA7FD370B5B702E21DDD6A69A6B2E2916A5A93849D9
24B844C3A0334A0D2C95E089BF141DF55E25620BB31DA68962DD3C51A9336EB11FCB737E6906
EABA756BF7B55EEADE38994C5FE146FDF725AC74CCACD70BBB292DAA5B1C60CD39AC60239B12
33579444E8846826D3983B0D6A8C5BE07DFE43961897355ED8E72CC4A4257620EB7E113EE988
D0E8F7947CC822D8563B7BD56D69F144159293E3E2CDED7068F6E3046F14AD559D712D7FED96
740C962CD9EBA9CBDB0B45D5DD9A05C0CE28DD27D2FE6B7169B409BD1E080B32D6D9F2061BD1
B9292D0506D482354F59DB8BD14F8D975B8A30B212F524C8664E5BD9C170BB0488CABFB0BDFD
D18BD44D443B08FB2781840ADDC9BD22376AB814B0429D7B0664B96E183A2675A28B68F1FB6F
88132C796CE2AAB0B9409396552D7C16F6ABF5B85E93B397A9E1CB74F610E81319CCDEEB6D31
EA13F95F792841402245230868FF37BC57995ACA98FCA2DF474817BF96B0ECDD4F42DE20A007
49A91297CB25EF1C7AD56C5D87256AB41195624F1977ECF9246D7B1DB6CDBFCC654AD428932E
5C0DEE8CBAE5D2CDA5F56C16D62BCB93B05BC6CB5E13247F59F321B3B824A73D4261C6A85609
ABCB95C4B14FB51FA0B8826A05696617A2DB092D909FFED178BA62599012D08EE433E800B54C
77C15DCF02086B1F04935F7B79EF163384FD4137391F5E4936EC38677BFBA1B4204F5F80505F
68CAA8F538EB157E9708306A9745D2E2855EF01450E3D2F8BD3C4C5B4F3697A51038011D41F1
6E4C7781B4EECCCFB86EE892AD6E9A2C69C1AB0B11DE2BF88964E5DAE8A3389F18DF163B375D
17895F0D91D4D52C3A5BE455196251EF12B8742CB54D14611BF5227EE52BF8F464EF8860579F
B8BB6191E9AE46F27BE34D732C2DEC814D00FB9763848F847AA9FAA73CE9053719C781C3B3A5
F27E614187D3F00A330C2F76496BF32E924E27ECFB6C459353845D446F642061864356CCAAA2
BF7443515645B51F4DFF4E244F8B7A556EE38389EE3BBF9E69BD72D6BC0D134E134D6FF43608
75EB8838A885DC681004EF4383CAFEEDC688FE4735F5AAA4A11B1BE4D956AE9CBF8D8FDDBC29
A600215C189BC812A1F441FF1CA1FD6C5F3C4013528961E676FE3C9ACA3D44B913F51DEFD42D
D4F67BE410C4152B675731F18315030FC2CA4BCFAF5C5BCADBBCBA4664FCE78984D5C8997B40
088F68F31C8D54D44575ED23533BA3A504C1BC90794AB111F1C011BE57696786AE25551ED73C
35F6A343579DE01675DCFE26ABDE7A3CF73C121B7C33CD3D42BBCFCED99CCFEC4AE08EBF2AF4
FADEAB53F6A2076F8189503DD57F84AE53CAD55D97D3734E706D9442FB175B5CC032EC649776
00A369007A47B17569E32C5BCF5722AB7CE03EDC4DB3C1B3D31A73D3BD274C53359C6BE06BB9
3D0026080B9D76F51DC69AF96C8F73B83BC8CEB5D788E69571EDC574E71C06B3504141D47179
24EFC2CDD8D0CB9645A06922CDE8EF7B297BCFDC0C9D8C65A0D0CE542BAD98B08BF75D814CAA
C3C51877584EDD5412CAF5C69599666DB2E5571E5662B3DA510358234D553A54025C8DCE413A
CD0B4FFB252BAEE591382C0C0A293011F3649508A2C7DAC8F153B869C77D148A0A81AAE057B8
D32CFDA1750180C98F70A8D0FC62A976F785B6F67E9665D1A54C2F591E4B9BC1B8CD0B23E6B5
3CE5EE85995417A8199F68DF12C88173F69D45D8E6208DF7E1315CD08C9F0945FA751B9400A4
F44F1977355C5FAE4EA84342F04AE3E785DEC832DE82B9C6D57835734080DF60C2AA44702FC5
BEA1AF1455DA321341F3613442D63F6B547FED5707EF114B654E0DA6ED340A9372DA4A99A987
CBE785342FA9D2E98789417B87BFAACCD46C16D11B5C6ADBD5619770810A39D74BE2620CD99E
49A9DC91E7E6D0B6AABE9AFDFA8D532FFF1310E0FCC91C0B103340E0F1371FE7801B9EEC0F67
A7C7A26D18FDDADBEF951FCE20EF0558B9F32C560E41A87AD4A94DD0E0F1DC333F6667C22C65
D995B27D25371579458748E078D5EDA6ED9F84ADB3D35547FED29BE03ADB683BA50A9E1CF955
CDA99F95EC45B6B23F43A05D0607CAFDFB9E1D830613C22F1C583A65381CA5C8A736A8B34DBE
70C116699E3144AAD48CFC32405F67614FEAFDAF0106B39EE47B8902B1511665BE23981ABC5C
4E148F6685ECD9575C66DD36A22E41198227E7D7433ED856151154E478D51F5B093AB0A7A923
197864F4FD6AFA7282DA51534B0F9BD0FF070795BF954E02204BCC3B0907CCCA5F3C478F7EA5
402556883EDA2211C394C0D6E921F502368BA96DF89C39B9A36805BC76FA3C3FD390B0B75262
7D8774F66D18A074BBD255B9FB2A2FE94BB30A928243B9F308BB789FA83E6BA7B94946DA5B70
A5047B8D9BD59EEC2DE5A21A7AB0A826CF02CB675CB5C2EA3B774647962CF7DEB01554CAB8A7
B949723EB847A544E8C839F36C10E9BAB10C3E4B05CF6CC46CC6A567D9BAC1DDA8825C726450
68690EC820633567BB2275BD1271E284193C4402D5AE384669294AF99467162E790B3CE41F0B
BADEEE07EE77BC47CFBAA76F28DF5F7B870F95B04A8DBD85454405DFCA87B6B4DC65B3D5F125
65BAD0D22082001D0061F10991F3E1682527EFBC3EE8F072F4BF29F3EB210E403B142B82B97D
6AB9A5CA512E448EFA90F8043495C2FC11730F67949E0F54544094592989D7A1CEB43AFD0BF5
0EF49C81C996469F52451CA818176ED2AA6FF8276030EC931A9CA6BA331A4B463CFE77161410
C4E8EFAF9395F51D13D1BCB2841DF7DB65FA51ECE17B5A321B37AF3215A69E72A74C4FDED676
7930CEA4517DF9A7148A0041F4745E4E594B0219C9AFC5EE8059BA9BBF415302A9CDC48D0460
516A270EBDA3A6997EC4335EDC0F20FF994C69A486316AEEB8584D0DDAFF255F7FFB07C77E29
D58D32BEB7F337E28DA97B8C7C44F8452D9C629C38E03F402824B24CBCBC6B4980559921D69A
A48F593C4791B32FF0C6DB1546E37F831A82E3EC733773310157F50DB7AF0684981345E7E23A
7284029CB27BBC36D2D41EDD1CF0C3E30895D9DE0A2319A746127C37B6F08BB7F9A414FC9FCD
2C17998F7E6CE30C395E2BFC589CC0FEDFE92C659E4078DC7F83E9418B340BBEB23B52D45983
24238EA02C94591014A4D7C12451F7BF20F3F9DD26C515877D6C33A2166A4E433A1748AA192B
C0D33F1C4FA89397E39AB886AC737440C31FAA635676A62E6D3F194A668FD0F8FE5B6A8BA3F4
B4BA2198C837E4B9CA708754CD0804AC78C9218A770AB3EF5765E14A69D14C3367F842B72352
3AB69E5E4FDE7893F99C88273DF486B4080089A0DA5136C59E1DDC48FC71C1E9C8C591E8BE5D
3C9426A657E65FF430EB154E2DFDF4333FCAFC588B61F8071F65CC8D1CB15E27A425ABBB0D78
BC366BFC4F88122C66DB571555B5D6E028912BFD89CF3E0E56C464392A4D505A4F7E23CBC169
CEEAAD218C7553668F549AF2CBF9A297805B3453B7C61112BF8E6325B7569E38F635B2E13B28
AA8F7188E4C94E3E047B6A6ECC050ED9F3A43B131193D84B32C0FF1406B9B66E3627719A781B
676DDACC16915ED237D6B1342F3A9D981D9E96A1A8D5827BF165BB901800D6C900A53271C906
D3D106D26636438E1B5A0C9C97CEF25F0C8B4B5C037C10A9295DA210CDD608ED6E0B77CF2EEA
C5DC2FCB7B5FD0122A3C3A03DCFF782E3C877F210425F9FF99235A969ECA67AA7AA290130D3A
64D6165CCE3AC29C5EE3B4B86EA3AB78373C664DBF6B99949EE56B0BF0F94838701D554B26BC
45C4DF406D9015CD0B2147D338D1C71F7738E3B922291C96DAB5D9230190FE3299551698D8B1
4EF02F5948BF5B5E4BE42849C001CCDBFC06DEE4FF6B12832575D1E5863F1190BCE902A650C1
BF869CE7082C9388A1DAC4CA0E02967E3937BA91CDE0E931BDC07DBD87BF028F46CD00E7A7C2
D26362E0FC0BF267D6DD23E1DB2CF41C3BDCC785F2A8D12067CCF81E1F113DA147CAE6B729AD
E0F85369AD28239F35C7C5CAC87CDEBA07AB233B9321055B972A98CEF27C1B41EC063015E8D1
A2DB01AFFBF0BE01C43DA54A86F199E68432106D252837759AE1618D7008D615AA436341DD35
583DF423EACC1B48D568FF5985145CCC285B2803F03B5B046E7514A8024FD786D3033AF60962
0004CBC2609766039EA8B28086019E4BDA30113CC40E854A159D86AC49E50D894595349E8B37
97239DA96F55B565D5185E630DF0BDD44612DC4E83D31BD8A4372AFD5420F6B379EB8D7373AF
3C91C999CDBF3AD418DB84AE6629D44EB28AA5EE9583686EE4F9435DF0971A3059BEAF8651E7
4E33E7B712174BF952795561BE53B5926CDDE509665488354D5C3E288CA7B679B9B969C9C6B0
44AD882905663D1F5AE476951A637D4125E26575B2CAF43DFE5C6181238D78E0F41F7F798F03
FBE9390561CFAD3F29E9DBBE20EE524344A7E3A730C529A2BD8506FEF7D571AB99A36E136C67
897F7C38582782BD04DC799F8F66432E0D5AFCD239185E95C8B6842CFF16F2CC128B8FEFEED6
95C85E4FD702A60553A254E9EE2AF1A0313A5D2AB5EB559064480B13412085120CB6C90B1AA0
8AE1FBEC261077B9FE65E3FACF4DF582E89B68A4422D0460DE7A8523B51928F1416A9AE025F9
541FB5FD5A9AB5508ACF97EA891BC25EA5FB8C7C58310720CC40B8366A806DE9E4DED30426B1
E7E9D9C145969B2B6D27CFD7F7BB7B2265E79B4BB865B0645209728891A88C68B20E681B4472
CD3105C2238931FD048B43400A9819425A2071367B962C69374A22A06990EA59D0FDE438D552
2432C1BDA7A54E52B594B662740FE6923CD04DC2E7B05748A8BEC182DD5079DD44C0FDE807B6
BF4025992BC6B6F24C2CCFF8385CCD37167BFAC7934E521BB7327D8E88B018877D690F959245
FB26551A75A06E6AD8E5B1C2363D2493FD947431050608AB63F15D1966D6BFE4F1A5AFDE5BCE
8B08E91CF0514B4CE56E1C62BFF778159B77A5919DA5F4619F7A580D6053126AFBD8363082DC
12A405201442BA72742E26C7C8D3430263C9A0EF34E0205065977E7952CBE0FDEFB3902D7716
7F088103CB7D4A508C867077CEEA5D1FCBBC1AEE5F26AA7A85FAD4FA3C0D9207AF49B373F70D
0FCBA87AEAFC7298793693865C156FC0E0E8E7B31AFA7C473275CD08B7BEC07BEEEE402AC272
C666C61F5BA5C1C513DE5909D2998EF7C439ECF9926DB57E82772263979BEFB72DCCB5842BFB
BA0EB1586CFDDFEF3A63F1B4FCCE3894E981D6268A62D1D39F918D4F296381D5AB356450FB31
CAE01FD7F36718C7A54D503EBCB479CA191D5DBBBC08723B8279F2491931D2BF54BA9A93C214
549F66C3C314EE37B5A9951D62A6776E6C7B4989BCA05ACDEAD7DEEC09BA97A0DFDAD7429E3F
480806EB9C7A3865B5A0648530247CCB71AA31E1F8971D9649D6A430BD8753FFD295F30E4E7E
CCAEB12F4A5D9B7902FF57B08B3ECB4593C988758CED4A394E412FD5A132CAC5DD3DA61CA3A1
3E91703702388EAAD89443E70F7D037C9FA28BE7C8261EACBB7AF473EEDB0645BAF01C5F506B
A85813FD1D5164F541E0E85D228E92E60D9BF5C108674C621D38E726D2E219411759E8063C2D
2E64120C66BB2A8F6F00289C3BFADDDFAFADC3285CD6AE1E624A59D7621276362382D2156A49
319A5B1E2B6B6D9B9346A59E1A4E9214C66E17C3EB5A31B394EE2F030C88FEBFF5C659E29FD0
5F57C35B8C986ED1B6FE33ABAC7334FA0653DE6A935CD0CFB4F785F80DEE2D651BE3418CC83B
18B5B4C176DE3263ED6B4F64D4395A48C2C5CF13B8D21D63D85E2228F6373BB766D288CE9D05
AAF98D0848D1AAA42CA0629165C7417E47906AF4ACB4353CFE396B82BEE33EFCFA2531DB7237
9E81F0389A72E0A1D423E1DF66772732EBCFF12D3F83DDF18C46A00297345166F3C3E7B11974
D70AB02EC9629D4AF1F2857FE14D86C9B47B79AD89044CCE0AC09FFA4621608F7AABC07C0C76
60B96C4EE1456B998F509F7D77C9C194A148C48B48738A6A0AC12E50137764914BF6696B7049
C8F13763949F04D6A5302B9E266EB035A11FF5EAFD296F209A3FDDBEB62F1C7064CE0C449A70
A29012E041EDFB71C9F93BEEF2A564FF2D8B248579769A81617ED8DE4F232577E0CD2CD650C2
DD3329069017B0B427651E532CB6D7602A81BE2626EA6AB6D0C85D69BFD8772D62DF7F6C86EF
67C8FBD17F2D2DF34DC52256C72181093E4C876D86C9A66C91A8AB1E01285763EA93EA6B7A4E
6131497BFC536F69B7C02D28E4645CC6FE5D061495512429A1D3752BC565F769A4475E2C415E
8CA4985CBB329D49B8AFD45498CA630C3CE56E7E26CC0C4FA9446D3A402D66E39E3E3210644F
C9A9E0E4445180C672C32734872703910DAE90D102252EB56864F1CB6D1FB8E4A51335136989
08C42B718DDFC4008264791D325E6633CAC13611B10672C263BACF0820F84B7134EDC9E2373A
61C9C8665B25AB7A583A4983D30386AD84EA9C7E021F64C9E54F3F9B3A3D3267EDE3787DC949
BFB2AAFF21B6CECB88129DE3200AD2693B8B454B18CAB17134A471540C009EE8DEFFD2C70AF0
A98320EDFD6909B0B17C3F4B857D1FE5D963EDEEDD8CD3077A2980FD1AB6DD9AF5B151BBF7CD
6B645FFC9C103E45552F43CB401BD5F084116D21C958E1C1450973C0C393F4BA75A9EB1C5438
9CF6C840FEB5BFFF673E058D8738CE2BB8C07CF0B2B5A837948FED64FD7244D5B5C53303C50F
1187FD6B085A9BB6E5DED081B78F4E486E0E17811A552AAFC50A69CDACF0838029D3DA87BFAA
13D89DE7960E332650E5986F940C4493102DE366D8D574776E019205B25F16B6FFED5AEA7C87
BB558497FD216D2937452B62D8A63D5EC72AF5B83E91BB72BD04CB724B4083C60D2CA9D125A6
9DB5D2F4212BD48BAB37FCC933C471245AB99284671F9E3E7E6A9076117F5CCC8D469B929BD7
C4B677DE5BD0272D78BC0434B4A1B4BFF267C4FB588631B1BC3DE1DCC912E3902D96F16B2A35
0775BED06BEB2F1B7B530CE45337F744FE08822331E4D2913849A0890434088063B0307DB4EF
A561810F9C2073B890C67108A95CA581632553F76DFCE780AA175675B186D24379074DBAE021
89DCDFE396A8FC790699C3ED4B7799B30F119D60EA3754549A3CA44CC2F17744DA59E11550D2
B0604AB45A2FFE69ADE126FF2F92CC75EB1D8FA6CF2C2FA2DFB49C1D16F8074A7D7115339E93
C09265B38789A6816B12C803178A72C7C51CF78557D3BEB2D3D5F0A4C53511158145EFD256E7
89DF517BAE8DA9B9B4C494AE42712EFECAB7A7D5BF4668F1FCC23EDAC598CC414BEE707C4C33
1F02821C296725BD4F14F5BC97A15B8ACED9CF5EEA5BAAA216EC582692F7A210BE4F6A41E96C
E3A8C65AFDDBE800E035BF0595C7AC0D12B87B4D409DD6772D125249F273108ABBA0973A7CEF
4F1ECA5C9A17FE3071E54E68507DFD8EC6B787DBC547A90C43AD42856C26324178F2E6D2CA3E
9043188372819D3F02A9125A3BFE766E7D19027CFE5980F5E1E1A7033A5BF236169FDBBFD2F7
3EC6D56375B09FA750EB4741E101241CA191B49DE9C681E42849E23E17B81973E903F52B9AAE
B07855AD04C30DF51C9D9B54F718C7A11038F8DF63DCFE6C2728E69E33AD933A517CB08D3DCC
7681F673B2E17FC38DEF47E2A2F7FE7173C3B6922EB57CD9D7988F6D3A768E56B46AB8C7EB9C
ADDACEFC45E1E245563C0A52F719FCC81C635F159013EFFD5432C697C105CDDCDE49CB5C5696
3CFCC2BC4506BB906910876395C8239C8E5C161471B3A85A353ECA17FC9BC12B805B05D53AB5
BEE2625109ED742C14ED2B08C5D19E7B4D9700D6D3191358D481D2C0C74EE8BDB1B7C40C36FB
B823E5502F9ED6367AF146BC4E07B428F90B1E42E6D470958FFFB5C863E73B1904CE37B9A8E5
90196BF43079DC61FA5BACA8F312E8E8A9B707DBF255BC5B3DC1DF58D374702DDB45265644A7
BE315FCA2665192E5DAB08A6BEF085AC370FB81F2267D4D1E05BD8D69BD3D01A1498020A03CB
BB8BB7A095F10C9D88DA27301FBA0AFBA4D3B056D38EE6A6BBC532B464630BDDBD4CCBA50C2D
B04E49AB8E596923BA3495E7566268B226353E7DCA7B11F28E795CC39F974F426149E0C625A7
EF0B4CEF3E3A5C0A964BEDDC2AB981E564817B963022BBBEC1BE0FAE2E05B6F5F41648FC17F7
9A65162E31A88D0ADB71557142D8545CF2F2EA1A0362E2FDE496923A87C8578D5482C51C52BE
0852326DE3D75F2C6C3EF3024EBEA779DD63F39BB8E2726A7B49A901E3BDDF9586DE02082B13
86FB777D9F09DE377682E14AFDDDAC3E81F485B21CB2537130EB6F69A77B87A702E24BBC2070
6467E82621211300687F18FC809E976FD8EF3932E5213EEBDB9D184D31433B353CAC68BDE9C9
6DA802FACDD168E79491070754E5DE227FE2DBA96C51C16D8C8F0EA9B302A398B2F9491562DF
08AA4C97324B6FF2FAC68A5D079AAC79CF77F0249A0D1C42F441BA372744951077F8DCF83A26
575EC5A87AD6DD4F95EAA1B7F9393C27ACD5F79CE6031E808E13A55C3829D158D1E59E177FE5
0E87F3CB39A81F14F35645FCAF56EB49F5EC78EDB848B396C72F5D928E3561240E2DEDACB37A
994154940F412456119657381B52EAEBD728B026E87FEB8D7EA1EE49067C5D6BDBC56C578728
820D583CAC747F243F6F4A59DCD5B91CFF0232F18183E8E25C76A2C7D53E6823899D43FDAC50
4221799C56EA08F26BD03501FABFDCF4CAFB9E7E2ECF335D8C25F99D40D91B8C93BCEC6B11ED
9671985B8BFCDACFD77CBBDEA246417FFCE021DE54FD0AE4CA7AA19A9458426161513A0F5D7D
4BE2A6DFBB4D6D060E5EFB596F76083B53EBDFBBA1EEB78137466AEC283FFD78BDB6DFFF9748
E47A24614104CEA06D88693EF2203D8792EA5333A697E7B7CB488C01FD76AE792AF0B8F88F02
7CD4BC3EE5D4A09B968DE6B56DC55419A716DBDDB733F1B86A27CDFB8B3AC29DA7613E6D9042
CE9F648A058E2321DDBC10E3374366D6BC4CD910DFF41037CC909580F4650338C9CDF3EB01CA
E0D33DD1E1B41524E0F27A77337BEBB6E91542F599C9C7A1A4551D90537F985CA14DB562DC34
A07F072202E86FCED29D1181A2B1D57CBB62BF6E5E7702A00592F8B018A12C826E569B7103B7
8124D887F03A935B54255DCA6A01F433308A55A71B305EF69ED070CD7CDA1AED6BAB529BB506
970B92DF62DE28C05F21C5FAB79AE4BF3A8B2865C408553CF4CC12E3DC69A0E3A683A637D2BA
187CC5C615056B1853B349A1B88EEDCD9748FCBDDAE70100551ECF0B897A0CEC97A456FCB787
49F74B25168181B75AD5F523F4408BBCCB011D55B83A63A0D96052FE523DD891664A613652AE
3A979AF585C69FC4C34CE353AB52C5DF99D6908E1CC86D89CB6A138F42FA4D472C48E334F334
9B2C47DBD9B6B6A92004B7D3C994EDF5B17F1FDDCAC72F8EF393838BF5280CEF41B803513605
381637E38638004FF04BBE10C46A8135E0B5DB123C0F2F6453C0B648124CD0C7E379742950E4
B7CF205BED93FF6C0439BB3BA0DA7B9C2C9FEC48B5E49E10F944D2F499C6FFD3250F8F7AC82C
93EE7C6B63056D1278871FED6BDDE70B1530118D556696CCD90FA33010B35AC56176D0BAF342
AA846BF7B1A95D98FB7C05D56B4FFCE922F6DF7A09BD8802CB536ECC23C89445544F922DE501
700910AB28C892BFB1548C48FD3D9B0BA4B5F5CA44DFE67A8E2D42FDA79F9473FC6EA646483E
CEFFFC0254E3F930C4732C8AA392E4AB4E26064CB1A185BE4CF0677CF1706C4DC8BADF32285D
6D02D2C4806B6E0E2C5C2884F30EBF9BFA16BD7BC9E2B779173208C156927D2848DE30A5B3E8
622528D9DAA63E06D14E2E368FF5331279680849F8D9B5FEB448633D444CE06BA1F3C8831018
FE7BB9ADB9A896AA75F9E489E9B88342E424DFFE90976E4700E6C6EEDAE9BF6280AB78CC5805
93347841BF10EECEDB86AF0CD461336515CE50989396665CE975D1F1CB0BDC36B619F67CBDB7
B090B04F447463F62927FCD0E1EFA73BA22063732CB8557E27969D5945D8E82F4A5ADE094068
6AC760EA8FFD127653F954F0287C74109997F1B26328FA9556C42C7B01F0A810194A9CF0D716
D252504BFE2C2707456A4422E84AD233F4B32DE1A825F72C45083C7D7742B6168565D48AC1D5
2F9192ABB0D491A9A0A9416420474D9EAF1E146B2EF1F703B2B33838C4163DFCF8242CA6578F
37CDFD4144EFC3DBCE88D3754AF1765E677D670ADEB2FD2DF7882A4BBA95FDBAFCB9E09B7177
CEF80B03DE222CB6070D7D7E09FA2297EC831D561A2069F6E95E9EEA70E41B126893ACB834B1
778BF4CF338A63F53E4828D75ACC76E29EC822866AB6C5756BADDCE0E3181837E1F7DBAB1405
DAA2231B88E176444594000F12C8351354F3A5722E9E4C376B983CD441D6D465F3865C8111E4
7604C61A04CC59D185CDC89933B13B3A9A15360AAAFB18008FB2048000622905641874659693
57164FD31ABAE5FFD1C7210275EF0198C74BD7F04BC02F9012A6BF7A8B9CCD76D4F449DFB3CE
7CAA4FDB6E04DB1099861B53FE6A8497AE454438A0099C7F14AB799B9E8337128ABF5C523F79
49E9931D233E8466029DD3B7CE86298700771876032656034991E213CFB22FFC1DCBD88EB6CF
20EED29B983BEFC5889A4589428151A249BF85A7F38E5F70CB6F87A706A7A057F63CF366AFD6
AA4A481FCF7F848B650CB9442EDC33673CD98F8F895F4D82DDEC9AB457CF21EBD339769292E1
D17CA465997DCE5A6829C57392E08C8BE708ECED1A9AE4786EDA0095A05014D4AEB167C1D1E7
83F9EBAEA78816BCD4AFE2E5D356A30828E11A5641344B3D46A3E8AADCAF22DB74FF57EBEA7B
779B7C5DB027D6FDECBE1B0DA2EDF3219CEC627E64CB3142D303027F74E694A983B16B33FF62
D1B0E114CA59B30D2261AC4337DFFD0273ABC09B955E740E6ACB4F20969DA27883B3C162810F
194A9537F13E58865F2B4611D8B9A9C4A59586E583F9BCA6E8684C982FBB42AAFEB00F6A2428
75A8D5246830E5D9FA8B479C36225D60C79390094C3820D9D20483BD8B28C5979DC27905528F
F829C14E346511BEFCCB0CC2DDFAAFFC69FA01F2DD592B0A554C8BB1D3DDEB53D871DE3048FB
9A816A40A5EBDC1EEF6725B59F6EFF26E4DA46360D4BFE49BF623955485875028F78DACE31A4
B8F4771090B36B82E0E91C9F6B63DEFCA85E751F3A1E6D47FD674B6B75D34CF5D230012A2A02
EA49017E9AE4E22440C836923450A7CBFE44FF5E90D9273FCE99A56CB0B4AE070410144DEA9C
75282AC74C8D426C20B54D48BF5E893D9AED7CCD4EDE4B3EBBF29320E9F98E36571E545C09DF
06B72ED2DFDF058446FE62D7F591326F7A0405718B97692CAC9B02D77A37662F0BB150102D5E
820309D5E1D4DBD95606111A4C5D0E606F890732383B96D58065880C679C4FCC3F4FDEB870E0
022EAA40D367A1CEE2E43C31B0ECE28481217A77201B361541D40C4C7ECBE26EE0263FA70942
A9C4F90B986284113943E170F7C6283447E8862701E31BB28A72DEAA7669688BEE2939086378
99339AD8C2C1BF9558B06446864DB50526FF514EBE3122A3059BF27307F10BA5B44ADE0EDB6E
2693D7DC2B80E1A84F635126960FDD3B6110E84922D484261C92C8055314E5A2E8FB6DB0A904
E291714B4B1D28E2F88734343E42C06ED7DFF193B1871B028E7A0AD51249B36258C0EF6A5165
F5B7AA3061F0ABD6BE779D7E845D6606C9576314C04E98902DFC7CD027934BFE804B12F01E9B
5438301E280AE84371CC2BECAA06AAC7A65BB6B3F7B642207D730AEFFD55ABB33B8FFE0FE0C7
B16356E092BB0360FB94F1E8A2FE7FA999CA66B6675025CA605A65540F6D5619887D7E1A6869
2B76EF901AABC5A15D529F5BFD446E04E95A1BE213EADB545806854ED5E346813ACC82C927E9
DD5B45DAA1C1D57A2B451FE91CCCDDACEDE657B9E37D605CD4D6001FAAA843B9EA84917602A6
7519B99DFCD39DA8DC60A1DF52A0A0C8CD35BF9069C1B8A534B4EFAAA4B42E932BC61FF11A84
6190E9BB2111D13F08570DD9C9934D0C1DB1EC459A3BACC8F10BCCAC2BC8270B7774BD3065C4
D146548D1959395266F420EA71C05EF4D37ED0EC391890BAD4D686D3D0994B98B9A2629C2B66
88E453167FC651BC70DCC608B453FEA208329E9B93BCAC1A7C9C5575B43D32708079AD2FEA25
DB03A13440388F8A4BF9C5D9CE42281284C0A1FEBE6B7BF94B58257DA32011484398DB2C2856
23803D4E578F30BAE73A57D039A2CDF56BC2A625CBADAF7FDDC7744E8586D8CAE909162D2A56
1FAF91099DF981C72617F43F1E8DBC986A1944B370DDEEA5CEDEA04C704BB45227680EE2A7A9
1D5F71C8B429D5A1E22C557932A19B669A6F7D60BE8B5A1A08538D5396492500E8A30D8F085B
9F1613E18FF8511D8F4ACEBC9DBD742C6F27AF4B62026BFCE268E3239ACF3CD0C54176F1839C
9CE2618F5680353A0D234181172DB3A14523D69A204CC7A5EA4A9CF1D78275804D60D41C364A
8725CB1B72759A30DC5E2920B76E1B486795CCFF14FE6615700ED97A1BD4CB16090CCD430640
36FC003368B1E949D23BE8E7CCD7F4FC6F54BF25174B56B42B505E99BAD37A9868A92C29DDC3
29F1D5A84806B9382870B3908CA87C3F840341E45731E5B7EF5B066AB120DB45D72B0E444BAA
AF4E948B34D354C244263505EF3FA995E2DC1177B8EBC01A6E2C7AA5766CEE90D3AE7273D569
87BB665A43B4697A0EB98C120EFAB3C61684520E148FB5227939D6208E30CA72FE0D661B9792
C8656B44986ECDF77159F0ED52F695DCE64595A243B635A3B4D328F73D248E1F8D8244B2285C
B5F6374E32B2FA7F2E29828E177F81938E2AA1C70EC9226DC45840F8F7CE4A377D32FE6C6550
61389B70C4A5AC6D62FC03BDC16B1C15A79DBC46623501D263A948BCB2747E85EC1D0DAAC606
206398A2FC008F369B673FE9C12A1D4D06D80D625F2412FD8912D625F182307FA2731435CDF2
0C944C2ACD5094A89530A6CF54BA8D347B3819B31ED56C55AB6CFFA8C8C3C0D3C6034FBA9FBB
373F08C76E79F50400FCF3D1F65CEEC11C3623706EEC7ACFE84B89510867C0B2FA6F25996733
E4CC394872726138D7456CB398052F4C03705E27BD85EE755F1992D1C6D330A95B6D208ADC76
D4CAE80A78C75AF6AE4976E564F859429ADC4DE87D26A9A6277E14016491D69C6B9368A6DBF7
2C68EE9B4B32CDBB6A186728B354B347DF5D5F33DB9CC2F757B113EFC0FB491ACDBCBCD70D0E
8E22322E6BD3336E642C6C48D6DD0DEC32C39D6E786A99702B83F644E3039DB0BC3BF91918E2
41A1D20AF0CED35FBBCF8892858762FFDF4D855DC043CF348F64B9F0EC40B0D58F1A267C6567
8609A29E8508F0F5367E0528845F666D3DEED15A880691675C9977278FE5A0C75C97F10E201E
97D255C40BE2DF023F3842ECCC0F474782716CC0697D2305D2894B2149C94ACBD4DB97A8CC49
317773662D6533D2E3BA293FF6EC3BF29B897723B200DA0875803B40FAD899E953168BDEDEC9
75D3461618652733F9F1AE97FA05454DA0C39B27308F81D6624E7ADD0E909A721B0B5B87C735
A0F81402E1BDD37437951BAE5735BD2D9C5A201DCFC832893AA343A6E4C8F879BF7ABA330F71
AD22AA121C49015A6E1B4DE63337C3C9B4BFC3E8456D25309AFB76665AF8D3558841D95E1577
87426288F3A108CC0388A47FC77672F9F837AAB1BB03395208BC7800F59D883023DE8DE4984D
3550AC1E435A4A9EBFB9024FEBB3997847FFB5AC94EFAC7E480B15F49EDC4E1EA47CA691AF89
E372FA1D51A68D417DF4D7011D8B129191F8CE9BFE2D80FC9391E51539A8EF2FACF34C91BCF3
C5C81BB7A3050E0EC13E3CC2D03387335B307D3CDEC0D43A6C2F348C3820CDE916070CDCB485
D1ED73B708BD083E4653EF4F4D1BEB104167E5C53243C72B5DA52CC360602297B86B012DAFA7
BB0D762D78D7AC49D84DB797D4BC25A89309E3715BAC2970BB31C959221EE2656BDD93B51D43
0644E3EE633EEDA51E1AFF403FAAF247B15DF007EEE990B21ED684D260AD6B76028F80D65884
4D4E8BBE91DB43DF55819FC456B9402805DF67958AFD45DBE94E54968ABD3AFD2C456B785092
7353FB25A936D9D554A21262A3CAE1692F978F58BA5DB38A55548529695BC0A455AFB4BE3128
FE733C7234154F4BA0F00CE4ABC7C240C9283831E9A7E0BECA118792AFF6CADF3FA74A572F1D
B4789FA83E7E9881E48568814E40E4235A2ED72E8FBDE71ED0FD40D348F66D08E56256B0EA0B
46F54720DF7E39654B4B7B23CB4863AB341CB2045EF7A71A9AB550E1C14282FDA3B60D306906
09B9A2F535670C9F7C6062684E1062BF1B1675288E002412AE17FB3D63125C4A577D3BB97C12
F4CD925282737CE2DA3C2E11733BA9B5DCEAE115A0EDB3ACB8BDB1AC0F687C829EDA0022D654
DC3D051BB7325CFB66F96C7ACD1A8BAEF2BF65C167DF291DF762720D39904AE50708552D754F
8F43FC2D5B91B632D2BAF70C67D3AEA5CE731C380333E66A149E46B32412163C743D128F52C1
24CADFB65399355B4BBD4C0A3FA7C02DE323911051DA20124B77AB931989A74D584C0F6126E4
31C6DCCE725FE72F83CCD0CB35F2AC901501411270FE902BBA4E6A4C1DFDF12E2E857221702F
F0749C495E170F01578BAB3827ABAD809BFED83F6FFB243F40DBED47F896DBD37CDB7D63FD08
673E13DC24F4052E1551BCC080685ACE8D3184AF5A1818B4D48811F32DF210C8F36FB6A20C9E
239FA888CF0EE5BD1A87F15C3C6A3E459BD006A69D2C027A09E83541D4ADDBE98FD665AECC35
C311871A4A67FD59EFC06B2CDAE51F00659B4C4F9F79DD824485BC073CEA94DBD45CDE541355
F7244F5B5BCC6C76D82FCD1CAD3E2D08175A375098DD8157B3E30184658EB500E224782ABBA1
297432CC25FB54ABC54C8CD85667DD42BFABFDE7FB7A4E83107AF3AA508F9B20650AB6D01CCD
AD374C67F31A666BC1F505A6D94C0C94E4E73EFF7D57FF69F4F145504F60A032109AD829EA90
EC25B66869ED39434EBD3154E4CE7E044F01AB126454339B41193FA9618AD7B49CA2A9B2B595
684A35A5534CC19A989D5F09DBE09830284F895A4876FC5F7920061B06CCDCCF168D5022CD6E
AFEE4D796BE4B9BA38C0AEABB4B195B81B621843DB7DF74790FB46F5C07426C8A4FD0D9F99B6
C0A26AECA5F89E36FA8DB06884AC9A3ABB1AFF9C6889BAEAF13CADEE3F0CE80E00EEA152BB64
85BFA7B5AA02BEE1905EC4F666449CADC026BA91B9ABFCC5C2002950D35ED46575004D566225
82500274E2ABD691D0013343966037685138B76C4218BA60855DD1A35E4505273C2CEA443018
DB1CDBAE7DBBD948C96F5DB10BCA8127CCCAB09705EEC19399F31F3F8AA774BD4EF950ABD0C9
1975B346E7CEE612B6A4FAB61E6CDCCDA47B51D499337B98B0B6EE8973317DEC69E6F1564868
A50EFDC5086C806759EA40BA0F036E86C8E76A6346609A7D87C6FB2FD5FCBD9B1744FED5F412
E3DC55E519A941C4193F66E6E4656D04BDBFAE608110803F9C72BA22DBEB7AF2068A1425EC76
E6574311E3E1200DFDFCB4A0830AFFAC7809FFE3404AC5EE8ED43BE8425C1A13904B1F9D220C
9A9A6B9295AD0B13BBD63E1AF6AEDFE6F54DA8AC585B2FD53AA94B2CB65377D10EE13460F6B3
08BB6B3476DDA5FDC5EE7DA695EF118D79051184BBAC35EE74D6F046F17166E0F12604157979
399734F16985182FF1BECD19131570B97A817C7467520EB148C3E2887020F8C09CEDE0A54A25
4E0311A504A411407EA89C2E916F60F32C4BF8456EC370ABF03D1B2D95C991464EC963368441
1664CB33186BF6F897706F7C500A9D0AAADAB811985D1B741AEBB6593FBA0E07E004E86D87CE
A653B87CAB70900D1915CE3D19BE1969312EDBA894C541F1227586721DC33555FB28E81307EC
F93F164399A58988FBECEFF7CB8D1A751B4FEE0AD6D2638B97016B2DBB034EBD0528BF06C08D
E822804EECCD4C943ABAB45490FE47DE7584C569F9789E8C1F213C1924D196C63B3D57DF4385
FDB9BB4D584F6C4B736D32F0D533C3699E90D1E54C3F4ED914A788A0C364F7D5571EE6F61D85
E5CDF8315FDEC93DF38BC0C7E5BA9DAF885F99DFC9262F77BCD3137289B43D2C433111E8937B
5CBF3941AED5FDF09ECD0971144E020FC64656C88A01F9B749770DA845D7F690D1C12141C7DC
8724FEFBAE909D2E5383083402BF005598FA8B67301934E98FEED22625CC852AF51E7C647385
A14B49EAD19C2BBAF578D35943A3B8CC943A863187AA79836CB71DD8DBDE642E1813FF3C21C0
90F3A7BC39AAA1F5242E8BF68692A567578A4795ECF926CEA68CF77CD6B6520367BA3C98CF22
D618A2764323297D1F2E210637FB6CC84674F01C04CBAB1295558A148F7F94F64900596F834E
E0F333DF86C59200992C77DC32EB5091B7F5E1061F75EE9AC11D4F7C18D975FB2AF04245638F
02FC7475556CC1BAC14F33D0F36CD94CA20CD24AB4B587B03D968175388ADA63FFC99E11B340
AFC6C97381612C825A4EF6201B13C813BF36F5897E6FE3D95BAE2BCE401CAF0F9D7F1D0729D5
0D6496CC99DBA29E2300A5307420DB31875196A26DCE6B59453A810B704FA8ED0E654B02C36D
7D3D870DE8CE82532009C4E9F93921A7B088EE995060AC598E84F5E1248864269A2358FF4463
A50134F113431776066909C2B52CE0114D3391142F298974219ECF3506BA1830359D186760DD
C7E42E376A41B17ED88E6C429768C73F52095F491784661D89815ED8B71ABEEE1922DFAAC7DC
FB2E427C480A235F533F523C7B4CCDF7D3E3E7C73BBE89CA8B04F89BF496310792B445122235
F55AC0660CAD4476ECAB30D3FC774ECB381ABFF4BF4E50BD0954E240AA7DDF07924D53BEEC0F
F8DC680A30F8CBE921F5BCDB02BA1CAB4C15143898C5C6E9DB4B88818299C4CE29F78E88052A
A3D4F68DFD93BFDD1CD6328AB1D2C2888FAEE513E922320FF0C084E617BD1EEE5442DAE79108
B34835214A330742AE9F99ECE561D29B09F611EEB154B1498929A4A6B3F09D63461489AD6EF3
15AF77054026DE9F8120FDE0BA8012710C75266B9C310D06A842451C5A2B1AAC9433E08CEB23
A872593F49C0397A1AE1A6443E4BB99C1E24AF85DFF91C97D4F400B3572BDF28174C5C358427
ED6CF1645BDC283910C47C8C5B112802E549F1D60E96C7FB2CD6F0648F2189B7FC0FA2652152
CDCFCB1B20367A2033AD1188576017E0F1272E701A5FC7BDEF08BC4104D728074573E40C87F1
A2520B3D02EB8CB23CBAE6449EE78BB857E3EE7FA228F91E8007B848E309B38873EF3FE1212C
1635404DB7A0BB06E21EC03E9BB358643F9E9972015362C58BB56BAFB7FAD31C60D0DDA2A30C
5B5FA028896FAAF05A73AB8610BC521DF0226A922DA532FED3E6619E58D9F76F3693269506F9
CAC08A56B7EBE8F9C8759D617BF44B03C2510C6235AE30109DF7DB6A7A391342AABE9D153366
69F98D88DFB213F19140A52BD39E2E66BE39BEFE92B98D7271917610BCC240AA5EB2406570DA
33CD0B66FB032241BB148A0F200E3937ABBACC878C934BB65A41D01805285754E9A3FD0DFAE2
2C434D1D86783EE2693D3FFDDD895F8FA00F83417BDDD173E11F9E1E4119AF293F58B5DECA41
B5D6F4AD983F668EC561EBD5F446B84FDCA10865202528F60BC54003413AFE4FE3E89FA6609F
2F21DE8D5AE7D701FD349DFAE556D6EDBB906DCBD5B67EB59B2B22AA1C26726A069F08AE407B
6AA179E313A4856F5878007837D6771DA41AFDC5F9C341F5505661DCF8D7E14A16E9AD360685
7F67D8E9C62E41E5A505895FD0386DA34679735DEC0E3F71385009C45C1D2B9FC124FF7844AB
CB056798CBDD336AC5462BFA9C012966FC34D9628F962285857C14FCD4FF243AA312F6177937
3915880BB730E4F075DC14634C01317641C7E1C3994B40BB1BEB74DD2BED0D9D43DB000833A2
ACC8A6F297DB5E7962430CC727C03462E63C2DBAB60F6221BF5DD3FFB0DDE89EF98BC1A5C6C5
C59E6DA88A4DFA99F5DB8BAE29F26E34B421E7E74C2C05A8457F605FDB727DC1135AB363E3B3
9CA32B2385BA24C78A1E0C83D42C513E3383B28D9554D2F5DD6F4BA1FFAEDFFB8923C183E35F
75C57CF48893E4CCA18087CCF8C84795F8A31839EF6F6CA25CC154F6CA3970F60126B252465A
76B1EAE8B240FD387AB315E1E710A25B339DC2C0706DA7B1C47AD15D5B6837F7DBF5A95E98D0
EAEC6C121598076C6BA66E471C87F9947929E01B386BE55EFA5E6067CEDE9F54B0B278ACC43E
56987848ACD559621B05C67228622540EABE7183DBC1305FCA26654D9BBB734355ABC4AF90AD
7A7406D123A73695F77FB049B0CDD25170D8CF8F9A892D3636FB152688153F58E333849BE3E0
45F8E18A4EEF42F191FEA6F2FB54206C981FFCF827757A22E75A7FCF21459E7C42FD5194DA16
D0A33B32318FF5122EEF24C81D4C3B9391DC8D209EFF13FCB43FABF1FC67A712A53756EA65E8
1AED88C0BAE56CE5DB00F2F3BBD89AB87B9D4C12F35FF1C95D8F3DBB7AAB138E3C387C135A32
F00FED1C25B0F96895792B4F0276C3E2D702816D4A686DB2662E06451A3E1C3A5F6AE239B240
505ACD4DCE12BFFFE205016956C6D6B986D2163AB20EF7B02F27F9E0F3518E5E51D7B8A81B6C
6C0CE8A32956C435D20CC226D0F16C91662A32D05ED7F66B995F3753D05B91B030CDE048D7C8
2885174A896F22FCBE7625412362C5D6A664D9BA41504DF972B79C442B5232B8EB90DE4C29CF
BA9EBBDFE5B37F91A630559F797C22149AF8852C5EC4AB945C8A042E5DE43080684F4908BAD9
69F290A1CA1FA0E916B6FB802C7B15D2A54C8AE8E4EDB91D926DC622DD5E42362B4BD9266222
21607EB032181D92A5A0666424921456F2198580910938EBEC7902B759EC3B66A10C946E53EE
98DD1D28970D44818C30C76FE735F2BEDE5526E47C64EF7D0D74C7564DBC64298D270B264658
6835DD7E6255EA99C66AB9817F4093FD2E219FD9E67BBACBAC0A9D3E678111BC985151D46E06
CB7B326E767512DCE309A0B40AEBDC854EE7A3060CF8418DCDEC028CE80577FCDCE3CDAB46CA
F8A84A66E8860A034A390B444552D669C1C1BE764711367CC71152101FAF804C36E90D4E1BCA
D89392929F998314FFEFAAC52FF96439F19C20D2EB9148BC6CD80C8B5624CBA39D84ACCD5525
23A42A4301C7DE9AA5637F717C46D0E57350BDBD4F0ECF575F19FE94D69C213777FB5ADD543D
485B47F3A76851E8C57AB9574A00E9A99641279642105707D75D97FD49E4FC53B79EEB0A8689
E88097CCB46CF8497977406081C7EF28A2E7169589F595997348991FFBBBDD8DEE44ACCB0C98
968A5814783927350D73DBFD9AC11A9F571AF46363E6709987C46EA207622FB319FD5519E7FC
A3DFB9F784C1ECAD5472236CC2790015D4CF9F410004EC03AA9C247483F9134E742AFF8E3D7F
62778DC6E9CC87469D083E9849490B66FBA43769044FDAD7F59EBAFD5B07A7FE75F064CBC81E
F7023AEB4162A787F1C4D4005998D969DE4C7ECB3A67861CC5E13F56F1EA7A4EB7521CF0E282
F513803658CFF5FA93EF5B15098FC2941FF4E0D6E2DD9CC056BEEF2C4E15DC0790291D385E09
1D2CC377FF252EBB7214C2CDC948A9FCBAC418A93CEDC58375E3DC347F872DF735D0127274DE
42F4E3709CD11CBB6A0320647CB97AE4531FDC8CE56ECA5CFE4DBB83B3C71BEF715ED3E0E001
F497042D7D9859A0FCFFA87D37FF66BBD4C420913CF0600FA055C3CDD6379C8DAF78C8A03267
EB381B64796CDC066833EAA949F74B0ADBE615F62C0517CE582A1DB047288C316A2B501D45A3
62B46CC674C913B8980DED11D1462B8C03EB3D93BFD47D33661C4FC89E49ACDC09DDF08B32E1
4F876BA1F0CE782F79DF52F10671BAE136A9B6D5120A011594F22864BC61600575D5D958678B
94D71991D55E26263141A80C091A2E356B9DFC5E718D0833309431DD80F5DC39AE470E1120E3
0A862464C96C1957C2CAA9DDB5FC3D1873C08A7726DECB5D73711461508D4F0EE3B3D9DE4BD4
24D60787721A2AB50ABF2F02AD9FB20E483025AFE53CCA0A54331ADE5D5859D3621820CA0E2E
3E7591BF4BC2004D0B5F7EC9A1141A36B0F1F9E32E46EA6C6730DE24D911748F83710F8A4F02
A7F5CD663967DAFAA7BCAC3E29D900677EB2351CFAF46A773D363CB7D48943E1E245068B8F4B
9434EE8F820B79832A8DCE28E3E36DBA17ECD3DC93F38F6BB4505BA7580B186C818A251E38CD
7DC03FA7EA1AB8D290514909F1AB56E1B2C6584E86EF32741B58C79EAEBDD62F7864C19554A1
9FFA1E73CF2C75D00C903BABA7E117E56B5EF27F53C94AE007DE0FA5726174D691F0CA7218BE
E50892C6CEBED4CCE891EFA7714804AE54761D8F0379B063B8F8037A0B488A487FA3BD0D4B16
B34FD4B3E52646AC3509C5D4C7C191189FCEF1D1131B4DD9799DF6E8A556049E28C5ABD4216B
6CE52A1ECD99432D8316093235BE3D91885DBF346E18FA2BAFAE67B650467D23196FCEAEF414
8A2D9BA1F44B3B43563450F006D5767D86D942710A820EEF0BF57028B1F1291C69118901B5CC
99907C205C919C81E80ECEB1BEBDE1A67CB21D3D7AA431E0D1EDBC1F4DEE88E91FDA97DC4C2D
49215DD18458B42106B452362956D407C064E29048513A2CD4A534062EB007216961ED4566D8
CC190F990662F6C60703F35F0D8D643578E8205D1FCB0119C20D43BFD046842D885885127653
65E7A007E770CE8E8F5B20FAF8B602E8291D93A7B56F8B2E5A952BD803C196AE98C27272BEC7
9F806903EB3D3695782940138CCDBECFCC06B8A46907159095CCF0E792EAFC60435D33BC41C8
A28617BD5A5228172CA784690311898BFCB7A7B22CDA56A53467E6421C413689CD41D59A3FD7
FEFE1A8420695909716B8ED59AC6C3C83F5C0207463A369C369BCDBE4A9C35A49301C952664B
AEF8BA31541DF5C1400B708EB3653AB8F8A7DFCBA52DB26A43CBAFAAC4960E4048EA7D164BA6
ABE831276534750D13251D9421BFBDDAC7E3A6C61948333060390FDB5DD7AB5A42CBE7B00367
5AADF5B52D8F709E45F66593B51519A4B37F8D0408554DD87783C103C31186E170788E8E4D5C
2D1368D35C90BFC155335AA4585F371BA0D2D36C12F70CCB54DD316DF4A5B928CD36921BDCD2
80996FF337E7AE9C4C0DA2ACB795614ACCA8BF9C5F5A270198A99B0BA923C041E65D34D346B2
ACFABC9A68B059FB4EDB2AA741A93D768E5FF077C0CABECB321866513057B12B25613F5B1B34
78334FC0FB18085E27A7361092F84F475BF19FC88CB9D9BA18AADC63AC383CB8266E01374F9E
A36AADC06168E4772D6EF439FB8FFF2EFDDBAEDD8149168F8525EB7D8260A1E9165511AB194A
91CF9358F1DF26499505F3F2DFE1FBDC2E28C0E5CB48BBCE6D03EAC7A02AAD6DEEC7FE18703E
6DE77A677E9C2D6D56EE24769908189E8ACE09C55979830C1DEB6D7D00F931888C2450ADDFC4
15C25DF4787597D0E6499D3ADB097738BD599479CC4E3488524983DBE2BF7CA9DA2DF888C2A2
4A92B597FB8CB9B285A8201AA1BD6E3073C6B4828984E3EAAA4123A0C9053813FC43CD724BCA
03CAD9E401ECD7FEBC2C9D28363BC8F058AFE54E479D1B518061EAB166EDA2B3A0BFCB5DC88E
BA7AD44AB66A74099007FBEA682E45DFE3E6F36ED2F18527AC2A3443897F6E1CE8DBEE7E03A1
C2D78D2BE6A6E7C6F43B828AF56BD8A86EDF9BFFFF971E1A9D56EB626AA2F112324A53AD874E
1B3166EE3AECEB372893205D3F147209C9DE0BA3AADA432773E150617A6B7E4EA8E636F99BE7
60B74902FEE6ECFFCFB1E039BFA7C15E9416CD2B5F0EE6EC50B42351B95B18BC1451F468092D
4F08477516A287D8020C67C29D0CDDFC48838C99B8166C20202D3F5B8555AD9AD5DC2CB946B6
B97FB0072EC9165EC95ACBEB8603D7DB6760B9011A68000687ABEF5966C357EA1E0F94767E2F
601DBD9F9FC01699BB0743B4C369B7D2B009CAF12354D81F73F1B1FBA08623B38E106CB11FFD
6E7A2B88F1F5C5C9380EA7159FF41591EB7E67FA45E4C4315B4708A5842A75B1B9C1CB4AC492
C26178CB5DA50F0E9571F9DDDC6E223B34006EBEF59549CC34548F815BED1B123B012BD2A6EF
67D97FD477B31C7F626FE9826107AA9ADEF80C1A36187E2453562217478157E3B0144158A69C
658517D4CB79600C700A2509EF75A45AD060D0294AB4BD9A5D2CD590340B79D4D8408E856958
D0F403F696B543195888A2DC7CF4CEC3A102814BAD5C169C3C911CF7AF7858ECC33716870D2E
CCBA716B87B796159490F25C027D3F04717F355DAFD0DA4737B7F72DAB5D1CE95D11B4A8832A
E3563F41BE06ADA6F45B38EC1BBF9FE0525FD46F0112B5CB0E947A701DAEE6664FD426271BB2
B63E4ABA8FC1037F8BBDBF97D3F1EC8C98DB89B3AAFC6D597EAD9EF2347CD5B3874138BEBEAE
BB2690B8539DBD000922A141A7A6A2A74BEFD03BC165CF3C7C3B3F49552193A9B453A37D4F4D
0D9B8DB8896B27951EA7103EF7FCD483097A7997AAAC483762FDBED0FA53FCBFC245D32740B1
759947C74E3B19CF333F30B131A65784863F93F8DFE7B7309BD5D5887E943804C3B3B8C3C4A8
94BC3145AB7BDA6F33A0C72D5F70BD538EB8BDFA06FFDD053E6152B10A2CA929E9572783B01D
307B50E86A189F747E690DB2D0B3AA5590FEF074A2515F9DA7635EA85771B45EDD4A5CAE324D
81877E0B6E5C2157C03188725BD5924364E0A12350855E3B39C414127A33361DAA5BADDD1D50
5F386ED72E80CDAC8B0D9CD6A92C687F913D617A9295F75DC3C4EB08AE11047AB7041DE8EDAF
E7DE24796CCB9D44640ADA774FCDEB8244C6672A4AE9B282997C5606423E149C4553B9E3E23A
2E03501A5A8BE7AEBC3C16B079C38D2A0690ADB258C414A44C2E080FEF8198107FE7B2A75D89
B4B097E42AA237F789EA7727B2B4BE0378D5DEC71E7062B088A76E92AB2EA36CCA35E39D8364
70B3FB7A7A1C07F37A9F37558C058582AE3F8EB48A11F9DF0A89796785D238393580ED4D425D
B670687973E30EA79C5F778B42BAD782152CFC55E0D4E9B5F8F57E7627EEFBD9078A576A57B9
5E676B0CBCBEACC8C685716E7A925BB69072C9C9F94724E389D723EFEA841DAC245B613A3AA0
C6CADEE8CDC90C7881CE3D7657B16594740CC202D4E809F38F2CA4B219B928C335B51705B957
2459489E1C176FA365D867A723B699BE25CE1B51DADBD150A5CFC7AF8F6FA901B7F32BD2758D
A52601332EDD0E1C2D334B5BA3B85CCE0F17D8ED535A8E4A9E6DB4F279F081F2BD2BCB319DDF
5E4A649EA13F6702A431E9C6509AE16F361E702BD804FEE570BD4FA7205B3B2531382FF34E8E
F8C254253584CFFC2E955CA1BEC100A9A0A42D3F1CD1DAD265F9364D1CA695DF664856D6240A
46CC6473F64BF2608E21A184A475AA145BD925B00ED5CF2D4E845B3764797F3BAEC5FAE70C5B
AA6721A0C0571F5864C8B2B2B782A4EE2DA6A91BE91F0A90C6D906103B07CE270FE326711A37
F52D3971C7B23EFFA647A2131980D6825B3DC2E2CDA81D696F9F84793FFA99C6B732939B09D8
11DA361B87FF76CD0F93C965E5292B7033870C44A584B2D2D5725F3C3CAA3713BEB980741DA3
DD6BBB035F2B998D8CB26FF81E3FD3BE87DF7501730B30ED40A1328B8608E0F0C50733EDCC10
AFFC4960B25BA762068BC7F64F878E2641D6077EA532761DE0DC35195DF0F32E410C6BD0227F
737E9167FCA17314BAF216B1A8FBA2DCEA54A863C384722376E8818D723F2EE9BF382652CE2F
635A30498688A711DBD62E9E6E40899A848BF8C35F9D5D5646510113AB8630014D640EB1937D
94654050B59DD22BF74B0C8A116EC54A108E6A6CC82E9874B0BE04191E9FA3E7F2072EB17F72
3FAC1BC71006597B99794AD61A993C36D1E5250C996D380090366F1AE783704041FE9BE38195
1C34150BE82DAFC805D10F73B6D0CF5103FC051DDCFC5AA91F5D7E8CE73C39EF9B7B0699CFB4
0943BF950B5E6750C0DB54B476CEE4719AE515E40A8EBADD57F80A6DF09EDEA191B00DFF801B
2BAB79C5657588ABB23584CEDB768DA618BD0B5D295A128DE877606D49A12FA73BC9DEA32310
0F2960C76E6E8B30401572527611119C3EE06D3B34CCA355B4B202682277464C8B6B197BECFF
0864FEB01BC53792AD1DF825A73E5F92B84AF103934A985D9C65A24FBDFA960325C7A73D2989
ECAC24CB3F8EF1C57EF43DA81D0B64A5306837F4361D8BDD4CFFD94D6DBF7A5F5342464205F1
B5EB6D724D9409ECC3166F3518B501750E89A9B7110FD7EFD43AF3C32E7B93BE8416B7A540DA
EE25D1497DAFBE6D30995C0643431041D5B1272BBD2CE5FEEA317B42BA7E5910F75A91525C80
DBDD061D053815C0B251F1BEEBEDFB1567632C46D647A745A2DE0AA08EE35FCBF4D3710C8F5A
A6A9E0DB9BB0962CBB7E4177EF3FA776DCEFB988833B0CFC39C8C6B7C89A713DD018A5D35126
4DF859AE5903A5757D5F039B3D65614F2597650BAAA3188D1AC6A8BB1DDE7DDBAD1EF9C4C980
3A3148F3F4AEEF706A7094175DDFDAA29B5F8A012FB8CB301450B4E78B58259DE6503679955F
5509F5025E4C799C55F0CF271717A296B096F03105E61DCEBF5D24698A96BB364AF38BA20D11
7D59E86030C17A30AEB4B1794A6D72E2B62DA0DF92047D6985DF1BC950BDFB38AE13E612E183
6DCFEFE4003A0F3CBC1A7C3398C0EC71A8AC8DB32BF58969635E46788A3DFD65EE12523B8FC6
70A727016094B8381403F7762D6E4329319927DC1534CDB25F620D3FDE4383943D9942F75523
CCAD080F5B1CA86159B6956CE56B5FB8A07B33451BADD7FB9ABABB37A10F04B58559BCE193DF
AAD6A9F7763B11167E0B899B5B6E4591608E6B540A81CE22AE3C151A215F316E89D2D4F0FD87
D0E803EF412DED542C369615852466961517B5C77DB3C39ABBDE32E1F503476A8326FBB08A4B
C9F04C202CF5A1896BD05EA8BEA583B10E5B5AD45963FC490BB9A9636381DFA47B42132D80CE
66F4BB1BF889DF9600B08038C1FC334E69A76D7FF65144B9E48D939E5497DC67D5374C4453BF
B1A9FA6C6685F43B7BF9AC97298A3320DC74BBCD9A432B5D8F8F1CDCA9DCA04380A2D7B024A9
B0E2B4EE3E1325B3C0C4EB2B8A20C97D5DBB73AB15166DE381F7F83283F69479EEE7CD091F8E
4D6DD13C2E78E12FC59042701E7A3BEE3FBEC32693FA48EAC541B85465B9C62D21E71E463654
1395D0EC9846F16D599B28E53BC109C34F17C2A85FAFFAEAFD20DD89D53CF5638F9978618B61
0902E38A9E5A5D6C5B00264D30B4CBBAA2D511646B2CAEA65E716F31B1EF4F8CE618D9E61DED
2BE5D247D4E5FD9C51819F2FFBF3C6702210EE5509C942E781DB52ADB4A65F2DB3688F419447
0F33AA11384BB47EA644E48BC508F8C4F561FDE0B5879FC642A7A9E89F94B273892DDBC44E59
DC35EED991B4F4EBF0C9CBC525C572CCE29F3C7EB313D067885368C2EE54760A151982FDEF76
B90F50E763271B1FB242038148631DC2BA1A3204EF1206D0AFA7B78378AB031F9069B8639FC7
40D165EBF123F69A5F0DBEC5D7EE2016E262FA4B611C383E2BDAC77812774DE0591248C23038
B9CCD681FCB91DA754279FE274DEF1F3810617559F2EB5EB47FEDFDE4B5E6DCD68951E685AB5
06EFEABB70343C619507C4B78CE07D198413323BD6A4A33517EEF599D6F71BBEF63FF166D35E
9D2DBDEF74EBB3CC0A316D11167CE2F226F9F1FFDEBD612A2452934CDBC9AD1FE8FED8406FC8
DFF39820D6F74FFE9B4B70DAC1FBB22F5ECEFBD7591DD4365CCFD300AD9544C492A899173611
CBAEF46FFAF6F94367BA0FE02E198290BE926B80D9B626D15A0AC90D5C0B2A28D55D1323E0E7
FB203AB131D783F6E3F878D1AD7FAD7FACE0A9A91566A636E6FC041986FC25E6D59FD6D535FA
42C1952E7C0AB503A57DFBCA3ADCACF5AC748583F112F3EE9DE553112AD7ADDD4C15DB76F3A9
10058AEC9DFD32C233D5B9498C33E7BD33611EE3DCCE65712DEECF4670B51AE23C42E2512B62
A38D37201AD34EA9ABE5F0B99B223DAF1F96C3C1D4B2EF67FB0CE63B4E1C6EDE64A5D30DD3E1
0A6D4B92CE81C7DC1EEAF96F1F1DA540F94D6C4FDFCB72D408647A4877B54BCFA2626D4E110D
E46938DDD15B14A4AD6F8044B7AA6371CE2F2EA1CA4A13ED372CE415ED370F5C6B2EF218102C
1A338C8C4D6004F4962065A028E68439AB20120B5846EE1B66B4396C8F3C73B9A65754D7CDC6
A5AA7E5B4B7A179AC0AC55346E084A7BEB4E344B817E1131C2AE566AD6115AEB56C3169DEE98
C52EE0AD6F4DDF4B05FB7A6B4D672D1328B539DADE8945E8E39873AC6331727D144AB149BEDE
92D7CDA9FFEDC8821A61726ACD8326AE6EBE5FC4FDC885BC16B1D1C22C757B8B594B29AFFD48
981DB54370FDA73FCFAA30DE3ED760B144404F38A4AC17817E52B0856ABE4459AA3721BDFF5D
2751CC876C1BB1FB64C380DB6181E2F3729F4AEB99C49B3D128D2661B2050DB77992E189DC35
5BCB9D15A819D60E831038FFD66708F50B2CD66B62BB8092A13D012FC70C815923E08297C7CC
FAAC8EDEB41A52F041777881D67B19867C4B766C5BA0D18551CD1471D53489D807286A6BFAFA
46271735B699E48807BDA0C057CB88AAB5279F5E6F7ADFE5F34BDF3C81A1C5C83DF44D07CBF5
464A1E0A8F0CAFABFDA5992B64BDB9C13E743F44C2F4AF0C9A69503B14D0BB12D467F62EF24F
8EC8BCA1A1D2E4FBDDC856104A67946D4A87C08F38AECAA481D401A98C488E622CF8CC0B3205
1AF70DDDB4E73888FDCE173D8F5FA75062B974794E9FBD6C3499A3333DCA75C681C38345CBF0
75F6B8F49788DB4C4DC96B93F7A166D33BBCF7BD27778ED38290A439C1974AB944D04FB6151F
DDAE7C736F1B0A21DDED2DAD0AEDDDFEEAD170E750F81B750ADDA463B2DA2693BA21197C9625
1CA59938E82E5BE892C6C659605C1558A6FEF114E30F0FDB712BF1DC93F2F3D876CF694C9FB3
1622FED5C30CFECAE5A637013C3036CDE5CB296A8710EA0141C47635B6758756CAFAB2A04B92
05564C82BFE89649B1DB5D5F255F925C754A4C3E81D0D040F6A5CD9B28D071687377437A47BD
692AE6867C940BB2CBD3E93EC8BAE25406DCCC2ED43D1F3906E39FB01E1057A837F70FE104AF
10E6AF578B8F557B4522D7BA0CF1C553438B7621921D297FABBBA97103E7F6BC35E48F745AF5
A1383F71CD46EE88A33F3989795F802F0CADD26839DF33C849032D7ADF508880B4C1252BF9D2
3F025344BEBEBAF35333E02DB37FD3F64CA9F17B789D55C7CE6DF7512660D4033C85C44B7144
46D9EEF2839E3D953F81BBB8CCBF7F4496E197786F43CD1CDC39602C40B402B7698E2080FB9B
217433D390BEF7A1B637EE1902D810B11BD1CA27DD4FBE2C58640A91B0229FA8F4C45D5660F4
72F10704E9B9970CB77CB14036C4D8603098B893DD139735CB18945BE26755506995DCC27E9F
94D1B63659B8399E9EDC933DE2E3DF9D113C1410898E2E7A2E40736A7FB7E9979FB0B5FFDCDB
2BF0C4D699EEC0B3D55B26A3FAA6C9E9D06ADB9F4CC1F14B0708986DD9F86601CC4CBD392B36
6F8B650B855919C8FA8BECC44E5B1DE3DE2453FF62E0EEC0F0CF86D2E165F1145D5E8C2EFBC0
9D96F537505EB861BE6D21E9C054C39627C804F05966EC1DCC8FB8558696EE825C11BA95CE2A
7EB40507EA5FA7DAB4DC07BB973B935DF8ECBE10DCE441B82E982FF92264975D92C6A4C7705E
90585A308CDBEBAC9B467522015D492B0A705C10F6C195196AE3C532913ECF9BDF3389A957A1
D6F552BFEE7B1F9648915AC3542FBB1A528CEC05370B2BDD7542685A8E4ED35BF2B8772EBC5D
A1FB2E09782EA61A2B8772939F13531140277AC633BB0AB6F2D237399C78CA8DE0E2E271BA8D
DEA24B3ECDB0F551107B3220E2C842F8082A75DFFF85DA55AA2D40518D7401179E6BC7E033C0
92E5F71D8A48F571F7C7CA5B6D0F5E4A109F39AA559CD30EF032766F692E47BF0EA5723C7758
A1392999A28F042005B7E667E62A09CD60F807BDADF794076F23211196024A47580DD9739FD1
0E53D04EE4EFDDF89FFD6E07F107CCD9634874E156849CCCF624FDB9C85145CA2057FDE5CE44
8E4510EF1B3FEF2A57E0125B37DF08CF935EE8FA0BAB7CE745C8CCFDAD35CA730A284C1DB31E
F26ED4B5C397DDBB2A741049A120AC4D8FA9A2B91D3EEA75D61B28B19FA8789DC945588F17C1
4A81BABD6E0E5487E2BA1AAB46994D69F7E5A928CEEC73DB5317B3D58033895595A1A2188E45
7C1C8845CD7312029093574CFE59D8C25DFB577C949A5E4E56624BF9942AE6F8970A1BAED98F
135CA7565393E6C4F80F1A81930FC3F90342EFCC0819DD02CF88343D4955670DF65B59AB5F55
4BAFBF5A9404241A3274A7D2C90A1E49ACCFAE2FF5D9624E708A99A4C8104B76F8EFBA7A4753
05BF47661FFB2FBE93858CC5039B3279626A7F7B9A1E210662EF101252FA4F38DF01407F143C
007DFCE4FD95CA4FF7993FEB03B7CA5A6C1B6C770D684037AB195AD689100484E7D044834519
7D16231C3C129A3372574B1D261B458247A6604A8C3842EC7C6FEA54AE1EB01B6E7E922F28D5
6566CA27879BD0EC14C7DF9562BF8F934321335C26C8AD8477DB8CF0E267CF8BE322758CA333
7F010D2CF9C2C9BF88B51ED703E036B0BDBBFC3F92D7E0B4601573A0218552C5215532E9DCCA
D95BDD11A0A9ADAE050C87364075B8072F819F49464E1BFD5EAF51EA922287EE507223F017C9
E898DF5E29F57AF38DD390F93F425BDFCA14492295773B5AAB849002C613A2B8BAF474C7FB1D
BBF6B1599EFE3EC5A49F72A3B69F1F9073A5CC06E2B29FFFA1B689BD8FDDBA766254F68B1D85
C822EC842B897CBBE246CE8CE8BD44E718B10E0535423DE475643472152C4C607486AAF92A52
574BF6465DD6231305CC359045D3641076DBE7D55AD508D7383E5FAE63A768AC188DE72F7F29
4211E87A36F2F18015A3DEF4CC333A25926989AD4CBFE49FB9CF9FD2D9BD167117882F707842
DC72B1932492BCB7062D86EE51437B696BB597F657D482CA902E779B52C727F02010A21C3D17
F1750D4669743288DAF186CF289C59BB4E0AE268FC305ED2CD69EAC3047C1AB6A6751DC634F3
71841623B74EFC893094EAEBF841AC1F5A160427F3D810623098C1F36E0F553E51A11B0248E3
2E1E9B3B092FE2A6B785BFFE8BEC4F8BCFC164B5D7623C123C8C2087F256E2F9D71C363CFDA9
D097D8CA2A02E48FBCC9BFD5DE8ACA3D8461D78FC95CF53AC18EBD48E959E44B1039E84C7426
576CAD6FD4F07A9A328E86061E8DABECD9D87328AC532096DCDFA647DE1C049FA27EE5BC7717
22195AAA84338E6D63507BB45B560220FB24F93DECE0FF3B043D1912B28D4D913888E424E6A1
E139FE7A7DE79DF5DE84E31075A132179ADBEE07F794B129DE7BF93E2B45BF0100949B359CC2
EDF8B9701B4067DA2AFB6AE00EB03B79F2C0EF420B42D9FD22AF9FA5DC68BAF29DD90BC13826
2563BBECB07781B9A9FC1A98A53F9036B10C49123CDAD4EF342C5C0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: cmr10.pfb 0 0
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /ff put
dup 175 /fi put
dup 176 /fl put
dup 177 /ffi put
dup 178 /ffl put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /suppress put
dup 196 /dieresis put
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 15 /ffl put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /suppress put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /exclamdown put
dup 61 /equal put
dup 62 /questiondown put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 125 /hungarumlaut put
dup 126 /tilde put
dup 127 /dieresis put
dup 128 /suppress put
dup 160 /space put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueID 5000793 def
currentdict end
currentfile eexec

8053514D28EC28DA1630165FAB262882D3FCA78881823C5537FE6C3DDA8EE5B897E17CB027F5
C73FDBB56B0A7C25FC3512B55FE8F3ACFBFFCC7F4A382D8299CC8FD37D3CEA49DABDCA92847A
F0560B404EF71134B0F3D99934FC9D0B4E602011B9CFB856C23F958F3C5A2FBE0EF8587D1F57
74879C324E51FCB22888B74F241550D7401EB990D4F3A7AF635198422283CAC1B6CD446DDBCB
D915DB9BFF88844E784C6BF7389803D9450B0C21756A017306457C7E62C1D269F306BD3402E2
66DEFC3B5E7D8A8D2F5BF0FE6DDD40D07391DF4FAD4A6018DCE29A2B8F692B29F2023A7C0E66
DE8ED85C14F1F8492167357F51A7E84CC5D92E0FEE4D81CF7FBC8DE52D2E7BB57142033993F9
C08C315ABADE8DBC4A732E84E142D3BEE51557910E12CD8AA37C459A5E6B7F5269F59078ABA3
BE4641A11AC48D0B625C8325B38EC08E4C9E5E7FED976A5650D99D82114F449B9CA14C4EC957
702295A39A93EF93F61899B8EA06B092C3C1E503E6E436E0A9FA22576C8930AB3DC8C20F5D82
B69CDDF8FF4DACFA9C54BED5A3AA3EA5B129FE96BE632843B9B6BC91B615581A985DB56B1E01
CA60EE69CA92CF5C0882ECE62EDAD3E106D835348822400F0B66AF658F2AE56ED08F8B001057
1807009B73AB12A8CF14CA6C71F03C2A48C500F9D62266AF154A6375FF600D9BAC3F05CE3414
2D6867A79581C533176BB2F3117336671E2E44638A97167E2EA9644E31EA16C2AD2990EA33C5
4001E0C8156E6DE8AB6A4D40A7137BA275F39589FEA2E2DB8256ADC103D6F9CC038037A47E8F
D469C5F98A5E3C15BD4ACE40D340018B1CFF7D1ED8ABB0AC57B5B5A2C20A51957B96C453EDB7
DAE5AFFD91A46D938FE0A13363001D844DED4323F1EE6D30012AEA19B024A552315505535C85
DC26BAD31E09C50E6512802976D298C4E90D0044C362E6BF3AB362A454EE93DE25CE54411090
C29E9D75C80CE26A84404BD9DE3AEE0E3F921AC587F907572B8354A5C3165EEA7E8B2BA4E333
802132F760B41A900C698EB3D2738BEA0AAF7AAE96A558F08B61AEC7C7D65B2889BB7B99800C
FFEE5BA19AC90FCE11437BE1DDFCF0BCA5670B543B9644A71C8726D0C1005ABDB96F6E0CF7CA
AA3195017CA81519151C2C0B04F81E717C0691B63A76E9B25329CE2625B711CB7BF99D23EC2B
B5EC8AEFB8C1A3B422AD617B3DA4D49685FD44CC21A1FE5E1541163AB3E1594601D63C7E9880
1D7746474377CE93F81404F3570AFBD5DBFE77578605917AB96963987E6EFC2D3F99FA56ECAE
6422579852567F90CC90E4EF6D6F71D1858270205477E221018A375CA83C572B3F972C5181D1
8643CECB04909D84CF767174B3C0C8EC69BF1E9FDFBC0FC7ED97EC67D878EA4DDAC8CAA522FD
C6932DF721B81AF837AB56B547D4799241310D6692918FCF8A46189A78D6638AAD7CB4462D87
74EC73D184076595C94C0B4A8233CD34F2D92F6FF94F941DFD589DEF2CE790D5CB2159B95333
8C7384CB68C11779120A68BFA20B993D8C0313987EB96A2EAA2C11CFD838E6AA48A89E6DDEF3
FAE1A1B078BE9787140270556A96E2725A8CF1AD46FB52938900730154AEC60F544C3D49F176
3861F54B46A3B70315B46EBE51C42FABEA87A5339ECE2B64270749188D73A07E0E3866EF9AAE
A996FA92AB443C08FB8A840DED26BA68E94CC23CC1F6968B0F3C7E8F4FC0C5CAD0F7A332E7F9
55287ACF2485539C7B652F7A29D9E4AEC20A8E023AEDE26BD4C761BD3561269FAAC6FD5A651F
FFF9211F8DF220994DAD6D105A92D5794CF2AA526B2143C7150BA584A2B597F6982403D93073
CB066B569BACF95DA04B4202BD24059A8DBDD3ED8AA9E89B2788F3B078A81A557BC743C12A1E
00FDEFFD030C032E81DE3142A106C0EDE1BC9D566440BCEC4260295CEACDD54BD0E25F6B9DD8
FAC41F453BCC731777E1E6ACAF37A8178D11BE1BEDD6681815F3D5EE8D240B7CE9B14FCFAFD5
04216F26DC2827FB0F6158416EB24F8BD7616EBBFE9378718824CC6E51135F8F489E9A55A0F8
40608A99A32EADE4251F27FF86EC7F324DC9B534D7135E30F2EC1B6D93D7DB919651E03F30A8
82F2DFA457D307F17751532AD70E632A04A63CA1A507FC6AF4073126BE0127D86974B426F489
FF62A53C1986FD048AD76454D42BE16A6060101239B138BB638765C46EB006F7F8DD312337BE
08D4381272FCEFBD74B7B2EC098B436365586A832721A0113B2BF1D853FA8B062BEEA25CABC6
0998CF4D38B49A3F4BCB372198A196C9EB6DF2CBE59A59858AE212031C9AD7FBB9C3E8E9E6DE
45DCCA521F3AF361282F7B3EC507C8B3AFCF18B9678EBB2F11C01C9DC3C4FD3134C5A3DF6B6F
4C75EC985466C4F505847F1475C91E5D83A6BF754837DA02F9E868EB0DD76EC4D31C8B1ED935
ACCA73E1CB9B4192BB0A853F947228C3064E8F923A9133EEC9C52C626E29689DD54FA433B970
2636FBD87C5D81C4F278168783509D5F4256C77A855C97A48D18DE6EE1D47C7C33E9AD227ED7
02F120303731BEA6F3055D764046EED36A06C75855A928084C5773168AB985DEA7CD767C780A
91E740E6E088CB93D43A489145030221DE0E1B2DBE954EF414B9568F3B1C5329F5FCBEE927AA
23309AD22E10F9349B6CADE7A090D19B9460405CDEB89BF1617B2C297AF5629458235F1B8C95
F5BC442DEBB34DA5D20B11E96660CE9E5CD19A84AA54F42B106FC87C7C0405B0CBBC249950D3
A7C353D691D77BA031C840C8F43A220CFC749CE34C2791DD627CA074753963D2E59794496D55
AEC96FFD48EAFDB29F8ABC8D91932DD5B01F65EBDA034BEF3C7219E097670621058662C5BBFA
A939DEBF999E9F68E5C4E64CBB0774A9A186E741346103865FEFB088AF547545CF7763DA0664
96986377B587EFCA5C9EDF22EC13D1AA6F483C4A0ADDFE395F83534D7BE5285E6A207D53A8A9
60ED89E9BD27AFCBBDA23B2D9876A8D8CFCC299990D521E076CF8387D514570871376C21509B
95EA15CCFC7278851F14DE8308B72E111893F0338488BCEDD0F2F8EAF07326BF97C3727459EC
89F8121C96A45E3DB1C63D478D0A6DA5F5E6834938EF1CA41B910F25A82F2774E3CAE9F1909D
BE21EE8E003E27B84C43B39FE247B8E19538648F246D325357A246365B9B2B13DC68CDD7E44D
99D86C642565B1FC376D2E530048B27A7C44B6811719054D3AC99CBBF5665AE76F11E2781B8C
040F73454BC794B1432E6C3A58BBB8CBEF345D3178C8D01D6B26BF7F485A5C3BD36DD01F39B0
34E536ABDC6632EB4038FCCAE0453E85B3BED8C3D4620A2AA2DABD0CD93090E9B8E964C491C3
AEE45B592E4EB12970647E2A5E68BDA429F53074257C02975268F8C28F06350C26646D658008
FAB0562F40644EDB0FBAB79826B16CFFEF1302C8A13173CC9CF7C8FC906693E486FF096B2D18
E96841A5FA8A34A5B4B68462BFFA48102464DC22EB50F1F80A26E929D4CDC4B90589266915E8
433D46D433ED8920543777360D25546794CD9A3A1EACE8AF188CC18DDB9DD1659F9FA462A5AC
E6A6AD068140356E8C1E48DEFD171947F78F086C6E267FEF13D16EE68D0FB0AAE589F7E090F0
88FE80BD6CF8EC0EDD28C735748FC6E7FD421E33B16EA6319937D2D63A94AD76F95B61813DB1
81A113274D5F3B4DF5EE90E69FAFCAFBE4466F5D5F48EEA62A7CDCD4F9418437707F706B290B
86C30FEED99522875EF5E2D491920983BF4E9F1C71F20F1B9645E30521EBF2F1C9010103C60A
9A6DB7E6297F7C3E29CB150307FB7A1A1A94710EDDC6AE88742CC7044492DD7A217583C99A6B
E7B720246FDAA00683A3B82EF6BFA87F2FCD741AD8BBA68B751740435DC6AFB1BB88D1593DB1
52CE92C19E1AB29C8E8FE89477CDDBBE29B8DCF1EA6F70990BE9A0425000404F2F5DFBAFA35E
70BB87066464C992343E8BEC66EF483DCE474F3ED7953DC1F6BBC14EB3495704D1765D0B3285
A05AE494342F6B70D9A4241291B3147C77A8AC0E08E5BFE60C8B6E2048876A6CBFAD8EFE4860
95DA764F4AB9E4D8153F89BFA2D9BF2759826EC18F64F1AB083949F4BC127411A477D4C24D7E
0FB0C96A96A31386CC5892B398D48750FD09638BA6D62CC685688E79AF31F13B744F395984B2
0AA483FDA558C6A91CB9AAE9053E7A5B5B8659BF0631C543F4C370FFB006290353908786BB5D
B373233C12F3506E2C4DB0D59C1EA8EA75A7662B90C4AC1561303F4FB8536C1534FEAE4ED772
DCB49734F5285FAFC99FBB081ABC3DBE87180D9BDE2A844B054D8BBBBEF5CEB39F5CADE252EC
6164A74E75625050CEAB8FD8D8513550D4420FDFE6FDDCBB816E204115614FE82CEF36DB23A7
DD31CE6FC923B575EAABEBB5820BB2739CCBB41BE2A4A95CFFEC9332DACF05936A3194AB4F77
39E5B4A868A7CAD3B1D940056F84B41E81B072C02C0D0BDE7C64DEF54B1097F68368AC0B39E0
DF5E5733FEACF02EF12A1CD0ABB0805C2F7E7FD7C824D9B348E893D68F3F31B807829015C54B
8D2AA7E8DAA14A364428F3E706FC649E274E47914452704B1BC56A41CAAC736C8826B7BACA1D
4FAEBFEDDD0EE8FE3BCB53EE291356B7A4B699C33CD7EAAC34E3B92E7F3ABC32852453259908
74E34513647D521ADA13F83584CEF20DC503EB352BF881AAD4C00894CC581A819CA7CDE96A9F
8DBFC22767B215141C8677BFE6F1F0DEE4254986AE871F87BCCDCC10E2298BBD90A625337936
3FFB2B093C2F54001070E655E9C4CD389266DE373971BB763279F9EFC4E5A223990153618C66
54B5740049A3DE2A80D613CD5AC5BACD34315C43996D1A420DDDFE7365060EAC81AF060B8344
3FA8176CBE3F4C2EA819B493FB5B4A2E4A0039F028CAB0B47FC70F178DF04C7CD4DA22BFBBE5
344C9E9CDF1020AC1A43C8E5B9D19B621565A6DAB2B1CB6CDE2524B33FB1DA6B5988F5BE4E73
08A17C73E406DBCB51FEB3D79B84FF8B0284F7EA92BEB9CBA6CD5999CA7DD20EC02E000FB48C
DCA51B8E747C0E25B28431543D9095482657364ACC1C647B2140C502623F7B9E3F335C2E44DB
33DB82C01AE27AF66BC2284971A5249911D897263210DE4A9A65232738D83D10AEA8C5D3C687
128B64EAE94D6FB30B7BA9105BA8E01BC9925C312CCD8BD273E904D8FF13F4DF7EDD21C23D0C
09A32A4C90B0577ABE7AAA53E836CA60B1697621049BB36F8013026D77910193742725574222
DDD3ADF4E872E6D57C1DED571A1636893DD7F49D8280233CFF4339B075628AB591783783548F
17134E69EC5EC25B3B8036039DA276BA1507649E7DF1EF9E29F0AF07BEEEA346D470B4F1DF92
5040602539BD1D8218384B53BDF16C74A1A6BA2A7871B67E06CCC015BECF2F020295E27CFAD6
2D3EB7831922FAB24780FB158C21E769875373606E1BA9BDA9F15352EB5413FFE162EB2AC194
4BD7D980D232A2F3DB3CD38390E0DCE3241113CEAAC83EE29B2980EA6DDDD4EF5727024E4343
AFF44318AA1382662A78A41BFD6ED98264A6B0BC629CF924EA0A635B0885D682C26819043E39
ED44241D4E8B50AB92256F9431A8123117D77891AFFE4E2833BC0517DE287A747E88409CC30D
7D098A4FC80C6D91534304E7FDA873FEFF704EC1F7450226F09D5E89E245622973D9A789736C
71E6651182BABE81ACA969C62E1458FA67A3B9D38CF364F383E719F7066D2839D95F262F8A5A
F87DEF903EC3269466519E68E857088D318839FD0B0E51A6D358A93A543E2401F57FF7E970F8
BB7BEB37BEACAA000EC58DF62D2064EB45A81144C146B744B10406EAC2C1E350E2DC328B6A83
9DF820B289A84167B404BA1FC63E453DE7B58A9EF959D7E2FC1DAEB5CE90A1DD935E8C5D7DE7
E2684FF0502901BB451FAF9ACB439F548657E3BE938E7A2B5924DDA2E7010CD26A181D84A5D7
5294F6E56DFF88F3C207C9D457CDDBF2D3037AC9A93CE9D53FA0CAA4F21057762954580F0F2D
47AF43D5D7679A9D44D45D682EE73493A2B8C390E24EF27C84E701C879BBB1FAD6BC8B89BB27
959EE86BE486786D1C81612D9546AB59D5216367C027B5B0F51A41C9AE2778A04965A846990D
1727F3F3E09AD0B913C9742371AB5669A2CF4863833A19CE69FF161B1D6BB0CD61272CF94526
4584ECDCD290E2767F087A836F12AACBECAC49C3FB28A605C6220E8233EA2C9AEFDA87EA2CF9
D3D52FD6D16612AD07279DDFC4F20B59C905A146B1F4A51547DB82758886E9D3609B495BD941
616057E460B94856191791A2D16B90A7C33534A9DBAE17C96D68E009219857FBC92EBE189875
EFABA56704CC9305DE0D32C4CA5293B306A4EE9DCBB131C128626C4171EBCB2DEE830B9BCB98
B4FE23BC63C9186C21EB7D9CDFE2E685399D57D6D1A857C11FFE47F6D0BB79839B6C88702EAF
6A59BEFDC8B35A03768AF411EA16C277F7EFBADA006619B31CD2EAB657BBC8CD4A44340F4D9F
D34007ADDDF2DCAC3058D22267490E90657808CC716B7EC3444638215495A7BF077956F16EE3
053864EBD2EAE7B210EA370D71414952F2076D689ABD98E76030D92E4D49A79734FEA3F05719
8F8DE62F64468D06D0E6443EEE3F2677049B08E8A09907A2785D91C009F8FAF6F1DF1CC39D0A
E11E8F1C939A0C13E49A448E89B0EDA7CCEF06166A8449B358B0C661E40A7935A6E4F866ECE4
23CE4C978CF749F3B2B8AAB56AEEEDD498DB77143F77B4FEDF5C6502A3D2AB4D0BDB8EE456D7
DA3B9CC800DA8D0CCAAD981DA5193A528C7B5628F065B7FD1DDB0FBC4A74C32751E8B4747206
8A3A6F380CE2258D33FC49780EF2570FD279BBB54D4246F40CFA9F13AA9E13C6CC030DC19960
115C2DAECF52027F917D3D9D44C60B0B2D1030EDC6BB055926CCC512AC2BAFAE7C12D8ED487D
D3901FC2842D3A7A69117A8B82292FEA44FBD40BF6C27686EAB94A520F63B77B82D5425478D7
4B5E4E81A8439F560B1CE7C626E51CC3EFB877A9AF37BFCC1A72D40855995DF53B3F4451CC29
A5600CEA6B2FD2BD9DDF106FB7B6B6E19477426212F3B5C25DCB1B777B643A318046E02ABBEB
67201DD98D892D6E13B0853CC206B62AC7E7D386A77C6C9A3817FFD5009D515EB5F770DCA0BC
4D9DE562EFDAAACEDE34096EF6DCEE08C735DA36893C41592443E0B69446B93EE9F758EB75C2
4FCC4E8193A1F77999F2D4395E1BD24909CB805CE3A26A47ECF376A79F480C9402DCF3A86BFA
971DB7C977F813C21AC8C071B6F210B251695A40B735D7F8E27F9DA47AF7FDE2A6E7321488DB
E7555BA82E23FA2DE3092227E1A21C5E6DF4EC83A0578B4E99FF377C9E655D7D6DE412CF0F67
D3ECA45624BD1AD4EE76AAA5F99C73A1FB470C8C7EA472890E1436BB51FE764F95810DA0C3FF
D1C3136223F6610F3B226978B8F9E35C9B09DC863C05DF439717251910A64E4AFAF2323CE1D2
A168DC57CB1F4F2F9D24071F49444B1A5C6956F236734816FA3147656FD7C5F547748AF983E5
529FA4787E540BDC4023377A7B7E248A37550CB0FD519F30F1BA3A323D171612F802068AE4FE
FF8D067185F9E5211B1218656EFFB8762824E05EDBD304B71678B3C4808F7819AF193B247D3D
7A3EE51986157E6D101C07A521379A097751CC6C53FC6AA6519E2D0093AD0CCC5145F4D788F0
46EABE997100DEFFC6B7D79BEE09A92E34BCC15124D2405BB614B4E265378126544D041C4A16
71E65832930D6F15E11387F39862F9BCD513CC611A9F9ECDFA53175DADF03BAAF5C32FCCAEFF
3446E67A62D3B15294E426310F64B6509E88D3225DF909BE2C73A9CC8CC643645B394CC3F5C6
1FEB91F1522CE9882A60504C14C69CE7089F3EE5B3202D3E5C2C2A98B8A4C8655A911EE03DBE
72E474EFE0A0B1FB9062E474DDAE008B0ACE5016AEFBB40F157B9BF07ACBCA319380105AFD61
5DA19C9F932BC8D14480F6AC4E607FD4A7C34AAC43CD26301EAACAB8A4DC8584EFEB56A2E569
5E84030F39501223DF87FD3F16D3950713C483D8164FE2A180AFD985C11D55A9E22A61F0C5FD
3A0036DC51904A84B07D409388B897FC92C1C91A971B2482E668A27386B33494F751B5B9EC4C
5ED765A88F5A675960AA7F644E77696BEE684E098C69A8119BCA27067E52E1FA95C3E54CFA56
8FEB54B92C3A8A2DA2CB44C9DA1DA7BAE1B05087D025F767658D885E89D654620C2827013ECC
B38C7021F83863313BF35116AEB2669FFABD5F1F035C23BF0244099A32D2FD13EE00C09E30EA
3BFE334227C6A143CB716A3C584B6ADD52C6370F7BA917855F2295B9DFF2BCA64A0504D0E557
861EFB856A19CE99B64EB7EAD11C2474E79D5EC30DE5DDD094AC37D8EE50C4F4D39E32E284B2
F347848ACACCF519272AA1FEE3000AC3A495B54385CB50373AB7B790B473D0449B7622AD526A
1BAC985945964D6D2B05089ADCF9DB30F1032639205877D7E78DB7F9B136055C1451663CE4D3
9FE864E02B1339006A1065FB76C6E438EB132629AF5E1FCF6022E608674E3546CB02A893B558
F3B2C76BD0A897B4EDE61A21B8F6C34FFE820D66F3B89EDEA86E13EF5CF0E33E82BAC2B4CE6C
DDDB572ED1C9AD69FF853ABC58C0CACFFC0D86D80D7C8D10139ED4C9DDA73C4B56E375CA70FC
E18EB1E322F046A4A44AD7F2731BC2059E391688C03B86B305E9BD9BAB8F3D1B6EE52789D559
A5200AC84183FEE544DB210122C74BB2CA648599DB3CD1AF261567B84AEB332F0647288F8F8B
01D5068D74D7E89472D8DF3E901F6B523FE04C519843E0B730F403BB99CAD493201F950E943D
B95FC52B13A3AD8CCC6478D5CBE5DD019BED1ACE4D02E09353E6E31B9A9EA9C76D89D9490D71
3CA451693D235A0C8B0A3DED5CF2A846ECE5CAF52627ACDBE76CF57A09CF6768D0A53906B15A
FC5183B9DE1029D19E64B64BC2E075B536663C524BFE35C9E412A7C0D23D316E0645BAA41DF9
ABA61284F801F7CB852F49B24A96CD4C743F9B1D1A69F3E30808282C32C2C4655715D8F3AD53
F3FDE97823989864479EABAB5876C77CC134EB66C688BE3777C74B3A87EF1616DDE5A8A46185
997DF2FAFF5518EA7AEC3379730BC509D09C5C378B47DA67F9F5740B641DC790766896352D0B
E0EE84D686496066469C995583EDA0BFA51178091918D2B9EE8CED4163E45FA312885A64F177
F03E6D77DD649C7D71B47FE885D72887927AC070CC64E825917776264E722AA6157C22A429BC
0D38B56E5A0D6473FCCAFCC17B4BD8860ADDB9BC33E2FDED66EF95205FFF084578C37913E205
9CB3C1ECFA4142C0A2AD1781C373CB6FE9819F4CF8E5B5774D7A6BABB1FAA71D0C96175B9DFC
08A3154C2F1AD566E0D03E6A01D3848F0C6C06755A0511948D51FE8626A32AE97CEE9C01E15E
A61A556170E7E4D3697783BD42D586535C38CCA8D543A9AAA828C4813E89BC30B686049910A6
C01D7FDCC55895A3F7019B0CC78C23925D8CC1207C51FA19E6B8992A289EDD5669C33186A7E8
38D5A0A3C101C82558785010F877B05D943C5F874D0524622D43EEE25CA87C2AA4553804CB6A
D1508B9406BB1CDF868DCFFD19483BF1D8EE2844E62A2E1CD09807983B7742A841BA2A03D8A9
2568624EF3C504F9B2F4389E23E323D1FA1F4F0670711DA7D827400F36C9FC870EA2553C7E25
45E2A5086FED5BF966114D5FB48721AF70E04393326BDE080D3082C292C9C251E2D82C0C3F03
04E9A46203E0E5E76829E21A3B961F02AFAEA15397F0060E5059A5FC66A2B622AF1D62FCAC51
6EC3327C95A0C2810EB42A7209D12E90D1D41EF442D0F3DE55493615D4135B4F44BD09759657
58B16A8DF9D39E78A73DF41C2EFBACC2C91ABF75C849E2BBCBAD263F8577E16D60BB6BD463DF
3A4BAC62F28B44CE08BF52A268AC27779E3A317B965A44321615891B627541C53768F33694D6
EE76903BBED8ACC45FA00EEFD20224E09D95E93605987839D92C4E0E1853D8C3F25FDF0A8268
B38A6B8D9286535A49B25631BF31451F81B5ABCBA66A07056EE34EC320367DCE6CFA97113291
32E1155535F8094570639F9FC72E1ADBB4EA99EF7C7CFCEE8D74C2AC70927CA9973C4E1C4DB1
13613466EAB58C0037BA93230A3D6EF41739122912A15319374C6A6D7FEDA8B1DC15EDD2F286
12EDD846D8AA051F24523BF92C6920C2AE3CEED5868BDA6ECD483ED181AB69CCE78668A087DE
0A00A960810675F75412A8EB6018C638583DFB07B4B4CA48C2D3A7CD407F552DDD7A91556004
2B173D2DFE64EAA41500FDB64FE572E09D06BEE892AAF0CD711F3D6752302EA4F69AEA675A48
EE69C2416805E7E6EAD9889FE072F1C2F5D3A89D277A90DC9EA38271DA1A455CCB3598FA99C5
5A788073DC12B2265D409DE2DE24FB4399E911CA80169AD5812BCAB83BD0692C37A1B8053585
BD7303C20B6A06BDE9873823DE9E9EDD9F403E78E7C386341919035561CB94379210A5E14CB7
43687CD843FB306B6946D8BB1C290D802EE3F096F54D70743B22E661F81C89F190971F27FF9B
0E6C273CE3B35E6F5A586B411F6CF55C2909AD70D348C6F6322EF1DD08EA36F1B99ED590D012
3DB978BCFF31E5EE9EC3FB969E71C0864757AEEF1750ACD6A6F08A086CCF15E65A712ED37564
B73DCF2A5E86E05C7725DE9F13DF59ED3E92438D9017754365735E5731853520D9771223DE22
52388C4C6F7FF44614112780B14180C0CE01C50F94BDE65F4692CFF4B52F6D9D1FB562475BF9
E94120A510389E9B3574C62FE0CD45E19615971BECB8C2388B4D5D095B914E6F887F3F708D7A
65B516758CF5EEEE4DD127315FC3EF04CD5915978141B2CEFB3D2C0FB5DD64E25EEFC85CB2F8
80CC6AD20B9C9F0C1256A9C4E8CEB2B400C8D50079E6F58F7A064CCA9FC3EEAA7F7C34BC51D6
799520C5534EEC1A1EFCC52B9ED43E7695ACAF3EC4590D9C0BC16915769DEEF8F39BF7992449
4888D4DCA2484053A29598DEC70C2BF94BC2494BE4841F9676DE13196AF9B9A329DA016F17F6
2ED26A75CA3089750BE5DE919429B989EEB4C10C20AB764BA2C4035F14264B055771B6AB98E0
D673580FDEBADD2719C80E9B8322112C9AAA9AD2329B045EFFA948AF1EF7B0038B4D3C068CDE
62E5F808213F4A04D4979BFDFFFAC94483C546B35E965D4D0625FC01856623E146EF193A5538
09C0D1E182E8D7759CD2B467A84254A2EABCEAF9E764A05BBB84522353B2505C56115F489E4A
906064C9C5266F823741A1BD1695796BCDAD01B38003522EEF9FFB7FB7F79F8D6C43B6685C17
F72F06060993C9A30F8E31AE8CAE4F3BAD51D8262688A6443CE6A07C1CF676CC4F755849E2F9
DA19B14130FC72E31BC6E4E062C041EAC5EAC486032535FEDC0DA2F8BDFEE2B72C1BF0BE510D
BA08E0A5700FAF1686EAA93420F20F92C0516609ADAC4F7EAFB5FB2CCDA18BB3FEE2702A462F
8AE39A733B0699D29FDA1E821FB03964F477A2FF5580FA4874F60D6F3505A4287E17AC2BF565
9E42FD41F257EF45798CE2D8E09C0593FE7C41E67D79316E8D61CDEEEEEEC60EFC9BF26E803F
5C3EE7404D05ED2018F8C9DD0EBEC3BD39E20AFFB51582BD5049DE9AD7437849330674FD17CE
6B9B6F646F9CB66CB5DE5457BD512BECCAED183FD5C5D834846E6F8BE301FB267A4A67758590
3CE45864294FEACC65B46D604D84D846098339D20FE034B77A49DDF85718CF9DE18D10028B37
15994C5F2571EA3DC7E98F66601C647C80839E3F3477D78584870837F653243BEF6FF49C347C
5FE9C7F45A28F7BAC5AD9929D508628CDBBD4EED3295F06CEB89D378632C34D514A0B22BEFA7
E090AFBE45EA64C03BD1367B63763F4570D25F59E83D344E8DDCD26CA66C1787FF09EFB314E4
CDAA3BCAF8C94372828623E973768B6FAB1327C6CF5BEDCD37972CC2505B12D2A26F7D5AC9E3
F623024A9370A44BC95FB17C035F71BB43853DC7CA66BBA610CC29FAE5636B21C2366F88675E
C0EB2BE3C127BFD579CF818ED98D657779430F5C75A0CB97A52F3547907BFE2AD55A59B0B5A0
DF0D25000907FDB6D5781EA549FA89078516665CBEF095D9411A2DD1CF6A355BC77E2447ABDD
21DA230AA18D5E130DFEC1B75E5C1F6CB9D3C860A95E9FD960EB8D73EED1E168E357CF305786
A8F01B63EA2D9301A6A3F886CBE4F678BF1BA1CAD67F3924B6408561A435E0720DCDD29C53AA
53C1747BA074E6588B3AB7B66B5686AA58EC9BFE7DC107D97B8EE627C9E79601B95791704FCE
469944BC90EC77AE5A9A5F2A73A4894712899DEF4BA334DB850A7187988BFC315A5E207AA6D5
76741B3068F18C7AD741B6A4B6DEBF5A3C3E178D10E25FDDE0A01AFD5EEF225849E3B5BF1846
28EE473A34303C2524D78B8E7B8D9308F1A90852C8463AC1997C91DD233CCB7E4A16E95CCAA0
E4AD48E2C499397A4F558C23360EDE957D872238A446C39024A369429B2CE348AA5FAB425897
EE02B71F085DE26264002AD168130598150C4F560E0510A135014E55A74F65B4CE7E1A96146C
609280B49F0AF1830C3C8A6045BC7774D3895348962A7AEE947AC962547AA28B02608CE2F91F
EC34848EC86C4BF8507A9C0AE9A0697699531E11ED9E85CCF52231672F0879B801860B013181
5CCFC49012F03305D6D382E4E4565BD1D2F860EA8BD636D8582FD332972F1CBE62844355C933
786BE37490A7EE43217854DF7797EB8680B93D9220F643DD70B2993A7A0A194159A9BE04441F
478A77B3D2CC38302701166DEA70D72224C9481BE0E68BB6802BC6E9D131C3B3FED642779139
5CB3393D4817AAAEDD39AFD6508C9CB4FD67FD3BC18C65F27203AE022A522C1B750960B7A745
0EEB8718DC911D645198227B2E729B6CA4149EB9D21369500208D94593A087C76205D1046B91
4C31FB5F5D6FA1EFC908532B27AFBF73C27E2FC9228ABF72920CE48C03E3381A952A0B1F25A9
9EDCD216B154AE6279B33315E822EACF095C00D7359EA834885DB0E6D07BAA9091FB364CFD43
E378ED0C06B9A1F7C3A7922C85DAF6CAC5FC111A51292D4C7D43E9773F262AA032782252CEBF
2274842EA390B0056C3E0BBAF1DFE11D91679F6313316735FF6820166D4FDDD7E76A72469529
1E224466ED210C82AE79C44A828E7B625F872C5A3723FF9A09E7D77D0555C9984F7EFCBF3B9A
1B156E5047E312C8CB86D26B0E6345FCE3BCF8D0196C95C5AEDED0403733EB6BDE2F6A65CD1A
0FE13DE66A2DDB3F912ABBFE0CD59D4A6D9299E1309CF7494C93896FE76C132FFB98E3315B28
950E21CACA613DA51EA612678FE24DB3B04BA25EAD7E2A020318D2C79619B78BAEB21AEE2E60
69D8470392695EDFBFE2DFBC2274D8BC8BB3551CA84E341419C7E718187260497EDCAFB7F588
D1C7663CCBF8DDF1FE23C48D1A9B211BB0C75871CF8DE53C45A00E601F87BD65B9471CCC46D4
481C5E83BA65153CE608D5FF6595FCED940CC0999FAFB2F44E0055E57E59C73BF3AD6FF70CC5
A0F32A97D61CDCBEDDD34A295A3A7A9DF1EDD9169616D1F8D4C5E20A86DD2FA590B46A974D11
45FE89D1F0664C3E0FEF70DF6D393AE7CF0B662E285C02E9C447672F73E90138E68F216C0072
F5BBAB3943B40D24FB09841E142889A4B927E4A7F762E0ABDE430D6C4D8026F76A62B3B35BF9
53B1EC19932E8E24EF20D2A50BD0EC86D6C0A61D1B206AFDB625353E1FDC15F96F3A48303DC6
CDB7E4131FB3B6E7D80B1B332673F6D1DDA6BCD90F359014D59EB5445FB90E31E51D9E1962D8
20792C2AC64E60125B0EE5CBBE02AC8BB9CA43A2961A5012E0BAFB42DA92DCC8948B043F0F98
C522149E57FE699C9BCA6DF84D5FEB2F55C49407AA52345AF0F2B39C360876D5A6FD1C3C6D42
82F070B8AE2DD3BB78DD78C7801A235EEF4A700128A9CFC7CC3B122CE69DBF577F6531B7898B
A31A1B915CCACC4B3B1226104877EF805795A93A2F2EB41CCB759441A17E6B7B033094D0861A
5A55F80D94B203FEC9582926A9CB5F8CB395C110ECE72754485D674DF6CC0BB84882BA26FC17
01E3B2530A2D44DB5E8702DF2CDC597A8BD9CC12E95B7D274A51136B61E49C7F920BE8E6E17F
1B20EFD1F6F84ECF575B2CCB40AD7876E8B8C7B083E2CF8253D06CC4F6CC2A5FDBBD8CE6986E
18F759ABB35F7E77AEF16D5BB2DFBB457DA2ABDB2148EEBD4F88DE2B9B3244FF78BCEF9F98D9
3AFEF587269D7952B9557D0EC61FB268980730EF3B6C5CF569EA19DEDD3AAFEC29D8FB9DBC80
43E7C702920C678DEFE3017BD9791D74A6CE7A6BA312EC7407D2771A6F22E3E81EA35351C3CB
BDA7A7A5256C67AB65C84F0193D75209307DA141DC60D87B33684BCAAEAC9047A0F3861EC185
132A14F5F48F19E38E132FEE76B5D7C70AFD29FE30411C5B7D624BD75FBF27D89844B1845F02
7B866433344AF2DBF37587F2144E40358096A2F6CB884595E57C3A21A1B5FD1A9E007C530FBB
2FA384169531124511C0E643D093478AAFD5CBDEC5EB0EF47546A893EF0D04E30A89BC3D4516
351662F937F26C80CA874E471EABA85AB541F51FE6F94E01BA628A0EA320FF000A2C3B93162B
40E33F49C81F759B0CDFC167B5E06A6B2592D78794A4A91A03F9F95AAB96850F726DE1782B03
F66CF1C647872FE423AB0DAD21098C19A267859AB150D8CEE49EA83C0984C348D06E99EDB60D
797683B4B5255E3C521619DA2C26038BEEA2C6C013383A30D6155C3C6FECB3FEBF3205D291B3
E26CB6F76AB6E222FAE350EF49B9C15AB1DBCAE734E377610A27B1013F0AC3B11E9235E952F6
C65DAEB43581FE06E04BD94DBDD42AADE4CD6B475DA642910A0240BCFBB2848039B614F11B5C
0DE8B157BA49EC715748F2857009BBB3A0B550B4EB88631B53A69F025F61E4F0A1BF13265E20
78C6291C114B8ED63A7F3A2D3FA6EA7BDA7445CE3DFA913FAB9FC964D6A5599175CE8EDE602C
7F17CC5E9390AF0D3148FBE8E7D5C8780DF83D34E4C1CFC0BA9DB11975A171928147D4053086
BB7A29B4CB6620278E5D7D42B5778DB639D37D3149B525FA9A2B972D3F33A2E6735130446448
EABC73AD3E00E0B2F5E774ADC1AA4E9ECA4C0E5DC2AEF0F7DAA42D37CAFBCF8FE67CDD3E7C02
413E617562850E2EE2E68744895071D192B4505470D228C8CE86FF4B650F07E454F8DF8F5376
8226231441DC5A026FB268E920C71680BB1426E4FFB38B27A019398C3CBBBEBA91C4988E10E3
D873D3A7C8FC4FAA207B94A23E653BD646505B8688530D3DD734EB22AEDEAEE8274FB964378E
744E82C76A1E65E40A60DA47189ADB7FEF7006F180C2AEDE96672B55E12700D795951BFE14DF
F7EAFCF483E8036C07226D1259883EC8380404BA3523D786E55685878EA1CC6F9D2B32DD91AE
126BECFDC77B9825D602E3F18EA08021413BC95E5F64A120D41C719CD786BF2EF3E1A9B5CF28
D80F65B01191653515BE6B53E59834541465F45839682F587530B63A3BA92D74062042AAA119
12B071EC81BF6667D22DC7302F0A5299F3F3432FD03820E43BCE1007BBF0620163A0AE9C1A62
B6FF44204FFA819F9D85849D450ABEFF5F3EE19B3FCA8EEB405ADB8A05C4809BCA050F846975
C56B5079AE720299A7ECC8D846776048693005704658E43640CD89E6149093B4778AB677B379
7DE560AEB7E09DBE57D723A4AA62EE8C42A83C10418133D262E5E9CBD39532F3881662FB84C3
8F33ED685443965795C725956506FB106FE0960832A2C292560D3A43EEB72F4355B836CF5044
767477AAD5346469F8E4E90F712DF820A0B7183C0FF090444A994D81E2941EA3C373282BF57B
9952FEE56B1B0B7AD89AEC79A85DC03FD2A35F5B87E061D15B65A48398F836788F6B41C749DB
F425391D99F0B31420DEB5C800EE281A427DB0C1FF7E03105C434F95907BD74775C980B4AB46
A88652C8D59BE6CDB3531123CB25E9AF5CDADC324AAEFB9F8DC7E1EF4D288C6DA52487B922A9
C9526875CB3E528AB79122F9886517E892115104A20A8EB4CA7628083B24C0B0F0DD2BB0D35E
3E1D3BD0D50135F7B7F1F5FA5349C9953C4F61F00EF5F11E662AD12E8D9F156E32B845FB8E12
1297658DBFCD943F1AAA74F38D43EBD080C41DDC92101722D829DFD3EA37DD5120803EB06734
6B636815A8738403DBC18BB8D8164A8E450A7273F8164031290B465A44A268CAA510E9EFBB71
114E603718BBE415F2426ED24BA413B286C42902D8C5E483070D3A3C57058E6D640369797383
5C78166A00C235F8B4A4D155E723010F7500A7179625D248F2DCD8A368AA5FC85600143AE81E
BE8D901EF42702D30AA628595AD111ABF0E1E06A7939420D648F03FC840A51919C588BE0F7B3
BF71B51EC7DED081D0E2FACC72D65C77FD6864A2A30748803D0558ED2BEC1FC3A91710CC9F6B
2C8A66F8C4EB43635926CB75B89AF438F224DCC5A542C653790E2CB2831E6AC5590BA51EFF51
40C5F620102ADA7E964D21ED4E7AA39B2735E67E1862227C6E1DA2210EA7080000E90162F5F5
2677F188D75022B9A6173AA3F4E45449348EFA7A4D119A8C4682A1E205DD922BD9D65A5620A8
D9D103B853D56B872122F3B649565C904E6284D66979793B16C853BECCF478864EB043CFB096
42F0675D88E62AAA8088291E844F34AE84CE4A93721B4F262E0BFE50BC17184D4A2A469FFA94
8671A565C708A79A8DA61041C5F60B1D82A50C52A6E145FEBDBC69CD0F32D81382EAB87FE7EA
2EBAB016E169E5092C277D28A0C1197B760AE2EE5E307FE6B23D120605E03374AFA65DE773C9
B543D6B6321732A158873823AACEDAC38B2AE5DC0DD9EC0BC159C6861C99B18722B6C84CE819
07EA32F1D8434B6CD6C68523720859F1C1663A921B7DA0DE2A9775B181AFF992AB12E1A1F3E4
54E7342B9947D893557DEA500F36598D00064657C8B952E299D679BA20D0583FD6869F131495
6CF2D1D8E81A0C20556F28F8729ADC075535CF1006D8F1750E479AC6066823B31E969ACDC75F
62EF2704DB581A7B4FBCD22ED0A794B52494A69F4D57816E604BEDB0C1CEECCD3F80B6B50C76
065503F13C1DD3834D7DB2BF297B0C8B4875985310DDF076F0D6721FC205C9C0957E43E07EE2
CFE21647A2BFBAB8136866C9C4EC51706D04E2408E72B6106F02085E5213C5D88BA0B90E0078
FCD4A4214120820F0809736F4E3C06C6E0E6B4468A4089236565AD25A85730BFC3E476E5F0A4
DE180BE7A504ED02596543DF24359B7EAB8E5CB1AF98528D4F0FA8DF2EDF90C2C6D75600BC94
61924029635FA8E2BF07BE105288333A93A0A70A6C4A7F6D8D5F3EE677A017478747CAC65A57
A0FAE14371CB16FD6C39BAAFEC9AEA1CEED0E66F30E5F4B5D0E8D9D56DAC6D552163270CEDDA
49E5272BC389831BF07FCE638F7299F5C0FE332B7E29089D77B0140604B8AC0377C10C002046
8F250B3F03BBB37DC29F5B1CB2189063B8BB0F278AFF414A86A2F8A18FF13EBEFF00B4D723E4
90B2947195648367E0A7DFBCED6EFAA53EF849C79DEE21E5665409A44422C3A36FFB74FDFD10
17D31C32F9E269640AC36C3A519DB5F76198F1AF12F71ABBDF8CE85E7E6C2ADABE4B47897CF2
4A1C7B5934494F07790965C18296B977E332BD853232F2E2BE755F36AB8B1773964A689E1BA8
48F9F7F01BC585E125F00B90576FF82BB1BF90557D064D38079520D19DAE87A298514BAF1ED0
0B89467F5FD445762B80F1EE8E67FEBE8B5B2558B32CE738201712612A56D824983EB5403A70
6383D135BA5F1EDCE9833B81465B34244901802B7684AB914548C88C32FE91DFB0917751D843
5058ACBF0BB78D11118F14A0B9411BAA1A6E04088543E99B70130884BA971F4DD03F1AA3F9DE
4B1935663AAC294C9597AE21EB145DB431FFFDBF163B23F3C2675662C37CA63569A818D47B85
3B59983C8B6EE24560B2C7D426283995D86A7DFEC4B6558BCDED8A74D214BB6C86CFB902CEAD
F6C5FEFFCD06777DD761F9F9EEF09E9A510E0DA31C3B847130961459642DB3E533407A19AE36
00973E4F70EF0912C462769AE399EC9861AE5D2A243CA6538943520DCDB2A86633F3D95F1F14
E6D63126FF361FD287539C686CA9A6E4B46154467CE9CF10EAA3DE0EFEFDD09BF305A5584C29
DAC82DF9418734B01CCCB57666E0EB5E5617EFFA3059FBEC27D3DFF8DAAD45EEBDADBD272AE7
9909A4CD3476F9E1275298429DDA620C15B1E229135A472B013F5457269B9682A3D41E20C66E
EB7B874F26FA9CE0B2C8658937711366BD4BEC4F30A14BB1FECA238CE9476D66D1BF4259941F
61A7DE0FEBA45E5002A9AC44A7587FB206277C01F479D7CFCE8809687AAED92F7D148432CE8B
AC0AD62DFF7640554D59E88CD83022A8A42D2CAD6EC197BEFB73669DB969D468E7519943F53D
D324F2E9795526537393C3E5298B9F4E9961A182A324DE0D8109539FD483E1C6B0588584A30C
B5052487BA59B78E2959B3A2BF30DB1374D585BDDA52E088AA672AF40A933C94CE9B9F63FC83
ED72B19AB818CBF269FC03F38DD982A48B8206307A10E6833B3CD33869526F10FE1C92F7D0DD
56C163CE8F04442CB0DF0E496F2A1DCCBA88D0BF260C0EB856E081EED167C6EC1D8105B2D3F1
73D367CC27D0F26FD89995A2EDC6D1A215F57847F7236753FBEAB4954510CA68688E51034121
F2CD0D46C7B8E89E138FC4EE229245D537F8F5009B76D6117403E10DB46109C7B58A67E0C14E
6347DDE8242030734D02A5C3986148528BF20973DF3D17DA67E53334B678643F09B7F887CD90
87A6F635FA5FAD0A2EE43668A8B1973A42866A399B280787809820D0AB51787DF2A3907A564D
10FACA4D9B6349C60852C06444FA49F8E2563ADBB0EFE7B8250142BB06FC4C93C81BD8B51F85
86AFCE9678D4373ECF051908E3435470C360935180B80B2C03B5033E2AE1B256B426E09FEC5F
902F7A8878B3ADE833EA39EF3D0AAC1160E1AC3FC15170DC3FAF6D17664E6292C51B268666DA
DB416E5738176D6CEF2152B529C6DBEA6E563B5F7DEBDA3E49EE6EFCB88677EA2AAD003CF528
6B21E648EC332F0F0579EE648925B05D50261FCEC1BD57A22E58595CF326B5FDB2FFD9B8DC79
4C5E7854EF9EA34411546D28C5112B9DE1C25B861233341B2CC117C9C310160F612AC6F13F53
4DFAAEC92D6B2CBD9C3F3C0CED06B910260F7A2DD09B1B9D44346CC5A7D10B4D637275D505D1
301078EC936B96BCCD9A2B783A93019C5B769C15636CD94E9D4A24BEA9521A41703FD6F4EE8E
362FE33E21EAFF8AE02DEBBE9D9B379B7AA0AA0FE94C3320CA64F41FE488FB58CCC5F13314A9
F8A8428DD1D713C07489BB76A462E9C0E237FA5FCDFD3A0349B6B77067F055B7FB0F28953384
537535177D190465C354DFA1280FB3E804D3FC0D6E2FA88A5F2829E9AE07E9F7844463AB695D
A17806C271E20C58939A04B5F8DF439659990D8D8F885F3A7A43A4BE49C7ABD03DAF5DC78CE6
6ACDE634AD08C33363EB642ABA7D9C34C71C74CCCBF7F4ADF9A201E203F6540BC467DB200646
9FCA0ED2234AB1A31E73FC05E8D8D906E40B3055B3696D72C48080934CC62E8E850350E70CB9
558CEBAE7EDDF38DFE79FB501A6EE6676F9B7697FB4A90B84CE04808434D244ED68AE441F19F
FCB2E0E62DB832C31F7EE26D90CB6FEA5DAA44C297E51E6F9952C794562BF286BE8727262E51
5DF58D26BD9B97A5ECB5641D517DE35941143757645D511409808347297FD5D84E4BC1595158
9C4E272C6DB003B51628D3753DCE430C6154F4A7C5009CF5AA61D9CD61CFE3398701B65CAFC9
372339E6642D01C461EC04840A4F37E8289A232B1C06D659AB081C25CC56DCB1B914EDF4C7F2
3CA7598B264309A0CA15F079ACA4F69630C6AB6192EDD8A2350D3D1F239FCE30CEC5C7597971
6E22A6B3917E8F0A05D75F8D1EFE57E71836EF46D41E4CD87F11CD8857A3821E6A7E4D596C39
739424E37535699B423A22CB07CC47041D7B97260181794435F38CFAB11A7F571A725D084101
07FE3E53B16CAFF56F14B35CEB1363EF20271620260552B0B9FF5ACC9E8C508A0F07A4768AD1
77975F80D7EB3FB92B04A9AC5FCDD9738982DFE4B8DBD646D0F1035589116E961E1000B677DF
7B598EF17FB7442E07F625CC07E7B7BD4FDFED5CBA26EF286DB92F99CED631ADA9B6E4AB3654
C549D5539A2C6B2BEF7D9685F6C5BA2AE5273D15CA66EFC6FC14B3DC2FD47B50E6FE3678531F
E11B861DA29708943D8914EC5B164EDBD2B04DA634314AA7EF8158C3F4311CE9FFD5973DA940
22C33E3A69931930572FD8DA9DCF8AB915CFF613E7628C5773652D55C64E1DCEAE37C879FC17
A35028F33B8D14731DC832193B35D6EAE7B2B5BBEAE7DAF05B3B34CA3235D81FA537EADC80DD
C32567E15F80BB2A484CA51AA8F3C853696A740C271E1FB34D3DFA72394B88ECABC1F4E92CDE
907A139A5B57406DAA97AEA576412937FFE4E2689853C7B86FD869270B2FED848BDB95AB3E04
C77836021AE12BBDFB0BC68C09AA4F5B607D8B724C24CF6DCF4F54222CEE4EC643F1D4024C39
8ABD99169DE91191911AEFA67675C21D539DB7C39462FE640C5F9C9EB684C6037315B548DD49
F0C35252F2E9D5D4571880E66CDE49FA9653949D2F28AD44426978A2127122CD77B607E9D03C
74D9DD7D11E4A9AC2E3457FA9C79DB76AD398AD5743F6E077C36423E0DAFADD1D391EE4451D3
F94EC65470BC74FE2D2252F0540BED609F760145914E9437D9CAAC61BE91F76C5F1979C9C6A6
F73E690DDADE3B1295251F0E9DC3100CACBC3EC17689A8CE1AA3089A387B2727035514F69E27
048AAC20A38EE49ABC7928D0109D3B230B37F6092388AB62CA5B382DB76922CBBDA2D61B5745
6880763654B4D83478DB9C0F63790EA68F5C154EA4853D02B9A849FFD65684C368E68C6CEDCD
85BF1F041EBA86E9BDB490CD8CEF298DBA42ED4FAFD561C2CBA47869505575220B8E3390BA7D
411C2BB7B16578A834BB1504CFE2644713BB30F2C76D9DB397F45967B8F146E7C4782B203A97
BE20412D4B2B6D53511525292E48896BC91D3891300E48DB9B7A650DB26FDF8992063729A8FE
4E8C6F786FF4F4BCA2018C2861DE6002A8D4954BD7EC80CEAB7DAE6CD07586E733B1E862DA8B
1D4D2B0381058A810522C303C06AE34D5EA6F05C97B4FDB3FB1DEE799511F2EA9750D53E2A1E
CB6058C9988B55BE1E6F1B682C689C996749691B6057DBCEEF6AB5EFCD604DF7420EB44763FC
30B4812891FB2B67402A24DEC15BA326BC89E6C574597178EC7CC644FBDAB6493E545D89CC86
BDF8826284E8697D2417FBC5630CFFF686E9F8F6C5F7788E975FA9F201FFD1E99B75E69C2395
F2EB3CD74E2E61B44049DF0B65F91195233228490EA9B9380800C1B43905B862770DD378C920
CC3EEA51351DDD3EF6C68302F96DCBE3D740F4A3E359419599817FE10E5EE241B516A7AB852D
01B570CA085D306C75BA899A5BE0F5BD883B1A6EDFA8EA72E5F66878BFE1208151032ADE4804
2F2C7DD0D66220F5EF66F4D3BEA1014EE7327242F8A8D948750934D22B7C36B2CBC01971D5CA
B439BB320D7831FEF3C9785645D9996615DB538084C5072F2D20F6A8909C248AA6D34DEE11C9
1E5C41C931DD5076C9CE87398A58AB06A1AA7A07DDAC01B730957DFA34FCD86188DBCC7C8A94
101F09209E7B123FA9D671222BB65EAB845F7787EBF82A0F59A7EAC3CCD936F54A048AA9E36C
983FA1376E1F825FE112D4FAC62BCE3DCB285C5138215EEADC3FF9504496AEB0C443DC9EB28C
1C3F27BD1C449FB7ECC661697186F9C31CCB922F2B9C9CD4AFD63BA3CD71A95A52CCCD50C9C9
BE17A47D3123DB4898A75275D93D74EADFE72B7BE3679FDD9DAD4C885196194DBA0D297F8033
1B1471EF61A839DFB26FFF95487496B4280D02CBD88C1DFABB04F98207ACB5E5AD8B4D4D26FC
232FE653E9B30BD50930833E2B9D72A7A3C57C9744A0992131CF0AE770788FC6376FB187EB6F
1605CAD55B40D0B9132B1799170BA18EBB01A6B92D5CE2580E5D5BC15B14113CC32643C74805
17AC33E95FA1B318328613709D3B05296982772B4784B762103E906EABC30A8C542598B970BE
13D8F79EC2D4229118B8A71E708F049B728205008B75CC96661B1F19CB27320E6231644CABB8
E8A3C07ADD08A88F5BD1448FAECE9C2E9E959FF42AB856C9F0C45B170D4BD63743867FF08D0B
C568D473801E2B40F9E99DA8DF577732784B52FAAD05893033ED069CC2996540E9BAE9916E13
9276031E66E1ED34CAC0228B8C7B8E0E0A8C9CBDEDFB20E406D5C2698733F1912BE83FC517C9
268D3287C66D5059D84F52604387E0684850DA394D1F2B4BBFBFDECD45BF88738074512A1905
70057E2275BA2803036A91F9A32E64CD7429AAAE7DD6D28C3159694901450896D483717E9ECC
4820349ED3E5FDEA88B1F9AE1A7E9A9090DADB0DEC035EA6EA90399F3A942E3401EBE5B483CF
0779ECA7685E8D278CDF6EA2FBD2A7CBF18314F5257756CD3E342479E3AB75A6DFD4F9D7C3B3
5AE5042A2B7FD3CF5C93ACBC3167BDC9A7F0D25D0CEC8F73D79A98EE89A769E5A41AAFE97D55
688F39C661B575A6601ADB6399B43DC5064D54F07E8299627A114254B11F1E8DDD1E7783CC7C
ADB44A96E8E54CB72A448CD387FACC2BE66A5D9A4583EA6B1C0E4E7685739E22F50E52488EE8
D38903E9BDF9CED151FFBAB79C1E159A06C11C70D91E114ADD520627460CAF3E57F77063FCAD
E73F05C563FB50CBF0F2913B6899926A6BFD891E986FC06001C9D8073A781F0981FE9D4C4D17
E49D1793608913238CBE6B973F9493DF8C7123702646446944399EE25B1E5A40D3AE74728879
203E2D5F005C3955382FA450B86A58C68BDAD3FE1793D8E184CE250070CC6F8C21E277DD506D
4C8064374CDB89D4C5EF1859FF45BCA98BB91FFF5E52BC1458991E9C296CE2F8BE62B7A34D2A
DE95004D86ABB1925B24296C39130971B68A2B1228EBA1575447FEFF25F6D887EF14B66FEB4A
377F60681A4B44F63B6A067E367E379628CD7342D80B79913F4797FEA6506A56D47DDD7E0AE0
B06D1E9D52359EC8D1FFF0502D3D7898ED4642974DA2483F6D5F4F48FBA2862B9684DAD5F1FE
7434786F28446523FA121E0445942EA29694E03F2CE367B6EF118288033B36F87CD456F566A4
767D31794A827595EA4E03E805A5D0255463FFA40893B34EE0107FBC6CC1D25215A70FE0F9B5
526E65C3E50376D9555BCC9F60BDD3DDBAFAECEFE4659ABCE230EFCC3BF8BD7F7AC3F5CFEE3E
AD7E09C9F2027DD12F7D85837C9A693A330281D730982A1A2B854D5BB19879DC69A0FDD1033A
7A858BF14C949B17D26B491B123F3DC89E67100412DD9DC767EC66FB690EA83850B80DCFAE83
EB437F5A5F4D22517DA8A21075D6A0CB1FCA94446C8138FE3F28B8BDBEEB3DCD67E4D6C9AB24
9F3BCAABF7EFFCF8162C37F3DDB6DBEA59D74D515BF19507880F19F99EC7AF622FD9ACE7BC07
5D853517B494438AD1B7BA2F0C696E77543EA59F951D5B8C2D364DA095F4B174C878FAB8CE90
B0312FC2D3C62B4A9F02166FA0EABC1FDFA7839A250BF3627D3AD5ADD5BDBCF75B271157E012
F723A51A76ECCACCCD693F81590D99FFF80B21C7FEBAAFB921C0A91AE44E8C3A870FDB69B2E7
7A65D13626A3113B069A1382AEA90C6076D4D4B553153B3CE24D1382117307E0D1195E39AB80
58E44DDB927058A8D71AE41B86ADD4692AF0E852F0C1C92A6B5CD4E7C49C7774BCE30E0F5256
4437E6553B1E6486FE7F8DC97451C934C3939EB137A8EC09486F10F2A7FC4BD3ACFF77F03B1D
92F19A015FF6F515E9963C870DB70977F9B697E07CEB75B9AE87B03FD70CE2008B941924DEF6
27DE71F750EF0F378CB2648EA07174E62FCA3FCBD6C6F1F91C9BA4EAB493E28751FBC57D6897
8F553DBD6759FA9CCA70AE9A7372A70CC6CE35137CBE4C289575555D92083E92DAA3845FB214
DAC0FDCB355A5C08A1F3647C85E3B747F1FEA12CF8AA1D2162E03221BDCDFDCAF4B74DC3ECE1
657CD9819BC34ECA91FE1E7987FD75D3E434307B208F2077457E99134E108E38B99B6D1D8DBB
530D3AC7CC5811A7FA92BB080D8E2A3A09CF3F6452941D063D275E2AC849E0B35B39C63551C1
90A43F3C3564AD6F153C44F67E6D50E311ED225861B94CD108D278A4785632CF7E47E89C8FF4
3114044CA9D48BC15C5EB1E9D1DD3965B84A20522340F81FD0EA60D7B763BDE818B5F9522634
7A5220F043B89DBC6A41DF825DDBBBB05736F7709B752B42A1FC78B1DC61EF6DFDE867C1EBBE
0E7F332C0BDCF86B706C2089EFCB1896B62ADBACD8E2358C75060046A54784A41F66B5DDE678
06625477FCA24396747DB263092F82314E7440FEA9CE8630FCC10D7F4BA6821613F64A16D00E
4BD9BCBB0EBF087C2A88720504CAC249D2B2E67A823C4F34260A7672E8D6E7AD168806779B39
ED0847E82037AF28416AD3B5C5C6823ED9D1912A6B45874E5C67B258DACDDF6BACF5D735899E
A6C62DE3BCF40145859A58C0D744588D070AB252A26E87FBBF2CE51E95E5AF46AF3EEDEB147F
75EA1F698B2D3F582B76381780E2BA8F6F2AA75A0DF480A0B5BCE7C3EF61755A4D9BFD0E9AC8
5CF716407021CC32CB84C16A90C37E83EB5F0D6B7BEB221FDCE3F9A6701F6BA690748F767AAC
D6F886F1B2A54037AE8D8B8546E9DD0ED71C2E03B1148BC4763F95CE2A92F2E29E3820F8BC5E
610200FBCA96221AC7CE0E8DE251618EBA754542FB8EDE1632D48C0D20E882F915BE1F742ECA
7FFEE8F323B05EACF81846F87CF833E6FD877E01172686BF92B875FC6977B3D524E8D8BF0215
C3D72182BF368C7F89506B058A2A6042CF86D8DE16BB8210321B5CB1CF42CC5DD52E29D82D9E
84C957E52BAE129068A6417FAC32427F8C1AF08E2CB44F7CBF3E8B1451DEB7B2CBC772227117
736D41FF4A6772569A4B2C2C48908A1E36FE12D950521F269A0DCC4449DB961E101D3203E88F
7910663B7C672EB85F26562A35A26871947B14D69F7E09153F1CC980F0663644C9EBE030EA87
1399577ECE5CFFD2B7490AC8CBC565359683207E92D072854E094E718CE9D4DF1117A46C223A
5F095DFF3C1721B52502F7366170444898620985ADD2CD198B292433C88ACF33C022AC15E910
E56EB3B821341BF3ADC6FBCF1CB7BA72A2318D1C6D36810768674C325CEC8B2F86E19A0CEB06
64AEC6E1F57BA2952DE44C1DC85FA8AFBA808459222C7608842D4DADE3C8D21210F366BCC222
BA7BA907328AF3304F9AE2A542FE84DCE9B4B3E13C23E687BC3360E578F660F31F948694ECB1
766365C13BEABAC7B589D2ECBA799491735B417532E392D56C9DE2B503C2A49CADA4280C863E
D36CDF747D1BADF31AA0F4C6AB910BFB708F2B3D763C041836C9C4792C8CCCF39519F3B80BB2
0C7767314CFE03C5BE8FC81AEDF28ADA7C576135618BCE77ED1ED0ED1F8804D4DAFC126B4E94
83E61917775578AEBC58EE5823CCE006610FF2108E5EC5E9F6EE0B7B09BCD064A2EFCDF71CAB
DBA10D0FE3DF95A68F85965CF756B19A9664A167263B2751A9B7CA9CD76905A9A16D070912C5
FD49959C93601DE4998FD65F6B506B9F54A16C92BB88C6CA8751CEFE60731952B2B9550251D0
612901121CCA0D3A8A51D7F1F5D9C771EB86BDCE40ACC8F35831C9E5ED6F5D5332275D01748F
88428E97DDD24A036CF030A8D04E3EEB7E86E6B6E6F01BBA6ECDA8B4806DB2DB9D053CA1299F
5C6D43A64ADE6A7A6F19AC608CEC86FD93407D6BD802EA487D7C46E5190B6B34266184235859
250E09C49583F8B856EC06E4C120A0E12E4E305540AC662E171DFE00F687EECB571D2DE79473
E7D22FE4BDB30B9A526F8D68B4129D71FB1620CB3182FAE6B55625F9C2664AAA3FFBF9B799E2
FC92EE7A19C5E37F0EF4B3A6A902CBED35E34E86D9B7E5E41E5ECAE9876A83B2F2BFB7038EA9
0A232AF9F300BFB6A45F55D73BCC6B9E5852395D5CD5C77819C568741A7FDBA3A2FFC81FB1B1
EA0D4D9B450199617FFA0BA8CE26FEAA16F62CBD663798FBB3CD164D6EE6E4F505067C0EC75C
1C5F81C699DF4165633E0708F8CD2BE2280350C902890FADE818E5B31A6FDB45F7A6F8E5F924
B4D670B9E3D4EFE00D2B04D6F433753454B3D3EFA16276577DE3F28D146907CB6C05570A6D4E
DC284093A4B2588162BE6BC867A00CA1A9254234766503FCD3A0E29D9C5676EEABBB3E26FF09
1E21CA21FEB29365A56B6960E1E76796C097D80454261FB63D5F941B66D9DEDFF932793F1569
75004F36E2D91D2203049E5D9DE711D832E78CFA18E2B5348B74AA8605E6425D8099C6B10EF3
E4A299FB76F028BDCAF8ADEA2E908E3535BBA4B42A905F30D13129209DF390139E3C548087BB
BB46621E71CDE60F450A8C61B247CEBEF47B5F311B3CDC843790CA79DD6C72AE76A679AF24D3
6D0B1B5388485F880096057CB6287845EE438CE1E6404C5BE7371EB6C060092ACC76AE336835
1D481984240E51E33061F1D9FCE34A4C65C441F5B4E4D0781103AE0B0CF637CA2FF26182B855
B696605FE114AB2F7DE5F016E396B5A4FEC79F05ED451EB3EA7CF718936E0CFD2F9CE7781162
825FD98BE70C3B16123F8D9B0C970DCB545A7CF6A8CA6B4FCAA319C6C4256B10D6D7AAD98931
40122431F2B0068C10D0398F55FB91DAF2C624A716726513EAADC369BB29FBD1B2B7DC5324D4
08B0B02E46ACCA565D1413D1F65F545603B06E28637C326053DDD2B78DA99BF320DA2A565258
CC9F548B2F87511C628610AA00A6C8F5CC5BA2CCB13BB9EC7F123EA7FC49EFBEAF5D7244EACA
D013A08D3FE370767128687A488302AD3D95067AF108B76886ED16B59E7345DFD143A24CBD75
E828AE300CA7D24437D4A5F0038DD5265D82CBF39A4F8F542D491486F5BC3566931665909986
41510AC914312D22803F242311DFBA932BBBCA9DF24B56EB52209A5A9CC8AF2688B59F348E7B
8FB08281143B2C849BDA4FBDE9D8819E97589EC110FA9F31FF85D07B6D58D58CE5DAC7F22D0F
97468FC790D913622007DC8045E2D05DCCAF592A540870FB4EBBCE3B5AB9818D49B4E40FC919
FB8FD87617733360FCE02FDBA5E57B33461D5E085569129B5B7B657DB36D29E3F87E17E9C7B3
8F6F1FEFD369D314E329440BD0AC26697B34D4E87048EC54F7C381E66C908A658BA83A811285
E93E32BBC6C641BF0F2412C276B85CB18FED61F22ACA7FFDBD37B994314CE4B711B82402DD26
632B7DC376AFD3C4D66BE5E40E282B74FB120F6E4E144D90404C7A4513F2AB180E00FD410AB9
C10CE9B1C2A8EE695E4CEB0F1472A959E70899B1A07DCCB20546431FE6B541A05291D5DDA490
991BD3560490CAC148A2D623903B630DE49F10DDA865A74AF0866C2FCC595F6FD0A0CDC0A146
5398818C46554C37A4CB1E543C4760E804B39564BB853400D0E1E9DAAC58D0577AE177726D1B
9075BBC70B2AECC2F7F44D34F4C691485BBAE03E43E8BC5535CCDFB1CAD1D66F38A49001C4CE
CBD71202FCC47BBD3B224812C677F4F9E4FD523D44EFCFB05A57E45AE2078E3E16DC785125D9
55D3B941F4FD72FF547B069EAB30BFD33E3EFF0686FC7E582CF73EEF9866D6E62C19AA005F73
4CD8FCC0A012F41F38107E135CE4C0AD8A8B81101FE4EF8F32065B2C279A435CF5A032DDCD52
9628509FB6773B475DC13517625705B5D3A9D9EF6995A37DD3F0D6CE5451845CF9151C40F990
60ED58E0F2CF5D6DD71944731CC4ED0FC72641E287E295CBB53AEEFC3FF3EC0A5DBAB8C3AD31
E5F6B339C1748A9E58851F6CDD6BF091227B2835761B7D9A10DF0242A7B61B39AEC0A0697F43
794FBD2A51A66F860FEA136A9D7DD82B42B61710909104E0FABABE3F5485CF1474D494B97508
DFF80A698BFA58ECB590D8C38873724BFBA60FB1150B04282AC1022A1214E9513D27C5D45DFB
C47631BB27CFA2806C2CBB130DDA940B65E75F956846F4E6438773C94E8EAED71EBA5E87A886
DA7A846EE29A43CFC2D130A3FEB4762091B6AC357C973487573A230DFF74A29E203BD78B89E1
729B747FF9B58BF1FE5FAE6DD70E9DA091A330078845363681AC2BA501286DDA2038A0FE2235
C10656143783D50129A728B4EC2C64405B7C97AE562AFA240D35FD9E3A6E034683C60F32AC09
968A76C775D5547D85D7A3168D6F19F12FE132DEEF497E90951A56CB17E543A76F8A526B1B7C
481CEEA4F5FFC637DA5CE954A742BF39837F08DFD7156A4F4E4805494C1957B2577ADACC0D3B
F9B0EFFA5860F454EC947625E70D7E4E652ACF276F57F2137F451540ADC35D501CFC1F7597A1
502A198EA502D67E7886790A84DD9D225E83D9ECAA18FF9EFFA77AAC3AE57D034E67CBA014C5
FE1E3403AE4277D864856FEFADD2EDDB1161E8595DB1B2CA6CCADC4253B95300ACEFFBF9C3B3
32E1FFD71B91898CD0EF1B9F64C3969FFBA7929BAFBDCCCB943373EFDBA057003069C4ACCBBD
82DF6ED1624FB8D0D4B3E561A05B13550A7EEE9AB35E47E9A96FE49EC2716AA68224E3A65AE1
E96D530FEE45054DDDCF949E7F3977334E3A9AE459085F366393D232B2CAA244B029F2BC602D
05B421E14C08563C4296D3E9AD328DC324EA5685E2FED03DFA3D3AFF2482EBB368484FF8D015
53CB8D5686067F99C5617FA2A7F6F183F4BEA8C1AC39AF726341501AC8875104D11DBF241B9D
C9929A8B70ED71BD62AFAB7981E452086163DA2DE543E52D57AFD080AFE373E8E321670F8A47
4E9DFF36441F6C1A4D2AC6DA6E5C9FFC0C4EC9CDD8614C2D65D55019378D678CF46F483FA9EA
0152D9D3A12175774B56B11BE03362D2A36BA13945979C64163A696B0A6CC760BB6111EC47D0
A5260DFA7FD147FF35AB84DA889DCF4BA4146647D5BF8773096FAD1EC8001A6085C4F4721428
F4D4B85F1C03C71576F497D3A5A99392C647DD42F8804DA5D33CCDCE19DF1A16C143C449F1F9
37F6F75B05ABD0CE90E4EF696E1BCEFCD950634E414DC724B0084BCB515CD4ACD71A6CD3784A
402C3CF3ADAAFFB763C5F7E17BBBE19172E4455923BA48869B4D9D0C1EAA623D9C728D887C15
BB8377AC74239EFEF6389EA10C7C8820AAF857BF8EF2B64EAACF096B742ADB9B666D96715364
CF18D88AD8DA6A0CD303557F04908CD28D11ACB9A730AA3A37B6028914674816E6AC076C4559
A84880E82D433A5F5722531B0287F11B24AB4CECC2264BAB4E6601C990E32E1C5F9AEA52CA22
2D2698507A4B235531C3FB7E9FDF6FDA186888A74B902A0EF3457537233376E8667035C092CC
C3797AD2FDFE1CC8BD71C49B91E4520091922CE87856F1DC60A209A9BC9D97B0141D8820E1F3
B86BFF25CD1BA07E5664D32C09CDAF569EC7815F41E0E8731E2FCE769BAFB3A751B3EB7082C4
992A4FD8BA363D0888FF39FF986B80D5568CDFE1DEEFF98CC54F05B842694BE023E0E0507DE4
7AC1B53BE427D31E0DC9CD5963BC3A5183C54D8C9046068BD6F300F4C0CDB8CB779E6828271D
BB9EE44B70BDD1C1B5A345AF01E5E9A74260781AA473199CEFB232EE9C60D14DA8C5D3D22291
A33E592BB7FBE5E9B28F18EF70DD0877DBEB43EBCD12F9AC95B7D46A2E0DC88E3B7D34C6FB32
1593E7FD7C070D44037B2EB5C5E7F40C2BFA3A282D85932C19D3C3D07F5BD37C5CAB34816E9B
008BB5988A1703DD971AC36A0F1C61DE0828A6108A1454A17E63F68FC5604101184FAF38061C
515C0439010551A933CE9701EA75A59D88310C564CA3C4D9BAB34668C6ADA1792C550D08B029
5E6A2AC490B06A3BA9118ACA61A951BDC06EB5EA612992BAD973AD703F5B25D1007F47CD92E7
4D824140CE1A827616DF813898FBFE32C87E692FD324FE78FE9101B1789C8C094207BF77C290
16ECC3734E103ADE9FC7717ED2E6979BE347F72A514B943A7F1101ED25B0AFDCD6C8374182ED
E624911F458A5EA76FA982C3CEDA0195275DD50BE2AB3FA62F5545F802CE3784159E281A810B
87DACB95D4D75AE2EED997DAD39BA7346083A046660F0D63D4416EC1AFBCDBFE18966B4C4C10
9D5C9E9DD7B1202D6AA73AFAFBC169E752DB200656FA28A29A9AEBFA1D4EAED03478778AFE82
E0AA2DB79ED37AF8C5B940ECC6A5FBF38762505235415B285C72DA21F4FF986376E407C04843
24B3A2ACFC6D796FF53B5412A1A73DBDAD921F402308041C18C5D7FD9705959A8C0F5EEA851B
5AB726748A6F0BAE196F879A3A1A5A87F7FC723B7A6E85189914EA451E2BE92B908AFCD4BE5D
3D2C6C1C40984D10483A9F85648CA31977A4CD0F9781CEA0EBFB97B8B07DA6FE5694C32F0B5D
23D58CB259E54C46DDABEAEC138EC1C5922337B8CB2741341E3DE7D141E7316B2F0DC75C1A62
ECD7106141548C31F7B90C0F70106E4E788FCE549DACF492225530F427A6BDFF5ACBAE8913C0
BBD9E3DEA41EE41FC7C13796A4A7D32AA56305F2420AA9BA5C0A0425861F97FC2B0D586678B9
5F28A395FC340E5CB4D0DE633E406347BB83E56126872B389CBD57C359807E3AE6CE23C5F1EF
746BE92625E161BAC1584CB79940DB009844EA870326A7BB6CC8FE67084726E36EACCDD1A5E1
87D49E1CAD01037E58EEA820171B29968A2E4A08352959052EF9CA920E736C7337D85A44A3DB
0DA96FB9BFC14177AFE17AAA27B79E1C92B4D53F4CB9C277BAB838C640EFAF3EF4D95CF7BC61
4F3EECEED6A657E1FB361302500E5DEA28E5B5EE4F3886C23F670090FCA5D2EBA7A5E4B3ED0F
AEEA8A7E6DC041F9988D43F645BB388FBE848EE495B391FBA4C0C3939F3B5B3203A5527F397E
D758BEE1E0F0FFE9A379DE0FD8CA3DB83B767C3BAA6214BE3FB012708F1327E1C96B8FE26597
A0B8403DE77750565067F42F1587B5EEB69D5024A807E98A3BEAF5FE5F88DECEF57F2FAD58E5
20D282ADEBD2051F086B3B871F0839C71379E6A0F800C7022978C84EF6363B7A79B10386E38E
8C7DDF0606ED85B780145FA4428DA212AE5386205BA129AD33D28BCC36A0B6CDEE13C37A6C2B
7456F0C3402FD5B3E3DCE43B479EF0F81DC571FD102BE21029C721E4148729755F19CFF14B1E
0E30CEFCC09D175AF0811BE99498F4A8632B85879AF0E005495FEF5548F2A1F8C989140726D5
4BA1FB448E54549A2434A1FBD152E7DF166EA70953C6595CF824CC77984DCB8F8807B7347131
CB727A589B651697C32E0D52BFC2B36B4C050CF9A1CE072746992EA2ED9B052DE1B2B9A21A89
682B2BE4A1328C769DBC40BD71202D0287D1F8B909AD0E95E5D80BF8314B457A042F304CA330
14D4578D50158EECDE6821D1B672B1973393FCFCD432EEB0EB4FB362DCD9B4B280EB5EE2091F
A3853D779EDAC21A120FA7E03B339CED20115F404C3A086EED187281EC31F25A664811E2B712
351528C4F0ABCE55D29BDBC1E067C01CB44F8A3E094F104097C5A36DCD1CC621E32747176643
18D99F5F5D1EA11959CC751FF9F3739F735A12612629BD3346A840DADF0A61567D880597EDC2
2C70DD8EE5DA9171AE46A8D1D78A64DD2E0F01042CA59FF7F83EC74E1CC0E786DC17A112A062
7640B89D5F3EA4A57DAA15E9965A81021CF737E0108267C404ABED66D9CFFA22E05C351194A4
1913A0D12931F26477A06773829D8AEFB25184755DA27F5DF42B23F493D024CF38C544257830
1EE65AE593127DE8B9E0F19287015892DD881BBF034DF3C789470B567B7AE5130E821870E504
F893CF1844FE400752C5CA00371433A36DE4C96938F6B7FC81D26DEDCBB7AD4F2519857A81D4
F06F6A23A74825477C912968FC03B13DE8517BE24831C0E223A601AD7834A3CE0C7059822D1B
663094AA1D7DE8C524D1E0E5558C664655454A3AA0A5034B50429C5A2AF0C3C862C6D63C415D
92B2B720CEFCEA0D0C6CDEB5CD89EB701CB49CD568E39059E7B7DA7A85B44213F1060598CAA5
8D8830DF46C628B18F908DE0C7360B9175F698FF66C5E4EECBCC0010F43C251001F06C45AAA3
174C8841237E204AD5D7E1C403DFC40F9FD5F469C65625EBA0BC5DF2344228399846C285D9A9
6E21EEBCD9EA38F25584C5D4B7893E64AF5261656E3FFA0CB1FC10CB512328E87AE3C83CA38E
9CCF96AED112B93EF8E4D5CE7BF47E8A800E00C4A0AB624DC3C03089BD5C415E8BA33DB289F0
8E151E5E45865E9CE2EE9E160CF3646726DD25D5EABC96B72A7D2C89178FB92F0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: cmtt9.pfb 0 0
%!PS-AdobeFont-1.1: CMTT9 1.0
%%CreationDate: 1991 Aug 20 16:46:24

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /arrowup put
dup 175 /arrowdown put
dup 176 /quotesingle put
dup 177 /exclamdown put
dup 178 /questiondown put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /visiblespace put
dup 196 /dieresis put
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /arrowup put
dup 12 /arrowdown put
dup 13 /quotesingle put
dup 14 /exclamdown put
dup 15 /questiondown put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /visiblespace put
dup 33 /exclam put
dup 34 /quotedbl put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /backslash put
dup 93 /bracketright put
dup 94 /asciicircum put
dup 95 /underscore put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
dup 126 /asciitilde put
dup 127 /dieresis put
dup 128 /visiblespace put
dup 160 /space put
readonly def
/FontBBox{-6 -233 542 698}readonly def
/UniqueID 5000831 def
currentdict end
currentfile eexec

9B9C1569015F2C1D2BF560F4C0D52257BACDD6500ABDA5ED9835F6A016CFC8F00B6C052ED76A
87856B50F4D80DFAEB508C97F8281F3F88B17E4D3B90C0F65EC379791AACDC162A66CBBC5BE2
F53AAD8DE72DD113B55A022FBFEE658CB95F5BB32BA0357B5E050FDDF264A07470BEF1C52119
B6FBD5C77EBED964AC5A2BBEC9D8B3E48AE5BB003A63D545774B922B9D5FF6B0066ECE43645A
131879B032137D6D823385FE55F3402D557FD3B4486BE465959B1188F76DF7824C135A7FB382
C4E11B0DDFE856B6F34552CA48C24B57DD8448FAC257C4D93FB122E1218FD36B99B2D79DADB8
A66613EF11039BE77816A7A2D6781FE0D69CECC36232AE87A172AFE095532A8C7FF40BDD4A5F
CFB6CCFD8F73C572231734E0609C6743EE11010F6579820B367C49069AC1D45760C0CE8DC1E6
7E2BEB72BE6D287910547E1B4BB52465B75947D224998223275A2C340A1C14C04328CC2935C5
3EE2723F1DE6357A291E14863F6C1411477B3EA074052B30A4C1EF03AB324D678307E1CB02C7
AAFFA90B73975378B9DEBCD3F6AAB626A361BE8068C60EDD0B2BE4A7BBF4EFA21CC23607BF7E
2556C17B5923D7B0FC036D5FEA743C55F2BBF72E8A61995BD63D7104A085B8DD5A83D9077376
A4AE8F0C048606BB9E84C640C52D0A95B35D48CFAFD6EBE3D6EB0ED88C1212818CA93E406147
40A77C446B792D02945642014A5D55BA970EF97DCDD5B839F621A052D1085A1E668161D3AC02
27C7867324EDE883589B39E5D152793009CB5A08EB6719A44DD01B6147E3436BDBB28215CE3D
29A3B1DFC72BD942F8CB3376B4E12CFF53A793D935346CEB2AFC3428CD9313C671EC1911252C
19DE341556999AAF7417AA5085DAA35EE71353FDC2C7D83EC2DEDAABB1B89B99E4CB5282159C
BFB45A286F8D6BF3ABDEDCCBDCEBAF6994B17F1BE07D10F00CBA47F2FBF66C0F608F28260BB5
BC3CBBBDB7BCBBED9C322336A2F2E4F954A05D4879D3D976E201848ADC85B763C354E8017EA4
1A9998C520D720772255C69EE591BC3650E52286E6F7089AD632DE39FF9B40F725F8E6E02B74
8929DD79B8FC1B2E7B761909AAF09F1F3F0AC59488B0D281D4A95C25CE830A5223D618A634F4
71F737BB211E4B04D6B18D867CCFD1694E1586595AC2D3C5D7EFFCD4773DBDB8424C817414F0
0B2653598571C3F5D9712671A0E8B555FCC8F9AFC5809CC7EE6131E662E3D3066E183D0B6711
A18806B426429B44521AD3F2E33FA53438F676B958752A88A2416118602CABEF91C101C94A0A
5DB4D11B913DBAC9C62AB4B754D3A0B43408AC835B5A5A28BCFABFD6CD9961FC83A21FDB2FC4
8BF4D06F623ABFCDD7F72E7B2BEBB7995C67FD497FF0008940A6D6CB04A8C65C7697D91B817E
D4C57962F7A49B2C878F09B012D9AA9B871E7A9400C962982EBCC9011918B1608506CC061ADC
D18A1CF71E088DBD1AD5D9B7459FF3C6014DB70839555EA342E2F0FB91308981FD02A7143549
2DF066176634326152BD0C93E4D83C8F9687B5FB6C349A6342AE87F7C15E711172939230DB11
75B419575780C0A9824F8F4F9ECD9F2C2721BCBAF73E937BC57A80B0C4D7BB6049109F21965A
6D9EA90B3072074E1C9FB3FA31E81754010705568382F8BBAFDC25E4AF9B1458A8D8AF2E8357
A9FDB226AD41469A18944F78DE58E996C3888B75315D8F08C991C04C6300B4F111F5FF14FFF1
2DD6C9FCA55B96142E2FBF4941087FA600ACFAA02A2137720766A431070DA574E0F60E0F3009
D004671C05C37B1B45583DC371DD2FE9E6108AAEBE6A8CEF22B0AF23F68B44FC3E0CAFDA3AE8
0188F3AA9DEE25B099A2C0C4CB327AD3275A7DC004790DEF9E2BB835642B81254A1B8CE1F59C
F7BFC693E5CD4706AEA03463575E0F44AD48691C206B9800060EB2F80A050A332008C9D05832
7DD3E42F4D046D8BC37244599046B30D65B9D059B55827EDB2FDDB79F0DC693743226EC0B995
A7AE8D5E9BB55FD830753AC63EF8EAC1B18414F060F4613F868ED7E8D96F69E9BC82DA3DB64F
939BFD11B4B64A5B2E068796C3E1CE3926B2D6F442408820050D585EC449E2AB037AF3257DB4
3710F2BA8BC72DEFCAEFC767F92DAF7D91BFAB2AEF7FC7E98C8265CC5604F6D5F63BCBE954C2
ED8A58D0E312DFDCD46B7CC55981DAB0AE803D65C3BDA792EC50ECD030D41ED9C19C5515CB07
7EA57787A78A143F714B020B5E51790E3FCB235970C0B930CC0CCE33EC3851F86E0F8897E4DD
BCE32D78876F1BF668971E0E172A3BAD17F200F9AC224ADC85198F538ACDD6BDA89D5337BD49
1A19BA4344CEE1C0A2603FE9ABEAFBFB96E0402F1290EEEAF3C59D9FDC7242EC59F006146BFC
1687A5081562629ABCA526344DFB24A4067339DC7D781F392B9135957D61E7C1B97E29A4DE64
B7891054A6C33452995B9DF8C063803B20A5A85A8ABBF35B55BB4CA57E91916F619DD920C24D
7E61D85B549BADBA2BDDFD0790EED49AF54A6F5F62DFF642F05F718EA14C92647A4D20EE0489
2F15BC318266FDE7DCE53847E6F64C2F48E6A0CDE461DE6AB0A114B3A72ACC43A18458A3C9B1
3AA722E999DB610EB0F1DDFCD098314EACD40104FE9869325A9B847B74DC1A6B08F55241F8EF
BC6575766B3A0E3977F0BE297E20C6DDB6ECDF051C0C0DE64DEA23B02FC649A86CA14E0197CE
B2CC6B9CA3529DBA5ED27A7713EB43E133C60D2A12BF5AB59A2032335856DE22893F2C03BFCC
046A22CFD609EB0CB3284AF5F0BF9FAE44920C2BC3E3B667A40AF42CAA78DF97286DD34F5CFB
4BCB44026073A80030017223C4A7F54B49E87478F6B72523E6869BFFBF243698CE53DFC56A2B
12907580DBC8F29844F7B7780FB6517EC2692D9E6F7F0794E3F5D1D98C0CFB3395AB9D30102D
95496F3A07D65DE1F99F986887AD42A5F8EA442FD964FE2BE2887DE6A249CA455102091247DC
D69C6A3763C057BC6AF8E7C2C6140DDC5AC8545820400A6EB63CDDD1077969EFA7791F8C9BE2
0C35415DCA882E2A177A51EEBA30B74A4A76674CFE4B0FB190F3ADB4EA053CB2134FAD92B66C
81FD0CFEBF3EFC858B1B1343B32FBBD5C9FDE90B343D49666F7DB0577C85C0471B18A3680349
0D0594E602EE96BC3400413D97A0364C1E4057AFFEE0880A97D0B07D4C72F2E0DD6D59811541
BEBEAB66DED21D76411722DFF15EFB5B90BE6774622E29C7C3B409C76159C23CBB0A7D4CC542
B7E52B6C20932CD32D6A8941A231AB9DDBAD60DAC9494F9F92CB2A04BE0753742A035974C7B2
CC9C3C58A7986DBDD7490B4F74EC880F20E94DF05BCBCB29AFB8CA3E72B5146B3C3C19BC336F
07366B99247C3DD400B2897334786069C5B5928DA1867953653629FD9016EEE4CABFC071C3F2
FCD0A810880B26F5CFEFB5E23193D983D1BC6D954B292167A9729DF33590CBDCA442C7BEEA9B
97DF822D87DA8DF90636BB48005ADCF821C7ED488D0678601E2D2906391FD595553F5F4093CE
87CFAF9BFD25DFD3DA97A0DBEDBC884CDFD62F8A7DDC4C8D74EC44C6EA4C264FA9FB7F83FC29
2FC6A85D8E5540D05B61610166438F643CB4D2C5C0CED49CE885E53678F0207579162CD53A2F
07831EE409261B7F1DED1600C730DDDDF838365A683DA6A6F33E7A49016CBB9D94532191F666
05CA66E3BF54590AD680EBFE92A91BF600BD4DFC19B1B895BDCE26EE4C8F632EC828F60E8FBC
39B9B0CA053A00585100B96469BC6B3D372F84BF41417FB632D797DB504F449D8DE720531CAA
84104F76F1FFC2B4550EAFAC8CFDC48E709D377972B9AA380D4C9457C84AE40CFAB5174E33C4
8CCDF3509DEEE1422F7AD69CF3D90185C720B4CB0B82B5AC24019ACB847FAAB343BE85273526
9F98C12D8CB5D78A9A21996B72A71E83EF16EA611DCC4DB16B16C0960A99EF50141DFD364AD1
09F58E8FD2414978CA4C51A6E030DFC3B02CFAABC0DBA4012EE2449D7DA7B2970017ADCD8736
1F43A7C84E19C4A04D610F57120A69ED4EC38D1B2314A66B048A07B268590DB0271F95AF6560
A1CC21066F31B25E96BCD6EF687DC1D2D97FA44FDF5B1E3CDD84BEE32E032A27310A0D15CCE8
BEB01015EB3E0BECB7810288324E25CD0528BEAE974357E02808DBA3FDA1DD5103B8A5C94F6D
9DCF8FA92189D01DAAAE273EFEE45AB6EAC3A9780915272B8F7C3075AB3074FD1526590FC446
FFEB68D49EF85420ED72681896D377CD1B228F3A54928AE764D1C2FE62648EDCEE93DDA16187
B710B70D980C50116455019FFEC47D6D9B268FD9F6ABCF089B7DFD444B62219FC5808E524D18
5A6EA9D8662679D82B28943E457FAD8A8BB804BAA0A26ED7C4604745E01BD94FCDA7FD47F593
89CBC8E92D81028113DC6F4129C21A6D4C06F782400487E50F615502C1A0DA3BE5B5A168FD12
935DC67ED163886FCA29A6987EF8D92405315AFF0470DDDD1483D198004ACF11833E123081FC
BD5B022EDD1D8A2D77EE26E36729B40EE54B91ED653216806FD1DE1BAF894A5FDDAB7CD6646D
6EDA39A1669712A59DF05F35EAF0C0E951717EF05E05D47BC0619872FA285BE4B0930BDC5993
CD32F6269745563EA2DF9EE4CCE7714F9D0DB8CC65AD139F8854B3DAC7BC2ACD047F287C2C40
48852CA95A480C82C9071A22BB14E57D47B3AFC6D2A2BC96DB1D9DDF663E94C7CB0A06686B5B
06832690524EF5122776265FDC5852FD4DD935FEE5A03F17E05E71BA218E181150784BD37DB1
7A6ED6BFA0730DE1FD118EF42459CE5B2305C0A2CA87CAE5CB5A0FB79BF68077A7599BCCB759
E20E3D911B36A717937B094AFA50C3FBDBFEF20D9DE18284B3958731F082D2112F45780E082B
7259407103A3826F1848EB7AE0840FB90659BBCB57124ABE3B3D60012D43699EC1675A9A95C3
7E9009EDAE906D332FD771EB666926E18A6B772CBB532BF51482D92D1A2E0BC28FBD7246EAB4
2BD41527F2ABD4E1358F0CE1B09A1E374F9DE128FD8A499C0067CF3F09A5314898873FA04F02
B6CAB409B8E6EE6AF895313819ADEFD4906974BCA826D933BF01BB3498417BCCF211CCF67AC0
41016C776676B6D550480C078897ADB8FB0CCDBABF089C74871B48CE64CDBDB0AB941905D6A1
0203BFEA7830C0AAD6C32CA155844EE6529396E96FDA312E4C72E0407919D28C5BBE52050BD9
2E5C4AA61DDE9D500B243D4ED8F30FB0ABF32238E4AB33529E8E9766D93AC8B62148C004ACF5
03CB12A7723434D9B52BE24421C7DF41188289386C6F8DAB25434AC3AA3E176C297BB067F066
830FF1C10740772590753065CEAA59FF2561A6683CFDC73AA2DBFA299A25A48DB7A02211F586
249DFFBE444936DDC4A4D8B55AC00B6400A70031A96D6545CA37AC1863A9DCBC665C07A40293
7A16B1D1B65C08F1812613119292CCBDA5D628BA1D240630AF2FD59145A7F7DCDE5C82159BC7
EEF6A8492B0E3E69DBA6E45C7CF47CF7DCC96B19F57B5C9672203EED3EE9001C6282411E1BE2
157C5E38E8A747FAC83D72DAEA38C96DCDC614B819F6E84B353B3C4AE9C08FDC940005F14206
AD379A666D9812D032435C25A97631EA4D9234963F4183BBED6ED2B65C2C8DF6E43C4AAE5F52
9DD716D28FAA91268FA7A366A6E5B1875BC54746BCCE65F1CC98A10300D5F000E5F7C67FAF88
48E68ACAB634B5D90B8E4C69E1C2317139779388C3D13990EA4E40A3471DF1158EA94C1CA90B
83E70F5435D8A9AF64E5669F6BCFB437C12579F74B14D9CBAAB148169A652AA60066A43433E3
AF6200E44C20B588BD126BD5565BD38038FB332A8605811C8E83EA43EBFC12F9F1F3389904D5
28B7832DF876305EE931C2934CB9C6A03E66A4F042BDE91AFDBD8882890AEAB62B8E878D4283
65B48DE385EA6D52F020E6588D3D42AC7384FFC99B01E6218ABA693F5FFB00A22587A42D9672
83850D058130862EC67E143E3233B4D145BE1F96CCE0C50FABAEA414370893EEF80C0A2ACAE4
F61599E691E94684C30250257CBD657754378A83AC6329D50BB7E8C0DC46CDE54E13D094452A
0FD0FD3C7C7129DD6DD9F7D15B8B4C0882A24C33D5DE5B80884E2CB81CA458576CAE48514A48
7A94D747F2AAF4F0AC018DD254EFEBE96145A8D3C92F606094D2A4C73BE183B44108F515EFDE
8BFD968CE20747E2EAA0BEF32A6862CD1D6666C2D276134CBA9AE56DB71B9C030C87964F0B12
BCDF85FE8CE5BA1AD178EC4BF77FC769E90A0D46A88A9AF8C10022DC7D15E4242B9E28B9E65C
330A6349A51FB2BC14CCD4593AFFAF36890AAEF531585F6DE6060A8A1477BDD5F6D1E70B0F2F
2CDFF62368AA89177347CD20BAE4A96FAE26F9B4524F9AFB7109D57C10D2F576DDD9C1FC3AAF
DAACC1CC566F9BEC007A682F604279280D9799D94F6F23538C63369CCA480C9ADDCAF94E8E3A
CF47E4DA69039ECE2DA0F61A12A6D007F7680425D0829E67121366E8B4AB5F911E3A04EEFA86
E366462F7A90325D58416ABF8FE464116A33435358C525038BD3ED1032164F6BA3B68A66745F
73758DD06AA5693C34205F5B33E2681AF1EDC50493764FFC0FB42224959209DA11620C0AFEF4
4C7C328DFF7D2712D1E03BF07034637B4459D8D2EE228D01E6823C9C477CD234DCB6C929EE49
7128C73B5CDE048270440A9827B8282FF0B20C28A6635B1058B55C6F5C8809C6B9E3AC4A29AC
41ADD9AAAB2AFCE31F15B89F8210E03AA78BA8E63E4E3864C2CB0A8B577E5EA6B3967E0BD22E
C08BC53DAE6ED470BD049B7CB53FC213B8E2B606DD507111B221DE855CDF73573641E0F8CC5C
CFE1FABEC1AC991CF868155DC346A3631BB469477A6154392F13E2394CC0C61557BA30BA0600
980893256B6A5CE6C123A9BB639EF6C6A9BC782EB9222C986ECFA9B5C159675567BA5D69AF3A
476BC03CADB9C01EC2D79861B5F3E170B07D6E7991B27014FA33EA552C8462851E7DF7FD9F3C
76DCDE16E08B3FB44F0845B1CB354F26238E89EB656406077153A6BE189D2A6FA9C11031C1DD
16513FAE9290CAF9DF420BE75392D36A9D1E9B5D05B57763AE8270E9EDB4FEB6134D0B1B0BFE
1270A4402797BB76566D027F31E33D1FA703AF8F2608F76F99E02636127D836648AB9BAD0E61
EAA4FDEAAC409195E044032C2856AA780605946E59103DAD1D1525B7B60BCDCAFE71C78FF00E
83A77B8271AF411716A1509BC9E0ED98C19DD08C457D3F608C220DD544EF4D4B6DD31D8E6CD4
BAC1E30FF9FA95945A19FDA3F61B199E2A96055FAF195C66C0D36B300009BF5025E3CAD01AC6
2FDFFEA9E10FC5E6BC7AA1400A9B7D9E6734CA2C1BC4DF7D82142DFC09A56370FBD6F225D5DD
06C449598578BEF70513235AA24951323896B07619683DB052288C816FA08A752740261AD1EA
09860CCCCE951D2C606A2B8175C49F5F4DFCD17A207EE4350784A751038AC6446EF0DDE8BDDC
01D3BCEE3747A46A6BB2320A5003345597BE631C03280F5A699AAE3F3FF772F808EBB7C66107
40549DCFBBB26153031FAB1452AA82DAB8E37435D6C143E954E4DB00285FD48681EFEFA513FB
CCBE3C74B6885B6693957808AB234531C3D08B1C77B3719898BDCD93E763F57935EE2A74E682
2B11E298B46FA218B91BEA0847DD5163EB4B8355E1A59B4D93CC6E13D9E9C443FC5159839931
403F9B371AAD48C3EBFA13F6869CD6A761C4A025DCEAA2378BA1141FB3116CC34B676F57B800
2114D0E601C905C0B341A1A027968788D0DA1B7538EA1CD3FF889998B4C33BCF6708DE5BB6C8
DF46ACFFEF462EAFB048EAB6119F8ED70D5CBFB7DAB71AA6F2C9DD82F17524581AA73CBF6A22
5CA70781A2EB82B2209450382A55685DA2A087523264349A55FFE19F6E52BF52ED8E392C5FD3
B96769EF3C1CD2AE7FF15D95B72D9055D4B1680EB5DE98A399ACC23D8A0A8A59774E73519209
E0AB48CBAE1FD3B4B5057DF9DBD199A59F4A6B33CA2DE253B55A86DFF752EA5B69D5F0EFBBA0
A5C53899CF772B1CEA68C8AF11503371DB48872910677CA0D870E1B42D6AB2B4792BFE97FB8A
0B60CE830DAF6643C7307EA70643644D2F8D0408461FBE68FDE7379F09F8EC87FAFF2F6034AB
6BB2AD1D13F5714301C878C84253F85779BD1CABB29E07CC0D9C543D50B76C416DC6E90D985D
01E75A4197EFD2451336584779B17F1A8B96BA920CFDCF58BAA576CFFA1AFCC32B506640DCB2
E0AD1CDFF9D1907AAE407DA643934F1960F8008B9767342CA9A75B5628A0A3AD9DF5B6F44E08
6E3B2269AF255F5A4792851D403CF5901DC56E047670F6313233C3D11FE76FFA7E03C1DCCD5F
A9EC5627BF58D777AB50D413FB0C72DF4B71BB352F81D8045F30C1B13247FA86116167AD6AC6
D75F6650C34BD5F3EBD4DC864F414FBF34E2E3CF1D4A921B7CE7006AFA0F435A530EBC612E65
506C3547BD53E20508D39A930931D68F74FC5EA4CE9D5397CF925E6B445AF0E38CA451EAC209
D7E3C5FDCDB48CCBDACC57A062814CE2FFBD3A5CDE97D01465E790F69D79DBE79C87ADA92230
650349B98EFD94C6CC80EDD22B559A3228CED6CB5AD5E79507D23F3C54471D0C0B1A7D0D8759
8038310C232667A05EE8138198191A82815D852E967A9534F360DAFD0790FCD471CCE0AEF5D8
07D7E14D4AF93C6F7213CA1E5D864DD2BF9BE6879A3212AF6259106B3AFB611EFFAB7D87B03F
49E0F67B8BFFF7E9A9E30F1222D92FFE5F6870BA8A2D7856038623D5F280DABC661ECA98800E
758F8CC46BE45E4DD795C05127264B226236F26245FBF409DFF34BD05579086B9002EDC817FA
0A7B82CEAD24991718311D58D6F29F971C743FCD54429F0CB7DDF91F436D51A52BE1D99C99FA
FBB93E18DAE89070A9EDCB07674CEF1214C0FE6A4DF86B63399D82C50989A03541D23279B8C8
3EE0AB2A42D60945D7B1B1AFADFBBB9DA8384C4CEFCA6F6BB8F6AF3303E416B545939C3F6348
B8D055B9E31C8B450D5A0F292057349D639B0DD79AB8428E872AE2301EB48DAAE5AE32D63518
8536E446C22B9080C34C8781AAD7A5BC12738526FE7F057494960678EEDD6FA007FB8ED34A0F
61BEAF4168B770E8C21DD19D7C3C56A96ED431F766E7A6AD8C8AE6447B9902FD10A87197CD6C
3F771580B4634B807EBE94A169AA42081323E0DCEEDA4AD8B5C2BA36E82194D9CE4746214D69
84BBE12142BF9EA6DDF0CED377234CB504B40B203A8424E94CD0D9C7EBD7AF6E7781222F6CAA
3EF9CD4D547B9E8840A766B07A196F92B16CF470BA28AE3A705F1AEF3F7A4FB78BC7E5315812
F34E832A2625DAC422D278EDE610FB689C42F7B0B2E9BB1C6531BFB591FEFC35A17469A961F9
66A8065063FA2B2F57850270AF7AE77D6F2E2C62F7C9F046EBD581EB0EB709DE3C50B789F4B4
5B8B28BE16422D01AD6451D6F8329C38201A9AB27A162AE428E061C460CD7F4524C4A988D420
114340BCDEDA7F4D6E474DF4AB1E7F6A7EC187C195EA7ED1F0D6B78AFA3E9BFF7F452A86FDA9
6C2CB0F67A37BE74FCA44C985AC3AC6223AC391EE2E3E47F42C9594A5138B505EF6D89D2E38E
6DFD6C81984D85D60068C3A887724876699F0D9967352B5058AEE865D210E11ACDABA4F64006
F8AF65A2988D97E1B21B09CCF382C86E8E28191A30BA425F64970058F5ED779EA9EEA82B5CC8
6D05534152DACC07537E7EC725B57C4325FC9E4401AFA76E254B194C97907DBDAC3924138D78
EE81AE2AD9D75260DB65F48DC236DA93475354F57BE726B03F9FE8207FFDCEE6F5504B9141A0
4B2CBE7EAEC208EEFDE56D00E35D79916E8F05D4D5FE6FA083A76E744059416DE1516873E641
0695CD5171589C3631443DCBDDB55603C871367412C7170857E8BAE6677EB8680D573E691979
1992C929C163E8603467CA3FAC801E4F23637BAAE85BC118E3A0235FA797F0FD64CC5D15149C
1B1FDB4A50E7D59C777CE67F7C10DA9432C73417E5077C18953DED59B7964E8C1A1EB07CC880
43B095B8504EE177D1F752428D44337C506B1305BA105DEFE2F5F8960C357175DF864274A2DA
1CC1026E1BCD5D8CFC2AB5BCC63D1ED6994505BF969D3CBC8F97F0683182760B5B8972851A53
A133643146A803F474FE4118121F507F2C9A90D815496ADF3C9C2EAF333544711B612211F964
844FE6EB3ABADF202D5F8425DA350922C9F79C1C07AFC03640DE8E691CA7CA74D3CDC56AC0AA
7C82F99A057FDF9B1E0561BA8D0710D2B9EAC03B1CFB7B141D39693B7054C6815A0C335FFE5E
36DF9A6AE13E7313C6C7C2331FCA2D6A6F2208F72A0E62C74C91054F9B778957DD83C487E924
29D63A0FC567290B6B49749D3FFDE6173B5D5B9937EC597FF138547921EDFD0ECBB4055FFAC9
3A0C3EF17C8898AC54605DF8327D0E77E8AFD22CB8F73AAC3EC94F1AF338B3714A08C2132924
D19BD496BA4F1F76F410917F4429D5D376310DD5E12339D823292FEE8425310CF40D9A41844F
5EE2DCC2EDBD53544DAB4A120AB999B516D8B90CB30E1D8CCEE638CF1CED2DF52AD14372DA53
C9F82F876B77BD8E8BFD3189211657194D83F0E57034319AE16492E17B0766AD4EB3E6771F12
D8E8134A418A85888DA76A9727BC5B5B9A59B996DA8F135AA7759DABE5E3AEED9340169ECE3A
9731A6822438D8E8D44196B73FF8BCCA83FB3B1E0F66064ED52C8EED2E86F57B2CE5D4AF398B
F2664D15F3F411BF5E9F6470DBF2BC6895862819570971BF56897573634856B5D19058DE78F4
693A339225D1815F62F95204A9E42A49E834BD1B97F20C1332287248A98CD10690414D324E77
E2AFC5482402EE516F444B7DC47818A64F3F826F4F0EE067CE703D91F52B0C6A5F2A04864627
15F8562814D6EFE11493F110104FD734D0EB99E02603137C4C0D992CA67B9A7323E946DC8AD4
16EC380038933E3DDC4EE24215EDEA8125913ECA6EC727715C49B62320868E9407AEF30B07A2
AC23671A18F3784E6D98A8C1C191C68DD7598A65880220B8BA5B425010EC489022BE4D2645C1
7494BFD8F9F45FC44C9067075C790F90DEC194655C517A6DCF1FD3122CFC276CECBBC5FC6039
FDF134F56EE78B5A9ED678C7272FE8FD1A0E8B1C7DA8546F132B9552A581C4FAB5237E254036
92BD33D7BAD9DC56FBAB7C69CB79062527ADE0C8D8DA93E5C0CF8E4A9ABD743B65FDAE84ABAF
B0674650285796C620AE873558F53C850B0E82140216B4BA3BD41F6613519935F201FD0BB4CB
FA8D5223D1A26E734444920978B42620F21CB5A4F24FE225D141B5A56FB25029CB9976ECEAE4
8647662E7C98796899C3E1723DC998FB42F6F1B13D536F82F908EC3CA7FBDF24D4A0B954A821
71CC936DFA24706A5D4FB4118D87BAD0BBE0AE559C951E22A33181F31B92E64984D52744A4B6
E358189A88360B9521475CA082704F444791CBFABEEADD5A6708B864599843A181FEF2905498
30BB0B4793371A04AB1A9DE37FC3FABB9921C2E2924495C6FEC58CAA3FF4564E9EC89078E84B
C2066D27270A1E17A92E64AE34134FC6BA7E4F70E8743218EFC83FB76E76AAED306D6A5AA873
0FED52EED087B46C4583445DFEE680BEE70374C232FE1FBA1C16E2A4FBCE3795B030787D42FB
F97712B887DBB1685474C68CD30A6AED27392CF8EDE33C61C5CEAECC44DA2B98944D3CF40EB5
F24240B12E0567FF6F62302C5E1D611CACD6A249CD39573F7C09DE6AD8D01C1E69EEAE713372
5EDA78387FD25BB4E96FE593928A6915F821EDC87C1CC2B2C288C3CBF49FECFDDB20F47EBAB3
CA3818D6D61BFC825F164DD73AEF81C6CFC01EA5077B0564000C131F4D45E66D8A7594E95D8D
07D647C8D4D31843E10C259684E5DBB3660AC7B8D0119924480756B4355E1EC82E74509AE4B0
2C9B8F5AC8694B878A9175E7FA476420189C487AB4C9016404F13666ADDEF60F5B9211343453
5EBE0D172942EAF0CF53AF4FD7707D3BDDD04508A8D4DB1362B67F9BBDBB80F942608D44DD69
88DD8C4BC013E035A27DEAC29397E1CB89DDAE52F61B52AF29EB39C15DAC92F3EA57EE7EA66E
B8BE4622DC4CA2A7FD49BCD5196A125A74DCFC7615F6759E4BF2FAB28D7E82002347B89AE44D
4623A1979C1A885F700B157774ECA8B5138C427F7FBE595D9B7907CDD24E765659AC9A3D8009
1E16FDFCFBDA8A6C9C9656A0F75F4D391D4E503C00B7A4227B2D89437F97D0FD2334CF8613C3
19FC8AE7B9F31B9265A4AB8C3B40806762227A7D025FCF7B209AF7C54455DAB03D708B2FB3C7
C4845C0D539A6E3F055F19FFB857365FE39959BDB251FE4D36420F6695DAB7764EE1D9B0820E
17BC3C918AD2E52F839BE0015E6C596EEC813A6CB06CF1A57A00EE4785159D493BEB152CCD9B
4EC444998DD44630FE056C5E96E8FE9A7C44E810CA661EEF841A4F540D4F71EBA5660404D39D
A8A03AA50E4C6293F44413E90B4BC05CA73C0D5BB2169A4EF75E1225C6555B9FB66F9AEA4A55
0DD39B1DA07754C8F4430067325F1CEEFC48A524E521A4320E0884BDF5965DBF3EF29D6B4F00
815C26CA5D937E64A24A7D6FD126A46EE733BD1AAC872103DCB28CA020D3B50EAF57AAFF6266
40F8DD8A859A84EFC1504147C444526762DF179457A6FD46F7F02014F761D24438CFCB0BE296
69E6025AA73236A5CCFACCEFF05F45FAB87CF96EACEDCA999E9D49E1E6F2D3491B5BAF9BDCE8
5DCC9A49251AEC2589B56037E5032E9674DE1E92C97085DD5E3CE2ECB83DEFF5E4D37CCBC092
CBA6AE8521122C21E23A1A13FC3A3CF970E0182851B7B729C37C154496250688D7870E9A0902
CE7A2B9B22C77E58C057B2ED5455962828BB3034E5CC1EB74EC8F68C75D9EA50739DB54782A8
D55CCA7C47B05A75E4A8A51E54C383716C0E6D59ACFC0A66CA5056A413801EB193F39DF2E7B9
775CC59F005863B9BD98BD69B357337AFFD8BBD9FEC8C0D4518AA6F201E1820852A59908C10C
D48F29EB8ECF19D2168CF7BB39E60E707A41A3D1B84A4704097D689DE1F111F5CFC33D8093C1
F0F811DBB7908433E1B4354AC6A0DA559464E8F2CA94FF5092DEC40E949F6C92B8F311D3835C
623B734B3D1F9D54F2E933A7FB664FA0DA414F608BBF614C65E644723B2A723661963E7700EC
318115637D017AE4DE8EAE0CE6AF903487D0B3831511AE19CEFCB8B9CED35C65F94DF9806BDD
D82AF0E521FB82A5B4CED998E02AA316A04CAE953D731DB0854D9A4E1CBD272D74AB47572D68
05067C60E4E960C240CC2BE2AF7AF9E1304C0CA522DF528A18923F97C5CE7B4409FDD09EBD6F
BB800D11A1C6882B8965DB70E019970E1F6E541BE5219A156C58126FBB21C4726056C1C33561
32B85FBADB5EC981F8D9334FCBECE6785EBEE2174BE962766EF60B7C02F249882D05E8CFE782
237F4D9B746323EFAC8BFF9C1CC1B375C620CC708FAB00BD2EBCEBA4E5C0C3B3A4011A72FC47
4F974CECF0DE5DB304E5A06C04F3D049724DA571B64697C1A80E2059E6BB6A21ECD81A544F7E
83C6AC240F22F25F815C20C0AF08EBA624467DD4B5645E2E1F4DEB2C760CE6CEFB0217E000D5
A7895B4A62ED06B86F2A0082F1AAAC04AD55A5102401E897C6C50D616845CF92F25A4147118A
464D4B94003C7BFBBF3AF22AE709E360D5DE1831994B483350F1BFF514ED4782A9C6982F7501
63DE2A6B91F67713F49DDAC470C19E9FD4A1250030CC67868662C0015432AD7AC88366B70E0C
6023F518500BB68C4D84080EE5B692AF1C78C35D48F4F3392B5E4FEB298DF0B869A28B8799E3
0CCA3C45400620E9AF3D61B5F8074541BE64914343D177B8988AE05ED460AF0180D04B8E78C4
67E83C0ED5D2C7F8613439A9808F28BAC8F3ADBC52093E4EC591692233562CD5A25070014F62
C54F1F1A6083C275D7DD8A776E86C207DDB702F122CC92F73AED70DDC65D627525FEF041B597
03B43840D82AC30DA54B5BF852E1A9CD5FBFA4CB3CAB838BC2D4C0B8ECD37C641885258AAE53
0BBF0C2B279DAD677F152A1ECCBE6C89A55684483127C3D03AB7F4D8A31FC04535259B242C46
EFE89BB7D09161ADDA5AF99D63E6B023D3E01BF576D0F4821CB5DE75CD1212DD292172006FB9
DFB70539B1C9A1DAB6D5AFA53A133FC22F337F5DE642B50EF883F50E5E75037C2104D36E1C31
5251E246EAD10D073AEBDF2643FD275B6569F1F0EBC42DAC6E322747C3BF4312585C97171F03
026B81FF362E10FF09A9471224453AA4B32887553668BD484B6356FFD5223FBD8841B584F3A6
983DBDBE0B4EB9A4915FED5639BFEB0EF3506F6D5F28C9BBC24F1B2943FFDEDBBE4FC4EB4A5E
0F3E4B86D57EFC43582E6AF464D5808200E9B75657D53F2405132E33AA53D708D5FE901C483D
395F3013DE8035C445B3E6F3FF15866A0A6A3E6BAFF3503E8B4DE6A37600F24F38204FC7DE40
77199E4B77E6C9370A6C9355668E70A65F1548CDD938E52CD0E774BE108CD6ADB0894B86E954
2FBA918E606C88299C92B250E2D63CB0623590BA7C715A68ACF004FFAE4CA76866EC20E14588
872B8E80F2FF582531601762B7E4F677021CCCDCF94E277439FB143C5D23F360A8ABCEE65224
FA153538AD8DCF7599752C8353258FFC0AFAB471B2046C5C99BFAC2A639000B23A6497C0D78F
BE39308D619108E17132FD52C82AB56FD72827CFA98C9F4C27249C111552D863687717974624
AE692A23EB6BB6AA6AB2904D066CAB913774997E38DEC623488D3EDA398552852A6E49EBF291
BF4E10E59072CFB85A805BC7BFD9A1A6DA4DB243AD53FE158ED1EA3DD8A8B132773630C6417A
0D6BF88D63FBD35C4EE55AFE23D45032939A052E42E5D2CFC4669521A45043A37DD06F61C145
C93DE5405D6AB6FD632A1A2D74A45FC944C2AFE7D66C7F43AAE63CCCFA328DBE0ED033EAD7C9
4B4B4DB0EDDB167A845A2C918FCDB3509C2F966E45E111EAEEE77E4361E86671DCDEC06E6358
87DE61485270E33672C0820B62A53F97E54032E1D3782BD14C7466EEE397A31B58ED534917AF
A762A63F4B2A1E6E3E46FAEF8071B99E3A749A5AFA03F45E285E6F69BF69B6601B5B92CBCE3E
82230130E220BDBBA449FB5DF7D67066447DF60748EB5FD9A4D177B4DEED8443A55AE6D63CB4
D960E3C7488B900A95210F1D8B667E8356E8F4BECE485A1401ED4BDAF19021CE99E09E359AEE
DD22DE12FB4EE8933EA28967704D31639E045585813DF66B97FA4A740FF3725356254FFC53F6
6375EE08EA4181DC70EB27433BCE126F98163576A7A75CC27EB8A9A9F8B11B806E21CC27805F
D892417724CEFB8E4B34524D9CDB6F900C4A08FD6FB0656041DC4CFC907954C77D42F130E2F0
79631EB8D67A289E74C4DBEA0600355024A1AE888E907D73C610A6157AFB983CC041AE3CA368
1F518E7574E9F0C6A5C89686E2479EDD4C098EE928C74F8AF2129E476A60F069CB8F1F2F04D2
33B47C74A5849958A4AAB9FD031008E9ECFD5034887F36CE4899EAFFD38729E4021F9BA94A93
04E186726C24CE65A4AF720CA086CCF6C776221DAE558C9F3A6A70ACDB6B34B0946DB062967B
C2FAEBEC9FA64FBEBBAA90401982EE34333ACFD2F7287D9FC0243A08B369C394273B39C31EC2
DB1DCD299248371FEF0428C8C84C4C064D77BF5663A8F0B067E784BD3BA9FE3AC720D9AC048D
70EA93BDA9A9FC7090AC36BE749A514198C6A9A953650C73F7C40B496767F2FFA303134549C8
C0B4CA24C40868D22126A8A2FD6DDCA8535792644F109D9A53628BA787E76B6A5AB7E4B2BF90
1F7547388839D9E7FB2E8114EBA3357BBE95F10BD70C16693032234DC8CABF420D14019F3C3D
BA872D5C5DE8EBCAF343E18345A2B34B9D299E6E0FC49DC07A6500DFC27F7E78724B01B56523
87F59ECD335856B76694CA43350FB40E3CB11D4A1334E86057A88F0372622DF11B4C6AE2F02F
4E6475B4351265D1730BD0CAF5D6891764FB5E5909DCA5A2ED1AF0484E3677CFB38EBC5993EC
87B8B4E588FF9C2B85C61F8704E1DBE89AD116C55163B88DE73FE118F8B6737CCEDFA28A37C5
CF58BD59CD6C7ECF9306D38706DB046BA0AB5542BA5391808EAB5B2211A3824A018266BBEA06
074703E70093CC624824A387B1240023607EDFAC35FADBCF2F238DFE1A2BF494A7BC16D16381
ED52303AB267FE5BC9C9C71848E8C0AFC603531193E8C6467ACF2E96FB22E56C502394CC8721
581E305295002C7316B251A9668945761CFA5F1CAF4A6CBE8F74B69D65A2307A4195F6D264BF
D4C2DA1174006EAEE1CC0F66D50507A887834D9710C40DE47D2B12F62827585F49A76E266F9E
4A787F6012AB3D03488F0EF975CE81882C42D8E14E2B23696B0D7D220DC130F660E758E70FB7
0C9F6D77437B10DD6245324FC6BA21DC0E9C4FE5BC2344EEC300C6B9B53A68005A38493A7829
EF51F89EF4E049539E237687763E951D64741C0714F60850C8822070E8AC4670AB6A8BD9A597
733DB0C113801698E89F74B5892050170B1220F66D123396D40AD0E32EA8DC3D7ED58E26C776
1E997BFFC7468D884A0518A201D132D535067138EBD3185E84505B8B6606882270FE2B9CD394
66D6BE7583B3F9B1701EBD49129ECB6D8DBFFC80382A95DFECD9B35D4F25D35BD39CB264082A
0A12B570E2394DC231CE55ECD62122B7E8AF1AFCEC346B0AE92AAE17EFB5B29B234187C79DCB
1BF735CEDDCDE0EDF8F1E514A2FC236F37D9D41CA8E0AE329F4D79E1EAB3F345EC8624153E6D
E6F5C5F0DBF8FA8B152E3C10412714466F2404472A78FC7B984B3AA8F6F655F13C3F1FDB10FE
BA215E5F3561FC3C79D07BA8547005665DB79F64C015552AE573BA32AD62FEB08DBDB5304B69
869CDA9086F7D180D6179CF2B6ECD220A5C20C4E3B6892BA80B3FAB8E03C05963F1C176DD30B
510189AAE745AC5C03042CF95AE3885B5407C323B4349A3CB445EBEF3CF298725E1D0FD3F240
FDFB4E38C917BF10F34FB5E5BA2D88F72BA1C08FCAE86774B0535B31DD7C7D47B066C4716214
671E653A36759D0B19AFFC93F64B41B83DA2BBB8087B07125CB115410A8EBD9D712B6B7A54AE
25F79B7C6C70C7FD9542FC0CAC783F3B8F8E9AC4E089E6F4A6ECB54F312199CEE85833C5E077
5DF387123383C3770056473B166AAAD7E3615590B6EB9979D837C3558EED8645354AAB3BA242
71D1B18B87514847C59AAC104FB483C47F3CEAC41ADE74F9CC5D86E1509ACF12BF29C6632D96
05BAE3AE921C6EE6219BEA5C54BAA03FEAC7E4BE6A2C2570DAE022C8172DEF353FAD3BF44F3D
38DE838BA4E0F785973FE639321022C83EECFEE606BF47567DF300E3CCCB041766285912B011
249F26CF35049E368B855C960DBF5A84DBF4CCF68A65CBFF5A46BEB6A0E36335D886534A295E
A6D6573DECC1556D3F805030A7853FE4F6E896A722CC5C4B968302C7CFEF896F38EA2A1B5A1C
1C73D462974AC0730E6829DF882D4FAAA72DDE7FDB838AB8ED392257B2A1B5FA781FD572990A
4493DF8130BACF4730D9FF732DEB84A31CD76FCBB154E383A55A3C803B07057A92BEF5D56559
A876E760C6A08D2BF31F4374A9796F9FD71D323AC9036775B346B99E6AD2948885461CEFB703
B801EDAE4CEDD9C62BD1AD15C45A6EA4FCE3A500C8B9FEF22A8D8D79402D6538F9604E11BAF6
1F779323B783BB1BAE7E12679890835D150CB3196A70FBECDF3AD7279AA24189D8F75C82AF58
A9B0770BB155FAD8B400656CB89DEC49B3A14E5470040FA18E6D86D071525F1AF2A779E4B274
1EAE1D4055DE3B520E143A660A7E9ACBDC354F4589C59E601B8AD3628998DE791CCADFC45486
995C69FD315E09A33DE11A09551185C1D843A11AA015C2C43281FFC38306A3A07917996E344A
3F230465D2C42F743506DDFDB0B1CA2BE16705F4299C77DCDBBB78646FA07EDD0A411082251A
B49CA270CA0E9C6066E475C5967A4FAD7264638C63DF88351371A7A63D0E5B3064747E5E9D52
B99179E13FBBDC9461A54342DA3FB98FEAAC7A1DC10B6E708EF04E7A02D84C72EEB0A3465FB6
B1C76C2216D218E64CD54CC3F690CA6BD98C6913A0BA9B5496C425138FA04797CBC1566F381B
CB46BF2C68AE286EE2A27F8B9EF7D232CC89485114A5B2FEDA1D0F8AA97425E29A7CD47600E9
82EC75AD3C58F4F28E908FC0F0955560F8502A4497DF6D4F7A6A1343EFD6974793E2DBF11B1B
4630DF9FD380F0CF01BB69ED2C2B13010AEC2173CCFB4682552B2800E91074A31A83CC3870A5
5A70CD79E915BD08413324E14B88C9EE9B34BBD92717BEA8F6DEFC8E6DCF1868921BBB6AD163
057D42EFACDA4048F5DC536C7B6F0E5BDC3DC46CCBAE5B538690E679E7CBAFBE78C27B8DB99C
672232AD764FEC2D7218E1FAA216CD1EEA7BAFA5AFD6220CF4D1EFF3F013D082B93565355032
0D6663C959359E4E6B9B439C868CFA0F01429B5E976A1FD2876E3E722B1AF363466361057EDF
0CC2A93BF4A459C0730DFE9E7C7B19A1DF3DAE8C7871C78180A1828578883212E0085A3BE918
DB0966D965F3199108A68B3A307433E82341B50F5509A9B87D4AAE3F536FADE30418BA1AD8D7
9E1237B4F84067345EF75269EEDA1F024030EF28CF9D79F81D8C5F9F5BCA572737D60933158B
CD61655EA21DD1018962FB58A52891857FD440EE871E6054ECCF8CD1546827852F1843F8EA41
C701AAC221E97F4C74DCF6C8600338486FDCA002FCA6A68B740D288F6335CB3687E9BAFB5D6B
B7F3740DD9E1A6AD6825A4BB522489766C84AF2A1E7DCC8CA0E2669B9348CF47C77A33896737
57CDBEDA57A079EC6DCC516B51B67C9F2DF4835AA127CACCBB0B8E42DBBD4B635DDEE5CC4EAC
1FEAFB5BA3E104E495DF8A264C27B2358B286F81CEC983E9F3CEDDFB8B5910D81C128F532398
2FB87588DAB1CF1646AAC3A4BA66799A18E0B833751625531932BF9096C3479DB8696049D6F3
86B4768155148F2EFC928DB22BCF53E59F01663D50DD7C13885925C409F27D6E1D6F1B229A1B
AEB68B423F74B99739D5912BED355CB695CD7E15285B647C53EDB6AFA48F00795700358EFB2F
0E01F9E4C5456FF11D56D3EAB0578287CDE175F095251AB337343F4C2A6B40EFF271467B5250
35F99F69FA9ABC2CBC78BBA342BD1730BB5C3CC07F2B8692FE89328243B54ED897A5BA9772BE
64C9234EFEAEE62AC5155CD65A66CF188C50FFA53B5F3B78D49FC9D35C677C6A827EFF15A10B
1BA2DD7B1F90F310220333010F36E9D93A5DACB253666A18D2346DF08C9337CE0FE806A745E2
898B4C4890281AEAFE22FA42CA6607AEE24719A416B0BD943E416F937BA8988C6B520E6EAE78
DE0E309BE1C2A719641517E4F3D5482F090055900BBA8FF70675B214126EBE3CAECAD24666A4
7770325903AA8271F73ACC39F5DE03D250F2F33C6259CBD823F6F5D49F1C34E361C987160749
13F8B0FF2521CD08914319D171CFD1E4966562083B418EC7D9647C4DE55E4E03BEFC23006E6B
5F13CBC4D1AEC758A676B5031DC080713163873D3DAE457BD75ADE007DA158CA2D08D104C39A
D9B316FA542C1420B6AACBAD4D493E1C772E4B1E2407BFEC694C1C9639A008883F73A4E67827
E27BA8181E791B10248AE0E2FB581E1F6C4E7E32C64ED03ABA8E0A242C345F3CB9BF07772BFE
E7B2E6B81AD533D03F528D18E31914BFD244D31677A2A2E1DEBEAE80314E2FB38E76623CB1BA
725DB0CE13BEA97CF447FA3938EBA6ED2003451C6A89D948BD1EA907E3A94FF65760D53A20C4
134A4868F81F97472F08F4EE4F4EE59F0642768C517997A8494AB19B20C65CE2F473FD9B3734
4969AB121734534D6CC1C6BF4D5720CD01D4D889938E71BDC3B8074062849C8A1145FB69CC1D
BACAA7FAC653644FF5F484F705793B33F73C321FBAA03557E85D3B9B7923A84B370F6F4FC577
6ACB0C1423C7F3FAD934C29608D9BCD4899C6DF59C2398679578D26D5237379E41E967DDB67D
798EE6EF00F59B50D8F0DE4288DAE073824275C20D609981074A583C43DA7A1370DF9009BF8C
058D60508AC2B4DD97165063100B5A622D168C7ED7CF690769573B7EAF6D8F99DDEDB0962B97
B9C40D38B15717C83538FB95E243E1AA1165D2D3040420737382296C3EB234EA045006C25818
D743D175EF2A80CC7E0E2BFC77AB2713011E4FF718F5166C101B279598D7CAA9A45A9FAA135E
69B8B73EB512A6ED54EAF33E324F5536500D5290F5477DD3385187E29A3BE985B22F7909DF43
848372D2E013ACD50C6DC1FC4B39F5DE72DC293C565CE65712BA69AC33C23B230757C40DDC5E
517385E211C5E1DB2370A32E4CA069001AA0BBA1D2EBAD24331AEA8692CCDE85AB67EB80187E
F452AAF1F741C62DF21F715F51310FE22AC05F63C4E43C879F6CCD874648FF6A0D2A18E241D2
0562DE8AF2D795CE2F285CD4BA64ABDBCBB00BA796C812C61597B2D8CFDD6BDD8ADC7E90850B
5F60E14A2793DB4393DDB9BCAD01D623D2D9C07CC893AAE088B42EC99493E0DAC521752B42F0
E4BC6ABBDCFC92C674167E1A6DBDBBDC5D382D1932791C25A31E114B48F8FD110D1507603A56
9018201869834B631CA6F91178D995D55E9FF41D4CFBC08D7655209B25E74AC28EDB08DA4049
A6400FC8F0852A6E9D1DAEE159F507A56FE59BEB177B7A8967A8B043EAD2F2C0C1117044F6EF
5406B70D3CAB63C7C97ED5DB5A4E81C85622E7AC8255F292A4B1557EF5CAD30D5B7576E18DA9
43AB5E37CD446C92EA057B137E47FA377E1638B32FE24660E9B27D2165583FC4FF7EF86CD53E
FEC4C70AD65EA222AD2BD824F02754C58796DC92A40472BAFFB40A922E5302610FDA9A6DD657
A3B3F24E2A85B0C3C84394406893F297589B942AE91C0CF13B4B25FFA2EA8A4C642A8D1C7E5B
C6CE6DC6F89B76797568403070B1BF1A70DCBD895A83389CF931A2D1E95DD24A013CE9991FFB
90202661C150EA7E92243DCA1A3412C7AEBA5B94681594D8DB66328DFCDA7D0705377AA311DB
242351C6308D41068B2B0307250635DE75F9E0E13B9BD7C33F544A2044F393EA8D3F7209660E
F6C9C24A62935686063A0AEA796F9591B9C7F9E57196E90E29881D5B4C094F6533785E48CB71
1A54A839566386FAE57D9B6AD584508DE26CD1CD1DF3E34D41FF74793C2F05E3BD7EB18BD477
6C0C49B215EEB498D45D21BB60E36F85A899AAAD74B45AC097C3EDEC6C36D97B38D4E769A502
6CA365EE306B5DC1EE932F9AF12EBA52495A6B7B737129EBF6B1EC165867D545C87161B99EB9
FD7613092465BD80BEAE681397D56E3329C63F1BA8F48D4396412D750BF3E816EBA24C189489
7B39D4DF8806B6B059D9F0A20533EF4C19AB8DC8A0AB5F49446689E44233E4A76F1C2FBE27C3
15C078872399803E0E58629E3993D9B62FFC083A6C957489131610C9F9A130606BAF011921A1
5D44DBB0AEC19A2BD022F2B713C41BA0C7C7F772D24ADE8C8DDAD89053F6416305D80E2554F5
DC9A7E21A1C5C4FE68F7E66B500D8D2E4FB2BDA0CC3A65CE609DF98B81B264484290807A7FB1
73C4D5A01CB1198EE883E8D8862AAE210C12E84330165B83992245D5E3BA046C3FB742C55EA1
D72A086B36D9052E981B2D7800C94B4EFA2F9C9555A1876A3AC1B49BE72FFDDCB6DD704A5BF0
904C4A2B10BC93E81F26CD4C8893954D150299FC47959C0597F9A828E86CC2E4F987DC140B03
C1063407C924B5F32799CC29B231E0523F6DBDC920D67CD823E5A37C44904515BF348D75C969
1BFF90132AFAF15121EFFB54943F01A6550F06C6900C7876BA533BADC79F499278791C677418
7C917570EBCCC804DC42930804BA24AC79B84E59476E5FAF06F155AF18353DEBD21958FEC90D
4D7A5C97511DF5BFFEE9C77CB5A3DE52A4C4AB6AA405E3E4847900D8B774486A0DCB2AF23166
11B246545FC590329A62EDFB76CA767F7676FF21A9D171C77F5CD310AF7AB6FFB10B74581F9B
10A6CEF863F86427DF0ACCB2BF3EFA7BAC5B0104FB2750FC111060E5E53B2244DFADCB548C57
3FF3771BDCE4FE8F3593B2A47C05C13FA4782A75D1C2A8D0AF80AC1F5A4AB174EA3F18060202
C599915BEDB9DAA2373AFD71099D565E976F59642A930465A7A45CD42E11F657ED7B5DBB49F7
FA58FB739070484823526652FEF5340FABAABE7679C3B951552EA2518240422C6EABA838EBC0
D42F7BE627D7B9CF20D13688FAA0A80ACC5F293C00F580A3779F331A52DDE22D5401C78FA42B
DFA0B9D4979671FE7CCB642972F047764CF5CD0E180CCAC8154F0021ED854D76CD9364A77D14
F2C7AB778CF6459F47ECC750D9615CF348FB94C4A2259EFD2E5D415749513DAE442F840B5046
79B5AFA05F381DEEB9885E21E8DF0EDBCA9DAD5EE47428CE2E347AAD48EE6111CBA5A3F77802
7E8B62540E1483577235D6F02445C2C9E3364C986B51FBC03B4302F48DF7716C225DB04E1823
590E5E64F2D776ACF6549768554DD376E617AAD05C2A764DC3BEAE8CEBC12976F1DAC2A41F5B
32B48E412444F3616DADE10AC585E1D8B7936C4A293CE678CEAC47D5CD1395A05E4ABEA987E1
3A0D1069AD62450135170ADD22E02570F58242CAFEC1E47089116511049AB559DF9E1406CBBD
E0911FE9D3C1658F58DFF363D4E5C5A57FD862C347E7DA9B109AAEB6797919A358DD4C1F23B1
04F8233A7DE7A256AEE9C9C149C6B447F417D55CDC029252B6034C3AE9FDB45C35DAB333B430
890D1A2D3F32B6951EFC53DD1FC9E521A5A891BDA1F19B373E6A37B9DE1B1E503F78F27DE920
911E16FB07833C734770F17227F7C76D7067DA1BAA3887EF8F16D1643156AFD52C4910977784
06997633A63C58FC63EE43BC83C99BD80ED298887B91F3388685F7B13C0027547662CC0F64BF
2AAED6A4362D6C6671724451AA003D87AD6B9F8ADB9636F214BD5F013C4C0ED7EB685C17CBBA
CB44D912457FFD0F3726CFB8500487ACDD7E580346548BF165A3E8DC2C2385E105656A1E1953
5263A09E9BD3B7C0AAE2D921F3321D9DAFE7B08814DB726F7B56C59804862BA095E4C5D3E5DB
454ABBBDA041698F951E8808A8A5CA86CECFDEC00A2D3462861D871AE19E8F223C755B0C0F3B
8710217E747010502F360401F98EA2F46E34DCA6BEF7EEDA347C0351B17555FF0C61CD568135
022A50589239770213A5324AF5AD0F68D85B5A87D5C600A966BD16C7F2C4D80600935F14DBBE
FEBE33105CE41716C0E62A1CD18080E5407B0E55D575BFB41033E62D7AEBF9E61415D3F32C02
E56F018BF5D9A8B8E47A0929EFD0E4710D52DED51BCF60B8F5DFC9FE7774F0B3C4C0D9E797A1
22B7A899B5FDE3F2E6C636E3BE4EE21ED25DA5DBC2890ABDE56CF5FE7C47A7F04E86B204067A
E4FD00C32BEEF0939C128DA0F8601902AEED5EFE6997B313B668BD3594ED719175807F03BB72
16F722884631435E05598B91AF40580139CA927CCC50746DA1D6D68AC3567E9A3A8DF77A60D6
03DFFDA9761C3466DF50C8FD7C298AC713AE7674EEFA2537065A3B6A67523E5C4C4267BEAF87
1B634CD26392ABD8538A54C4CBCEBD0B7748B31DC43A05CA835730D0E5EAB7AE8A861256671D
FCE6A8B2D37A4B7BD7132179163EB4CEBA50464B439AC81FA224C8F7201C345E185D53D14609
728BE0EA91B584E78BC2E7B88FB454025FD92F0423E6C821A2B783CCF3FC8D7F2A7155B61096
9785B346C5E4447513AD7650CEED23C2F991A8C3DC215953E222AF8456734C56764E3FA539E1
A502394367E0F10CA1EBAEFE867681C6E7C5BFF5433F68B9735E6428A9166EF62CA43BF02036
DAB15672A3805C9EB03E9EBCB6FC16F943FBD67FD7F5F1D25F64CB417E038569040A4250A15B
C0933C6C86B6EA0D59B85BDBF0EDC9FC3BF184B440AE5E5136B762A23C743DB47201437510AB
1EF118990945F9752390B73F90B9CCE7A281CFEFC1C643CEF2D67398271F7236B1CC124AE22E
AACD04B922BF405DD4ACB82A7BD28C4DC9B2AFC7B152777798917A1BA5C92C14AA34321E94C5
C3307F8FC1AF824C52BDAF7F51E95D8CC79B6759D6073D68AF725410BEB923DA287CD54C202B
91C738FDF5A9F41A4C5F0A8DECCF48F5B579025FBB83D8B039AD73C82EDBD6065CE626F5CF8A
838ACDBA15A05A4BA26984C1D7D906A30CF6FF28F443E967FCED75E386F14DBBBD58527163D9
050F1F290D0F9E43873EDFB865EFD791D1C5BF64582B59B8C1FFA03BB8CC90CA43D466E67333
A7AD14E3BF24F786D05395A04E32C9B38D5ACA70E10A3AB5373D59675DED7D69B4463C43E071
59EA1A028A5AE1125C637E430C0489D5E15C8C303762165F66409AF63C3A2C91506C56FC3641
193A79A630AF6ECAAD5D83739E70909727EBB4F16A4BF721D6FCDFFA5D954F7848DA06E28FEE
E1D283708165C220A63B4A864D9DC5B6DE0354BA9353CD2B494261F7B257B0A754B3CDD52E9A
EC7C566F507DC292B2471190D3EBB72A4E1BD8A42591186FEC62E549CEB7BF65D7134B36CEBE
73272E8C5F8D72CF2A9058E05AD3C9765937F570B802BA20D0D02AB6E1B6BD9C2B396591173B
4C10976293041155FA4EBD82C51D844BA8F80DF7CF5FD65E3600694145CB35A450DDE4A8E878
56044CA5D60337ACEF015930AAF0EB5CDF0B1E1A68BCF30BC0E7EA5D5C2736FC3CD262CAA6A9
0E9CE2E04EE096305327E1C8FD3AF080DB83362C48A141FC130479EA1DA05EDB076109F2387B
F05FD252CACC81FA1903DB9992ED1F64E2FE510C642CF4CFFDD4EE7B10C089B5C86E5BB69DEA
2319C2932FF45D29DAFE3C82CE7E40674BA0B3D7989CAE0A727DC2A235D87A59DD3B4D35095D
FE3C155C6A81E101E6FC517657BB369AF76F6E1F336CE401711D6AC2A8F59EF8639E3EA31CF9
0D658551B204D7FA73620C0F58C9C6F31BC04AAA58346EE5EAF4A909E5718206FA5DFA33224B
864E096092FA5F1CADBEF77CC148839D34BCB5FA37534E9535A89677973CC3074D1AAB7DE161
902209CF7BDC36A72D819B3F56EA89DA7311EB7E9127FBD76A2E4622A13A8A75D086B233E4D7
AE468EFB3E891B98029C051CB3F8CF448559121E36CB382CC227349D4E23DFB4B48850E43703
1C43BAB97A3DF6BA3745036817D9E2A279A72F79FFBA64CB7BEDC67F003088E4FF9C67B955F2
B27755B4BEF3EE2004952A07757BBF35D867213C46EEFD6F3E7C3788B2FF6395569C6DB9B754
51427FF8C981F93CE4465B8752BA981245C02D0114AEFB57B7281ADE51976D058020C20316F4
03545D1223F759470E0F13615344F39EB233C4C3B7037D802F14AA61AED76F095928A791497D
A74AF37D9E6BF3F9279100ABFD656C69D3F213501D581FB5431208691E7D1C93AE306642391C
361ABDCCD0E2C8C2B8866FA235E37E306EF9E3A7F8D157D08ECEA6234A118749C1F8F86EDAE1
B65CF9925D7661B86DD88CB1284CAD6D5BF8288B75A7FC1B4D368C67D4268268617017A7FEAA
2BD49F2121AEE3A5B86E1C3960AF8AE73876478F2FD6E77D9897DC2208ABCD87EA3461A32717
CD25B7CE6B7D67E233D2B6203B779017CD300D07463E856BF938B9BF72FAF468426DD43186AA
9DA5DEBB10E12D1F35F89B464EBDA702FFAA4673D99CCA3ABA68741FB9C2EF7AD75A262168FC
807B6C7C9BB8DDE5397DC7C03AC3FB540DC24C55271675696CB79456ECFC51D623CF61527471
48ECDA89B0AEEF1388F71038A8CA246931D47DA52D3759B66491F5F8845C2B295BDB417512A7
30E9A1D9C25E0645E5031ACF12E66D25DE534D3C0CCAD4FCA5C1E12177CE38447A8B427941E5
42650A8E5F4430A46B3F795718EF2CFA98E9AFB21A67FB9FC1C2F4A87DCC11BF15C9D1420AB8
37AEC4A0F7F17916055B0E829711C1499538AFAA83DDFD7016B89951DBCF1A8867A10480DACB
7FBAEFE55A8E2A54405804378F11CC8085F7DD8BC2325268FE003507EC92B0D9A3409B0F0E01
BB0A05C4658C8B31F7E14D5FC2620BB81AE267E85641F246C7F8682B910A08939EB3AAEDBB71
7164658976C32A53A2F93B60BC4731A1095F9314F31CF644D6E84A5F6F2D0A33F2E647257EF9
D5914E315403FCDD5A7592E11DC091296A5E395D89DA8B85E18ECA098CCABC775E64DA9F30A5
33113A5122E2E2BA128B0BFFC9BEC9EEAF669E88AAE1F659784F2907EF646A58F6644FF150F0
EB3671758C81C882425249EC0FCF7583B160507EDBDD5A362923A741E4FE92F868821C006354
25548AEEFF3C7C3094A651F9927CB7D0CF9C895DDEF6EF8BECF94C29816A680323DBA8BF395E
A2371445E74A09F90FCA22432FB4FF9006AC2789421AEE701D54617ADAB9CF351C2DF459626A
FF9DD0D5D5D9DDDD2CE5A42A5FF736C5881A86B94B8B20100168DCEA4466F5DDBB73352B0C81
C69179938DCC461696702A3FB77DD6D7513535635E20788DC2A018281FB7231D95C9B9A94BEC
E5C6AE242126D38FC6F69D155857C1555031925AA842771478C43F7E2205388949A231B210F9
696D14D18CD37AEFB0DE2D2AFDF53C84781D5740FC9C969145FCB45787E3E26EDA743C91B2A7
E10F248FF1B38558A4F1447798FFA9A41D5E5C51F506560B3A33F632D856CAD2BDFD470F330E
6697ADF166B35B56C6BF3BE3D9B7896E714D84AE2E0FF67ABE9ABDDEF5CC0556BCBBA38F6DC8
BF0D40C6F4970C3EEAECE1FD5A4C7461049805A2055C07DD1F200A34D6EEC6DE966624F05BA5
714EF2404AFA3DA5F86F80EAAADDDF370DF0223E94B61550130C45E951ACACDEDEA426731FA0
FE64AC5065719E3D691F57B9B6CAB4F0387BDBC3641765D01CC4203DAD4EDDC2E1EA3B17907D
A754E2DECD4BC1D14615AE2C35FD8BF10BCEE295D8D3E2D4940821FAF5877D1E8AECEE7C0803
01D7121913D27AA371B88FFF45DBB25BA77D2710892E425B9F4266F5B0A076F5ABCCAB3C0155
95F04440EE4DDFB38823038C993DBAA31E5AD5448DD4972A2001C707372135CAFEED9B5A456F
48E638099DEEB70EC360E2DB2B39D7A77328C6B3E84E318117FFF84BF85C6D195EA19811965C
FD9D735B9F211BA3694F3535C4AA235DA0D68C20B37CD60454BAAAECAD3104FABEA8707CC478
1D7D733A0D51A7E51D8876AB30D741BBB0F09D9A9656A4B00464D9FB215F8A890C94126FECE6
CC5639FD3800D98D1012BA7B898C71FCD011F32E2E2967187A4B56E8429BC3884E18F96075D2
16AE15C8FDEC5AC747F3588A89068CD72664D7BF721EA7432C919C4BC40FBF926EBDE67C2E19
133F967394241852D1B5C7604581CD8AE1AD3F1C52898320B336D30000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: cmmi10.pfb 0 0
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /alpha put
dup 175 /beta put
dup 176 /gamma put
dup 177 /delta put
dup 178 /epsilon1 put
dup 179 /zeta put
dup 180 /eta put
dup 181 /theta put
dup 182 /iota put
dup 183 /kappa put
dup 184 /lambda put
dup 185 /mu put
dup 186 /nu put
dup 187 /xi put
dup 188 /pi put
dup 189 /rho put
dup 190 /sigma put
dup 191 /tau put
dup 192 /upsilon put
dup 193 /phi put
dup 194 /chi put
dup 195 /psi put
dup 196 /tie put
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /alpha put
dup 12 /beta put
dup 13 /gamma put
dup 14 /delta put
dup 15 /epsilon1 put
dup 16 /zeta put
dup 17 /eta put
dup 18 /theta put
dup 19 /iota put
dup 20 /kappa put
dup 21 /lambda put
dup 22 /mu put
dup 23 /nu put
dup 24 /xi put
dup 25 /pi put
dup 26 /rho put
dup 27 /sigma put
dup 28 /tau put
dup 29 /upsilon put
dup 30 /phi put
dup 31 /chi put
dup 32 /psi put
dup 33 /omega put
dup 34 /epsilon put
dup 35 /theta1 put
dup 36 /pi1 put
dup 37 /rho1 put
dup 38 /sigma1 put
dup 39 /phi1 put
dup 40 /arrowlefttophalf put
dup 41 /arrowleftbothalf put
dup 42 /arrowrighttophalf put
dup 43 /arrowrightbothalf put
dup 44 /arrowhookleft put
dup 45 /arrowhookright put
dup 46 /triangleright put
dup 47 /triangleleft put
dup 48 /zerooldstyle put
dup 49 /oneoldstyle put
dup 50 /twooldstyle put
dup 51 /threeoldstyle put
dup 52 /fouroldstyle put
dup 53 /fiveoldstyle put
dup 54 /sixoldstyle put
dup 55 /sevenoldstyle put
dup 56 /eightoldstyle put
dup 57 /nineoldstyle put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 63 /star put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /flat put
dup 92 /natural put
dup 93 /sharp put
dup 94 /slurbelow put
dup 95 /slurabove put
dup 96 /lscript put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /dotlessi put
dup 124 /dotlessj put
dup 125 /weierstrass put
dup 126 /vector put
dup 127 /tie put
dup 128 /psi put
dup 160 /space put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec

80347982AB3942D930E069A70D0D48311D725E830D1C76FBA12E12486E989C9874C2B527F092
5722787027F44470D484262C360CDFDDDF3657533A57BB16F73048BFBBFCB73A650484015441
FDC837ADD94AC8FBD2022E3EC8F115D4B4BB7B7F15388F22CC6198EFE768BD9FCEB3446EE4A8
DC27D6CD152485384EF5F59381FFDA43F2D20C8FB08AA27AB2015B774DB10DACFDCD33E60F17
8C461553146AB427BDD7DA12534BA078AD3D780414930DA4F8D58ABEFD45DB119B10EB409DD8
97923C6E705479464A4B310B58348C4B42393988FEF4925CF984423AAF65FEA9F0E64629953B
CF50B919D968D99BD185F83112B2759CC411764E9BDE677F57C5EE5AC555448D5F81A16259DE
D1E11BF4119D53E8AB07A802DF900D3A2D5CCC1C6876D29C5E9EFFB7AF3EF83400B0910C0787
3A8C56FA7B1EB1BA426043B00CC95DBEDC6E136CBBBCB3F67509964F9F281EBF81FE5B018122
EAF66C4A838487E82E186E006093042848A903EFB3469AB6B4049767AADB95C30408DFD58D8A
10F4CB22168DECD9F3EE100F07B49AA44C92139B669CC312BA20192454EB2375BE6284B02665
9D964B96AE82D4942E758027FCF23C25ED01115AF27CE7F20EFE2A822BB684004F20243A49C9
E93301FC21B80815C033C3E2BA58EF53DA2157D524B395F2B37ABCA13BC6A2F42E824AB7E471
06176B0D6DB267FBB795AC7425582DF2E3DC55863468A9200742BD7B552C48F8CF58BC21343B
D3B95ABFA140F33F37C6F3F78B0D8A5154EB7C1F62EC598267F13E841A3E64172663935AC8B6
65D86540D316DDECE329C008049C5E74B27D59022C5515059BC3B89370B1BC6A169C888BB325
E0B74282D6F053A50DA4024ED1E433271A32AB8C17D41C632B41CF9F3ECD5FE124DAF7AEA7CE
8A63047B245822930D517DF7BAAAFA69D2D17F7D93CEBD47DEB85405D720DE0BB4DCAE731A8E
27BDBB6E6BE38D168B7DAFF815ACFC32CE367374BF9FD98C0AE5BA1BCCDB84D94B5C173ABC92
F7D18E19A68F64A2241A0A1639108DC46B8A04EAD17662B7BBFF3D3D9A95D5937698573BFAC6
4973DC8D8B8D9F68C52D0C133119ECA4FAE72F7553D276C817003234A98337D7C037C0F1BCE8
A80457113BCD97515C002D20F836FA086A3277727873EC2B64A92BEDB01193491134B6692A08
DE4A201A3F11DBE070D797F7629AD487D2B8DBF89A0631956C93864A4460AA3BCC8EC6B98DB7
5209AA1B4A2E2B1B9866CC7F3BEE4E0EB0DD68627A97A3FE6141FAF10A2CE00391796C5438DB
AD93FBD065D1ED7E8B7879E0D1BE9AC145B9AA91756EB6EB81146048072303229CB8DCEB133E
572EC8E2BC954BADCE75356EC8EA0C7F76CA08533E874BBAEAADB89D86CEB974A52DE0F9A434
80E5076265AA6EE49ECC896182E6091EB30B7DA8CD0E3A26AE7FC03BA5C0D56526ECC6F2D6F6
91D84DC9E7DF306863FE0B6DAB3CBC588C28292DF3F7A47D9C4E3652C72F6BBFB3F4983CAF59
C7D877103DE7AD73F95A100AE860B4E55814F00A7026C306E85B8A48F8F69CA48AE710950A2A
1F2892F31A3849CF917002086DCA5F66B84EFEECADAACEB33A0932E394A5E17628D52E725FC0
C69E8B00C9DF81DFA32B2970756D947A9F56831B19FA3A2F2795017381C05919032FC19A6B8E
D2D0188DC35923F486A62C8AE61E0A5BC681A57DC20223629C0339F67D689B63D842909188E2
CB82A4E0471B9F17CB8FDC6A6D2C3AA6FEA17A756B4D4860FB72B50CC39CC7E5329DC202A5D9
0160DCECB7ED07B9CFAEB7E766887C9B93727E5DF348FD2F5158A2424F443A8C72811CFC9CD9
E2CE8219667D7364E85BB01D8CBD63CC11533CB0D14B793D5E1DA99278E636CFE6A34AB61D46
44DFB5939746F67C71EA1632A43F457583D3478D159400E04CB7BFD0011048ECFE912EA5B72F
6C01F941C78CE1FDFE23370848D6DB1C88D27C9118B3C8C8CF0BBF33FF12B509D3594E187F52
05B9E96F9854002E8944B8126A8B2B41BD572E7FE727B10441F3B4B303FB576084008DF04128
F28A3BA5BF987BDD3AD278F316615D70634C47E6C924A9CC634A249D1D57DF395AFFD6B0C524
68061B62CCB46EC8CF95AE99EFA5DEAADC48F433ACE21B45CB502F37F06EF95B4D8880FCE2EA
E511E2F7130A96097066127391923616B95EB7E3D70CAED613BAE4F2D65E6AB1F81D63745FCF
A57A9BC5788BD1288607539A0EB5D7C139FCAC70436ABE12B7D57C1D915C3AE1575CC7EEDC26
297231B8A510CEECD3F0B291782BB1C342BD44219F004AC2F1A869F1448354BE54DD59CC8CC8
DEB38E3B8F4899845DA13CCB707CC10D715B01CF3D7D3BD1246A449F90E96D40BC79F879B7AF
43B7A09D9DD4884F7563910E4CDA099284CF094D1D0246583B01F1E687F0A365B463E7C7B4F3
70E924900712B02B20792D0DB404E08ED5ABBCA0F1F447292857A96F3F73CCCBC73F223C7FFB
BC96E095E349CC72D2A37DC40D196FB55782050E83C7097617FE0D2C663D32A7F03460EBF9E1
904A12877EE0D4A4053BD5B673B3B65BDBAF76D7BE76E4F49A0C0912A87BF7BFEE30BC1E91A9
55729D55B0691D2E573B7CA693ADA3E865E87F4C48122AB163919CEDEEAB29E83020E4391D59
00AE2FF0F086AB51FEA2FBE72549C4CD3A674C8EEC28AF24EE314876F4ECB7F161CB9F55A2FD
8611C48F3E8396DF873D8EFD9141474A86B8906CC01736588436A3636933ED22C8B8D97611D6
26BA7667B33BBB0DDD4EE1FDA2E89A3F03A18516456C029B96AB181F945C6C81990E19A732E9
ADE2DC846D19386E874ECF08F33C48C812BD31E6056FB1ECB4049E6C66A5FC814A77709745E6
9A645627D45362E798F3336BD9996C42B37134CCBD6A4BBE9D938DAF6EC6240A4C4F4DBD4E68
1C77127B4D3DCBC7D770AF6FE20529F19FB6B332D0B6CC01B4E4B2ECFA05F2F768775B311574
F662C4487683A979D3A65E824E55EECBF4789664EE971B374F62F34918524BF9671A57C8A7BE
A7518A1D5FD3B27A5D116A6B0F9E3A9E4CE276A5D103FE6A4FA0E28B6F68F5A4D89C032B298C
B03ECBB2E1D94A4199C6255D93BB029AFAA00B7D6E658713FAF433F2777FA3A0AF6F898D88A4
D32FC6C3E0D8BFC67CA1AD7B9D6FEC4A2A99325D83CBF1F6165842FA8D033D7682EE635A5DC1
185DE824BDB8EA5BC7F3BC046E83527228F17459BA440F783D08F1DD156DC0BEE9E8EAB6F8B9
950C39DC03000F0488EA4071047ED99C550FB8AB843AA639B6289B7284EA8E69AC785AA88066
D9F3D4090D01878D960DEAE07C2A13B8015556AB50AEF2BB8FA969764D3CB40AD44D5A9E548D
E2BD511FB8E38AD40181ED288C8FF88B04120295677DC6228939DFC33B7764BA80C32D4664B6
61D7407309CDDC605428A7F4CED1F86708466E0BA2F05D4DD7244A803341D0B0D86E48DECC59
25A75DC331472BBF13E3D024B85ECF438073303ABCA65B8309BC57E64AA97C244F6B89E82B17
F68D520E28182F101116F48A34E349107DCC6ADD53F2084CD42720E35946F520E56669BD5EAF
BB02185D6EADF788D2AAF54D2E2C2ECACDFC7C91765BAF663BE838114B333687A1B7DBCD498C
8A28876426B354E6B5556EA862DE3C0305645B75235A32A2AD5DA5C9B9CA573D6C88A3CB4CA8
847F60F731454F264150DE6EFDB9BE02E6F5B868DEDC1E7C55F2C46F99F80AFE84260B4D94FC
5947754F7D98E96D932DD3D13E78ADF22B9A06360B38E7395B7E2339C07FEA445F16C2022C0E
B8CEA6EF469AEFBA3A398FBF747F271C26E1870A86732E4D23B9BD9A564CAB079620105583FA
E5EEDA2B5395E39DAA46FE5865D29ECDBCAB4D5FFF236CA8834777B0D1CD347DEEA5EFA2F387
006125E46AF358867E7CCA258AD4A5222373749041225381D44BDB3BFB3661FC5CB3EF365444
B2D19559411E3861C3468AD08A3330D842F16439E1C7CC62F639EACE059BAD656B292C9D8C3F
F72FB53CBFC7F942A57C78A9B4EE3C531413D57C2EBAABF4F32956626AFCE2BA1F7FECF1D36B
B77BFA4DEC303C0F3B0B011BF3A079A32DE973D5198F82771ABE8017F9D0D40473B996CFAD73
A36D4DC52BB211880E1924CF30E191C1BBA6FE59F54E0F0DC2471BF45830ECD99893A96E136B
1A45EC4EA86E357A5A8BB49B2161AC9A7472454D5BF9748F34177036D448D14BE4171F0B81DA
E7008F0C3ED828FEB647F0D06661ECD3997B3D87648CA02D3B6BC5AF94CBCFA12EA2B41DDE42
B61DA7C83CD97B66C7C0EE10EF0A4EC5E063A24B5AE434C55753E6A8245A0F745669801755DE
324CE91D1CEE35E5B44CA4D6CE8DC88E15057A20B14035DB0B84B4E9D938F68236992C1A5F3F
7620D04972807F8C4FBB3A610B5E3C5295E2A34C14504E2DD400019A770A8F28344B981DC493
976B115228E575B89406EAEB7FAE63933FD79FD29A1A489DC4B5C516F09830CF7DF23889ED50
2457176F21D1D3D192EC42A5C39E7D301D4BD47CD9B56191C5CB0D1923AE941B336451EC95B9
519326AC3014798A56C22A9CB24FDDC6C46184F14B6068854D0FDA7192F97F7B783B7F51053B
3DCFF411F4C965649F7E61880B194037C6C69CB15907E7989F4188B1B1FA92CCB2EC1F43DD09
6B3B1D991DE5882F43AF1E023F2A4437F684757EAFAA011EE65F1D9507E79C44873366253EB7
84CDE128401BCFFCCCFC56DC8900376552F45397EF8F5D40D5D1BEE737C6C307A475819A5D33
7F4B02BF28461EA571CDD79F39F9491B37108525EC550E9D8A90AE63D56A1A733CCA38407505
C1A7690C67529EF6E51E117ED62274135F8744241CF456F827E15D512E78DFF679A117FCD7EB
45D7818BFE675607F002E8902B6A179B4210296EB19A6B5BC646371784FF5137220B6FB81DE4
5FCD8901A4A0FCEBFCED40F456F6F09D59C66B0BDE0EDFF2070D64B1EEEAB48C1885A939463C
4ED7E10D194A31F9859D58F160C881C7E7679052EF3D0BD0037088C5BE74CF9CD8B441655AC4
C21C063D5CF157E63D154E2A3C0FA0A1B796B7EE86207252EAB2A8F6BCED4901CFD178EF5B0C
BF5EE7CD9270AD1B1055025C14AAA045A9C2D6F01A9AA133870EFE0A7FC63104EC2B4AFBC027
7013E787E82B9581B38E70F585F4F2E01E4E7804ABE534F97D8F92C460A609492ABAE7D236E2
70CA04C2E5ADAEC2BFF1F219208B2F8BF5CFB5F13EE94D3B9A601DCC6D9AB03EF624DDF287A3
A950856F44B3A31E54D64468BF8BF92F4432937DE368FD31D7A2E0710CAAB3D479B52105E910
787A4C6A97C11496550971442CD159755924C31ABDCEA68A874A9C6529DB2563BE8880576C07
7C4C5A20262C89FF4391ABB2DFCF24500708D191BDE0FE49FF456AF3D8355E56B0729BFDEC11
884ECCC7CC061B44F48766D6C2F31793A5898A8F5900587995A2A19FF4619131F5E665C98C19
1C2D6F9511DA129C471823E78138C038B17314B37FED7AD3190C938F040BA89E65EA6DF47460
6138937EB395AFFD6CCB55FC0371F8BA2650CF2846015A912D67A848D29B06563A76A65B5CDD
EF34D1B76DDDB801B3CC0B910B8487BE26DAC3695DDDEFDED0347228D046AE30B64637C3DB66
35E697493A0E72AE1C2CFC611BB42F9138F608DB7DE51CDE8520CAEBBEB05A29F7578395CBBA
7B01DCF6AE7664EEA3DC1554A62028DBB478A18F6EB6EC084917427CF6D40689468406C923BE
93E0A8DFC250DE798B7211E91855FF7CD3DFDC9D0F67E52DF1AC3C2020B593C77E8A5E6FC3D5
7AF2957B4F876A90A9493941F316AC9C1CD05F73C1301537574A7EF78D73D23C31C1D4689387
A2D4396185442858A745B98D81F2580586C88D6CF54AEE1517549241B59292C8DA1F6FAFC3F6
1F2E82315ECF37E5E8306F4FD0FB4B4D0BBDEDD2BA55ACA3EA3EB02705571DBCDF339F326842
0DA8A59DDBF5CF721D9BAC5A1BE8CB3C0B4FF98D6B15A2DF24215EF121CC06F4700F2609C817
C7C4A0659AEF7C646DDF125E9ACE18348DA6770D3DFA3B9486D9971834A7EA6881368A9612F5
293601FAE200974434D1C24354AC8E9335D5DCFC27D447CCAE4B0923CF15178484B24C944FBD
847A64B146D0F77DEB7665247E855C600237B1E311FAAAB4E80A2B8058F6F26054D111E94142
1A2A143F3C4106A506F844DCB8EEEE5ABB05C2D0B4563C1D1080B42EC330D3DEBE87B65D9FE0
A684FB5D125F7EC7ADD81FA8D82E938BD2AD25E1DF6E473BFD81659317C91BD2256FB4164888
73DD9D67CA6D52BD2C5524903C68989C3F5132F029EF0A078B8C2DB830186A2DC9CC47B9E6AD
6AAC42FC7A12BF5FB5386C558A73DD4AD02D7DD4FDAB2152B138326D968EF837B79A3BA3C0FC
A3A629D8143DD8B974F8326851AFE08BAEC65344751A2B076D71EF4F49148E6FC9F3CD520645
604726239FCB202117EE1CAA906E37AD6CADB6AB92B1D31D277FA27F6930ACB68D128CD0AD70
60C4960C4B409664C8580F1C5F3B93E673A74B8094284837117A644F0CA9398FDAE7CBB29DB6
AAD38CE5CDF855E84B3794DEB9362E1DAFFF74ED1E87561A4D33A7B6C93D18F231ED180B0D11
2D789C9E7B35B31EEF4D5FE50329D6AE3E9324DCD038EDF01F1B10E249CE33E8BC8E77E84483
96FB9B74B316EE1A78F2463AF742CC468215923BFC5477A74A353A3CB7286AF8D782111B09CC
436ED7E7126E5C70122E81142DA5F1056694F2CE5D5706C6C3DD6384CC42563E5BEA094392D2
876486F313B8409A2A03CE6718B7F5A58A6BDC7D7E3967D6F7D2F2A1652D578C0C43438B67F2
E67AFCEFE2F1A031330A1337D7442AA8D15A4B1B0DDF56AE3477599A1C04370BB06C5075A9CD
D5D9A6BD26B3901F46D90B45098E5940B44BD1485840CB585B8B8BA7CD45625803FC1420C850
F434E84DF2CDB1C6E2B48716DC287BDBDE64CF54C9EF6C3DF4BC3452798A72DF4C2AEA80415C
9521648EBE5B65ED763B5A393AAAAC1227C1E017DF5FF4F2428423373BD6D5FD39D90599D30F
8D39740D6255FB22ADECA70C5EC3A8F87A59EF93EBE91BFD0C9AA2BEE6B3748B3914752F0E5A
34D2624FAABCD7EAE3D4051B088C9AE1105B541DC62EEBFB0161D05818A73DE9606A3BE82B2A
37D1F7F22CA33F57AA00A40F3189FB57BB46658710E278833C08F3C5D428BCA99ED499E1B3AE
16892C9ABAAF45E29C7036D1B0EF9F17FC51399EE7E7BD85EC424EC4AC17275D980FFD2EB1BB
92E78B2B38868AE908740E0CC26F414334CEF4E8CF5222F46E1AA40E0032E59FFCBB395B4ECA
2573730D1965B2D4939F24A154B6E44334BC0C465360BC2827B14E03E0F428DF065E9F36D256
E9A76F41C0F81747DE63134EFC9CEE6DDFF528FD0FE979237FDDA7782127B2A44B2F97A2611E
FB1B03BC3846CC19C86330F9D2B4B557D47B5367D597E4964257C0109A26DEB44CCA07186DF2
D26769BBCD6BC499B3717D6DEC05675016943C69EF60BE9E2A004340202288D22D6476A05A27
FFB9A4C7A2AB606619ADF733C05C38C80B1E2300CF34A1E32213B83735EF20991D4C487472B0
571AF8F33EAC2B12E0F302C63371A42F1F27DF2027211D6ED6EF86766E35151B67AAABBA4B46
9F5F2164CECB46FB0866EEA5480B615D6F9BEC31CFC9A898148363C039BA8DD87FE65F1F9C8F
754A1D38B643BDED590D7E4B45DA77B64FDC835CB412C5CBA906DC46A7C9D3584B4EA5F7701F
257DF04B12274B3833957D2869D52433EBD119E69278D93D7423C0AC9AF9DE81B6CB125C02E5
723C495492060D6CC6B4BCBA6033601A6BB3131A474BB29FF433A1F3FA9EDADAB29F591F029F
ECBFC5CBD578BF738D57F8AC962C6C4196FECD4CCE3B8679A2B805E736ED48F01E027151421D
1AC18D5473F299FD612542DF45DF5E8CDE582D236BA5A3A7554C7111BD2D9AE4BFD5D53C025B
BB737716686C68645C01327F7E91AAAC5FB9B31EC344CD1BE4427C612F3E397C8C9756C7B30C
D4A31FFC6EA5C0BBB2453D2FC5AF8CECC5BF27F3D22E919E9B4C70BDE1E55A39461821B30266
B8DD029B63683997CE276A28EB79E52DB38E3E00FC6C9F0C98A2ADE2A3FCCF651329F33E754A
A2637EE13D8F0275BD9E3670E9B6DF5E5C7B60FF2E9BC284895179A6B54A6501B09C90CE1F53
7B181DB63CFA3502B27699C0FA32BFAEF33560EAF17035A22B24AD1A92204835506F9AB0636C
7E1C4B9BDE7B1E3C85A6746574082D5A66DD35BF0925B91BC10F973B607D990EA83AFE2B43D0
D12B61D5246A4B2E6399C626A2215C6B477B33355DB9977D26F0F4E0E750EFD66855852780E4
70DAE19BE56CCAD5DA484E8A1405860F582219BD238F18084A13DBA3BB6673190846660FD16F
243A0188B6626FBE383F47C9D115AC75810B9FC34F56F4B223D6ECEC3CC04A64D56CC48029DB
AD5CB5723F037904AA357A377635B0693F08BE60F7AE5E4825C939A53D481553C1E5A5D57DF6
073D9E94E402AEC39387B6534B10D27E16A85F20F20D17627EE9CFBF60CE0B42C6472C7A21ED
5FB251748D454C7B7FC51C447C6AEE85E84FD3112EAFB348EC75D99D8FE3F1942C261D1D8FE2
1CF2D4A7350F05B983594E1F47BE21E1BA9A263273ED14B9161B494D50B9B9EB5FFBDFB088CC
1CFE9A639A8E405BED650531A96D1C3313617FE5E0DAB14A2E3E95CD4A0B018A08AFFF8C5E0B
9728642B9BB9905689CC6FEBD1072CC9881DB5BD7F102BD4CEAC2D861F3AEF8F1E24DEB48A0D
E5C10011828BF7F0EFDA8992F6EC5C053F050790739D0D9D04272FE9FAC41B86562075AB2030
C9329A89224DE27FA74F61FD49D8CF7F13F0A5E69600E075A6090AECB2DB740A6507AA28A7F1
57B20558FFA64A4DE9DEC8F877EB9DF61ECE54E3281AE89C207005EA3C9F5E64F2966BAE9DB2
21365367B95AD4107A842FA8AEDA660FE530D0B37E5B8E46A2956E7DAF0A5231E33FB6D96395
CFC427B7F6866C1730BD33BF55A4C43A769585D54699B5B956751B6E441ADD82A2E5ABD2B9D3
3608E9333F408B931E77D48258415A789435EAFB9A164E651162F587565CC912731A5F840D03
9CB7EA0D281A34BBAB93238A449D8E8DDCF9B36DF3D8DD2DFDC5278B98F0BC3E070E3C354A3A
39F9A97A92397D6D0F618F522A600035529518D6D90420A8D79AA2AA712CADAFBF5DCAB8E183
D4AB84232717D60DA8C9711DD697F2F46A2223DC3E48008DCFC18618C35D237FC2D7A84F709F
D570BAD4BA6D5BB74835E3540746B0535F04EAC2EF06A74134742AC32E0C4D2A726EB4155C23
3275C7348BBA01064F695ADFC933B502006D654C2B21213918E177D3E4751908A3A6FEB3E612
268DBF27A6C253738D34396F50EE834F075AA4AEF14FF3A3BD5CB25DF06253212F75ABFC9BDF
7F480D66719C3A5619DABBE3EAD77F6AD80A6B7A6D83AF722BACC170293F9A5E51BF9B4152E6
4DA40806AF4417E4FD9308A4D8EA2645EFAA35B30A6214DCAA83E2F531DBB02AFF7015EA1149
A333CD619B7B614BA3B5069ACFD80C2D4DD5D19BAD17C3AC5FCDA1818719A9CAD9913E187027
7B6383290E27702BD87E10AB54B531B0A7662398585F7B67CFA1EB1E252E5C477025D77AD4D9
D7D943C3B5F6127EF5BF7F422CA9AF4A648E4213E1D6A9B6F02AE5119F91385B93F00C438A27
ABA9D0D1E52AF1CAC6A56C9E2FE7D5D37B9EFC4BAC853C23D07531F8F7879313247F9A978468
5048DB25AF1CC60602089DBA16F25E9AB0855D83BA874C00E28ED5633EB234EA457467BFC887
27A17C570FFB595ED41AA2EAD4D68703D0D70EF899E43E3ABFAF95447349DC61EE1F070E8F5F
580D691D80913A1DE2EED591859D684670E5CB9E3CD6354DBB51F66B5DB8469364E709033D02
C5F13179E5400C71A9A82FD4FDCB5DC94E53B116506B41EBA9B34741D3B5BAC7468FC68527A1
E51C12A45DC6A61C55B21CD9F8C3FCDBCD037044833BEF5B8EFEAE27A1C406DF2DF775BDBA2B
055C86BDD754577C83632A70D63023D3A80ACFCF501D3407CD7B880D7BF5C9A6EF55F643AEFC
6306BD9080505AB7395F809BA5BDC8CF5BF56BFF4D2F2DA56425FE88211CA111426425D4BD5D
1D606C1377C2EB7014A6EC0392D74A059E5CA21BB6C505DF776AAC0704488DADC008DC89843F
73806262ECB38180595CEAFC29311113C41E8FEC8A6BC75A4CD616A02607B1B0C3F4C2423C98
F45B76ABB69CA4E43F37E2F3CBE32A0947B8FABB8664C0070D72B4A464381DCBAF741319E659
7D5E648BA2A11F5B7CE3A45A83E094A1537E7E7DE0150210A675EA77F9B563423F71B2221AD3
FFF529649172CCE6F6493AFA7D2FBCC812C269309C426E8570C6992255BB8CA8157C9F2958E4
C63FC2CDCCA1A3EC1AF935CC9C35B71CF779E87B51A16DC602BFDB4C9CA1653E1BD1AA6DACB8
C038276107AD61D6E33D65B6B98E28091D4568B49DEDB9E9023F2977B4FE952FECCB1ADE607E
3C60D74DE8662C1A08C6C4F6A8E50F91C62D104A7812DFC67EAADB90E674686585680A0F2EB9
8CC92A793F13DF552E6C695623CD5F161A15807FB396DE2C4B32E0E168D765EC0AC448089A24
5B65FEE72EB77E1593EF910B1750BD29BD0DCF35890311254BE990D9E4B558753B34600C67F2
6B24E701287462CF8A7CCBDA97CFE5060A8C36F8CFFC8A50555C576B443D6556E14541F7C5EF
1B6E11CE520946F91918E10E90BA750FAEB158A82317039AB53ABFBE65B0D3989FE4128FCC22
124E162D559F03AB07E2FF289087B48582428CB9B124BAEF00A16D4678C0708BB70F692F8ECD
4D417B8DA0371716D3B5939D56D8AEC084CC07D0FF21A5F69C1EFCCE09FEE5466D7944B1598A
8152EA86FD11F3FD1FFC2D0BE04EC6C36CFC39CD29DF6F32E4A030548333EC9C9ED69471A989
368488364FA7C8D83992D35E01868114852B9BC5E66B43BDA19F82102261426FFA730C327C16
A92C2D840BC951183A666C4761B2383EA8698B5740671142E07B5161B7988D39239AA04934A1
928EE775D311C59F12D3BEEF3CE7EC9BF6DBC9DBBFFA124AD23568747DEE4AFE3310D19FD2F0
31D782E4FC8980D315FED5BE69715AE90F45A26D5DEF008316DB5237B6254EC881F5F42B22A7
70A9998430DFC54E223E1CB1F2C3CC21CC968C3A9CAD2F935699129A0B05E76D7850FA8F630A
6A76B6B428F022C17F7E72A0AD107F044CE76574ECDE1F674DEB9DFCFA5C860F199490958B06
18F599CFDAC6B2FC5040C32D1632428D250F97A5E5C686C2767808C71A3D6E86F619D651EE5F
BEE3F6EBB220CF2E34E3D0B7B9EC38F2B0FC78085867579D98DFF2DEE6ED400B19E34237FCD7
5BCB901F2E6A3DE5D721A239BFB003CB4F5C58DE63E8F7F8A6647C06275236ACB4C1199EF950
EE7CC5FA7B0CBD4852B3062C1CB39137C29289A42CBAD2BEFB0116F948EFA5637F75C0325848
86F85008300C3B12E01D9B15E5EFF2D44FBB3C6FF28694298FD8F8DFA6817138DD586FA00D0A
D7EBF5CD8A63949B54AC4D90FC8863490561EACA5207259A76E3EF1890A2B59099C14BD58F42
CF224C34F1305F4E30E9F12E7AF0519E80938035A2728D433D75211C73B9740EBA4926B9676D
874E41953C4E59A48579D3ACC872952A65ADE2ABEDD6128CE9C40B058D126C68EA0D40B0A081
CE1604CDD5EEA12AC901CC12AF8771E39B66487A9C94B35D882D46C5F3C43BE6AF8654CB09EA
74A24A58CBFF5A25EBF7D98E08DB4CAE7D71F112503FE689A27D75DE94B94D7F0A8F6F4F9CC8
29C1A441EBF4A22A85FF6479AFBB1A4252AFD7FABA9B1CAF518F1A2C67392B44FF9E173A6621
8C1DA8CED86B17861052E3F9B758D06CF8864B7B8B7B55322A5E50629229FB515754697C0269
41F7AAA8C6D0AD6682440A4908BDFF03C4D413C3A7353F6C9275788610F8C8340EA671506F17
4EC79EB0EBEC7BE8E62470601B32ABAC9AA3E2678367063A57CD950349635726DB14DE55B488
8E481DE009CCE2676EBC510CD94A12ACDA187D096ED6417AA1E8B781299CED175C4243EE8D51
E1AC2382FFCBA41F49D19F60761052E59B75A2D0D4CD2EA45B1859CF449B7DB95FA7311F52EC
28A8D028D2343A958DD54500756D2CC13BA81E72B69F01DBFB636C9299A2F0D3A147740AED1F
D12C59B2D7D8F0761A86B140D3545F38A21A8D6205A57CB7160FD7C5971266FB21A518CFC331
39AFB70DA7485350EE8FB0134762604617AF0ED255F06616DE76569F48A2474D7F56A1829DF3
0034F290B30E3F2B34C433C11C1DBA265059490AD1704DA42526125EB03298F86C56495FF67E
63B06416A7B4FA2C2D086FB7E9A7EC218DE891051219E566566FC1B9C16EDE9FD2293183CD29
16E3572B0D770356EB2BDD7FD92794C270D364D12D14DB02C65A6E6D636C8DC0150372FAA09E
488E28525048EE8A866FE1ECC868F6059597225BB1C588A12349996BFAD2F6D0131F04185E1E
FD125A2B4C4B8F2C32B6A307874B0D94DAA68CCBBF71D8427FBE1ACC6B3B279A52AA66CD6F5A
5B1E3DE70523ABA543F44074A6491ACEFBC6DAC617F805F99CFDC01BB5DD8500265878FEB2D4
E75BC616D30F63D11EBAAB94EA65A4BF64A484210A08C0604BF0BC0275899F5AF6D217B914F6
AC9AA108F921309F9580701530CA11E8B5AF77D22767151FC64BE8AA6E4EA7B595E7AD726ADF
A2872D007EBBC41EDB3380CED9743A88424A665E37B941DE405DB5BDFCF89D4F8BFA6A636C97
3254709C81BC54570266EE5FC66FE4717CCBCA5CC309755E8AA8915E16E4C3D032E2D295A2E3
9F81AA5E712A29DF3D6F1DA12B51D414E60FFDA3499CBB74847210196C06FDC32A42E3417319
8ED7A9EEE1CB52E97C221C79D0BE506C6C8B493EADA00E172112B0B525E9EBE24A081518432A
F7BE557EF7F37D1CC2DF1E86AF4EF353E8DFD731EEA986E5C203B343320BC3D35F4FA4423FBF
CBEEB1BC75F27A40F4D9F5F5282828E9545EF54F5BDED9915385E400BA937594325973069070
71E72887D2C648989B7A4183FA3E750FECF13B04FDB5FFADA6DAC6DEFDF7CBEEA85EB154EBAC
F8758A185B3EDE6F3BCC0CCF0A878DEC6D1121198361FEBE57819539E575A6E0CD675A3535A1
A245CCE669B1C31D3E87998A956EE116369CAB04EF8506ACF9E8BD2E4E43BEBDC9A067C4F1AD
A019503E9725E1C44BDCC4BE132F5BA29B56B7E281400019A9122D02D49C768346D1B7E30BDE
6E184E0107507C10C132939A052E6084B66B3A30B6F4E855D489F12C9AFCE7714E68869683A5
C74A5697CF1B4D4B9BFF4E9098E98FBBA712E4E717EBFE6BA439CECD1A99F6C372D264A4A255
C3B99A41A2F04DFF796C9EECCC20AD43B5002E8E3CFD9F09831F4F02F9327E23F291C755D3A6
E57D012F519FA46A63B32FF9A98C3640517D077EE1A472CD000A80467B28027AFFBC9904D19C
EBA6FAC4F1EA359AF2F3142FCBD6C28C1F2B2DDFB1D6799888DAADFFAA52EDFEEEDA38F3F94A
79C79507BDB7782C779374A9BF2B0CB7FC5A216CCE50B8446FE894E9419E3EC6F37817CFA6AD
52434F2415369128209778A9BB1A81EE08E4F0842BC8CE8890636D6144E9BBB416344D9DEA5E
65719B332F66F9CFEDA829FC0AEF7919253ED138C92C0FF7BA23BA9EE1841A4491ECC983B1C1
162B30B75F8DB608CD41FB8FA402AC96CE57D6E27060CB88BCB47FFF9132B63814964E162EDC
F06A2F9452EEE25E1DD7340FBB273F1759BF9FAA1B2D252563A97ADFB26412C605C2C87F5725
753497293A53FE3B708D2394E19BC998AAE5580A62BA5924A00C90EEF883A69C3310C64E52BB
C41B70B89DFEEF80B73556FAD1D947A079E8D0BE5BBDBBCC689E6C379F5F6430E44D937696CF
99C6F3A226E27E567D945BAB4997BA2A7C04FE4D9C2CA4691B687B2EABE5188E302493326FAB
C6B5876541C4666A26B3B65C228AADCAC6BC98760F3D3735B89B2A2E3D43FC4CF6ACD11C96FC
6C3610ABDAAEB5FD4C7FEC50474BEAF06684A49B6B245956FC2936A68551DF931353C2939326
36FDF56F0DA797EC113DCCFF2E3409557028151EEF5AC29077BB032800F10E47F79CCA5C6F5D
D75FA56638FA4E59A085532C7D830808B122DCA20D9FE537A04F5279E6F96AF0F0D180EC5243
0438E8CD1A7C79CA9340C0639367FB2AF768F36637D67F7DC6C71B14DB7A35C567A66E460EC7
0B91357D13AC281D18617A861AC04A6B73608467999B1DB7D06A52832482FB4153D95E6AD9A9
885137C837BCB0D9F2AF4BBAD66C9AD04265A9BFD47DF89D6E2E990DA21CAA3883B815F541A5
9FCCD6DC47830E5E32AC631EB16E1784D94F5A31523D31509B4FDA3F13CB6D0535C7B9D5FC50
EAE72B74C5596E271CFDFACCCBB66735C67C32560667A2AF34EC48F09C574B30D4510E8BEF41
E6EC0DF52C2B26344B9EB25501BC1207C24B8844DB1852366A48A991C345A8B1484A19E7AC52
BF541D2F95EFC749AAEB3859E9030FB12EA35ECE6739FFDFF7A6809848FE1C04A6046CADB0A1
2F541366B97451BB8D3AE48E96B7E97B5BBE5ABA1B460820B24115A03DC01721F7A423650DAC
1E6C305FA5178FCAB92386687B1D1ED0B07ABE6E80A7A46143C05D8A9C8976FE3D1761C05766
12CB9AACB370ABB8352694514954D538CA0F19197EBB5A93A2BB940FC8B5256B183C769D382F
61B0AF9C9A98FDE7BA8BF56C4F4882E0209FE14108BBBECBB8338A768692CE2499F2B612B6DE
3D617D16B5AA3BF42ED95A2B2BBC438461FF8136420417E2CD2B1A8FF07F1FFE31A9DC926D59
B968CDA1E6946260224CB22E598B1452AD408C56E8D085F90404DEE4FC07062C72BB12564162
33385EEB99F2B67C5A0D6B1044D29D972567AB47FC55BC918A704DDC2F30F12A148E660CB724
0A412C6FCDA1A34B7B8AC1025F384C41CBD2773FA11A868349DB8EB97AB311220261493A57E2
D48A2492A23F0DD6DE1F1A3D84F4F665EED8A7163C7A339D669ABE07A854E4B614C126CFB10A
E94E76E20C0B855AF9E96C46BE1DCEDAD02CA27692F792AD423135E4BB034395C71C6A87BB23
A549D63823FA513320AA22C24CB1EB499F150BE279199BDBE09FA0E5D2B0394FED0CD68E13AB
B329304424D14D1BF7C2DB7D5D78F7A857FF6FE7A9E121D3BC71D3E178779FEDB2F966A92EEB
6CEAE29A21461DA66535E418972DA8337358AC715E50562508CD7330FFB465FCB613BF5AFEAA
2D2E13CEF53DCCFEC3D7029CE1088E73174A9D226E174AC7A80EAF60CFADD4BC51F934F794BF
24AEED2FDA5486D883BD597EC42D4201B49BA0F89401129B0094188B698D09B1E82E2898E1E1
3FAFDE14F40E3F7B8E5CC25FBC45F123F48FA0D0A7846D4F94C27CD4635C8EB988C92C03F824
FC4C0E7DF36F0E01D36B4349FEAF75EB5D8C23E513E65F247F0CB86709944007B62313F4BFD4
E3499B67CD55A3DE0A1E030B74BC3A97B7D9AF2EDFA06A41BF4BBBA292BFB500255247026812
4B13EF6135E45E213C46AB4BC40EC5F57FDFFC62233A1D294EF1A0984F4399C925B42A2F597A
64044943D0DC84247E98D231C2D35986C58A0C62006C1E4C0D6FDC531BDF7FFF5183DF316D61
185BF17326E745C5B533E0B7A51433FF5691D84DF17AFEBF80303F9D5F05C797B3E767D788A3
BDD1191D7A6D576FE079784263E782CC6B284AE0D59EA5D60842BF0A7F55CE33067076597578
60AB8F0609E46E9B4036DDD034F5AB39D1B0A639BC8BD55FD4C800CF360014D16BFD3828ECBF
97409AF47EA32B61F162BFB3C58DCE3039692C566BF70B2A8B6F2CED7479DB7C0FE286EAE554
B601025D57AA3F26F1F6E85D17FA279899FB61BE82B59F6C70E0ACC2E600652304FFEF3E6771
C348E2C088F7837A7CF37CD1C74CF0B78299D26B5EC1AE192471FBD996FA3FFE6169087957C9
50B70C7BD174722FA2EBB27F6542F526D3D0842F17449389F3E6CE0B5712CDC5B1CEAE6C7776
0B8B41E8444FB992928844B224F4FFBE0A4EB44027E0A75E74DFADFAAF1566F957C1999F768C
AC8A735F17DF653F58BB9BA4AF0985A0CB32FABBE787B9A133B8AE7D68C1B41FD3E138DD26AC
083DFE79A8C879256E5BBBD14E7B31478E3DE8ABA60893ED06F2C6479445644E795F46A9C95F
308867AFE83D0CB1DDA4C68E8634DA9E30694ACE6EA93AF1D1E9670616A7AD444F9B6CE89978
062B81346D81DC0C058F3740FBD591408A8A4F6EEBAFB5D7772FEE8F467B83713448DBDDB5D0
90E6481BBD8636BA2FD30B79E9AAE4A98E673094FA6A597A8F0DF0B74C9BB69AF42F5FD4DB7A
0468409A39EA5CF8D4882B9606E881A59A729EECF60339D5225090157843A69CEE675AA56785
8B49FAA306D8A8D6BD630D7E38C54E88CCD548F96B22E93F780CCC6FBAD75976AA2D966FD300
429B03F166E241C575A0469C17E427ED8502CE6A49A8CE1AFA36D2BB914A2E0F2BE4B2794D3A
E15C8E5914B36BF9880B575D65B86C1D620B3BD6F9587EEB090CCF1AC48C73930D76614BDB37
BE7FF457AD7E07D812D10C2E425334E0E66F83F024F2FBC764F7E9C9D07A35EB9297BC7AA519
14BAA5055D2034DDC15AEC3EAC9311D99A0B9DA9DF9642FC4D5CE51ACCFF41402B227B0528A3
4B6FBBB1F9AFDCE1706BEACC566F054B3BFEF75D735D5C92656AA780E9F78D3D67933C74BB7B
7E1A3BA96BC716BEFB31099771D1348611184BF76E78E0B75655C18C42DFD2B39F3377633FF4
CBE887574EC8AF654E91294504A59D04417F01E8C6C0EC71802D74F55020B6D15AD0333F5F50
4EAEE5C47BDA9E373C09581B8DE96B4E6FDC76A8DD8F7B4FDF62DC852973B828F2F4FCD97C90
17EDC5E0A6BDF87511A896327E39267E86C851C08317E13B413C7FA7C4B180244D1A26524368
621142189D70F26DCE33CE009EFCC33BC35B211C67C9FFD68DE3AFDE61BF54A485312D6D66E1
6BA9022B97C73D77ED530E606F54ABE858F2210821328018168BC89B5D1F0EFA0C02E4C2CA7C
C4B2BB366131DDC427504AD454F6E8A314D9A5A4994F21607A2991083331F559B29930DDF0E7
CC86A2DA421AB5E26341F26B5C9B9F1772F0B244B62C4686A2813DE622267588C0E5DB3CB458
D2C490768FD6A0AD83DF55504C3E791554FA56A474C44A26256BA539416ED3BDB54EDC8A3AC8
61CE565A334ABC80B8DB73490595E01986B45B0D82693C41DA5BFAF12B9EFEE509F25EC7678C
C1E4EF735FFEF5158E0AB72DC3939E4F361ECA40DA40368D5516A55444957866029259BC233F
C3F000F54CA33E2B82C999674B22725990A9BA8DDDA889F8DCA18A64EE31C4C82DB2BD653E55
5B147536E03C8D550CCDAE2E891D81772E10A1FC43DF9A600E025E028704D40AAF27750C81D3
F0A8E2BA60FAA0F3F4F5BD7F66C690944EA6254A33DF2A503715510772F9D8822EB0DCD03FF9
2500374920E0AB941100569ECC2C26C393DD56EE48BC914794696A4211212E8A77B1A653EE24
A02BFC350E7E8577FFA1FF9F11B587E61C08EAE8D88B073B780F5FC2FA97F6B5DC9F7439D84D
3ECC2C67B8100EAB30D6CD8F07F2F2426749A47C7EE77541FB716463F8703B6BCB80F5BD066E
94CA265473CF95D4ACEE36D05CB22C83DCC8B27C7B6BCDAB943C899937C29FE456D9D71B748F
1B57625597D7EF30813823DF79B8E368D864FFBB72251DF04F862AB1D808E25B506804443959
3BC6A7DABE86E0793C0186D7DF54BBC6012FDE7E30C4FE5DC9FAC9171D62CE801C5B77540930
F5604850AEB85A13E06620150AA55137F66E6DFC97EB36A16A9311A97039EFFBF3E5080760CC
EB073475C1E9B07E1E23FE1F65ADD9F68EAE159984DC1BE07365EA94A90E2305A90D33C46245
6CB031BB031F0D34B570F42507560AB26AE4B64772CDFF3034681B7E3CC6B610FCAA65187436
00CD4889AC7551F101B927F16188792AA47EA95BB05E2EBE5C96E92CBD487106FBF63CC9DF2D
D0E0C2339402875887CBF2DFB17C3E32E1DA3EABEEA3EE9CB461A7898A1AFE29609E67AD6DD5
7C91964296FBC5F09F4DB2C8315B1F7D9D324A8F745BDFE3EC7903279D78DE6E129D81CFFC2E
674714666791C5A6DA8484577531BED634A6F7EA50448E68D959F743279B9A80C8885CFEE79F
47DF6B9196F79FA4383B8681ED4754F901BD36C5A63FB1582857254DF71516F53D04F8617898
1F3E9D10558C4C7E613754D3CF26957E0AEE795F9DEE25EFA913D3623D98C1F96E0AF34F67B4
306BF5F593A96ED074700673DBECDC9B2BB27558525BA7544029DD9DB5828C6D8E563B5BE801
3E96131B9E2B11D67DAF49A1ADFAE1FC536F4DEC7C75DCBE0D6741697FCFB8EC8D2D3DC85FBE
8225A86EAB86652E0D32A00E59985E495D975EFF48812495EFD19DD9CCD93141D361B0D1DEE4
8ADC0611D1DE2E8EECD62FE9A162542BCAD738167AC417A156212A8229EF17605EE9A3E2AF8B
5795784CB576C5D2C8688A849E2F04B7A2310958CEF0380AB87E39F1D0270E002A11B97F866E
77C1CF7AAFAE209A57AD12DB90DB20026D92F123F3293ECA4AB07B86CE5A9EE650D3D1491156
A6199132B271607782E30F03E4A333E5E0960F798EAA25418313DF13C5D4BB186C37DFBD0392
459885CAC59FE71D22B1BA70083CC6D81F800F1033FE0A250DAF09E03CDE1865FBA52D2AF2D1
FD4072AE40706C969C1BB778CC4EEB3FCF993DADCA323BA2C6B72FC9B2C4679B9868B19A7E58
40041BAA7629877B130A05D1594C855B4853E70C8A1D1F58A20438C39C1E3800FDBEA47EC323
831783457FB0BAF72C02F0EF8BECC7D5940CFDB008CD258C094980C358471A2C6102C83EAA60
5523C535EDF3A96E699AC6627C5DABBBEDC9D06FA6906A3E524C2103CAE0E2DB5F926A1FB5A9
ADEDF9AA8663B026115791B810FE0EF2CC1E1BE6E7FFF7DDDBD27CDA85A34B3548B2129A5DCD
9071BCF917D9C6BFAE79F41DF7FFD4303525FCEE0F8D47179ACF13FF109E748B83584AE2C8C5
7FE3392653DE7EC742918F68F86E4694A8C9C3115A9E459DC45557A492DAEBBC306B73DFBE5D
27DE382E17AB54A77475A79E38BBC97FA60C738C9B017BFA6AB85960F34632C6010E321668EF
6647698D00DA3407DE9599736E3106D8C30A13C63D8B447506768A6771A3C18C7028C1E28983
1DBADBDDC8BABF7F5D2FE992594CE0F01ED186A4226F8B312329D30431148743E29A1C4E81B8
DC2290CCCB1B1781A397D4510DD2D08C81862C66353CB95DC06C67F2D783F0826CE879CE8BB7
6C93F57A64CA5EF9A563470B1143DB3ABEF694645337284C1EED1B94A8EB67F62AF99CCF1263
EE69F09109AA7AAF5F39A9488C7F0A1B3B59CCCF641B0789305B3E27B6DBC105C385B06EEAB8
CF7BB5A6A514BD597A401590DD3D8DA4E0C291621D9F2D9964A408FF77025134020215A605D7
77D1E509789DDBB548DD22A7C5A0C9FC6F2B84F9B94067AFD956AFCA3DF219F51671692A7EB4
8B0E91741BA2D2F3F533AA458F7C373ED76A155C18094E372F8C4766C93C33B142C87068E00F
9CB93ABAE9291F33D1AF2560892C50A3EE480BC84C46DBAED662A4BD34774E36310D91BFC3ED
B9BFF3D0061C5FB6207042680713CA4C272126A4D40352320CF87AA4C0AAB5B77E2B53792F62
6048BDB646480C5FDC25725FB6A11424D3F521D72730490ACD0DB15B91E94B11CDB8350BE714
1209FAFE5222129CA80113D1CAAFC9E5F84269080AD8ADD155BA2307F82D8DA59AF65A328A81
EEABA59183F6F12B9AD4EC9A10EF0732ED2F05A3BEE8C396B3663E993B02D145A5EE5F66E30E
CEAD5A7FEBC39BF46EC8F6C4CF2B31129084A58664C4A4B413F99B831807561415A15E5EEC49
585CE724128F53C19786921430DD793960103153BC86F58C760132356E51BB62F093B97A4ECC
7DEDD70427F00B45C644C523EFE1597912C4D9F53FA7E8FC6C3608338BAA4637D6EF1EEE30D1
CFE8DF2545A07388D8376499566AEEA76CB191E8DB5FE05C9D91622F262BF5564ADC064A5B3C
AA5569EC5233DE0A488CB544533FBAAF602CE67E0B09F9BBE7E0BADA637D26A7085E80BF5DF2
E06690306186F13A400B726A9BC0021A34BA050079520CBA61CC3D3C61DB0E5909C2FCC82E31
4DAEDD2228D3D4173163FAABFCCE8C4ED96829B0289799755C4484CBA8FEC61C3F53D2319010
62677888699BDB42672629733D4FB910C73B307E8DCB837F53346759455702F04A42CC42325C
29D16F4ADEC550CA0CF5C9B7EC60038D7F444883FEE1A93EE0673F67798AAA71AB3B1EDF95BA
0DFF0F45DC9D6E0588089553A091962BDB39B2D19B9395380DE4D8615F054AE7A1D8B26A16B3
A0611469ADA90C9A3818D08C89A7CA26B0CF98DEF23C8C123977F2087107A1550AC33C50F076
A30B84519EB46669EDA19728C6F4455D41DE791CAC6DEDA07A108670972C428438719F847BD6
FBA1CE8E7101E972A7D5924E749A2916FBED44BCDB2954510BA71142D7708B38DB6DF559823C
AD34881594717BE8D205679137747AF78A8AFB389175B5826903CD5819726980A7981098B02B
2F4B47DCDFD89653538327E431B843B4FBE0F0703BC3E211BA7BBD965B0407E31946757D1009
BB2EFF7E611654857FC11756351C0E2732BC8B99B20EC5E520AC9CC638010215CD5D7AAC58C8
BC907B6010F6CB74396B7486C0906F9B879B67814A23FA9E89C79F2019A935125EBCFBC931BB
9EEAE79ED464065D458E49AA025660B1543B0588B97C0D755430EFB05154814F5FCF0E58F03D
3DCF0C01197A4D4B1D94B0357CFCC6B6D9BED2F84C084AC953B3B247B46706C71E8BD717B93D
602241B21096C3E6B271B758CC50F2657481ABFB0A80B54B0D2F0AC2B14D0F552815885B2EE6
399ED0A9A2D3C133305339D97E44CA08D52C9071B8F34D06B2DEAD4549C591719BEF6194DEBF
8E7064C18B15DF49A73FBD1B32C1F16413F462857A76345A462419B74DA65FFCFDA65075CF3C
6201C6710BECB92696653C0B927000B26F5289CA6FDEE0EC2C39945ADFEAAFE397907A92D266
EC4568635EC21FB10C18BB9FF8B975ECC778C77B7E8E66C9D508E23E136F7B1C2E6E03AAFF8C
E77008005B13217B9293CE534416FBA358F1CD5CF26314E4E6880641D8B987DC504CD4F3E384
06E63B8EC62CDF13D0C739F60799AE269706761BDC78A9F80F726739DB2C211949BF1CB2F947
7E17227E18D43A875FE5ACE8446A887A14C77D01B5C9FF11C3AFCCD91C2411072632375C3F99
8343651BC7F583ABE03439CEBD67BBB3335B94193CB3CF36210C431A202B12EBD03D1AF9C6DB
B1F255D8C101BC17E301B4D37C8EC7DA0F797767C6EA0166C74411F7A5D54B7E7AA4CD62C856
99F314E11014CEC46FD5BB0C0B69A397A60D4DFEDA87B095341DF659CE1BC3A151376C2E7BE1
1A548D84F0F5777FA0C07DF33068C2EDB144719CEE27D1F6DB1FD83F254BE273BBA9CC1FB51D
B3ACA31D8BBE5AEA00F61C23BA566415E9A0E1ABC230F46E40065C0D9F2F7245C138149BE9FE
0FB69C0B945DC165176EDFFCABF56B9FAB33DFBE78966064DA91DB7706BB6C6F04AD34E042F4
C6FA48B0B9F96BF5CF68253F9AF738CF671AB6B553E23F34B6771E4BF150E6B6B0B170DD494A
8D1ACB6786CEF859F934CC7736A170BBA986EC19430D19B9F090ABADF9AC0943F36685966113
9C7645141E8A7A2DFE554F8397FB10064996783310500165171D8420D1ED8BCE593C42805A2F
9EFCB4B88D09AC7E6A4B23C21A84B94F823CB3AFE754E79B9C77D2C3E29D5D4BB0F29569875D
71D142362E1FAD2AD2186258D1DF52692311F53A608A276F70AAFAB6E301FC586B0F4C6D364B
C2F1815FDEE94EEE51BB72236F3D4B64DCECE6C7B21176CC09E6904DCC1FBDAB59260507D488
5F24270FE2A6F133D47CC2AF2AB27637ECF40EF51D8CC1352EBA3EF27C745663350C4EE97B0C
D24ED09A5BB618024436FAD4BC458A6B259BAE107DA6FDD814B646E95B1F39CA2C7E9EA5B156
A44FCF514EF96C5865DA6D96FA8876325A9F83B75C5D156ACDA42A69ACDAA7BB306A5807B013
38297F76D0CA3CA851F9178168CC5B1ED97E4723201DA85D59FA9E3EC837297AB2759B02F921
CA65072573A35A942DA915675DE04A02E5221B62D9EF635444A37E1686A816BC71F496678378
0A328F17D3F8D3754AD2606524C0FABD57F1D02676154BCE181F8B97CE2B0C0E0F06988F5AEB
5AA15E7B3A5F2080F7347D950D3B005E462336AAFF1504378DEF84AA51AA528C2CD232EF2382
63BFD3388D0FD290DC4558EAF24F56B0F74A674A3CB2E61A88F5F4E97CB9997B380B68572043
4CFC4362BA7B23C804C22793341388502F4AA4ADABE34DE967FCB82E12616A22067947F4CD26
AB2762ACE46046E73FAE30959005EB576A10FEAC6F307233BAC38DE2D70D037F56C0B0ECA2F3
A48D4C0CF69CAE3CE44B08E5B10D3F938131F5F5E6F4A9E211312B04709E73B246639938CDAC
FE24396907B7C5677335988E9D6EA7BE4D7F6850AD924E44D85D494023EF0AF57918EA99A779
34F389A5EBCC42E26B85E47EF7BCC2375DF221BB5E0294E3FFA8A51838D9ED322FB0979FEB0D
26D4E36244F5B0557EF0101B5C3D6241A1EFAB943FD5ADE870AF75E24F25772BB65B26CA14A7
034C1F69CCD38DE4AC79A8D0311978A8134810437E5A04B3363F16D4EE6D23853BC1298853AA
FD9C619279AB747475BD433D2186040A934A0F05B294D28FE45801A802DBD20AF0887B9B00BA
5C4D885643B7A645E990A49A8111E6ABDDBFF944070678E003591249551C1FD79B40795C8CE6
1F8FCF78D1BE0A44A2D32C199E46DF4A734206BD97A0954BB778C0BCA6EC76162FC4222AFEF0
4DB282A73412FFC5EF9BAB16CFFA50A8A259BA0FA1BABDA8BBDE95A321AB4196D58C12D8AF91
89EEDE485B3C951AFE3230189BADAF0652535CFEF04777F0C183489D90CADF9A6553473A18A9
A36EAE70ACD5E815C03E9964703BDDC7706FD7D14B668EA1176E438E49350DC8807A6E4EE528
33C6D110475AE6F96B6318A989B6BDC1D88D28C26606E3D71380CF186C2997E8194513D3F43F
9F570BF9C3CBF688060A12885355038E9754F89DBBD90C25FCC2922F11FF1934AAFB0EA11F8B
DB6C3257D7BA0F8E2AC7365A9FC76D3029325506AE25D8DE203D295617F85EBFA351FBCD7956
11D6FDA7F3BF6E34DF41B13138ADAF0F570BEF6784FFB896388ECC95087E0B7F425B6758D8A5
98D41A87B3F0075508B708675C56726022F450D6DAA8B60134BAD5328A36424C609E99B31480
01DBC05881FD423B95EC9772B9AD22A992062736432C390F55D692C90AC64A1272F3414C537D
FDEAF1BDBF157726C59083DD303A6E1DED50C6F5B94C61E81F9F138FD8AC67B673AB38E5CA16
6611C6726DECC1C0647D6188085056CB939E2B1D66E25BEBEAECE4B97DD342078BAB4867B7E3
CDBD2C68B9E7D88BE56D90573085C9DF10E10B19EBE83C8A1C41F58BE78B93040C928FED3B1E
98F354823619ECF7C5764F2D98E958A375A5F0CA5D884389DE854F91A766295B01FF8CDD420B
D2A52A41A0759ECED87DEAE73D27A1DACB0D0F7E4658FB724BCCEFA08B0C3D5BDC9CDD6A9463
6F8B7B4EB66971E8C599D5F15BAFEB89258185E3E935C15CE57AA6CF4F2CF79BACD605747AC4
EB081FC98BBF61D2623350375B860155B90EE6A159DEDCF7A33604D7E83C50AE7804E9A43462
2239C5A7D891859D31CF7A37DF61BAB489D857E93D5C2C8CAEE4C61E7F4E3316DC35FF616189
7D5529EB2656ABC3367ADAC4EA3342C2EF308DA183C6F40402E231586A37198970612951B383
FBA8E8C375123429CEC97A52B455CA8B384913E1527E77EC48AE423B6BE28F3F8E0FE77F8D19
7BC6FE350D817C8858CE5BABB5A6BC1276F905BA942A1601784CE8E8ED96DDEEE65D9EDE4FC7
D5BC5BFF2FC3A966FD25961A430A063DF3D8766631774C9625F1CAC03C135B6B122D4B5F68C0
659B1B2CB634D067218E127A589F87FD1EC9715443A08284837ED2BBDDE3325B7EC288992F1B
5166EA175EFA6FDA164E8391DE99E4A88F43199C3DBD617667D6FCC2561A1642F45D76564EA5
B0E925BC960CFCA1194F67743B854899EF834404C8596279150CC61909F367EB17924CA9FCEF
E89FCB940710E470A5E7C9CFEBBB8B8EBB2CA8CABD973EC4D8F32DF8A39E6ED4C520BF932FD6
7BA02EADA63CF55F33EC75216F75E29E2D6937379D61EFA2C7F83A187FF93E4F17A66CA3ECEB
26B9199E1915922667CD1793FD0842E6648FF80150D7A0A447F5FFA2B8C36507F7DECDE7EB99
2FEE6E9C8E32D9BD971771ED9D0B3E95190550058FF0E6F80576ECCE287AD895AD56DC8F78D1
9FD04ED854529719471333B1C313A002D8166BB91B2983E99A09812E9BEB52F5EDA7391DA5A2
FECE694761350B089DE41343F04DC45E1B4231F265844CBCD770EF5BE05B2F97434CAF711D61
6613108312D08A9B4D3A55B2DEDAF47CD5BBC2718DA7D18A7079FAC6A7D4F7CB4F09D4B027E0
5629C14EE77663D8B29EC009924B41F873E4024E092DF7343A1864C80B6EB8E4FABFAA90F5D3
9154FC4D14438A502E60B5AF432A90C7A48C523B4267534F171FDC02E57B9EF3867758A97BBF
9CDB99DC41758BAD49A7D780FA0BF66851B52D46BFA8B96E60BE89E4A5E78BAAB8736ABBE338
C1283CC1D2BC3A07F982122A3289E35CB097BE9C27274BDF3ED19EE8628BDB48FD587159E7E4
84F6F5005F22E636719F9327173693810F978816F739574DB0382222B9B717E394DA21A4F80D
5A95C552264DFA0727FED213EEF886C149D392E900DC4DDD0CCEC84C5DE5DFA3DD5F903B93FC
649FD661BF20618BCDAAEFBF9C71CFC11B8C68143068B78FCB3354FF5555A9774FAAE88328BE
D4C4996679E9285A00C12B32757C74E8FEF1ED1EEACCEA315D56DF2E814F2C8D75E80D3836DB
71C5D1CF0055A01C1EF725AB4858D73CD089B3A66968C2604F97C861A7484BE84BF95DBBA43E
A6EA2C455574B715825DBCA643BB023B77D3CEC870FD30899E7788986813915FCD3F909E3D59
6281B4D858A29465DBFA76EBA156B0761180BEBE2A6C218A51A67D400DCE29A3F19538DC28F2
9971A8B01B4C27A42FD9AD8A89B7FA5F188D3135B5567C8E0B87912EEF813FB15C63BC9260EC
3D7A6909D2295C0C31DC77B0A468CA4B7F801BB06A0486470201437ED678AFEC280DBF80C771
823FB23A5AF549CFF74620AB2EE1EFC50EE09F4A0BB4AB05579670940D20F01C61C7461F08DD
8560F5C1E0C73E0DBFC8532155A5F92162F05D19E6634446EEFFB764B9BF4B5E695E9B4D8037
8EC8406C588C3EB7C919BF154BDA4A878B45479F6111798DD6FAE11A29EA1E44934C82E6A68B
0025491A69037808D3FCBDCC7C80ED848EBEC3F7CA954CEC873F4E404A699A7A980BD66E9E81
2BF39C85C55A010D95B9AA147E5826D0DC8EFFAC979ED602F7414DD64CBF2518A5B71AF4B6FF
0F59657D2412B47391921252D0A723DCF2EEE67AB89F8C12D3EC1089DA75F364E4E6E1041007
2144CB14352C56F9D8D180E45861FDD26B68A02B5A86560F3EADF5367D8B06876ED8F79BC79C
3602569AECED48BE6423888D86C3DCD811CC26C29239210EAF574CE8730016A3AABF2BAA31F4
8CE3BCC43DDC31DF81883CA92F2CD4A7B1E136AF70037AD22207F8F5E5EC06ECA4C9EE9B199E
15590E9F59D11688D22CF11060E87423F3E01EF613FC230FDDF599D1277CB7FE6AAE4312282C
4BA8A28D794628136FA0C5EEE83CC6ACFD043AE7FD985D226AE4D91D00218964C161C4A0B147
E58A4D143917A592A8FBBA3215D1E3AF1CB952BF418C9B07A5ECA3457B591A0E9C49234DB043
99EFCF129AEA7A96694BED7073AE4502979F2F0286085B799669DC8EC22ADCA51E92EB0E2633
651E822F4910B716DE01CF09B631187A6B9935D43DCD1C68111B850B7F21EE142A7A48836D8D
E7F4E63D72B515728D9AFA7B11118DAE383ADF97CDB92C17075F437FA0BDF5250C251013B612
C593D93E8F9ADDEB8C03E1D38F56E6EC42C7FDE744866D4B873B725074754CDC10CB0262403B
9740596A661A2DBF057144991F0A1A4FE3E316095978A88CF38BB1B5DD0FF4E8BCCF1C7D5636
9CAD0C2EC29D56A6CD2535EF610026AD120B4BBD5151EDDC7F385B229E79B22121416E74463C
4D5246501C7B6632ADD04F8C460C7D5A505F29BB3F45343ED5D576302FF9D8EC1F400B190922
BBE646CD809A6BF2E0EB9E7AC66422EACFFA93876695B8E88ECA149CE738586A0CAF105CA587
8572E58ACF6D523F2BF3D410A8E79507A0E480AF8C618FBB459AC768CFD240F32B0B69265332
20552D8325D058C2D30B5A437AAC867CB5BB6C007717FF089C65FFA92C5C8D159E0833C54C53
040D448B93FB48B5FF2395E4774BA3764B6EDFA7EEECDB2B9736E5D7E427CE883C67AAB05B08
26CD91AF342E32F2179CB109F2228138978ABB9C8EB9B555C1269FBD12975929E91AEECF0915
D6B2068C7B2DF726FEC9DA54ACBD64AA808FCE20A34EE78463C4A831E33F94A268C5454A1CD2
E05A662786E7392B24EF94B7EDCF28428B52FD85DD03F7B38000F38C4C80BDBDA46F62B9A964
FD0B5B33F3B8FABE28538632F1B229418E1AFD6FE9263CC220BAD30170816AAE06D54541F854
B68CF72E08DFD272021DCE628962A7BD962564C054C0E6AB2742846899F9D0DC9424D820FB28
9EC582BF3B56C48D32DB2768406491C837B125B62AEF198E85D6D579899EE59B53271EC329B2
83DD4C498294A27DF14A783C517288E3B6B4CDEFD2489398B71A712AB154E55499E016D7862A
14BFBCEE308D95509CCFFCED78FF3C55510CF91DA90F10D3203706F0592400847639F47C8A70
D98F48339A3D7017A8C8462D6316BAC13DF9E12A49805E695A1C632C63E223A2799C84DAD656
DA6ED692520DB379C727B8375DF9D548F693BFD9509B3028B1EA529AA6EB737380A4FDE879A6
CC623AE8F5F992523E167791F3D33BFDDE0A516C6901A202A5C154A0E69CC5FECC0B75E61B9E
D91834B659805E8B7BF32FBDC4DAF5520A27D508689F692F1D69D4E0B00DD7AA134C1357DE1B
F8804FD534600ADA4790738325759F35D9DC3B077FE48817AA57CAF862713E617BF7BF09344A
74BD13F118D26D30C1511B20327C460D270E5475371AA26BEFFEF03B66564E0E669724E38959
73D98C7150F035FB52D8D328EEDB5C85E7EA7BE5373E514BCF881C4147DA0C1656523A95B63F
86B3017B93AF76536DC19979B9F617CC855DC3B8FAF171780D352F93AA78C3F25A0AF51FAE91
878FDA9DA3B094876526BF6D68A650008DC13D0F17F8445236FDCE4F725A82AA5403B568F65A
087169993A3E81684234620F58568D2801F344F5667140F9DAF63DED0AE4AE391F717AAE8B56
6347257987D49186C82B911A98F94DF8292DF7ECD76FF09EAC1400B6C34658B9025AC42B7DBC
EFA9173258680D929ECBFAD99CE071C35DD8D34126A036DAB27B3F2A0F4B79A509433784D317
7324A8DBD271401AC904E072ED118331DACC31CF4EE21D1A9D805971DBE8D17AD377FAB5450D
1C0448C6C65FE4E8EC9B4BC1FFA74D7D0CDC6D0CBF0C1F905DB3F02B944281CCC10165CDD730
2F4DDF57865D32D47C8C26FBD0D410E4DEC820B5D6EA0DD6B1769AC0550F15AE88C0EFEDBEE8
4B75949453669DCF1B447821480ACFE750D13F8A3E574F7687949B525B278DB75C3102FD4706
6AFC56C4588A258813C3C53DF147FA5F225E901A297E5E322920F131093304BB9B2895E46DBB
1D020EE684B08C64E1A159A6829DE9510E5E985F53454EC367507D4B84B80E28133254B7B60A
C194C776F734D6E8837CE23EDC94531AD2E46DC6BDC1E921CAB4FF785DCAE7B556706FDED6AB
4763153EC5F4B2E10491E5E427DC327C21B26DB2AC272588FC41FC5490A102ED1C2AD82B0811
C34CC8DB42CE97B4B24E194CAF230E58A04943934351805A9A0C5975E98C0F11CB0AE28C5ED9
8E52CF035F823FD449436B20CC0A913B7606A6FB2CCF4C7A12714C99B60940CCFE9CE26B22D5
DC1FFFA01C8E4A04AF28C9CA3F2A7CB2B33A725C456EFF23BB62B69878F8FB185F653F41C596
C9BB7C7A17CD9B5A07FC405AE7E182567621FA75FFBCFEF42E7373B2B15CAE76D7C07BE16A23
086500A789CCE988CAB9B321CF969A79132544B7D9503C7D30A4C86D8601743449D619A5CA87
879AFCEDA5D16FE6B31E17529D17A95C027D481B6C11FE9477412DED852C15A026E36735239B
F5063B7FDA776C1282B9F50F602526F355AC3516E5DF327C227EDD44E453B27D7074E0F9D9C1
9FAA49D3DE5138498B0569B4FCFF2041977F69484CCB916856DF1F07E40B450C250BE68FFCF4
D159FB8F1208EA8904567BD552116A28A95425CDA95D4FDC06E59449065B65DD2B7047BDACDC
29A66C8FAC9BF2EFD6886FD859BB0F256B21EF2AA03E6EFA6A614B222B84B7E6BBF2824713CF
D214DA92F04543AE0011D51A50FD08C4FE4BDFDB9E184EB32C399D3A2FA71059CFB9F6AE1CCC
DB4CAADBAE20AE4F65BC58334164F127DE5C476EA5BBA3644F2F24F0DBADD3D1E80DA16A6483
64C1BF86D0A76523317C7D4F46C419FA31BF86D5B700CFA640273BBB9D6C8AF13E7CAF3A2510
01F06DC2D4C8F57AAE5A8B4E4379163D732756D3A7B97C778DC8637D06EC36A951DAC426C14A
58DF97D2777E7B45EF2C3F9D35202015E420C5E35301AF195403F3ACE5FD4040ECAE467282C5
1E7A6AFC69936F6D81216FB0B2E3B3DD942DB10D9BBCE24E186AD3D46B49414CE148AFAB9C95
8E7339664510E2CC5624DB80A708A040C0EB2E48E8CC67EAEE7856DD36BA948C8A8AEB120BC3
28BCA0A629FEAEC6419D70CB8469D82931C1B08B8EF46865819F4D6E3D2A9BA5EA2ED7E7221A
ADB2660B474E576DA104AE298ABAD60F6607D9D03C9AF768707D5F2F299927D14BE80E258469
066AD3C2BD0ECE20975A061977CD4A1246E6B545E7E9788BD51E04DFD285F9636C663D7C6AF3
64ADDFD0336C6CD6A46A43EB252D2B72DF3B52050D4C2B20DA4F6CCCB1C1CA85EE1C9A5501FB
22EB7FDFBFD0838F0359E295D3176EC8F0A2A7A262155DD2F20CD2632FFC30E4F274AF926570
85147A75942D1611D5B0407504708CF782398C366A02AD6A8B103DF8E615126B33DA380BC2AA
1160FA63665B883A5A4A7CE7514DDDAF8E65508B2B6FC341A00DE2E976C07A499BC758ADDA72
B65780DD06133027E1D7FAFBD4CF7085091ED9DD98D91E4EB4BC0BD4DFBEBC947544A96F47C6
4E1CA2BEA3E739A65BECDE6B2CF0713743B881F403AA40AEE5A726A8B54659852EA518675CAE
5089758C77C82EFBA56DF329AB46166154F0780319347A050002319438096D4EF7F851876CE4
07D436299F7D3A0FB6E8816C37A028D62426BC615FD635060F1C69E3E7FF6D9262E06679E415
088687B4E65813C86D481C41B5D74E0C208882B13EF4EEAE0C60850DC1BF54075F41763705E3
CFF0B9FFACB9E2922B40AA7209970FA5F3563D7E6E4D3D2249E7E946E97B5FA40291742EF9BF
A2DC7D4E5EE1A25F6D0D930A50262F17F38744D7A07FA9B6DB3C4D7CC96DDA023AE2F3DDC571
FF48135434E354979EAFDF625460CBEA8B65B63BC612E44D05CC3C3FB186403F994FD1919A62
44E728857A54DF535AE149D405CE6C83C96A6DC117BF178E088556E12D3FD88017FD2C031059
1A89077E0D6455E76A3C8AE37B8DF495083B9EDAFAC2E3322C07209A21B5C33AC6AF3DBB527D
C1AE916CBA52E68C2A851EB073D09CDECF8C3AEC94F5728F202BEF1083215895FB76B791CA26
6B925512AD89EBDB53AC81DCA3EF1796D1E91AE23E5C60DF72549D625AD1BA68D4B7B5C338B2
1496653F61F735A9D60C437A6397899304B3EA36BA2AE138A700681EABB177D32CD0DCC8B226
982EC3BB7EC84A831569BB9A3BF30FB4A56D947464B1F7B49DDA4621907F605A238D6C5A1F21
439FB67080A3AA1864CDACED6A37D1FDA3E95EB8E70CB3B78D2CA77BAB36D6FBFF8CE6AB6EA9
78C1C8FCA06C3112FA831E693BE7562B859AAE3AAFDBBD0B119392037F1658D9FF7473B2D4EC
D67B80F2EC39CB32391E41E2F8466B9BDBE8E134186312F0C97F2ACD4EB52F835D00880928EE
1DCA94DC6A6E25ECC61B5E549D1B8A2C130D61EA7A42465F0EF3E3AB242799D2639AE4B2CD23
6F195D3EE06665DC3674C8CD681E0B49C7E5B95E4DDFBA0FC01DFEC2E17A77F16116AD14296C
0825E9859CE22241EFC60ECDC3F4C56D22EE448F8263394CA1848F95AE78D46DA9FE03328476
8058CC5A4CE269EBD36B01D04B772864E136FB076154A52C165A9A0ED6A9415474890E85738F
C1E112B733B2CB78D73A294367C4A6B33D15CCAF851135BEABDA0AE764091A3EA5B65D0BFB32
36760AB084F8C9C16F1E93A7531EAF2130CDB62A8DB7B42040D0A92F2B20DA2FA00A73738BF8
AA9DB2581B00857BD6D781A2C78D83792012C83D4908012347ED651A2FDF54C70D53910D6DC6
D2D278872C6E7D58019E8D04407A1A720FEFDDD6EBD79B98B77A4FAEE6EEE00F2985F8B674C6
A27D04C992B7E8B53A1E621F9D3C66DEE950E1F705D02DDB78A081CFB94006AAC8105F5D3E46
5796D2C10018F65869FF73D7A9ADB035FB37EDFFEB469D7670A13A43DF3CE14D277AEABA3833
83D36460880D924138C8A8374AF1031AFA2654D5A118A82149072BCC38F87096D240B55679D8
221041F2F7934C27D3F1B543B6761CD2D2D42BC27D7C16317D651C2E041ABFC027D3472514ED
04642E58C1E729945761DE2758A438569DDB55505284045153837A29D3BFA889C6AABB26C108
F27571D832CD930D39CFE96814370B2EA5A39376975E378B752E6E14FF1322942114E4119A30
7CEF2711AF296AE3F88D550163EAD08B2B515364854990F25AABB23D975FC84DA81CF63A416B
32AF608508DDFF86CC694A6B668B3F382E3E3AF223623A65AAB3EB16D000D86D663EC6031D2C
DE50D54A55EDF6C7E47B4903C9922BAA00D2C00798CD367613F7549D9873AC4EDD3C2E8A044B
AE53643AAE392DAC91F6D335112C2DD4B188C5F1EF1E5E42457E4C2F2D2A282EA3D2E9BCBCCC
6DDA43161DF8F8985745E86461108E080F647C09B183ED67257381C512947CE954FD786F0B86
A62E40327AAF77C3F5265A47BFEE2F3919A7073E84C49DB01295C730AD18F45364E2F19BEE93
8B7C92235D9E32754139E8C2F64C738A5716EE5BF2C68D09DA48166FB2490EC874C723D6E72F
AB7C597CCD0ED2398BB9D99159E2D4A3FE605ACF6F7A5D4A00BB9156FABAD02D727437448B75
E6F08F1C5F17B251412C2E698CA1FD7D8D7A80AC6C7343CC7CEA23245812247F35F0F4480E10
A1D8F9D8446EE41E435166DBA0CA3B29155146C96C05FF1FD2661DBFD9AD2A7341362BF8C2A6
C10B91541D2E4CB6F8AA01F1C90E118E0DB81FC03048F54677CF96075EDA05B928E200E1620D
EFCACFC777BC76E3C911229C64699560D630BADFFB00206E4DE61E3D06959B2C4486FF5DC7BB
B22C634D8B136077E5062096D3C99B142E2D1AA6C26E58AFECDC55A8B90441C0459140363FFE
8928C20BF64C8BCE4DD15EC806A2AC7CB1DD58E67B69A34B28C4164BB0262FF9267544A6A905
AC3290DDA8F97CCAFC12083485AF20B6875B355D98CB5E45DFBAFD80FD63DD590A2EBE0B0429
2A1D37C906FF3042E608B3D983DE1D829FAA8B658584600E5EEEE90FB0CB13EC9633B148B696
30B8A4617527B0049E107F4F7E14BF421DF26B08BF193EF2650E7930F567BF3A05CF55F3BE9E
651C2273F5DB3C4D08D9100CBF5F5672C702696D823A43082A79B159DFD315278DEDA56458D0
B8208C7FE90808E0D0566CC2A176131AFCA80DC312C9F7E4C25A0E949AA384CE254B885CFD9F
E74E88B40862238868C3F7D1B435DAA876B5875563C3C5BB3B962BAE3F9909BBB96997A76533
95C7CBB41D74347B78547085368A5B2D18CFC3AC56DCD1D9D5A53EA63F4241F1B35C15913F4F
773A48F42B4D04B594F33FF14C0B16989C4354C2DB18EFB3132AC64D02C86EA8198461F700B9
8BE371A968C0865BEE44E8DF5A7AE98B738C034CCF07E1CAE4FBFB8A50C9C31362845BFB67E0
0732FC33378066D3B8F1D69224E627103CB706AA5B6F3E4DEC74445625CB052F5AC48681CD3B
204574A1041CEDB74A51D4D21B37D465593A7E8F7AC1184C5EC7AB9875852D88E15AA1C5203B
BD9DA15C25BF2E908C97678DE40D9A8226BE09A735156D1AA028955ABFF46DA51C07E8E1234C
9FD06F9B54C0E8ABB2AC28721F5CE5473077BC6A4AFD0EC98F4FC29BCFB29BDFE99D931BA28E
200F5D58136F63C5D18B4917F79F9650343873C44F8F9F699A0F5495237E2E748B3E5C3DCCC5
9DDAF98E1C4F5252F0C52D2BC4399510496E4844A6392F984204282ED84398E7C8862D9462FB
AD609A8C85945B758B88E37A2A412380B6DC884BCE142DDEA569227FE306C6B4274C07CDCAB4
B48EC1806E45A27109D0B142FB3C84019F4C1C275E8309696F966705B06292C8F8622FE8DE52
6C591659D7780D424E8ED1D83F59A0289DC59556A84B5EE4BB34DAD12A92974CEF6901517285
42E222B0C32B05B2C3D819A40C4BFAD0E080E60AA633D91ADEB117434C58A7BBB334503FB9D6
85166DA7425F35097878325385C28C2F1B10CE6AF452AE0FE66C89A9426D1B25196D06CB9271
C6E973F2FD6722B1EC18162175A9C00CD155FF3EE679FFECE6889B2EF40D682FA2972EA03622
24A1C43282A08753A5205D3BAEC16DF17AB6F6162F9A61292F32F2D9DA34A45F3DFF377848B6
E5CAADF938BBC92D8553556817316F4F8F8D54983D8D72C2145D4D83682CA5D528867E8CE66C
050FE52B0269FDC98E5B48A185B979B45CCA3D99C870B1049461007CA15F4DBCE8A306D460D8
F6B44A2506FD7217F11B69A0077D3B7C2F016ED954BA5E58C9B51750E4FBE8E88E4B0AD59B1B
9969BB9494CC19C030DDF9F586D80CDD03FDA4D655D90AFCD4CFC93ED8B70C13FEB1B3F052DE
FF4EAC734E8C1FA2B4AE1423E78E529443074F58E3F5D84DC1E8AF60866E49AC96210FB526F1
B4DD10AA19C53B92973CA6E13B60D319FAD574A46301A80D69737B9F60B4466B94F4AC8DF508
0C92A7359ECF6883D87D1BD45037F84CDFC93F9CF0B7D8D8795EA37B8A0CFDDB837D8F9A2327
42995FF55E0C38E2CC9E57E10C5C5D6E9EC93650DC90A82F545E54C66133F9381262E21CBC52
CD865192A781BEDB71AF318DC25239D64CF458839FC2C809EAF85AF1AD027E0BA8BC70AEB164
8F345E7B6043BF59FE71C0B20F8BD21CC93C9A426E80D62AD487A60654EBF0E364D99B90574F
072C52775B239A0DF62F256F44870302D077D114DBF83715E4A07069104876317FBAA1F7ADF9
F99DDFEACEDADB48B397B7EB2A37E190729F6D31474F4F6E2644C697E0FD8836DE337E05A8B1
B8CBB7A5A6BE292FDA3FEE754C5F9FCCD6E4528349392FAC86F7E6BFC953ED5378B7C5EA0D8B
2AFA34DF6360198E5FC5ADFEB120D9FC498D8DAC8644E9643AF39DA434BDC546FD2BCAC23511
AB1687B7943F299285D071115B4CBD650F356E75F478C5505A7FF036BEBE3682C3A00D047626
1791CF08EAAEFA6F9333C66CCF5C9E59C14829B853A660F3FE3CCA0F1F869E3A31D089E373DD
A04D765D25FB0B6BF205A9FD881F00E99113C5DBFD2FBD7ED608C32E9D51FDF6454557DC52D7
2EECDEF0AC2D8E89706809648515BD4037379C6057BB89AC4B6768DBBBFB672329D3C21036A4
804682C6CFAADDAC7723C715842B25B03FA1F12A2291125F34EF7DEDF897EF4A7506F804E337
0814F4B62612B35ACD43A33A3ADC76815D29178EF7B6D2C170FCC1AF75A9157239DDC78A5FAD
4B7B759755F63031B1A7A6F6C9FAD4CA3B4F36E065E3BC3ECE67C990411940787058AA52A00C
51E29250B624EAF70C9E236898B1E2491256E9C4399ED8ED5B19F5941E76F51B8F16EB0A96A2
9FB928E35ECFDCA1BED3B12D5B5CA1D55BB2E4AD69FA1BCEC3876142B7A194388538F5BFB028
402E52505302F482BFA1D6C2492FFF4C7C882B6260215B52279E25E8D797222A2E4473CB30A4
489A6F2C566A79E9FD940BA0E15C52C8044B4C725358C667522E784194F87C543D9F77342757
2CEF02F46AACBB4EDEECC15C3E813C67E68EC8485112A1E19054AE9B877B857D9466E69E81F6
C24BA540A3D716F2E92659D252692C1D5DEF79BBA8C6A7BBE9EAA7CFB7721810FEC93F176E8B
9DBA3BEEEAEFDB577C14D52D2676566F0D04DE6931DC8ADCCB09022D30B84E9703CE37845966
5946CA535D26B3094D1B493A5695DA6DCF79527B841194790AF65EA24FAB98EC08F519743248
FC600029F2469C8FCCB2B27182928BE3F1AA4405E14C7AB842A370E45D48AB1EEEC9168825E9
88147928854FCF974821B19B65D9FFD57333D3EC10B21588F04F652A218D8E5CEC3ED25BB6CD
5EB1789E3CFAAACD95B72455C5BE8FFAEE0636C0788A587C992E6D1FA1E2D5EC8EEA82B6F75F
413707DA0EC878352E92FBB1608506CC3A4D1F676D364524C8B72C3AD5867E03B7642F335B4E
0DD6B59957CAA5C0131C8A58E0F95EC0DC6D75837291A7C1DADBE3F92642D2CD4C0EAB79CC23
7BCB33E4631BB90B0CE4D63A936348B7CC37AA207BCA6410F010890F23F6B3F6DA3C7A0643A4
44D2E3D226C754C1598D72AD25C25BF5FDC1895E6D23B9632646EF4F314BDFFA94971BF6FCCF
20EC37B31520221BE10025C386A8A1B3280BB47FCE113BB4A5F29AB70059611EEAB412C0A969
3E30993FC944B38B11211594B5AD84B0D622255A372F56A150BDA57451FCF52F3DBA2DF25BC4
16759E32B7B19309C1FA25AE1C33D668145F2E645107CCAC86E741342CA4301685936E12234C
8D612F9314090D5C9209F5D154E678BFA3985B03CE6635AB80B8ED2630B41D7D223E6ED1625B
FCC417BBC3C9E5BCA6256260A06923EC1B9D2DA78C8B55B05CADB5785C838CFF582FE167CFFF
88167D7FB3B90B276F5D6F78E919FEBE8F9B58915129CD7AE5CCA6CA9885D22CF7084994D101
B81A675D0314C93041B5DA1899B36DA5DB30676B5F1FC0F3A98A33916B47E0496E3DDB771098
9AAB7642A1F77E5CF5EA22F75432DCB7DD2AEA6FC7BF8C9FA07C7F28F7D37CC13D3586D4EB49
CF579A95DD3ADE1DE06869687639267085352DAA0A19E8F95E4A7E31FF0D17CC87373690D263
4852D465CE0FEC652FB6D710163C738CFB030BD4935EFF80F7DE7D7F06F0FDB1F4C10B07938A
C60C74E442E1F3A6BCC8BBDC7814B6E710C41AE1E157538871AFE3518CA8834A4B4DBC59CCCB
6DA74715ECFA03E98289479C36D00DD0D125B12F63B45E112C7AA1C5E60B986E74E56CF95C80
198381207AF0CF5F17A6635E2AA89293E67D2C549D110A2A57C02C581166747BA758DE5D5F10
686029D7F0A82E7E4889BA7160762431E00091524EA5B12C9D4493F0CDCE0B4DD38EC792B4A9
2B0DC4539A51FF1D613E75D981BBB9C20B3D53400AEAC4970FF843EFCE5EB250C1283AEB8315
73AE15427928CC2A9C0C3B04B7CEF0DBAE549AE82AD2FAB68F5D7463420EAC2CBDF421BDC88F
2A6B10521913C6BFC6258598EE979570E9E555F475B1B26721F94A5462135E9705FA27259BB9
564253D058772483B35A487ACD624B8D9FA02EE6BABD73D308EC29A30CC32BF271CF95B3B070
160E31B8649192444A80DBEB812D1D4F4BE00FFEE6BF7E4CEA75A1142ACDC28EE252228DAD93
7A69B3580830CA904CD6F5CD01977F6FBA3A13E89667DDFC777F48DB2736D78856BAEEFC2E41
C82C82466D361AA2D02FE20568F584088F4038B72E10695253D8E095DE4288A48605FF431809
8801CD4FCA473F8C3316E8FF9CEB463D3AC98EFD0E30EB743E250B974E758E86DF712E13453A
E6882333F16696A670D28AA612FB9A03D46C4A866155D21AE216E7017F06C6459708EFAA13DC
465BF43EC202C8F556945FDA8F0E06A527A368C577BD0E5857F35C0AE8D0401EC43D1FF17760
A7D9893DBBCFFC86BE0747E7E6E07736EF0146BFF75DE5715E45F8EE823070433000BF015DD9
44265CEE7BA9BDD434A1D78E419608A4B19C0F74CBBA354BBCCBC13D0BBE4BF95072C69762D2
318D2E637A918ACA900ED1D59011198197E8DCD7D1CCC1F43890453AF9F70F821234C94E6F35
5E494C38E279E28C60BCC6C4132405B8CD1523A1BD77A4CBFA12C6009F5669AE3363A405EEA2
8E7A28044EC8B461B342654B2C24D50F43CBF0887C60C225409A289EA660B77F2286ACAFF8C4
656D4A369D39875D0F10436857033D2C5AD5E2619557B4F2C88A753249C2DA0552BAF19916F4
6F7F3A1F1356AD2F047B55F002D0509E266C184A77C6FD56071A28089B1082C0E80985242C8E
3169E754E5CAE6AB2EC06B5D8F1189E325485950ADA8A30F12BE6872D8393BA32C1ECD6A80DB
0FDF54919E9A7D9DA15C1BB823881033ACA8C21F3B806722F5277AACAB4A4E80222B3536E50A
2E5BEE34484310CEA6573B48F992D2B361B13F3BBD14A1E65C58B6D71CE393C3F340FF9806B5
4D82C04076AA5A4343E53785B3BED4C8A78593988BF3432A217AB637583E2898257BE5EAA11B
84231F6C9761F74DC75FFCD351F3C4101A69C98877EE17AD11541D7F57F6F5293CB956A7633F
541EAF253262699FC79E4A396C5D3289C3CAD0C31AC6CD59E794C80617E102B306EAD89EA036
85508781C79645ABF8BE697710D4D5821D1512467B66DB602A2DA5E46F646D685E09E0528C47
9C6E9D6A5503B99104E0A5535E0A62683E520063BF2698701896B39D26FE9D2FF2BA0BAACA77
A75FF905B3CAF7C7C8A5243C54469EBA42D0ECB15AFF53770C93A32B18205D2FD601F88A36F5
3B93CDB0A247C4E5750000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY7
%!PS-AdobeFont-1.1: CMSY7 1.0
%%CreationDate: 1991 Aug 15 07:21:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 24 /similar put
readonly def
/FontBBox{-15 -951 1252 782}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D251491EBF65A98C9FE2B1CF8D725A70281949
8F4AFFE638BBA6B12386C7F32BA350D62EA218D5B24EE612C2C20F43CD3BFD0D
F02B185B692D7B27BEC7290EEFDCF92F95DDEB507068DE0B0B0351E3ECB8E443
E611BE0A41A1F8C89C3BC16B352C3443AB6F665EAC5E0CC4229DECFC58E15765
424C919C273E7FA240BE7B2E951AB789D127625BBCB7033E005050EB2E12B1C8
E5F3AD1F44A71957AD2CC53D917BFD09235601155886EE36D0C3DD6E7AA2EF9C
C402C77FF1549E609A711FC3C211E64E8F263D60A57E9F2B47E3480B978AAF63
868AEA25DA3D5413467B76D2F02F8097D2841EDA6677731A6ACFEC0BABF1016A
089B2D24EA6B6976E1F3C02485E789C85C7E810960F119EC37E05891F39A554D
781418ACFD85A47E5B8CA21171BB12E5FC14122C199EBB08306BD207E8D35D10
6294680236A775598040BCD3B890F2ADA10D4D7AB4AC31C3FDAB223255464DB8
D7548AE5AFA82C4C84FE90913ADA0866F42A919869D738F790CA0F7CCBC878C5
4EB8662598B38324AA3368E7A4D9F3C7C7974512E63C7C9EAE86BEC8E0A86044
0C670B99CE32A3436E144E03681F1B271A7C66FCFAB987D94411953E7F2F88BB
7B020A41AC48E566B562008D04802356AE5F5579A430E2E095DC89BC186D8DF2
98267617AB3E65A24010357087B460810E743A2270967D252D79CAD2900A4FD2
86CFE19358E245
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.1: CMMI7 1.100
%%CreationDate: 1996 Jul 23 07:53:53
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 109 /m put
dup 110 /n put
readonly def
/FontBBox{0 -250 1171 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D77639DF1232A4D6233A9CAF69B151DFD33F
C0962EAC6E3EBFB8AD256A3C654EAAF9A50C51BC6FA90B61B60401C235AFAB7B
B078D20B4B8A6D7F0300CF694E6956FF9C29C84FCC5C9E8890AA56B1BC60E868
DA8488AC4435E6B5CE34EA88E904D5C978514D7E476BF8971D419363125D4811
4D886EDDDCDDA8A6B0FDA5CF0603EA9FA5D4393BEBB26E1AB11C2D74FFA6FEE3
FAFBC6F05B801C1C3276B11080F5023902B56593F3F6B1F37997038F36B9E3AB
76C2E97E1F492D27A8E99F3E947A47166D0D0D063E4E6A9B535DC9F1BED129C5
123775D5D68787A58C93009FD5DA55B19511B95168C83429BD2D878207C39770
012318EA7AA39900C97B9D3859E3D0B04750B8390BF1F1BC29DC22BCAD50ECC6
A3C633D0937A59E859E5185AF9F56704708D5F1C50F78F43DFAC43C4E7DC9413
44CEFE43279AFD3C167C942889A352F2FF806C2FF8B3EB4908D50778AA58CFFC
4D1B14597A06A994ED8414BBE8B26E74D49F6CF54176B7297CDA112A69518050
01337CBA5478EB984CDD22020DAED9CA8311C33FBCC84177F5CE870E709FC608
D28B3A7208EFF72988C136142CE79B4E9C7B3FE588E9824ABC6F04D141E589B3
914A73A42801305439862414F893D5B6C327A7EE2730DEDE6A1597B09C258F05
261BC634F64C9F8477CD51634BA648FC70F659C90DC042C0D6B68CD1DF36D615
24F362B85A58D65A8E6DFD583EF9A79A428F2390A0B5398EEB78F4B5A89D9AD2
A517E0361749554ABD6547072398FFDD863E40501C316F28FDDF8B550FF8D663
9843D0BEA42289F85BD844891DB42EC7C51229D33EE7E83B1290404C799B8E8C
889787CDC0C51802EA1E0C63E6DE20980D3DD206F05364314AD8141735F93F67
EAF6B7DFB926ADA0EC8CDD277F24C387C9777686D07009EA61B72A35445CB628
8EAE0546DBD29D627DC514410C4C4B37EF1B7C59DE455115879283548009D3CE
D1FE43EFEB008A676113A2A60C8570F17DEADF6A10964FCE0C2A12E3E7B055C0
73CDED64075EA607994CAD2D4034DD13D32C5D773DA471F25B872020603B34C8
A9F46457F95F27E60AAFF168F67511B65B6069DC3E8E483F0307784BFAF4542D
28E631AA92AF1399AFE724321B96F00AFA56BF0889D9F29A241A9B81FD9859BF
0D61865E61A21963E9974544ABD491CB6E882E7924BA1F984DC72E0822D80AB7
A87A31B9D10C30A24263168AF11E59A7CD3085AF9DFFD9E291DE8ABA09B44553
5250FAEB6227D87328B63B96CAE193B1528A3761EDA561DB01319D9F9ABB3EEF
9F1D1520F29690BD9A6B805F2CE2314878CB8E79F68D42261A9E1AC8375EDC27
1F9B8775AE1101A1B4330D76722310B8E344C425F8ED55762EC0340CDF738C78
353A86C3434FC7E5E3CFB8FDA88984505A5E51610427E5EE9AB61CA24788F5D3
140EF8080B2462C62ADF773E8407DB774B42A72F0B8F7CA2BFA1243A263F2DF5
7F262930CD5C906995DC03FAC6A1F8C4C471B2DC1A2A3D07ED2295A4B7241560
DE6460286F8E334DEBB32CE09FBBC8BA94443B4A318CB69DDCF1A3759F158905
232F8AEE5BCC8FB3C2161E624B67FE8BF8562A20C36C1C72D4102954B0CB0A8C
DB173659C617FAFE19BA86EEEDFF43E76A5161A55129E8A75218DDE47C0E7008
60C56DCA94A9810AD93BBC53B83B02056751554C7E635902C33BB7F575A33522
3AC2260BEAD0A85BE500B49126B93E92F7B8EAD461E158123C1AD36FCDF1712C
F0EB68D561989833C6D96B36EE271F50FAC54A82A7627CF4A33261B44B014DBB
17FAF4F635DE74C3462956F689073F5C669879FE0ED7F6EF55BBF179BEA48543
32A2FBE3D9B329CCFA4BEFA34569191F9E1990938C541DB2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.1: CMEX10 1.00
%%CreationDate: 1992 Jul 23 21:22:48
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMEX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 122 /bracehtipdownleft put
dup 123 /bracehtipdownright put
dup 124 /bracehtipupleft put
dup 125 /bracehtipupright put
readonly def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CAC6A7BEB5D02276E511FFAF2AE11910
DE076F24311D94D07CACC323F360887F1EA11BDDA7927FF3325986FDB0ABDFC8
8E4B40E7988921D551EC0867EBCA44C05657F0DC913E7B3004A5F3E1337B6987
FEBC45F989C8DC6DC0AD577E903F05D0D54208A0AE7F28C734F130C133B48422
BED48639A2B74E4C08F2E710E24A99F347E0F4394CE64EACB549576E89044E52
EABE595BC964156D9D8C2BAB0F49664E951D7C1A3D1789C47F03C7051A63D5E8
DF04FAAC47351E82CAE0794AA9692C6452688A74A7A6A7AD09B8A9783C235EC1
EA2156261B8FB331827145DE315B6EC1B3D8B67B3323F761EAF4C223BB214C4C
6B062D1B281F5041D068319F4911058376D8EFBA59884BA3318C5BC95684F281
E0591BC0D1B2A4592A137FF301610019B8AC46AE6E48BC091E888E4487688350
E9AD5074EE4848271CE4ACC38D8CBC8F3DB32813DDD5B341AF9A6601281ABA38
4A978B98483A63FCC458D0E3BCE6FD830E7E09B0DB987A6B63B74638FC9F21A5
8C68479E1A85225670D79CDDE5AC0B77F5A994CA700B5F0FF1F97FC63EFDE023
8135F04A9D20C31998B12AE06676C362141AAAA395CDEF0A49E0141D335965F2
FB4198499799CECCC8AA5D255264784CD30A3E8295888EFBC2060ADDD7BAC45A
EEEECDFF7A47A88E69D84C9E572616C1AC69A34B5F0D0DE8EE4EDF9F4ADE0387
680924D8D5B73EF04EAD7F45977CA8AD73D4DD45DE1966A3B8251C0386164C35
5880DD2609C80E96D1AB861C9259748E98F6711D4E241A269ED51FF328344664
3AF9F18DCE671611DB2F5D3EA77EE734D2BED623F973E6840B8DAD1E2C3C2666
DD4DD1C1CF9DB1FD1568F84892C602408AFD8174118B9E1476C880193A1E332C
DEB81FA1F4C64D240C929C16D8516C4470EE50795719FA0A3BCA33A6F427B59A
A24BF1A2AE1CCC869AC90F3B25A2718F821C4A0969E30E899891212ABB5B17D2
2760A1041FD13462BE5E0FA2C711F045E90A6371B9C9025F7B26C05D4FC8BF68
9316D0D0B6AC3EF95246D0D89FDFFDA1CF32EA6ABFFFD9CC1846B899F84ABADD
2F259FCD3B2CB623D2DE602A812F94E98423DFAA48A3A4C3BE5A31C13D7DC2CA
5C51DAB16D09C77417EC161DB6665AA975F535AC3ED0D3B2A5C19602E5FD9D87
6BF3A202D8F9C95BA18B95E7D53DCBEBA2B2750F9562163602DD6E8955EAF300
4476D27FECBADDEF681E3E57664681CC7B8ED53F7251ACCDD7398588C8868773
DED6D252BF748DACDC141B0ECAE13512A7D95E58146CA68A161836549DCDEFD3
72FC900E907194E634A84FE49DADCDCFAE796215EC46A6CFE5F4DC5CA1D5AED1
3211A833BA13440974E86A73A1521DFC4217198E4FD86CCC9F03519316ABBBE6
7A92CE75E20B649630DF0BC37331D0D9A8C25A5A1C35E10C3EB901EDB389D4E8
DE097A4D8F1205F13DD3A6C102EEF7DF2DF96CF42744FBA1C9F61140EB44D623
A39E84DD17D9C3C2CDB72AC6B72039C0A616F657C5ADA4B991ED610D389F63CA
B1BD3C54C708BF01606E811E6606EC8B929D65801E343969C9274AA341B8B2BC
05DDA4C86F6925B3D59789C6800DD145197789C6EC18910B4784B1D9C1DD0590
38EDE27876BFD72836B22715
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 50 /two put
dup 53 /five put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4B067A46F8EE
2AFACDE591ADF7304939394F3D579DF856E0AB28392368F6C5BE23CD89005C72
D22708E19E64D6E61C6D9F8887112F0551600EB9CEB1FF298537EFBD4909A02C
BE75470D88E7C855988047C9B317E629C19A2983B3A6EA5CE17EEAAE712DF7DC
194341CE8E3F22EC11049F946D48A23D872B380D36D28483C7251F8F7ACB959D
DF0C10AA8A8EC1202C77D63E3E3AA2ACB728CA0635AA371460328C5E8F61A89A
609AA024D0E7A8772B7F6B8F9CE6B054599ADB3AC27795795FDD7F9BE4941E1C
7556B147C21AEE6D94AF1A1A0DD0BC01C713609F7D805139243012E8B36140D2
356CDD576A05B217742EBFE53A368B4405DA89777FA6EE4F735B7697519EB979
3B52235FD70476D2DBA9EF804005619D01DCDFD78D487E22B6AAEAD8EF686CFC
3DA1E1D1207B9080CDDA6910D049DE519012A9589F532864BCE31730E9D6D40D
94962BB5DFE71A292AC79AB46947E7027B3B0F6F8E8CE3A5BFA09F09AF2F7FF6
25B3136B05A19E9C3B251EC7B178753F09F4A87C50C362F85217D864BBD3F5E4
22136505DAF0041613F29112CD22F0E8BFE777D964D55EB226A2B95BA5FE8DC1
657108D47EAE14E7A03E72AD8143FE5E696528A1A2CA3609C737460557A15C4A
B55DE72B3DC3E6F5577FE5142B989F4ACB5F497CE7CD9447E8D069D6F955F4A0
E97F11012AE45D3C269BDE22E9A0A2F3A37EED75F22A28081A70A3960FD47DB0
24D5145DD0BFCBEEB1F6A4186E53877A79621BB26931A14C97EA1292B08F926D
A3154C51826848D4D75BA75D32FE89336226B822D95FBC02B164F47AC300426A
2A0AD15DB4B38E8E3285B936E383FAC956F55105472D3A62B8A3859E4D9595D7
8F334B93DFD34B5ECE453F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTT12
%!PS-AdobeFont-1.1: CMTT12 1.0
%%CreationDate: 1991 Aug 20 16:45:46
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
dup 50 /two put
dup 51 /three put
dup 61 /equal put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{-1 -234 524 695}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660FE13FF01BC20148F9C480BCD0E
C81D5BFC66F04993DD73F0BE0AB13F53B1BA79FE5F618A4F672B16C06BE3251E
3BCB599BFA0E6041FBD558475370D693A959259A2699BA6E97CF40435B8E8A4B
426343E145DF14E59028D4E0941AB537E34024E6CDE0EA9AF8038A3260A0358D
D5B1DB53582F0DAB7ADE29CF8DBA0992D5A94672DFF91573F38D9BFD1A57E161
E52DA1B41433C82261E47F79997DF603935D2A187A95F7A25D148FB3C2B6AA32
6B982C32C6B25867871ED7B38E150031A3DE568C8D3731A779EAAF09AC5CE6C5
A129C4147E56882B8068DF37C97C761694F1316AF93E33FF7E0B2F1F252735CE
0D9F7BCE136B06EE967ABE0C8DF24DCBBF99874702ED252B677F407CB39678CC
85DDFC2F45C552BA967E4158165ED16FECC4E32AC4D3B3EB8046DCDD37C92FDF
F1F3710BB8EF5CA358ABACA33C7E5ACAD6BF5DC58BDFC3CF09BA2A38291D45A4
C15FF1916FE2EC47FDC80911EB9C61F5D355BEDFC9DB17588547763AC5F0B1CC
12D2FFB32E0803D37E3281DA9CE36C5433655526ACFB3A301C56FAB09DF07B5D
048B47687348DEB96F3F9C53CE56DDD312B93D3918CD92AF53FB9461864D11B8
0138918D0B1270C54873C4012CDE6F886DB11BCEA04B023EBB43E0D0A06BE725
741D08B9DB688731A6C9886C15A83C28DADCC81385EA239E045E8F3670CE03DB
9EE77ED067036595C9F3B1854343BE3A12E486B6E5A2F8AC44FA5378D28DCCEE
306B0E283AA444423F9A4FF38E2B56DCF67A39CEB2C643DAE86865517D5D0371
CB8797208ADEC637330A3A57902C9A88EDB75A7C16FA9850075D9F19578EC666
1353CC1FC512D59DFF847ACCD04CF9DFD4A2852A700FD18961F9C616F7F372E0
F0F5363B93DE5869C26EF6348B3F4444D1F8DB78AF59844A385A4D77CF604A7F
A5CFA083ED1C40676DC9E3CDBC7E1FA9911C6834A8FE2DFD5781E56EC0D8AB55
FB74CBD060FB4D927454627F613BC8F76BC104A293DA74B3639A1BFCE458BDAD
0A79CA9A030AAF7D4B0931B0C0F928655FA0E970349CFD43991E5D3A1784297E
0D4D93217677CD687E81C4EBAD43174BFCD94E9D944565074F7D89A7F9DFEE93
D4633977B06209B845483C9E64FBD76093F9F120C75669A7F51E2572C1677DB7
145691D037F52326F22620850146D5344635958116C5FFB212139F8BF61F2D38
0BE5881DDCAEE65A669C921D814D8AD9688D3F25B773E026AB2491A48EC0EE54
23ED8982657919625FD3FB35062167EF4D1950CBBB77E08103DD31F9C0CFE9C2
F0225AA1893BF9CE1557EBBCF69533415808DA7216E29D0C98CB0BC46B36BCF7
FBD7D02DA3FDB9DAC530C6B930AE9FE3EDF948A155473DE783CE18AE9568823E
2D70D1D05CF5CEC5219DB714174363473F9786042C3895F3FFD6701F839CFC36
09E38F7336C11EF6BEE4615B07C8B06439CF7071624F33BF48BDF7B06582692E
AEDBB96960FC1A26101864407E71ECD8D8870E945880AEA21902D188E69FC70A
53692175AAE936104E0C6B0C31D8215316EF9943D70C7DCD634CCF5D1205797E
CE673A792E86B2CC56B6477CD7E4F11F922AD042AF1B7CD294603ECFEB0C796B
BEB15187CF18BF934A45B977ED773AF3C745B28C3A7A70EEBBBA4694F876E77B
995CFFBB68B57F7A78F539CC4DD06E75B4CD8698A0B74BFBC623ECDB31983141
A4945F4D48A0D41DE0904FD064F7A184CD7AC0EEB1F501069E25417DD6505ABA
A0843F8ACE43E4704829E05895781C6CF0DE54930153D7CD9F681A7D2512D5E9
C0108F562DD8831A59FACF4FDF4EF9000DE50E681A27BB6B888E89F22EF8238D
95F42BD135BD5D4305FC1CF9FCA1FC057C1A00B2295F423B5BC9380E236B7F10
E3D006A7FC698477D680C02001BA05321A01074791BE4B74E0C5B7C0B531A285
0E68473E348A2A0C9A263BD381053018DC390294E80D3B3746CAAD1DC3930998
E737E9FBE36B882D51C32859EBD165BD4EB9F67F42F2B9DD27C1CF7CD29BB365
EE8409AEA9757018EB1535431FDE500BC632E12C702DB4C55893F2E20F8B1C80
23D816BA5EDADDA28B0AC07746DD672080A0BC90FC6ED79251F4F6EAF71691E5
2B1E85766A31083075CCD358A53791AE73E987B723AF46B7D5E8F2A8F9AA070E
17C127A807F2A51F5C8C217779888DD1252DCBEA54DE937223EAD66A69F3AE26
8767C1927902DDC3FFC1B11BBE0C9BD07BFCB4443E1A40A91D90BFF68B2A92EB
DD7511FDC64B0BBE7410FCAC22C55C20651557C17D1739F14EEF09B05DB3BAF9
BC61C8663BF74977C922D2F2B3B845240005CE7E74806D5E9D8B3FCA5EA3DEBD
7F77BD088C19B54D4909BB0787DC1FAA9BF4184C488CDEEEA10C15C4726C2E9A
E6C70B5B04560834E4E7EA39BEEA6D34DDFA653CC22F7919AC664EB41A09E135
89D5EA801CB248A0F07EDB2E5E762A45246057B5D61EEA76420E8AD0C5A4F59B
6314F691C25126E893F0FA2439F3AF3B2A6385606A55CBB75A29357CA4A9D1B8
CC461501B346B03ED5B5840BFDAB8AACE47F3C27607DBADA3C7A57D67AAF00BA
E2EE03084F99BFB23453731038DF0E4D6160E96890B5546429F31FF08D5FD3F6
861471EB35902027F500DA3D2A266F466A7E2DE836BCB9D1C58F059A9430FC5B
EAD53850E3DD7E351A59220E3BDA65694904620B7A1B68AF3A919FC6360271B3
A7F66B704E4C339C6884EE76EE674A519CE38AF6262C3BA6EF9BC550C6E5D020
4DEF2AC9555EAE0D0F6E941C2CF8CE03B6A18B1C04EF255EF97318BD8328D5A1
47BAC1D48C749158195601717112CF14C0EADDDEFB0324279D905642053E52FD
1A459A96FB3588E3D5E5E16AAAEBFC5E0350FF8B223B1D3C6F4345C468C44393
A8813B7ED1D9375C2B5BAFD685873B0E9569EA8A159F641E8BBC95273B87B71A
17D26C2ED93DD73C5ED1635B0CBC9B925F79EA2E55BAED0D7C19065E2DEE50ED
35CD94872BFC3B95D1E9D97F7A7DFB5B03DF29F9DE01B2DB7530E1A282DC972F
D4ECBDF00E2B1A3FEFFCD78F9113FD6EFA69871AC063FE5E4D58F65964D1B3B4
38F4F5470E6D383DFC3B6D72564F2FCF0C43D4101266091358D03543269E8AA2
149B54847077BE93306288098903CE4D45F22D07983C537C47D2AB03D21F361A
C44101AC244422ACB086AAA8A85235B45FB4F80F18D2AB20F028370A1A446A00
80A630797753283C62EBB3573433F4AA8783AFC74F8F55B8D102E319FBC14FB5
F15461290266AEB3FA32A7652A494C81F885772DE9BB1461FD02F5110B5EE1FB
07283B07316B2A034AA3E9EF5B4CE775710E78D03CDE743CAA7A28B5362E96F0
4C155E7C55253E61461CF187CACA57B33F1B5EBC5F66F749F4EC937091FC75EB
DD536C2546B512C703970B77BE444CF2F8D913ABF4BE7545CBFF4DE6B423CC5A
61B0D53A146A93BF1940ECD8BEB2AF25D20477808DB5B0DEBB56E696B4BB03DF
02272D4B8A6316D42F9678FBE56E35B78897CBD3E124D29F98FFDC605265D2DE
28228B2D39A1138130F18BE5FC111808AB9A03B9A1A18543B8562DB1F4E5BA46
2E6C22945E9AE8D9891325C53F0CEAD3536F1AC8459D0FBE1E00E23E80121929
E56F2C2EF88C608293112855FE304A09DCD7801ECD014B140B02064B08E6DDC8
E7890E29813962F34184D9471EB5EAC8641AC4CB2529002B2601D30E02B76E55
32536BFDD0141C755EBD0F49DE07CC38C2E3A1A53C6DD11834E11B3C2A895032
D54D532EF3DDBE782B2DEAD9A0E840178496F0AF8087FEF47B5E3B5B7432D73C
7B4A54927DC596830294AF448BC38C4AA2D7C6E4F158B0089264D05DC3C0CB65
DED09897CFD955DFD9D07721FFE03DA18A509CB0452DEE3053A7419083BC7A58
745677A2CC2DD50731C1BFAB053419576670A6766040EE7FE675BD0B4752F753
7EBEDFAD045506CC21488F5A6D334FEC57277AF0C44769414A4D0E79CBD196FC
894D65459A457701004D878D659FE2B3F9380C4F4C7D3850552F83E5D1D3C2A0
315B5D00FF1AE2F7ADAD9D94D0F9AC56820C9B29C02FBDFB28674BC64C9392DE
3B064AA981EB80AF4D488B24019008A92F5D06A9264F02F89245ED42B3F8060F
3520FA26D44EC0595DB25DE14A444E684BF5A2E787028DDDD017443B6E0EA295
EBC08F17DFA0DA67F6AF00CFC70412EE198F6FDABE589F34E402E132329356B0
D26DDDE407695017B0E6273CF3029FFAE739B397255F577907B98F0EFF068F8A
C6C1AA43B05C69094DB6D9C0D0D7348E90D7E23028282A6BDC3DD28EE6768DC5
F77DB4F8F6F0A8BD0C8783220EA5A72D7058428ACCBD3DF7CC1A298857CCF0F8
3010C72E8E5F03112F482E82FE1D3E0B7C5BB89EFF32622BAB2C52EB317A4213
D712F07715BAB550A24C9EA3A056AFFDD443ECAC310428F041E145F396ABC8B3
45224F922C1930D3F4B5A49DBCE29174C2286EAC6271D5757A8CDA3989ABB314
FAF5B615CA606608B798CDD476C9B6903FD6466B8B12DA91F5064E459F90659F
34FB4BF302413EB0ABCC266692D9FFFDA15416E8530BCBB907E4C58E790041AA
65FABFA199FF72F5DAA298AB3E41D6303E7125784A2EDA757503DFD0A7B57684
ED765F8EBDD7E250A3703DA328A30078759CDC229E98993A2D7E82274FBCC64B
BB0DBFBC83404938D8272CE35DE7C4EDA59DA26FDA58BC4B2072BDE162843664
090462953ECAFE4BE0F531F6A4285E559E609F2CA20D5EEDD3ED0E381082C260
790A14426D85B1D5CE030B2D583F9991E59201B536D59187883E103405B7202D
9B1B8117FC7227D28BAA40355275E246FFBBE8E2AE9D71302CC9D2129ECD20BB
B2936F9C2069F42D7098C9F0A3B5594062E62CCFCDC312FD8865E9A68121BA31
A75E1F72A1BF6C1491C7D9BE27D0B0E114F9282A90CB4610F7F7903A8D4C0C34
C9E715197E680E1622838240780A9BEF0F3B82C0F11B84B3254B83E7D35D6250
DFD7646F624C12A12A54075634AAEEC97602B109388F489BD9575810DA2FFD95
889A2DA845E3B26F74DA2981E517081C86D942586673BD15DF88D0C32648F45B
C54094A22A82A4F675B8A0BC07298B169209DB644F21E73F98A93DA6BC91AFF3
881973790044C316D8478079BEDF32051AAF391419655C6A2671F7CF255AB873
6F71FBD799E76B78E1B9B6104E24E6159E20EB81786180F0ECD15F7F893FEDC4
A0124BD1B0AA066100D8089F196142130C3A310F6154C198B52FBE4FDAB1081C
18AC3944E729B8ED2BACBCB5AB8C9D7C2C36A4E0BE8D7C4BF4B21596A4D4E0B3
5EAF1DFA373AC5C46BA5E37BAC9BA232B4168B156C75037A097071A5B75C84E1
01EFE489568C3FD264F1FFE384FB26FD3EDD7EB9F379588415CE955CD65E0461
A389A85F32F5AD45030B730A67E6D064AF8FFB7A8CF5ED8FEB1672678DDBDD62
FBD48DBC1AA62B2BB070A892F09CAC3F1738ED9DFB1A9A8DE69EE3D46023EF12
B8667082055158CB0AAD883BF6193C30039972241FDAE29C623F82B7105C6077
9F8BC01B8B90B471757A52363B953621DE7146A137CB30383E7576134E68810F
24A6C36FE5862A27EAB2ADC5D22F88B390D86EA1D69E096DFA5C3FE6C15FC263
FCDE2D1B689965EACA178A0C241148B4FF9E976B9B1A7BBDB2E2E83F6370C729
830BF81E0B768C6736BDABDD2AF32BC0DC106B5E60AB06237D164201E8672470
2EA5B4B1296252E5A20E92352D6FF5413E9ADBFE7310D87352D365F036ADCF40
D7824602E53DD9D00CCE32F8D65BBB0C593BD493D05F26F0FF8E564D767B0DE9
6701D958A357C35EA9EDA27702E0FA6F09540A9963F1F6BEF08AB218E4F5728E
6C284C75D52FC07CA321C1EFF34AC46AC94BA888F916F44D99066E02B93D9637
23C47C24C0FFDEF0F63D5EE26EB7643B13E495D240D23ABB5F624245
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSS12
%!PS-AdobeFont-1.1: CMSS12 1.0
%%CreationDate: 1991 Aug 20 17:33:47
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSS12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSS12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 14 /ffi put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 80 /P put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-62 -251 978 758}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B17498276F99362748F6E97327D
7CDA3F5773E01FAD12B7339D4A0993D40A82FA42AAB119589F1D7D60A8AC7A96
BF8C5A08AFE6D427A6FDDEA2FEF0B8ABC37C6DB62C8B4074CD6C385419CC66E5
A4B4C5F902900090EBBDF7AB524205CD9DD9D8B9CB522B8EA97203F0E8FAF683
09750B6C8286AB341F9C240CC02CF7F3E153C3498F16159862CD74C0B6341D3D
57184AB9036EBA94B432D0CAC32240DD569E639B4ACF0BEF07EA19DDF0606551
C8EC84A7A67F3C3F58D3335D7273B51CC2602B63B900D24A6D5A8E766D49EEB0
693796781F0781FF13C5592AA9E071E39034E0742E804ADF14422A734917F0FA
8973A1B9269EA354F8AC75B7284AF48B69529167E55922A20C3106EB6C559E97
7CC1A491C3B41AF834804590554742E742A09A5228F71DAAB9BA2BC3F00FD5C3
B4821FEEDC8B65732409A9C4663FD4C4BC7C864D71F6A6D354ADF71675042DA1
31DC2859AE00363B3EF589B4DAB98D3515FE8176041A332A5647DA8FB9718975
9D0103074531756594D5DD1AF3A9A20F1BE203E28D24DEDA7801AD1CDF96906E
E7049115872C82DD177C3BD765F72E7C15A90CAC968198A38EBA25054D99E7DC
A349E6502C98F894994EF7A0AEED79D1F12EA1B18BF8BC3B5806141C82B201EA
0275585110EA202D7A253F1D6DB449FF2B25F7B8385B1427453717DB07ACC21A
9F5D5DF4AB9D3497C382B1B9761FD0693533650CF014F5D56201767E4CD18A44
A4D912E1A90EF1BEBA702F806652672ACE37D40B4705A4725AC38A8B7D706E84
6D22D811AFF8C8F465D585778EDF77B600F65E332849ECE66FB0EE108B30103C
BDEDE7AEAD0E3A72472B218310D9228AE0BD49120DF3345B69210558FD095E6C
F0DE56752CA30662B68CBFB59C9EEA028E3AAA17B23C61B04266EC9AFC9B45CD
10DD9F22E01053A73743FC3E5B6AE8EA19530A39C2192207152C13BDA9FFEAC0
5F87CF286075B349F872E4863D7339BDA852312915F0F72829DA9555E500E03B
9AA334CB11FAE6DE551E9221DD1174796EA9D3D93A8381F99A1C006938932593
4F3AA01C89B477B6696FFA44B0EB90632779226FEDE9D5E1E1998413BCC3586A
AA616BC1765E6D39705D49FC5E9B1D4854C2648BC261FA541876230A55BF1167
54F19E99BD33EBF810BB2A9E030CE550519D9B4D0F88B9B94FCB5EC7D7E190A1
04E3AF8F308D746E5A9A7D98D87D3B25C46F7791E44B3D80BD0BA0C39D73B1A9
95505F4FB28A40AB63DA3DEC6EA209F828B2A32B03925EBC59F776A3D3AF2449
A8E5806B8017C2A56010935FCAD2DCC55DC08E5EBDFB36198C1DEE70C74BB793
7E6E3D27B6BB4AAEEC7BB133DEF0D9B11425D6D3B1EF76B73B08E0C93532FD28
143F83BD14D605568B1CA040C699D2555F5A5B9A1D7FA2A3B89D20A81C8A25BA
9340A49A22C4767977E485F731074D74B0E540D8A724A2C32C57FF45C2C58901
9BA958B6E7CE6DE9FB37A76BAD30DD296E1850BB46DA6F7FEE6428A6B072D515
A4D62CE91C89D6076DB119811806533ABD03A6BCF2BC1CB71106F88EF5DA0616
5E6C3E41938A85ADF68A0C8F6EEA0D76F726C2A685390EA082E64C58876C80B5
B1BA335B468E4614FFEC8687C351CE7D632DDF36AC608B576FBB2CB41514D04E
DEA6B4BC382F94A6F4C904C1FEC1B65FCD15F2474DFC5C00DD49E7D4DA7387EC
773494B8E1EFED9ABA5D104C64088BD0761FD4B0123B96BAC4104DE00DA5FDBE
D458130D1D478C2A3B38DD4E3495DA9D405FF01C8ACC967B54E7DF9A4AF100D6
87F9905B3FF3A9EFDCE4E4920458601CAC8F2F8C8F29345A127AB2AA7C63E698
9187B2D8018F30F1671CB8DBD43607943EDD41A0A818F3C7E433A0B082DF5E75
CD173F14097E0DFD8A70E3232951B2B5778CF21BD1E82CB3C1B5D74A9E41CA5C
5794EF80F7BF0F67558805EE30D1D1B8AD117462F14B9D2A2C2C21CEF50E2A7C
B41C78B1A06C31666482ABCB0CE02ADAD1C7BB1219CDCC6416C4AD6137A75B84
E2FF1D342DB0B953D89C7C23EC195D43B98BC60852B13AE477C89F7686D1A701
090474A92188FBE9A43B0FDE01BC2A53FD952BD8E75A156EA96DEC82FB29174E
6A57AF117773FE53616450F4DC856C302D909F36CD51185CC86A49F64AA42B27
8E635F146D9E6BEBF628816A87834B29CFDE8CACBE8910D65337280D8A046A4E
B090C1AF0041B7EC4DC2AF05E138D44C45F80173D16AF8EF3FD702527D945815
B89CC4A3F01FE5C265816004DCFB73C3A8B36FC36D05DE20D920255CA555D2DB
233A93E9CCAAD2A201217EE8F820D2B1ACEFACB64FD9698E3EA8147BEFF9FA48
B4EB4B1F0DD9F1A51DFA2AFA1DEA39751A4775FDC6F71EA02B407AFA8F950E41
CA8490EEF68631601E863EE060FC1A9D154AC13034B7CFAD099D4252C06517CF
BCE0545CF7E5EFA1C4A04E7E785055D300AB7B76294FE6AB8DF758055FFD04A2
FD2CE26F87B6FD7110CC9997D7E8FE94AB1EF7E7ADFBA883E3E6F4CF22F93264
7A6FED14E54C4063C086DBC340E699BAE1394D506E379106D8BD8F38A9CB7C58
BC22FC7F6CE1D24CCFB05F666C69B503EE0C4731D5633FD8EB24B59BD2A75273
0578D5E5288EC2A2614F908816198CF733207E44FCDDDDB5515B0F019C24A17D
DCD5880FC5CE95F5509CBA334F133AE4F6407BD745EDF3F88D71087DFF3CAA1C
A7E1E6CC1EF7DE4FEB33A76A5A70FEC3AD0133E8852F883C3C611D1E2C0BFC48
B6289DE05277B4CA7414B3A8F90F44B0E8DC83772A4164ABD294EB2AEF5BF3A3
B4EED804F8B811DE90E8F91C8BC93A26EE76C1C6932782ABD0C019158DA31D32
492DF15E4A6EA6620EEE05AD553CA246EE7857A14B3126374CC0BB7B86B6DF43
F7C13F10967A0B574CC26E1D171C6D53E1E9CF7F6DFBE9DC7F305287AB80491E
562F9A211D7CCA7087352E2B8DE4B46F4B3B9A4706766EE462E0E01F155048A9
E4A0CA2C5CB0EA0322C9F582E2E771D86A0551D1BC7975108B73D0E36D7A749F
12F2DA5DFCB17D9940A7DF5F375A97AEC6D9888690BB796F1370AE310F59AF7D
7181A24BA7CEE7C291FD0745A80E92404AD78B4EC427675F0A93407FB4C36167
28167F6E4E6BD83B5FA8F07B5D1A2B23F69FB2A69BC4D5D7B9652E4217453437
023D1BCBFE2CF34E93FBD6791EA1F21C6DC5280CC0667E24D4463F305F64046B
40DD1F0CC6B1EA31B5E72AB0DA9CF58489C6C9ED94D3B1AD985DC41F55715166
9573C7C1F9E3E04B0DE230A5BF638DEC2BCB4800B7481CDCDC4BD32486856732
E732D38EC75547A0EC71A62E8E791765785015E432D2960F5E0A18BC593F4EF3
EB8EDA4E87AD8704FF8EF6FA58EE36F57974F6642DEDD83274E73DE7CE8EFABD
62804A3D7262E040CEA48A3BAA0AAF2749B48AE1B16908758580E6D40814F6AB
34BCA50FA4C41513ADB712107124E70B509B8A63EA5F3F03A5E9810513C3883F
D33BE4E8447AACBD92D1DF321E08D06A1CF4407EDD49090100CE5B98B33996A8
C4CED57E578147B44113055848907685EEF55E50346598A8F34B210F169619A0
B66644C5033AE1288DED0CC6DAF86C83E908A70FEFCF7DA0E5D929465593E518
41EB54E7E35F4F0E1F7657471543A52716F4A7122F80FB5A53EDAFFA00280FCE
DCF2556325D5F6FC89FB0869D63A887729344C7A57E5B7BACF4AFF277525C520
E3D4ACD125299181FCE6CBB500A7C5C4878DFEBA41B83C563EF1B151D7B595E5
FA47BB62A6F47AFC6C211DA7551D0651DC2E1803B5D57DE4961B30BE1D66109D
589F74916438A8CAE932FF8F7D0608A6C9B3BA64AE880B43A8CCC2FF15A3B7F2
9768814CBBB3D6EB5961309D383F949CB3D1F4E5F7A12F490EB81A2673DFEC1F
AC120B0B6291F4F2EBD4489D88DFC5803305A15188993F3FAB598E99C91D4E13
77749DC05C5D78A29ED70FC06E4134A37D71D580A2F62D010298DAF2539F8A9B
F14F6ECC3D204F1438B6994B8CCEB2630D1EFFE8EC525E1AEFC9AC21D22ACDC2
F490432A6C077F42F60BA7E341A7F3F8910639D0A7509B1FD62CBC3E410A3010
1124031725B11BE03DFE5CF5B081BD8FC5437F9972227EAD794DB82170368084
6C804EB4574D22741E3BF48F35077B5AFBA92B9D8C8640AD3283FBD0A5FD536C
6AE1C701751D38814AD0C64AE484B176AF1FE85D03570DDFBB3DD3C427FE4AAD
4C77306FF61C66CA3F982C7946D2C8E6C30D1FBE19472C6355E8644AC5874A89
785FD3DDF260A4D5893B6FF3D89CFDAFADE8DED43F7CA3D5CD49D483F684C93F
C01623FBF7D0F84CF252A61EEC91BFF765CAE7AF81D78C37BAFBD03CBD834FC5
4171EBB8953E9C58D93C13C6B07950D42C5A456187A627A904F82BA0BDE0A125
ABED716F8513942AC06DAABF5E23EB0C43C738275555E611616D4176DEFC8AB5
79726D39AE123CBF7E4B26E0C1B475C4D76EEFD11197F1AEE6900BD2B2474D27
06E52B0BC8DB916F0372D2AB537E95CACAEC7B468B2E6E72CA38FB0356A865FE
C1C98E0A7730B0DD9DC44A2B84D90A6FBB884C0E4C929E0431A814D3A00BE0C3
918B9AFC3289E0183E823D4D736D1522A46B717146914CA38208AF3A8CDC062B
2075819C93EF9CA8655082B0D71339CD3D8C7CB36DE03528013BDF03F95D4EEC
4C50F45E9D80D4FF4789F1350925E7F24CB88A51F9242A2A386A7F20E1FD1D35
8BF40CC8DD61E65395BF1F2D0AE7CD7BA4A5CE087C5B82DF1F5D014D79FA0785
9008E5F189D4CE3275B6445E234F8E0106341FDD883073366657B47472626178
10B31CFC93A2405BBA398A4D0E21B497E8499DB18482F16308DEEAEE920E9F11
60B49A9C526E3694AB96DB830D147745905E37F682839F460588F0AB50689D9C
3FD9606B8E0C16FFA84ED9481029589CD039C464C957FF1D7195238EB9681BB5
0341DFBE491149C4C57A773AA6F4CE5B49E6E868DE07C531C0ECCB0E3A16ADB6
5F3754417457AC119B7A424B69A093AB29BA65F2F9DB9510BC1040BE206D943E
02E5AA1CAB87D26A57B38DD4E35A066FE281F46D71DB81C7D1BA0F426A3D9B7E
5431B263A84A0513B800EE0CC44A5E15B80563F740BEB7D51E86321629F8B86A
59C956A279FF8080C3794F4BABAEC38334D637977628243CAF0BD1D75CE1D39A
A8281E30E9ACF24F6C86A3B3221B861DBEEFB968F2718EBA831D6FF8F8E6C443
34474DF79C90C74005DEFEA513EF4774127851DE6375F649F79FCBD293FB1A32
5ACD4819DA488C7ECF43DCAC86EE6115C67AC1D96B2FB6206B64481AE3E01323
BA728AD80BBD43A4CC113A458CA6FB82640365C4F7BE33E7D28BAF30EC6036AB
703760E07857D5CDE43F001147A3E265B069040ACA83C290E26822F1DE85F267
A1EC43B6821F66D17429E86BD6C1C3306176BE136345BC464689310094A8F29C
54F108827CD22ACFF5872687783D3FC4BF558413CCA41533573E8E059903F535
64982E0921777E26F36CA9BC75D89DD3DDE6212835349CF4FB88719590B7083D
603B5E42A2D1BF8F26F747521A9BC8D4D55809CD72E9A6ACEC24C5268B7D74B6
01638989EEACB98078742B36BEAB85C6A1A2F39C6A139082BB710B2BA2315D55
57D11B6E3D77DE0F3EE2B4C08D593C641A68A08713654D0500F3E3DD575D18D8
A351840032ADD5C4459D1F9146B8FD7BEBC67F6D65D3F3A413A48FF5683E4CCA
900683090225C84C34A97F5FC33C5890443F0FB9924165FD8254D2A8425C3457
04B5D8C75DE97A5E78E36EE686654424C58A3220D7E53E0A76D7A77183EAA49E
DAADA5E7A0DFB8661F2D0D547157AAEEE62BB6635024C69DAA582A0B3DE30E68
34B8CFACC211F864D992767ED6C894E39E4BCB3265464A36CDD67D4A746E6B4E
557CC449B8A01287E16A00F77BECD96C8D207F52C7668F52B4F162CCA6E08CB0
7C231599BB71BDF95AAF0303FAD7FEE778ED128A2FE4B64C57F7ADF2622FDE05
E10C3FE1FEA0D49EB7B092FE241B1AAD8E61C48780CEBC7572BA5386E8434EF7
4F67570D2A16E31A7D115201AE78D4DF880ECD611F59F49CAB93C164B5542C6C
60E4C5C3FD85A70A64CCFC472BB45324B1BAB2B6421CC97C7AD0F6A860E50B4A
A731B457B1534F2BB8B27CC0AB76DF32E6E701B4BA27C4F89282E4F102124F3B
F63B51FD64BFEBAD8EA036DB3F58CD42A8A0A3DA4A19F94F11B5ED8C7A085C40
787B4F6844C5018F4EF03D827970B8C715D149AF10E7B78F46DA639418D11E48
B78E623D0AA93953F0940FDF06F032417EBE7D3B20E2BD55D6953BAC02531385
3D70EEBEABC3DFFF9162952F05390E0617BC9234764C277ABA28C8A450CE7042
727071217F07672D67117ECD6D252D49E2902EF27D86C35FE29E5144FED249B7
CF9882B99C85B9BF6CFD0FD245E54BBD8A404EAE9559F8D1E65291F2C3FB7B82
4A0324036AC966AF91913B3087C88F25C99285F182DFF3D525DB3456899D071A
901AB486E28EA49832D51BF217CE77335F49EB339D1D4F72D6C2049CC3EAC577
5193469301A5379B7E32D96375E22C4278F393A78913CEC19E1AE1206C775DF8
6338DBEA6CB3469F9B31EA8CF82C2D53CB8093B0754EA5AC56C624C2145F9DAC
B478CE1F000B25071D342BE6FDE69C942F8E62C489F4B666144E8CD5C14FE585
BF1E0B5A3DC4A42520A1B0C9919D6A98B700E5F455A55BA835B098527DE8B308
A35C1A182F4ECDB917F82AA76AD4ED6CDAA27A951DA958F8A2F6A20213DFE4AD
01D12482D6E8ECFDCA716FF4A8B768FE917A7AB437C6ACA48B83691668C58825
67C268E89B4BBD7D6EE0F1E0BD0460E077E339370F2E1C2989864B10B95AC4D8
4F30A9D01D0C3169C95654984AAEADC9B2469007034E101918D2269A8253F36C
B62B72097E61A63D5D47BE89E622C8A418C8EB2DEF94C270A3813DEA131A98B6
B40FF0BC535B346ABC2ADB2B15C3FF47C523AE0FA787B762EDC5D2493A12833C
9E6521C89B012C0D1FBB8ECFD691A510439B3719B4733D8EC7A4CFE372ED2894
8249CFAF47D8A00E2064AA6A3F61C05AAAAA838AF660F99FA16715234C819472
3F83509C2B772FC69B9DAE9309FC4BF6AF8AE07FBA546D05E35A8149FFB8F293
641B2A22B6B4F00E77EAD17C7A3D2C456FAC922A21CA165A8F81371D97106A29
C15C7343ACC14EA2AA0A52A2F05ECFE19C292A15FD95703E584660BBC44E8DAF
85339179105DB79CF34728B6757DD14BCDD4CAC2DBE2EDF22ED2B0782DB2B41E
468E0449F0CE21442E2DFC475A513F4A6CE5FDE9DC2434D269EF4B589C1C0D78
1222D7EC000407FB48BDC860C4608EA88B35DD15C60D48E9EF443E253FB86B4F
26604DEA94D24B5BCE5F3223246C52A370797794FC06436E10C5F8320CE1422D
110B8FAE7BA129DA36FF636E46E167F0B0EE0524AF353F9D1973522C9557202D
A14F351FE85F53DD96CA146C74D0E80E3FAD4EFD5E52C4C80D0B77543125B270
D464083C1AD1A5EA37A95E214F52A8BD0CC20105096417E3AF6053F5A4EEAEE4
762C666D259BDFBD32CAFD68ACAE84548D0220A6027E7E82430A514910C096BE
7A38B45F2F9F888C406D273BDB3DEF1311E0E1336E18877C3B26367BBA24A7D9
B0AEC872EEC78ABC53647C0DED862891262599C8D8EF4FB4058814B22B4290F9
1084B50B5859D0C481E346F83839F87AEFF8CD00D56986272709EB329F7F14BB
EEB301642E02142248275B5CBE6119F5A7571822D6BB87028C721F6160565EDF
453AB49F491BC6A48AF226A9749CDD2D5CBE972A6615101C1FA846818856DAD9
C03374155F608474A0985CA9173ACFEB8ACFB3EF98AF3A4D3C8ABE508925BD24
F1001EFB302CAB5B066AF9257055F950BCECCF3BD62B0F9012ED925C55969A8B
F768E1C839A57AB0F601A1AE20C8B8AFFC082C6F279A63DE29D378935C18747D
69B00710B7879D03E3A48BDBECBABC19026CE0F84E670108A1B94168109C5DD3
510D4E6DD180B07F245A1F399FE1875FCCA1852673C4A6CBD3DD5D31B93B679D
EA3383D1C00B393D118B1564E52D4B5DDAA7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (lpn.dvi)
@start /Fa 231[52 24[{}1 58.1154 /CMSY7 rf /Fb 134[50
1[72 50 50 28 39 33 2[50 50 1[28 1[28 28 50 2[44 50 44
1[44 12[61 15[72 4[44 23[33 5[33 33[{TeXBase1Encoding ReEncodeFont}22
99.6264 /Times-Roman rf /Fc 145[41 59 109[{}2 58.1154
/CMMI7 rf /Fd 130[37 37 37 37 122[{}4 83.022 /CMEX10
rf /Fe 202[33 2[33 6[51 43[{}3 58.1154 /CMR7 rf /Ff 162[23
1[23 29[65 4[42 42 42 42 42 42 42 42 42 4[65 1[32 32
40[{}15 83.022 /CMR10 rf /Fg 134[51 1[51 1[51 51 51 51
1[51 51 51 51 1[51 1[51 51 1[51 51 51 51 51 51 35[51
9[51 51 2[51 47[{}23 99.6264 /CMTT12 rf /Fh 145[42 3[23
2[42 42 6[55 55 35[55 3[0 20[83 11[65 65 4[42 10[65 42
65 1[65{}16 83.022 /CMSY10 rf /Fi 186[53 69[{}1 99.6264
/CMSY10 rf /Fj 134[41 47 6[37 42 40 50 73 25 43 34 29
48 40 41 39 43 36 36 44 34[65 1[65 23 23 32[47 9[34 15[{}25
83.022 /CMMI10 rf /Fk 134[50 50 72 50 55 33 39 44 1[55
50 55 83 28 55 1[28 55 50 33 44 55 44 55 50 9[100 1[72
66 55 72 1[61 78 72 94 66 2[39 1[78 61 66 72 72 1[72
10[50 50 50 50 50 50 4[25 41[55 2[{TeXBase1Encoding ReEncodeFont}48
99.6264 /Times-Bold rf /Fl 134[45 45 66 45 50 35 37 33
50 50 49 50 77 23 47 1[23 50 49 30 43 50 43 50 47 9[92
2[67 3[62 6[27 68 65 55 1[70 62 1[64 6[27 6[49 49 49
2[27 33 27 2[38 38 27 24[79 1[52 57 11[{}47 99.6264 /CMSS12
rf /Fm 135[103 2[115 69 80 92 1[115 103 115 172 57 115
1[57 115 103 69 92 115 92 115 103 9[207 1[149 138 115
149 161 126 1[149 195 138 2[80 1[161 126 1[149 149 1[149
20[52 41[115 2[{TeXBase1Encoding ReEncodeFont}38 206.559
/Times-Bold rf /Fn 139[57 1[69 1[103 7[103 2[92 3[92
29[138 9[103 103 103 103 103 103 103 103 103 103 48[{
TeXBase1Encoding ReEncodeFont}17 206.559 /Times-Roman
rf /Fo 104[66 33 1[29 29 25[33 33 48 33 33 18 26 22 1[33
33 33 52 18 33 1[18 33 33 22 29 33 29 33 29 9[63 1[48
1[37 44 1[37 1[48 59 41 48 26 22 48 1[37 41 48 44 44
48 6[18 33 33 33 1[33 33 33 33 33 33 18 17 22 17 2[22
22 37[37 2[{TeXBase1Encoding ReEncodeFont}62 66.4176
/Times-Roman rf /Fp 104[59 29[29 2[29 33 18 26 26 1[33
33 33 48 18 2[18 33 33 18 29 33 29 33 33 11[48 37 33
41 1[41 1[44 1[37 1[29 22 2[41 2[44 1[41 6[22 55[33 2[{
TeXBase1Encoding ReEncodeFont}35 66.4176 /Times-Italic
rf /Fq 204[25 25 25 49[{TeXBase1Encoding ReEncodeFont}3
49.8132 /Times-Roman rf /Fr 204[29 29 29 49[{
TeXBase1Encoding ReEncodeFont}3 58.1154 /Times-Roman
rf /Fs 129[44 44 44 44 44 44 44 44 44 44 44 44 44 44
44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 1[44
44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44
44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44
44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44
44 44 44 44 44 44 44 44 33[{}93 83.022 /CMTT10 rf /Ft
133[32 37 37 55 37 42 23 32 32 42 42 42 42 60 23 37 23
23 42 42 23 37 42 37 42 42 6[46 1[51 69 2[46 42 51 1[51
1[55 69 46 55 1[28 1[60 51 51 60 55 1[51 6[28 3[42 2[42
42 42 42 1[21 28 21 56 1[28 28 28 5[28 30[42 2[{
TeXBase1Encoding ReEncodeFont}59 83.022 /Times-Italic
rf /Fu 135[86 124 86 96 57 67 76 1[96 86 96 143 48 2[48
96 86 57 76 96 76 1[86 14[124 1[105 6[67 2[105 115 3[124
65[{TeXBase1Encoding ReEncodeFont}26 172.188 /Times-Bold
rf /Fv 134[42 42 60 42 46 28 32 37 1[46 42 46 69 23 46
1[23 46 42 28 37 46 37 46 42 7[60 1[83 60 60 55 46 60
65 51 65 60 78 55 65 1[32 65 65 51 55 60 60 55 60 6[28
42 42 42 42 42 42 42 42 42 42 1[21 28 21 41[46 2[{
TeXBase1Encoding ReEncodeFont}61 83.022 /Times-Bold rf
/Fw 75[28 11[28 16[83 42 1[37 37 24[37 42 42 60 42 42
23 32 28 42 42 42 42 65 23 42 23 23 42 42 28 37 42 37
42 37 28 2[28 1[28 51 60 60 78 60 60 51 46 55 60 46 60
60 74 51 60 32 28 60 60 46 51 60 55 55 60 1[37 1[47 1[23
23 42 42 42 42 42 42 42 42 42 42 23 21 28 21 47 42 28
28 28 5[28 2[28 26[46 46 2[{TeXBase1Encoding ReEncodeFont}88
83.022 /Times-Roman rf /Fx 139[33 47 3[60 60 8[53 33[80
67[{TeXBase1Encoding ReEncodeFont}6 119.552 /Times-Roman
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 5 1
TeXDict begin 5 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.25 TeXcolorgray 0 TeXcolorgray
0.5 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1443 1411 a Fx(Contents)357 2021 y Fw(Pref)o(ace)40 b(to)h(the)g(First)
h(Reprinting)1445 b(ix)357 2221 y(Pref)o(ace)2285 b(xi)357
2422 y(Introduction)2073 b(xiii)357 2623 y(Chapter)40
b(1)83 b Fv(F)n(acts,)40 b(Rules,)h(and)h(Queries)1166
b Fw(1)357 2733 y(1)149 b(Some)40 b(Simple)h(Examples)52
b(.)41 b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)h(.)p 0 TeXcolorgray 149 w(2)p 0 TeXcolorgray
357 2844 a(2)149 b(Prolog)40 b(Syntax)19 b(.)42 b(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)h(.)p 0 TeXcolorgray 107 w(11)p 0 TeXcolorgray
357 2954 a(3)149 b(Ex)o(ercises)72 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)h(.)p 0 TeXcolorgray 107 w(14)p 0 TeXcolorgray
357 3064 a(4)149 b(Practical)41 b(Session)53 b(.)41 b(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)h(.)p 0 TeXcolorgray 107 w(16)p 0 TeXcolorgray
357 3265 a(Chapter)e(2)83 b Fv(Uni\002cation)40 b(and)i(Pr)o(oof)d
(Sear)o(ch)995 b Fw(21)357 3375 y(1)149 b(Uni\002cation)77
b(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p 0 TeXcolorgray
107 w(22)p 0 TeXcolorgray 357 3486 a(2)149 b(Proof)40
b(Search)61 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 107 w(34)p 0 TeXcolorgray 357 3596 a(3)149
b(Ex)o(ercises)72 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)
p 0 TeXcolorgray 107 w(39)p 0 TeXcolorgray 357 3707 a(4)149
b(Practical)41 b(Session)53 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 107 w(42)p 0 TeXcolorgray 357 3907 a(Chapter)e(3)83
b Fv(Recursion)1726 b Fw(47)357 4018 y(1)149 b(Recursi)n(v)o(e)40
b(De\002nitions)23 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h
(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p 0 TeXcolorgray
107 w(48)p 0 TeXcolorgray 357 4128 a(2)149 b(Rule)41
b(Ordering,)e(Goal)i(Ordering,)e(and)h(T)-6 b(ermination)67
b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)p 0 TeXcolorgray 107
w(59)p 0 TeXcolorgray 357 4239 a(3)149 b(Ex)o(ercises)72
b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 107 w(64)p 0 TeXcolorgray 357 4349 a(4)149
b(Practical)41 b(Session)53 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 107 w(65)p 0 TeXcolorgray 357 4550 a(Chapter)e(4)83
b Fv(Lists)1916 b Fw(71)357 4660 y(1)149 b(Lists)42 b(.)f(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p 0 TeXcolorgray
107 w(72)p 0 TeXcolorgray 357 4770 a(2)149 b(Member)45
b(.)c(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 107 w(76)p 0 TeXcolorgray 357 4881 a(3)149
b(Recursing)40 b(do)n(wn)g(Lists)63 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 107 w(80)p 0 TeXcolorgray 357 4991 a(4)149
b(Ex)o(ercises)72 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)
p 0 TeXcolorgray 107 w(83)p 0 TeXcolorgray 357 5102 a(5)149
b(Practical)41 b(Session)53 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 107 w(86)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 6 2
TeXDict begin 6 1 bop 0 TeXcolorgray 0 TeXcolorgray 806
818 a Fw(vi)1848 b(Learn)40 b(Prolog)g(No)n(w!)p 0 TeXcolorgray
806 1051 a(Chapter)g(5)82 b Fv(Arithmetic)1699 b Fw(89)806
1154 y(1)148 b(Arithmetic)41 b(in)g(Prolog)33 b(.)42
b(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)p 0 TeXcolorgray 108 w(90)p 0
TeXcolorgray 806 1258 a(2)148 b(A)42 b(Closer)f(Look)f(.)i(.)f(.)g(.)h
(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)
g(.)h(.)f(.)g(.)g(.)p 0 TeXcolorgray 108 w(91)p 0 TeXcolorgray
806 1361 a(3)148 b(Arithmetic)41 b(and)f(Lists)g(.)i(.)f(.)g(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)p 0 TeXcolorgray 108 w(94)p 0 TeXcolorgray 806 1465
a(4)148 b(Comparing)40 b(Inte)o(gers)80 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 108 w(97)p 0 TeXcolorgray 806 1568 a(5)148
b(Ex)o(ercises)73 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
p 0 TeXcolorgray 66 w(101)p 0 TeXcolorgray 806 1672 a(6)148
b(Practical)41 b(Session)54 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(102)p 0 TeXcolorgray 806 1861 a(Chapter)f(6)82
b Fv(Mor)o(e)41 b(Lists)1641 b Fw(105)806 1965 y(1)148
b(Append)63 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(106)p 0 TeXcolorgray 806 2068 a(2)148
b(Re)n(v)o(ersing)40 b(a)i(List)57 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
p 0 TeXcolorgray 66 w(112)p 0 TeXcolorgray 806 2172 a(3)148
b(Ex)o(ercises)73 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
p 0 TeXcolorgray 66 w(115)p 0 TeXcolorgray 806 2275 a(4)148
b(Practical)41 b(Session)54 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(117)p 0 TeXcolorgray 806 2464 a(Chapter)f(7)82
b Fv(De\002nite)42 b(Clause)f(Grammars)1052 b Fw(119)806
2568 y(1)148 b(Conte)o(xt)41 b(Free)g(Grammars)j(.)d(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(120)p 0 TeXcolorgray 806 2671 a(2)148
b(De\002nite)41 b(Clause)h(Grammars)22 b(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(128)p 0 TeXcolorgray 806 2775 a(3)148
b(Ex)o(ercises)73 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
p 0 TeXcolorgray 66 w(134)p 0 TeXcolorgray 806 2878 a(4)148
b(Practical)41 b(Session)54 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(135)p 0 TeXcolorgray 806 3067 a(Chapter)f(8)82
b Fv(Mor)o(e)41 b(De\002nite)g(Clause)h(Grammars)818
b Fw(139)806 3171 y(1)148 b(Extra)41 b(Ar)o(guments)48
b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p 0 TeXcolorgray
66 w(140)p 0 TeXcolorgray 806 3274 a(2)148 b(Extra)41
b(Goals)c(.)k(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(150)p 0 TeXcolorgray 806 3378 a(3)148
b(Concluding)39 b(Remarks)g(.)j(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(154)p 0 TeXcolorgray 806 3481 a(4)148
b(Ex)o(ercises)73 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
p 0 TeXcolorgray 66 w(155)p 0 TeXcolorgray 806 3585 a(5)148
b(Practical)41 b(Session)54 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(156)p 0 TeXcolorgray 806 3774 a(Chapter)f(9)82
b Fv(A)42 b(Closer)f(Look)g(at)g(T)-8 b(erms)1112 b Fw(159)806
3878 y(1)148 b(Comparing)40 b(T)-6 b(erms)79 b(.)41 b(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)g(.)p 0 TeXcolorgray 66 w(160)p 0 TeXcolorgray 806
3981 a(2)148 b(T)-6 b(erms)41 b(with)g(a)h(Special)f(Notation)j(.)d(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(162)p 0 TeXcolorgray 806 4085 a(3)148
b(Examining)39 b(T)-6 b(erms)27 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(166)p 0 TeXcolorgray 806 4188 a(4)148
b(Operators)62 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(174)p 0 TeXcolorgray 806 4292 a(5)148
b(Ex)o(ercises)73 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
p 0 TeXcolorgray 66 w(177)p 0 TeXcolorgray 806 4395 a(6)148
b(Practical)41 b(Session)54 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(179)p 0 TeXcolorgray 806 4584 a(Chapter)f(10)82
b Fv(Cuts)41 b(and)h(Negation)1300 b Fw(185)806 4688
y(1)148 b(The)41 b(Cut)c(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)g(.)p 0 TeXcolorgray 66 w(186)p 0 TeXcolorgray 806
4791 a(2)148 b(Using)41 b(Cut)31 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)p 0 TeXcolorgray 66 w(192)p 0 TeXcolorgray
806 4895 a(3)148 b(Ne)o(gation)40 b(as)h(F)o(ailure)74
b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)h(.)f(.)g(.)g(.)p 0 TeXcolorgray 66 w(195)p
0 TeXcolorgray 806 4998 a(4)148 b(Ex)o(ercises)73 b(.)41
b(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p 0 TeXcolorgray
66 w(199)p 0 TeXcolorgray 806 5102 a(5)148 b(Practical)41
b(Session)54 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)p
0 TeXcolorgray 66 w(200)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 7 3
TeXDict begin 7 2 bop 0 TeXcolorgray 0 TeXcolorgray 357
818 a Fw(Contents)2214 b(vii)p 0 TeXcolorgray 357 1051
a(Chapter)40 b(11)82 b Fv(Database)40 b(Manipulation)h(and)g
(Collecting)g(Solutions)204 b Fw(203)357 1151 y(1)149
b(Database)40 b(Manipulation)31 b(.)41 b(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 66 w(204)p 0 TeXcolorgray 357 1250 a(2)149
b(Collecting)40 b(Solutions)61 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 66 w(209)p 0 TeXcolorgray 357 1350 a(3)149
b(Ex)o(ercises)72 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)
p 0 TeXcolorgray 66 w(214)p 0 TeXcolorgray 357 1449 a(4)149
b(Practical)41 b(Session)53 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 66 w(216)p 0 TeXcolorgray 357 1632 a(Chapter)e(12)82
b Fv(W)-6 b(orking)41 b(W)o(ith)g(Files)1264 b Fw(217)357
1732 y(1)149 b(Splitting)40 b(Programs)g(o)o(v)o(er)g(Files)g(.)h(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 66 w(218)p 0 TeXcolorgray 357 1831 a(2)149
b(Writing)40 b(to)i(Files)72 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 66 w(223)p 0 TeXcolorgray 357 1931 a(3)149
b(Reading)40 b(from)g(Files)81 b(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 66 w(224)p 0 TeXcolorgray 357 2031 a(4)149
b(Ex)o(ercises)72 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)
p 0 TeXcolorgray 66 w(226)p 0 TeXcolorgray 357 2130 a(5)149
b(Practical)41 b(Session)53 b(.)41 b(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)p
0 TeXcolorgray 66 w(227)p 0 TeXcolorgray 357 2313 a(Answers)f(to)g(the)
g(Ex)o(ercises)1575 b(231)357 2495 y(Further)40 b(Reading)1910
b(257)357 2678 y(Prolog)40 b(En)m(vironments)1745 b(259)357
2861 y(Predicate)40 b(Inde)o(x)1934 b(261)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 8 4
TeXDict begin 8 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 9 5
TeXDict begin 9 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 707 1424 a
Fu(Pr)m(eface)44 b(to)e(the)g(First)h(Reprinting)451
1906 y Fw(W)-7 b(ell,)42 b(what)f(a)g(year)f(it')-5 b(s)42
b(been!)j(Interest)40 b(in)h Ft(Learn)g(Pr)l(olo)o(g)g(Now!)46
b Fw(continues)357 2006 y(to)53 b(gro)n(w)-5 b(.)82 b(Colle)o(ge)53
b(Publications)g(brought)e(out)i(the)g(\002rst)h(paperback)d(edition)
357 2105 y(in)64 b(June)f(2006,)68 b(and)c(since)g(then)f(the)h(number)
e(of)i(hits)g(on)g(the)f(website)357 2205 y(\()p Fs(www.learnprolog)o
(no)o(w.)o(org)o Fw(\))42 b(has)47 b(increased)g(steadily)-5
b(.)64 b(The)47 b(most)h(dramatic)357 2305 y(month)53
b(w)o(as)j(May)f(2007)f(when)g(we)i(had)e(6,322)f(unique)h(visitors;)62
b(a)56 b(reader)357 2404 y(submitted)40 b(the)h(LPN!)g(link)g(to)h
(Reddit)f(\()p Fs(http://programm)o(in)o(g.r)o(ed)o(dit)o(.c)o(om)o
Fw(\))357 2504 y(and)f(for)g(a)i(heady)e(moment)f(we)j(felt)f(a)g(bit)g
(lik)o(e)g(Smosh!)451 2603 y(W)-7 b(e')l(v)o(e)58 b(also)g(been)f
(pleased)h(by)g(the)g(emails)g(we)g(continue)f(to)h(get)g(from)357
2703 y(students)39 b(and)h(instructors)f(using)h(the)g(material.)45
b(Some)40 b(point)f(out)h(typos,)f(others)357 2803 y(tell)h(us)h(of)e
(their)h(e)o(xperiences)e(in)i(teaching)f(or)h(learning)e(with)i(the)g
(book,)f(and)g(a)357 2902 y(pleasing)c(number)e(simply)j(w)o(ant)f(to)h
(say)g(\223Thank)e(you!\224.)42 b(All)37 b(in)e(all,)i(it)g(w)o(as)f(f)
o(ast)357 3002 y(becoming)j(clear)h(that)i(it)f(w)o(as)h(about)e(time)h
(for)f(a)i(\002rst)f(\(corrected\))e(reprinting.)451
3102 y(But)c(what)g(really)f(made)h(us)g(get)f(do)n(wn)g(to)h(w)o(ork)f
(w)o(as)i(the)e(sudden)g(appearance)357 3201 y(of)43
b(a)g(French)g(translation.)52 b(H)5 b(\264)-33 b(el)5
b(\036)-33 b(ene)43 b(Manu)5 b(\264)-33 b(elian,)42 b(who)h(be)o(gan)e
(translating)i(LPN!)357 3301 y(shortly)38 b(after)g(its)i(appearance)d
(in)i(paperback,)e(\002nished)h(earlier)g(than)h(anticipated)357
3400 y(\227)j(so)h(suddenly)e(we)h(had)g Ft(Pr)l(olo)o(g)g(T)-8
b(out)42 b(de)g(Suite)g(!)50 b Fw(on)42 b(our)f(hands)h(too!)49
b(This)357 3500 y(inspired)41 b(us)h(all)h(to)f(get)g(do)n(wn)f(to)h
(the)g(task)h(of)f(correcting)e(and)h(impro)o(ving)f(the)357
3600 y(English)g(v)o(ersion.)451 3699 y(So,)48 b(here)d(it)i(is)g
(again,)f(all)h(squeak)o(y)d(clean.)61 b(Once)46 b(again,)g(if)g(you)f
(lik)o(e)i(the)357 3799 y(website,)j(we)e(hope)f(you)g(lik)o(e)i(the)f
(\(ne)n(w!\))66 b(paperback)46 b(e)n(v)o(en)h(more.)67
b(And,)49 b(as)357 3899 y(usual,)f(we)f(wish)g(you)f(e)n(v)o(ery)f
(success)j(in)f(your)e(endea)n(v)n(ours)h(to)h(Learn)f(Prolog)357
3998 y(No)n(w!)357 4154 y Fv(Ackno)o(wledgments)357 4276
y Fw(Once)59 b(again)g(we')l(re)g(in)h(debt)g(to)g(man)o(y)e(people:)83
b(e)n(v)o(eryone)57 b(who)i(ga)n(v)o(e)g(us)357 4376
y(feedback)53 b(on)i(the)h(\002rst)g(printing)e(and)h(the)h(website,)j
(and)c(\(as)h(e)n(v)o(er\))e(to)i(the)357 4475 y(indef)o(atigable)i
(Jane)k(Spurr)-5 b(.)105 b(Ho)n(we)n(v)o(er)59 b(this)j(time)f(we)g(o)n
(we)g(a)g(particularly)357 4575 y(deep)42 b(debt)i(to)f(S)5
b(\264)-33 b(ebastien)43 b(Hinderer)m(,)g(Eric)g(K)m(o)n(w)-5
b(,)43 b(Matthieu)g(Quignard,)f(and)h(\(of)357 4674 y(course\))j(H)5
b(\264)-33 b(el)5 b(\036)-33 b(ene)46 b(Manu)5 b(\264)-33
b(elian.)62 b(Their)47 b(w)o(ork)f(on)h Ft(Pr)l(olo)o(g)f(T)-8
b(out)47 b(de)g(Suite)g(!)p Fw(,)h(not)357 4774 y(only)g(created)g(a)h
(beautiful)e(translation,)j(it)f(also)g(helped)f(us)h(with)g(the)f
(present)357 4874 y(v)n(olume.)c(W)-7 b(armest)42 b(thanks)e(to)h(all.)
p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 10 6
TeXDict begin 10 5 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(x)1871 b(Learn)40 b(Prolog)g(No)n(w!)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2784 1051
a(P)o(atrick)h(Blackb)n(urn)2858 1151 y(T)-8 b(ALARIS)42
b(team)2246 1250 y(INRIA)f(Nanc)o(y)f(Grand-Est,)f(France)3040
1449 y(Johan)h(Bos)2228 1549 y(Department)f(of)i(Computer)f(Science)
1948 1649 y(Uni)n(v)o(ersity)f(of)i(Rome)g(\223La)g(Sapienza\224,)f
(Italy)2773 1848 y(Kristina)h(Strie)o(gnitz)2339 1948
y(Computer)e(Science)i(Department)1722 2047 y(Union)f(Colle)o(ge,)g
(Schenectady)-5 b(,)39 b(NY)-11 b(,)41 b(United)g(States)2908
2246 y(October)f(2007.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 11 7
TeXDict begin 11 6 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2404 1415
a Fu(Pr)m(eface)451 1888 y Ft(Learn)40 b(Pr)l(olo)o(g)f(Now!)46
b Fw(has)40 b(a)g(long)e(and)h(twisted)h(history)-5 b(.)44
b(In)c(1995,)e(all)i(three)357 1987 y(authors)47 b(were)g(based)h(at)g
(the)g(Department)f(of)g(Computational)f(Linguistics,)j(at)357
2087 y(the)h(Uni)n(v)o(ersity)f(of)h(the)g(Saarland,)i(in)e(Saarbr)7
b(\250)-35 b(uck)o(en,)50 b(German)o(y)-5 b(.)72 b(Johan,)51
b(who)357 2187 y(w)o(as)56 b(teaching)d(the)i(introduction)e(to)i
(Prolog)f(that)h(year)m(,)i(w)o(as)f(w)o(orking)e(with)357
2286 y(P)o(atrick)e(on)g(a)h(Prolog-based)d(introduction)g(to)i
(natural)g(language)f(semantics.)2923 2256 y Fr(1)357
2386 y Fw(He)j(decided)f(to)i(prepare)d(a)j(short)f(set)h(of)f(lecture)
f(notes)h(on)g(Prolog)f(which)357 2485 y(could)36 b(also)i(be)g(used)f
(as)h(an)g(Appendix)d(to)j(the)g(computational)d(semantics)i(book.)451
2585 y(Nice)47 b(idea,)g(b)n(ut)f(that')-5 b(s)47 b(not)e(the)i(w)o(ay)
f(things)f(w)o(ork)o(ed)g(out.)61 b(First,)48 b(between)357
2685 y(1996)41 b(and)h(2000,)g(P)o(atrick)g(and)g(Johan)g(rethought)e
(the)j(structure)f(of)g(the)h(Prolog)357 2784 y(courses,)50
b(and)e(along)g(the)g(w)o(ay)h(the)g(notes)f(became)g(book-sized.)67
b(Then,)50 b(from)357 2884 y(2001)40 b(till)i(2004,)e(Kristina)i(took)f
(o)o(v)o(er)f(the)h(teaching,)f(added)h(ne)n(w)g(material)g(and)357
2984 y(\(most)f(importantly)f(of)i(all\))g(turned)f Ft(Learn)h(Pr)l
(olo)o(g)f(Now!)47 b Fw(into)40 b(a)i(web-book.)451 3083
y(It)56 b(quickly)d(became)i(apparent)e(that)i(we)h(had)e(a)i(hit)f(on)
g(our)f(hands:)74 b(the)357 3183 y(website)39 b(got)f(up)h(to)g(4,000)e
(visitors)i(a)h(month,)e(and)g(we)h(recei)n(v)o(ed)f(man)o(y)g(emails.)
357 3282 y(Actually)-5 b(,)54 b(this)f(put)f(us)h(in)g(a)g(bit)g(of)f
(a)h(quandary)-5 b(.)77 b(W)-7 b(e)54 b(w)o(anted)e(to)h(publish)357
3382 y Ft(Learn)39 b(Pr)l(olo)o(g)g(Now!)46 b Fw(as)41
b(a)f(\(lo)n(w-b)n(udget\))d(book)h(\227)i(b)n(ut)g(at)g(the)g(same)g
(time)f(we)357 3482 y(did)45 b Ft(not)i Fw(w)o(ant)f(a)g(publisher)e
(telling)h(us)h(that)g(we)g(had)f(to)h(get)g(rid)f(of)g(the)h(free)357
3581 y(online)40 b(v)o(ersion.)451 3681 y(Luckily)-5
b(,)42 b(V)-5 b(incent)43 b(Hendricks)e(came)i(to)h(the)f(rescue)f
(\(thanks)g(V)-5 b(incent!\).)51 b(He)357 3781 y(told)37
b(us)h(about)e(Colle)o(ge)h(Publications,)g(Do)o(v)g(Gabbay')-5
b(s)37 b(ne)n(w)g(publication)f(house,)357 3880 y(which)41
b(w)o(as)h(speci\002cally)f(designed)f(to)i(enable)e(authors)h(to)g
(retain)g(cop)o(yright.)k(It)357 3980 y(w)o(as)54 b(a)f(marriage)f
(made)h(in)g(hea)n(v)o(en.)82 b(Thanks)52 b(to)h(Colle)o(ge)g
(Publications)f(we)357 4079 y(could)42 b(mak)o(e)h Ft(Learn)g(Pr)l(olo)
o(g)g(Now!)53 b Fw(a)n(v)n(ailable)42 b(in)i(book)e(form)g(at)h(a)h
(reasonable)357 4179 y(price,)c(and)g(k)o(eep)h(the)g(web-book)d(in)j
(place.)451 4279 y(And)56 b(that')-5 b(s)57 b(the)g(book)e(you')l(re)g
(no)n(w)h(reading.)91 b(It)57 b(has)g(been)f(thoroughly)357
4378 y(tested,)36 b(\002rst)g(on)f(nearly)f(a)i(decade')-5
b(s)35 b(w)o(orth)g(of)g(students)g(at)h(Saarbr)7 b(\250)-35
b(uck)o(en,)33 b(and)i(at)357 4478 y(the)44 b Ft(16th)f(Eur)l(opean)g
(Summer)h(Sc)o(hool)e(in)i(Lo)o(gic,)h(Langua)o(g)o(e)d(and)h
(Information)357 4578 y Fw(which)54 b(took)h(place)g(in)g(Nanc)o(y)-5
b(,)58 b(France,)g(in)d(August)g(2004,)i(where)e(Kristina)357
4677 y(taught)41 b(a)h(hands-on)e(introduction)g(to)i(Prolog.)48
b(Though,)40 b(as)j(we)g(hope)e(you)g(will)357 4777 y(swiftly)52
b(disco)o(v)o(er)m(,)g(you)f Ft(don')n(t)h Fw(need)f(to)h(be)f(doing)g
(a)h(course)f(to)h(follo)n(w)f(this)357 4876 y(book.)h(W)-7
b(e')l(v)o(e)44 b(tried)g(to)f(mak)o(e)h Ft(Learn)f(Pr)l(olo)o(g)h
(Now!)55 b Fw(self-contained)41 b(and)j(easy)p 0 TeXcolorgray
357 4944 1040 4 v 447 4999 a Fq(1)476 5023 y Fp(Repr)n(esentation)38
b(and)d(Infer)n(ence)i(for)e(Natur)o(al)h(Langua)o(g)o(e:)45
b(A)34 b(F)m(ir)o(st)h(Cour)o(se)h(in)g(Computational)357
5102 y(Semantics)p Fo(,)43 b(P)o(atrick)h(Blackb)o(urn)g(and)e(Johan)h
(Bos,)e(CSLI)g(Publications,)k(2005.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 12 8
TeXDict begin 12 7 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(xii)1825 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(to)e(follo)n(w)-5 b(,)38 b(so)h(that)f(it)h
(can)g(be)f(used)g(without)g(a)h(teacher)-5 b(.)45 b(And)38
b(as)h(the)f(feedback)806 1151 y(we)52 b(ha)n(v)o(e)g(recei)n(v)o(ed)f
(con\002rms,)j(this)f(is)g(one)f(of)g(the)h(most)f(popular)f(w)o(ays)i
(of)806 1250 y(using)40 b(it.)900 1350 y(So)j(\227)h(o)o(v)o(er)d(to)i
(you.)51 b(W)-7 b(e)44 b(had)f(a)g(lot)g(of)g(fun)f(writing)g(this.)52
b(W)-7 b(e)45 b(hope)c(you)806 1449 y(ha)n(v)o(e)46 b(a)i(lot)f(of)g
(fun)f(reading)g(it,)j(and)e(that)g(it)h(really)f(will)h(help)e(you)h
(to)g(learn)806 1549 y(Prolog)39 b(no)n(w!)806 1705 y
Fv(Ackno)o(wledgments)806 1827 y Fw(Ov)o(er)51 b(the)i(years)f(that)h
Ft(Learn)g(Pr)l(olo)o(g)f(Now!)81 b Fw(e)o(xisted)52
b(as)i(course)e(notes)g(and)806 1926 y(web-book,)40 b(we)k(recei)n(v)o
(ed)e(man)o(y)f(emails,)j(ranging)d(from)i(helpful)e(comments)h(to)806
2026 y(requests)35 b(for)g(answers)g(to)h(problems)e(\(a)h(handful)f
(of)h(which)g(v)o(er)o(ged)f(on)h(demands)806 2126 y(that)44
b(we)i(do)e(their)g(home)n(w)o(ork)f(assignments!\).)56
b(W)-7 b(e)46 b(can')o(t)e(thank)g(e)n(v)o(eryone)e(by)806
2225 y(name,)37 b(b)n(ut)g(we)h(did)f(recei)n(v)o(e)g(a)g(lot)h(of)f
(useful)g(feedback)f(this)i(w)o(ay)f(and)g(are)h(v)o(ery)806
2325 y(grateful.)44 b(And)c(if)i(we)f(did)g(an)o(y)f(home)n(w)o(ork)e
(assignments,)j(we)g(ain')o(t)f(telling.)12 b(.)g(.)900
2424 y(W)-7 b(e)49 b(are)f(e)o(xtremely)e(grateful)g(to)i(Gertjan)f(v)n
(an)g(Noord)g(and)g(Robbert)f(Prins,)806 2524 y(who)c(used)g(early)h(v)
o(ersions)f(of)g Ft(Learn)h(Pr)l(olo)o(g)f(Now!)52 b
Fw(in)43 b(their)g(teaching)e(at)i(the)806 2624 y(Uni)n(v)o(ersity)k
(of)h(Groningen.)66 b(The)o(y)47 b(ga)n(v)o(e)h(us)h(detailed)f
(feedback)e(on)i(its)i(weak)806 2723 y(points,)38 b(and)f(we')l(v)o(e)h
(tried)g(to)g(tak)o(e)h(their)f(advice)f(into)h(account;)h(we)f(hope)g
(we')l(v)o(e)806 2823 y(succeeded.)89 b(W)-7 b(e')l(d)56
b(also)g(lik)o(e)g(to)g(say)g Ft(Gr)o(azie!)91 b Fw(to)56
b(Malvina)f(Nissim,)60 b(who)806 2923 y(supplied)50 b(us)j(with)f(an)g
(upgrade)d(of)j(Ex)o(ercise)f(2.4,)j(helped)d(format)f(the)i(\002nal)
806 3022 y(hardcop)o(y)d(v)o(ersion,)54 b(and)e(generally)e(ga)n(v)o(e)
i(us)g(her)g(enthusiastic)g(support)f(o)o(v)o(er)806
3122 y(man)o(y)39 b(years.)900 3222 y(Some)56 b(special)g(thanks)f(are)
h(in)g(order)-5 b(.)90 b(First,)60 b(we')l(d)c(lik)o(e)g(to)g(thank)f
(Do)o(v)806 3321 y(Gabbay)60 b(for)h(founding)e(Colle)o(ge)i
(Publications;)72 b(may)61 b(it)h(do)f(for)g(academic)806
3421 y(publishing)55 b(what)h(the)h(GNU)h(Public)e(License)h(did)f(for)
h(softw)o(are!)93 b(Second,)806 3520 y(heartfelt)69 b(thanks)g(to)h
(Jane)g(Spurr;)84 b(we')l(v)o(e)69 b Ft(ne)o(ver)i Fw(had)e(a)i(more)e
(helpful,)806 3620 y(competent,)56 b(or)f(enthusiastic)f(editor)m(,)k
(and)c Ft(nobody)f Fw(reacts)i(f)o(aster)g(than)g(Jane.)806
3720 y(Thirdly)-5 b(,)52 b(we)g(lik)o(e)g(to)g(thank)e(Jan)i(W)m
(ielemak)o(er)f(\(the)g(Linus)g(T)-7 b(orv)n(alds)51
b(of)g(the)806 3819 y(Prolog)41 b(w)o(orld\))g(for)g(making)g(SWI)i
(Prolog)e(freely)g(a)n(v)n(ailable)h(o)o(v)o(er)e(the)j(internet.)806
3919 y(SWI)50 b(Prolog)f(is)i(a)g(an)f(ISO-compliant)e(Free)i(Softw)o
(are)g(Prolog)f(en)m(vironment,)806 4019 y(licensed)g(under)f(the)h
(Lesser)h(GNU)g(Public)f(License.)71 b(W)-7 b(e)50 b(don')o(t)e(kno)n
(w)h(what)806 4118 y(we')l(d)j(ha)n(v)o(e)h(done)f(without)g(it.)83
b(W)-7 b(e')l(re)53 b(also)h(v)o(ery)e(grateful)g(to)h(him)g(for)f(the)
806 4218 y(speedy)45 b(and)h(informati)n(v)o(e)e(feedback)g(he)j(ga)n
(v)o(e)e(us)i(on)f(a)h(number)d(of)i(technical)806 4317
y(issues,)41 b(and)g(for)f(encouraging)e(us)j(to)g(go)g(for)f
(ISO-standard)f(Prolog.)45 b(Finally)-5 b(,)40 b(a)806
4417 y(big)f(thank)g(you)g(to)h(Ian)f(Mackie)g(and)h(an)f(anon)o(ymous)
e(referee)i(for)g(all)i(the)e(time)806 4517 y(and)h(ener)o(gy)f(the)o
(y)h(put)h(into)f(the)h(penultimate)f(v)o(ersion)g(of)g(the)h(book.)p
0 TeXcolorgray 0 TeXcolorgray 2784 4699 a(P)o(atrick)g(Blackb)n(urn)
3040 4799 y(Johan)f(Bos)2773 4899 y(Kristina)h(Strie)o(gnitz)3047
4998 y Ft(May)g(2006)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 13 9
TeXDict begin 13 8 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2021 1469
a Fu(Intr)m(oduction)451 1986 y Fw(First)46 b(of)n(f,)e(what)h(is)g
(Prolog?)56 b(It')-5 b(s)45 b(a)g(programming)c(language,)j(b)n(ut)g(a)
i(rather)357 2086 y(unusual)31 b(one.)42 b(\223Prolog\224)32
b(is)h(short)f(for)g(\223Programming)e(with)i(Logic\224,)i(and)d
(though)357 2186 y(the)37 b(link)h(between)e(logic)i(and)f(Prolog)f(is)
j(not)e(completely)f(straightforw)o(ard,)f(it)k(is)357
2285 y(this)45 b(link)g(that)g(gi)n(v)o(es)g(Prolog)f(its)i(special)f
(character)-5 b(.)58 b(At)45 b(the)g(heart)g(of)g(Prolog)357
2385 y(lies)38 b(a)g(beautiful)e(idea:)44 b(don')o(t)35
b(tell)j(the)g(computer)d(what)j(to)f(do,)h(simply)e(describe)357
2485 y(situations)44 b(of)h(interest.)57 b(Where)45 b(does)f(the)h
(computation)e(come)h(in?)58 b(When)44 b(we)357 2584
y(ask)37 b(questions.)44 b(Prolog)36 b(enables)h(the)g(computer)e(to)j
(logically)e(deduce)g(ne)n(w)h(f)o(acts)357 2684 y(about)j(the)i
(situations)f(we)h(describe,)f(and)g(gi)n(v)o(es)g(its)i(deductions)c
(back)i(to)h(us)g(as)357 2784 y(answers.)451 2892 y(This)e(has)g(a)g
(number)e(of)h(consequences.)k(First,)d(a)g(practical)f(one:)45
b(if)40 b(you)f(are)357 2992 y(an)j(e)o(xperienced)e(programmer)m(,)g
(Prolog)h(is)j(lik)o(ely)e(to)h(tak)o(e)g(you)e(by)h(surprise.)50
b(It)357 3091 y(requires)i(a)h(dif)n(ferent)e(mindset.)81
b(Y)-9 b(ou)52 b(ha)n(v)o(e)g(to)h(learn)g(to)g(see)g(computational)357
3191 y(problems)42 b(from)h(a)i(dif)n(ferent)d(perspecti)n(v)o(e.)53
b(T)-7 b(o)44 b(use)g(the)g(standard)f(terminology)-5
b(,)357 3291 y(you)44 b(ha)n(v)o(e)h(to)g(learn)g(to)g(think)g
Ft(declar)o(atively)p Fw(,)f(rather)h(than)g Ft(pr)l(ocedur)o(ally)p
Fw(.)57 b(This)357 3390 y(can)40 b(be)h(challenging,)e(b)n(ut)i(it')-5
b(s)42 b(also)f(a)h(lot)f(of)f(fun.)451 3499 y(A)49 b(second)e
(consequence)e(of)j(Prolog')-5 b(s)47 b(\223say)h(what)g(the)g(problem)
e Ft(is)p Fw(,)51 b(rather)357 3598 y(than)36 b(ho)n(w)h(to)h(solv)o(e)
e(it\224)i(stance)g(is)g(that)f(Prolog)f(is)j(a)e(v)o(ery)f(high-le)n
(v)o(el)g(language.)357 3698 y(As)49 b(will)f(become)f(apparent,)h
(Prolog)g(enables)f(you)g(to)i(describe)e(some)h(highly)357
3798 y(abstract)37 b(things)g(\(for)g(e)o(xample,)f(the)i(syntactic)f
(structure)g(of)g(English\))f(e)o(xtremely)357 3897 y(succinctly)-5
b(.)69 b(Moreo)o(v)o(er)m(,)48 b(these)h(descriptions)f(really)h(are)g
(programs:)61 b(the)o(y)48 b(will)357 3997 y(do)41 b(real)h(w)o(ork)g
(for)f(us)h(if)h(we)f(ask)g(the)g(right)g(questions.)48
b(F)o(or)41 b(e)o(xample,)g(ha)n(ving)357 4097 y(described)h(the)h
(syntactic)g(structure)f(of)h(English,)g(we)g(can)g(ask)h(Prolog)e
(whether)357 4196 y(particular)i(sentences)i(are)g(grammatical)e(or)i
(not.)60 b(Prolog)45 b(will)i(tell)g(us,)g(and)e(if)357
4296 y(we)c(ask)g(the)g(right)f(question,)g(will)i(e)n(v)o(en)e(gi)n(v)
o(e)g(us)h(a)h(grammatical)d(analysis.)451 4404 y(Prolog')-5
b(s)38 b(ability)g(to)h(describe)f(comple)o(x)e(situations)j
(succinctly)e(means)h(that)h(it)357 4504 y(is)49 b(good)e(for)h(rapid)g
(prototyping.)65 b(That)49 b(is,)i(if)e(you)e(ha)n(v)o(e)h(a)h(good)e
(idea,)j(and)357 4604 y(w)o(ant)j(to)f(get)h(a)g(w)o(orking)e(program)g
(that)i(embodies)e(it,)56 b(Prolog)c(is)i(often)e(an)357
4703 y(e)o(xcellent)39 b(choice.)45 b(Ideas)40 b(become)f
(computational)f(reality)i(f)o(ast)h(with)f(Prolog,)f(at)357
4803 y(least)50 b(for)f(some)h(applications.)71 b(Which)49
b(applications?)71 b(Those)49 b(which)g(depend)357 4902
y(on)44 b(getting)f(to)i(grips)f(with)g(rich)g(structure.)55
b(Prolog)43 b(application)g(areas)i(include)357 5002
y(computational)f(linguistics)j(\(or)f(natural)g(languages)f
(processing)h(as)h(it)h(is)g(often)357 5102 y(called\),)59
b(Arti\002cial)e(Intelligence)d(\(AI\),)i(e)o(xpert)f(systems,)60
b(molecular)55 b(biology)-5 b(,)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 14 10
TeXDict begin 14 9 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(xi)n(v)1808 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(and)54 b(the)g(semantic)g(web)m(.)87
b(Where)54 b(there)g(is)h(structure)f(to)h(be)f(described,)j(or)806
1151 y(kno)n(wledge)38 b(to)j(be)g(represented,)e(Prolog)h(is)i(lik)o
(ely)f(to)g(come)f(into)h(its)h(o)n(wn.)900 1259 y(Prolog)g(is)i(not)e
(a)h(perfect)f(language,)g(and)g(it')-5 b(s)44 b(not)e(suitable)h(for)f
(e)n(v)o(erything.)806 1359 y(If)k(you)f(need)h(to)g(do)g(serious)g(te)
o(xt)g(manipulation,)f(go)h(for)g(Perl.)62 b(If)46 b(you)f(need)806
1459 y(tight)56 b(control)f(o)o(v)o(er)f(memory)-5 b(,)58
b(go)e(for)g(C.)h(If)f(you)f(w)o(ant)h(a)h(mathematically)806
1558 y(ele)o(gant)37 b(language)g(that)h(you)g(can)h(reason)e(about)h
(easily)-5 b(,)39 b(go)f(for)g(Caml,)h(Hask)o(ell,)806
1658 y(or)j(a)h(clean)f(Lisp)g(dialect)h(\(such)f(as)h(Scheme\).)49
b(But)43 b(no)f(language)f(is)i(good)e(for)806 1757 y(e)n(v)o
(erything,)32 b(and)h(those)h(that)g(try)g(\(remember)d(Ada?\))43
b(often)33 b(f)o(all)i(by)e(the)h(w)o(ayside.)806 1857
y(As)54 b(we)h(ha)n(v)o(e)e(just)i(said,)i(Prolog)c(is)i(a)g(natural)e
(choice)h(for)f(kno)n(wledge-rich)806 1957 y(tasks,)63
b(and)c(there)f(are)h(a)g(number)e(of)i(good)e(reasons)i(for)f
(learning)f(it.)101 b(If)806 2056 y(you)47 b(are)h(an)g(e)o(xperienced)
e(programmer)m(,)g(we)j(think)e(you)g(will)i(enjo)o(y)f(learning)806
2156 y(Prolog)38 b(simply)g(because)h(it)h(is)g(so)f(dif)n(ferent;)f
(thinking)g(declarati)n(v)o(ely)-5 b(,)37 b(or)i(almost)806
2256 y(declarati)n(v)o(ely)-5 b(,)43 b(can)j(send)f(your)f(brain)g(in)i
(interesting)e(ne)n(w)h(directions.)58 b(And)45 b(if)806
2355 y(you)54 b(ha)n(v)o(e)h(little)h(or)f(no)g(programing)d(e)o
(xperience,)57 b(and)d(maybe)h(aren')o(t)f(e)n(v)o(en)806
2455 y(sure)46 b(if)g(you)g(lik)o(e)h(computers)d(or)i(not,)i(then)e
(there)f(are)i(e)o(xcellent)e(reasons)h(for)806 2554
y(choosing)40 b(Prolog)h(as)i(your)d(\002rst)j(language.)k(Because)42
b(it)h(is)g(so)f(high-le)n(v)o(el,)e(you)806 2654 y(get)f(to)h(do)f
(interesting)f(things)h(f)o(ast,)h(without)f(getting)g(bogged)e(do)n
(wn)h(in)i(tedious)806 2754 y(preparatory)j(w)o(ork.)62
b(Moreo)o(v)o(er)m(,)45 b(you)g(will)j(swiftly)e(learn)h(about)e(a)i
(number)e(of)806 2853 y(fundamental)40 b(programming)f(concepts,)j
(notably)f(recursion)g(and)h(recursi)n(v)o(e)g(data)806
2953 y(structures,)36 b(concepts)f(that)h(will)h(be)f(useful)f(if)h
(you)f(later)i(study)e(other)g(languages.)806 3053 y(Finally)-5
b(,)46 b(the)g(link)f(with)i(logic)e(adds)h(an)g(intriguing)e
(intellectual)h(dimension)f(to)806 3152 y(the)c(learning)g(process.)900
3261 y(Where)51 b(does)g(Prolog)f(come)h(from?)76 b(It)51
b(originated)f(in)h(Marseilles,)j(in)d(the)806 3361 y(south)g(of)g
(France.)77 b(Alain)51 b(Colmerauer)f(and)h(Philippe)g(Roussel)h(de)n
(vised)f(and)806 3460 y(implemented)g(the)i(\002rst)h(Prolog)e
(interpreter)g(in)h(1972.)81 b(One)53 b(of)g(the)g(earliest)806
3560 y(v)o(ersions)d(w)o(as)j(partially)e(implemented)f(in)i(F)o
(ortran,)g(and)g(partially)f(in)h(Prolog)806 3659 y(itself.)64
b(An)47 b(interesting)f(mixture:)56 b(it)48 b(w)o(ould)e(be)h(hard)f
(to)h(\002nd)g(tw)o(o)g(languages)806 3759 y(that)59
b(dif)n(fer)g(more)g(widely)g(than)h(the)f(numerically)f(oriented,)63
b(non-recursi)n(v)o(e,)806 3859 y(imperati)n(v)o(e)37
b(scienti\002c)j(programming)c(language)i(F)o(ortran,)g(and)h(the)h
(symbolically)806 3958 y(oriented,)73 b(recursi)n(v)o(e,)h(declarati)n
(v)o(e)67 b(Prolog.)127 b(A)69 b(fe)n(w)f(years)g(later)m(,)75
b(Robert)806 4058 y(K)m(o)n(w)o(alski,)41 b(who)g(had)f(w)o(ork)o(ed)h
(with)g(the)h(Marseilles)f(team)h(in)f(1971)f(and)h(1972,)806
4158 y(published)47 b(his)i(book)f Ft(Lo)o(gic)h(for)g(Pr)l(oblem)g
(Solving)2507 4127 y Fr(1)2588 4158 y Fw(which)f(put)h(the)g(idea)g(of)
806 4257 y(logic)e(programming)e(\002rmly)i(on)h(the)g(intellectual)f
(agenda.)66 b(Another)47 b(big)g(step)806 4357 y(w)o(as)41
b(tak)o(en)f(in)h(Edinb)n(ur)o(gh)c(in)k(1977)e(with)i(Da)n(vid)g(W)-7
b(arren')i(s)40 b(implementation)f(of)806 4456 y(the)j(DEC)h(10)g
(compiler)-5 b(.)1599 4426 y Fr(2)1682 4456 y Fw(This)43
b(implementation,)d(which)i(could)g(compete)f(with)806
4556 y(\(and)j(sometimes)i(surpass\))f(state)i(of)e(the)h(art)g(Lisp)g
(implementations)e(in)h(terms)806 4656 y(of)50 b(ef)n(\002cienc)o(y)-5
b(,)50 b(turned)f(Prolog)h(from)f(an)h(academic)f(curiosity)h(into)g(a)
h(serious)806 4755 y(programming)c(language.)76 b(Interesting)50
b(w)o(ork)h(soon)f(follo)n(wed.)76 b(F)o(or)51 b(e)o(xample,)p
0 TeXcolorgray 806 4863 1040 4 v 896 4918 a Fq(1)925
4942 y Fp(Lo)o(gic)43 b(for)f(Pr)m(oblem)g(Solving)p
Fo(,)i(R.)d(K)n(o)n(w)o(alski,)i(Else)n(vier/North-Holland,)k(1979.)896
4999 y Fq(2)925 5023 y Fo(Da)o(vid)66 b(H.)e(D.)h(W)-5
b(arren,)71 b Fp(Applied)66 b(Lo)o(gic)h(\227)d(Its)i(Use)f(and)g
(Implementation)k(as)c(a)806 5102 y(Pr)m(o)o(gr)o(amming)42
b(T)-6 b(ool)p Fo(,)42 b(PhD)f(thesis,)i(Uni)n(v)o(ersity)h(of)e(Edinb)
o(ur)o(gh.)k(Scotland,)e(1977.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 15 11
TeXDict begin 15 10 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Introduction)2101 b(xv)p 0 TeXcolorgray
357 1051 a(in)57 b(a)h(classic)g(paper)m(,)h(Pereira)e(and)f(W)-7
b(arren)57 b(sho)n(wed)g(that)g(Prolog')-5 b(s)56 b(b)n(uilt-in)357
1151 y(mechanism)35 b(for)g(handling)f(De\002nite)j(Clause)f(Grammars)f
(\(DCGs\))i(w)o(as)g(a)g(natural)357 1250 y(w)o(ay)k(of)f(treating)g
(certain)h(tasks)g(in)h(natural)e(language)f(processing.)2514
1220 y Fr(3)451 1357 y Fw(Since)f(then,)g(Prolog)f(has)h(gro)n(wn)e(in)
i(popularity)-5 b(,)36 b(particularly)g(in)i(Europe)e(and)357
1456 y(Japan)44 b(\(in)g(the)h(United)f(States,)i(w)o(ork)e(on)g(AI)h
(has)g(tended)e(to)i(be)f(Lisp-based\).)357 1556 y(Prolog)f(is,)i(w)o
(as,)g(and)e(al)o(w)o(ays)i(will)f(be,)g(a)h(niche)e(language.)52
b(But)45 b(the)f(niche)f(it)357 1655 y(occupies)d(is)i(f)o(ascinating.)
357 1826 y Fv(Ho)o(w)e(to)h(get)g(the)g(most)g(out)g(of)f(this)i(book)
357 1956 y Fw(What)c(we)h(ha)n(v)o(e)e(said)h(about)g(Prolog)f(so)h(f)o
(ar)g(has)g(been)g(high-le)n(v)o(el)e(and)h(abstract.)357
2056 y(W)-7 b(e)53 b(are)f(no)n(w)f(going)g(to)h(change)e(gears.)79
b(The)51 b(approach)f(tak)o(en)i(to)g(teaching)357 2156
y(Prolog)58 b(in)h(this)g(book)f(is)i Ft(not)g Fw(abstract,)j(and)c(is)
h(certainly)e Ft(not)i Fw(dri)n(v)o(en)d(by)357 2255
y(high-le)n(v)o(el)50 b(ideas)i(\(such)g(as)h(the)f(link)g(with)g
(logic\).)79 b(In)51 b(f)o(act,)k(it')-5 b(s)54 b(resolutely)357
2355 y(do)n(wn)40 b(to)i(earth.)47 b(W)-7 b(e)42 b(try)f(to)h(teach)f
(Prolog)g(as)h(concretely)e(as)i(possible.)47 b(W)-7
b(e')l(v)o(e)357 2455 y(just)41 b(told)f(you)g(why)g(Prolog)f(is)j(not)
e(just)i(another)d(programming)e(language,)i(b)n(ut)357
2554 y(we')l(re)h(going)g(to)h(teach)f(it)i(as)g(if)f(it)h(w)o(as.)451
2661 y(Why?)73 b(Quite)51 b(simply)-5 b(,)51 b(because)f(we)g(think)g
(that')-5 b(s)50 b(the)h(best)f(approach)e(for)357 2760
y(a)j(\002rst)h(course.)74 b(Programming)48 b(in)j(Prolog)f(is)i(a)f
(practical)g(skill.)76 b(There)50 b(are)357 2860 y(concrete)41
b(things)h(that)h(simply)g(ha)n(v)o(e)f(to)h(be)f(learned,)g(and)g(we)h
(strongly)f(belie)n(v)o(e)357 2960 y(that)48 b(you)e(just)j(ha)n(v)o(e)
e(to)h(get)g(in)g(there)f(and)g(learn)g(them)h(as)g(f)o(ast)h(as)f
(possible.)357 3059 y(This)42 b(does)h(not)f(mean)g(that)g(we)h(\002nd)
g(the)f(abstract)g(side)h(of)f(Prolog)g(\(and)g(more)357
3159 y(generally)-5 b(,)61 b(logic)d(programming\))d(unimportant)h(or)i
(uninteresting.)97 b(Ho)n(we)n(v)o(er)357 3258 y(\(unless)52
b(you)f(already)g(ha)n(v)o(e)h(a)h(good)e(theoretical)g(background\))d
(these)53 b(deeper)357 3358 y(ideas)c(tak)o(e)h(time)f(to)h(emer)o(ge)e
(clearly)h(and)g(be)g(absorbed.)69 b(In)49 b(the)h(meantime,)357
3458 y(you)40 b(should)g(be)h(getting)f(on)g(with)h(mastering)f(the)h
(nuts)g(and)g(bolts.)451 3564 y(T)-7 b(o)37 b(put)g(it)g(another)e(w)o
(ay)-5 b(,)37 b(we)h(think)e(that)g(learning)g(a)h(programming)c
(language)357 3664 y(\(an)o(y)52 b(programming)d(language,)54
b(not)f(just)g(Prolog\))f(is)i(a)f(lot)g(lik)o(e)h(learning)d(a)357
3763 y(foreign)d(language.)73 b(And)50 b(what)g(is)i(the)e(most)h
(important)e(part)h(of)g(learning)f(a)357 3863 y(foreign)40
b(language?)45 b(Actually)c Ft(using)g Fw(it,)h(actually)f(putting)g
(it)h(to)g(w)o(ork,)e(actually)357 3963 y(trying)g(it)j(out.)48
b(Sure,)42 b(re\003ecting)f(on)g(the)h(beauty)f(of)g(the)h(language)e
(is)j(pleasant,)357 4062 y(b)n(ut)e(at)i(the)e(end)g(of)h(the)g(day)-5
b(,)40 b(what)i(really)f(counts)g(is)i(the)f(time)f(you)g(spend)g(on)
357 4162 y(mastering)f(the)h(mechanics.)451 4268 y(This)46
b(attitude)g(has)g(strongly)f(in\003uenced)f(the)i(w)o(ay)g
Ft(Learn)g(Pr)l(olo)o(g)f(Now!)62 b Fw(is)357 4368 y(written.)45
b(In)40 b(particular)m(,)e(as)j(you)e(will)i(see,)g(each)f(chapter)f
(is)i(di)n(vided)d(into)i(three)357 4468 y(parts.)59
b(First)46 b(comes)f(the)h(te)o(xt.)59 b(Ne)o(xt)45 b(come)g(a)h
(number)e(of)h(e)o(x)o(ercises.)59 b(Finally)357 4567
y(there)44 b(is)i(what)e(we)i(call)f(the)g(practical)f(session.)57
b(No)n(w)-5 b(,)45 b(we)h(cannot)d(emphasise)357 4667
y(the)54 b(follo)n(wing)f(point)g(too)h(strongly:)71
b Ft(the)54 b(pr)o(actical)g(sessions)h(ar)m(e)f(the)g(most)357
4767 y(important)45 b(part)h(of)h(the)f(book)p Fw(.)61
b(It)47 b(is)g(utterly)f(imperati)n(v)o(e)f(that)h(you)g(sit)h(do)n
(wn,)p 0 TeXcolorgray 357 4865 1040 4 v 447 4921 a Fq(3)476
4944 y Fo(\223De\002nite)d(clause)f(grammars)f(for)g(language)i
(analysis)g(\227)d(a)h(surv)o(e)o(y)h(of)e(the)i(formalism)f(and)357
5023 y(a)48 b(comparison)h(with)g(augmented)h(transition)h(netw)o
(orks\224,)g(F)-5 b(.)47 b(Pereira)j(and)e(D.)f(H.)g(D.)h(W)-5
b(arren,)357 5102 y Fp(J)n(ournal)43 b(of)f(Arti\002cial)i(Intellig)o
(ence)p Fo(,)i(13\(3\):231\226278,)e(1980.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 16 12
TeXDict begin 16 11 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(xvi)1806 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(\002re)45 b(up)f(a)i(Prolog)e(interpreter)m
(,)g(and)g(w)o(ork)h(through)e(these)i(sessions.)59 b(Actually)-5
b(,)806 1151 y(just)48 b(doing)f(that)h(is)h(no)n(where)d(near)i
(enough.)65 b(If)48 b(you)f(really)g(w)o(ant)h(to)h(master)806
1250 y(Prolog,)d(you)f(need)g(to)i(try)e(out)h(a)h(lot)f(more)f(than)h
(is)h(ask)o(ed)f(of)g(you)f(in)h(these)806 1350 y(sessions.)65
b(But)47 b(we)h(belie)n(v)o(e)e(these)h(sessions)h(contain)e(enough)f
(to)j(put)f(you)f(on)806 1449 y(the)40 b(right)h(track.)900
1549 y(Gaining)k(practical)g(e)o(xperience)f(with)i(a)h(programming)42
b(language)i(is)j(al)o(w)o(ays)806 1649 y(important,)36
b(b)n(ut,)j(in)f(our)f(opinion,)g(it)i(is)g(e)n(v)o(en)e(more)g
(important)g(than)g(usual)h(with)806 1748 y(Prolog.)55
b(Why?)g(Because)45 b(Prolog)e(is)j(decepti)n(v)o(ely)c(easy)j(to)f
(understand.)54 b(It')-5 b(s)45 b(a)806 1848 y(small)c(language)e
(\(there)h(are)g(not)h(a)g(lot)g(of)g(constructs)e(to)i(learn\))f(and)h
(the)f(basic)806 1948 y(ideas)47 b(are)g(beautiful)f(in)h(their)g
(simplicity)-5 b(.)64 b(It)47 b(is)h(dangerously)d(easy)i(to)g(smile,)
806 2047 y(relax,)53 b(and)e(say)g(\223`He)o(y!)77 b(I)51
b(get)h(it!\224.)77 b(Easy)-5 b(,)53 b(b)n(ut)f(wrong.)76
b(The)51 b(basic)g(ideas)806 2147 y(interact)38 b(in)h(subtle)g(w)o
(ays,)h(and)e(without)g Ft(lots)i Fw(of)e(practical)h(e)o(xperience)e
(you)h(will)806 2246 y(be)51 b(lost.)79 b(W)-7 b(e)53
b(ha)n(v)o(e)e(had)h(man)o(y)e(\(v)o(ery)h(bright\))f(students)i(who)f
(thought)f(the)o(y)806 2346 y(understood)40 b(it,)j(didn')o(t)e(put)h
(in)h(the)g(ef)n(fort)e(on)h(the)h(practical)f(side)h(\227)g(and)f(who)
806 2446 y(later)51 b(found)e(themselv)o(es)h(scrambling)g(to)h(k)o
(eep)g(up.)75 b(Prolog)50 b(is)i(subtle.)76 b(Y)-9 b(ou)806
2545 y(need)40 b(to)h(put)f(in)i(the)f(hours)f(if)h(you)f(w)o(ant)h(to)
g(master)g(it.)900 2695 y(Summing)f(up,)h Ft(Learn)h(Pr)l(olo)o(g)f
(Now)i Fw(is)f(a)g(practically)f(oriented)f(introduction)806
2794 y(to)45 b(the)g(central)g(features)f(of)h(Prolog.)57
b(It)46 b(w)o(on')o(t)e(teach)h(you)f(e)n(v)o(erything,)f(b)n(ut)i(if)
806 2894 y(you)37 b(mak)o(e)h(it)h(to)g(the)f(end)g(you')o(ll)g(ha)n(v)
o(e)f(a)i(good)e(grasp)h(of)g(the)h(basics,)g(and)f(will)806
2994 y(ha)n(v)o(e)i(caught)g(a)h(glimpse)g(of)f(what)h(logic)g
(programming)c(is)42 b(about.)j(Enjo)o(y!)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 1 13
TeXDict begin 1 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(1)747 2603 y Fm(F)-5 b(acts,)42 b(Rules,)f(and)h
(Queries)p 357 2785 2599 24 v 0 TeXcolorgray 0.95 TeXcolorgray
0 TeXcolorgray 714 4782 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
200.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial
797 3371 a Fl(This)f(chapter)h(has)g(t)m(w)m(o)g(main)g(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3520
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)71 b(give)h(some)h(simple)f
(examples)h(of)f(Prolog)1004 3636 y(p)m(rograms.)51 b(This)37
b(will)g(intro)s(duce)g(us)h(to)f(the)g(three)1004 3753
y(basic)49 b(constructs)h(in)e(Prolog:)64 b(facts,)51
b(rules,)f(and)1004 3869 y(queries.)i(It)36 b(will)g(also)g(intro)s
(duce)h(us)g(to)f(a)g(numb)s(er)1004 3985 y(of)64 b(other)g(themes,)71
b(lik)m(e)65 b(the)f(role)g(of)f(logic)h(in)1004 4101
y(Prolog,)34 b(and)f(the)h(idea)f(of)g(p)s(erfo)m(rming)g
(uni\014cation)1004 4217 y(with)42 b(the)g(aid)f(of)h(va)m(riables.)p
0 TeXcolorgray 887 4400 a(2.)p 0 TeXcolorgray 41 w(T)-8
b(o)48 b(b)s(egin)g(the)h(systematic)h(study)e(of)g(Prolog)g(b)m(y)1004
4516 y(de\014ning)63 b(terms,)69 b(atoms,)f(va)m(riables)62
b(and)h(other)1004 4633 y(syntactic)42 b(concepts.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 14
TeXDict begin 2 13 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(2)1871 b(Learn)40 b(Prolog)g(No)n(w!)p 0
TeXcolorgray 806 1051 a Fk(1)99 b(Some)42 b(Simple)g(Examples)806
1180 y Fw(There)37 b(are)h(only)g(three)f(basic)i(constructs)e(in)i
(Prolog:)k(f)o(acts,)c(rules,)g(and)e(queries.)806 1280
y(A)e(collection)e(of)i(f)o(acts)g(and)f(rules)g(is)i(called)e(a)h(kno)
n(wledge)e(base)h(\(or)g(a)h(database\))806 1380 y(and)53
b(Prolog)h(programming)d(is)k(all)g(about)f(writing)g(kno)n(wledge)e
(bases.)87 b(That)806 1479 y(is,)59 b(Prolog)53 b(programs)g(simply)i
Ft(ar)m(e)g Fw(kno)n(wledge)e(bases,)58 b(collections)c(of)h(f)o(acts)
806 1579 y(and)47 b(rules)i(which)f(describe)g(some)g(collection)g(of)g
(relationships)f(that)i(we)g(\002nd)806 1679 y(interesting.)900
1778 y(So)38 b(ho)n(w)g(do)g(we)h Ft(use)f Fw(a)h(Prolog)e(program?)43
b(By)38 b(posing)f(queries.)44 b(That)38 b(is,)i(by)806
1878 y(asking)g(questions)g(about)g(the)h(information)d(stored)j(in)g
(the)g(kno)n(wledge)e(base.)900 1977 y(No)n(w)34 b(this)h(probably)c
(sounds)j(rather)f(strange.)43 b(It')-5 b(s)34 b(certainly)f(not)h(ob)o
(vious)e(that)806 2077 y(it)38 b(has)g(much)f(to)h(do)g(with)g
(programming)c(at)39 b(all.)45 b(After)38 b(all,)g(isn')o(t)g
(programming)806 2177 y(all)55 b(about)e(telling)h(a)h(computer)e(what)
h(to)h(do?)86 b(But)55 b(as)g(we)g(shall)g(see,)j(the)806
2276 y(Prolog)46 b(w)o(ay)h(of)h(programming)c(mak)o(es)j(a)h(lot)g(of)
f(sense,)i(at)f(least)g(for)f(certain)806 2376 y(tasks;)41
b(for)e(e)o(xample,)g(it)h(is)h(useful)f(in)g(computational)e
(linguistics)i(and)f(Arti\002cial)806 2476 y(Intelligence)49
b(\(AI\).)h(But)i(instead)f(of)g(saying)f(more)g(about)g(Prolog)g(in)i
(general)806 2575 y(terms,)36 b(let')-5 b(s)36 b(jump)f(right)g(in)h
(and)f(start)h(writing)f(some)g(simple)h(kno)n(wledge)d(bases;)806
2675 y(this)41 b(is)h(not)e(just)i(the)f(best)g(w)o(ay)g(of)g(learning)
e(Prolog,)h(it')-5 b(s)42 b(the)f(only)f(w)o(ay)-5 b(.)806
2829 y Fv(Kno)o(wledge)40 b(Base)h(1)806 2951 y Fw(Kno)n(wledge)c(Base)
j(1)f(\(KB1\))g(is)i(simply)d(a)i(collection)e(of)h(f)o(acts.)46
b(F)o(acts)40 b(are)f(used)806 3051 y(to)g(state)h(things)f(that)g(are)
g Ft(unconditionally)d Fw(true)j(of)g(some)g(situation)g(of)g
(interest.)806 3151 y(F)o(or)53 b(e)o(xample,)j(we)e(can)g(state)h
(that)f(Mia,)j(Jody)-5 b(,)56 b(and)e(Y)-9 b(olanda)53
b(are)h(w)o(omen,)806 3250 y(that)49 b(Jody)f(plays)h(air)h(guitar)m(,)
g(and)e(that)i(a)f(party)g(is)h(taking)e(place,)j(using)d(the)806
3350 y(follo)n(wing)39 b(\002)n(v)o(e)i(f)o(acts:)971
3521 y Fs(woman\(mia\).)971 3621 y(woman\(jody\).)971
3720 y(woman\(yolanda\).)971 3820 y(playsAirGuitar\(j)o(od)o(y\).)971
3920 y(party.)900 4091 y Fw(This)46 b(collection)f(of)g(f)o(acts)i(is)f
(KB1.)61 b(It)46 b(is)h(our)e(\002rst)h(e)o(xample)f(of)g(a)i(Prolog)
806 4190 y(program.)55 b(Note)45 b(that)g(the)g(names)g
Fs(mia)n Fw(,)i Fs(jody)n Fw(,)f(and)f Fs(yolanda)m Fw(,)h(the)f
(properties)806 4290 y Fs(woman)59 b Fw(and)i Fs(playsAirGuitar)-5
b Fw(,)67 b(and)61 b(the)g(proposition)e Fs(party)h Fw(ha)n(v)o(e)h
(been)806 4390 y(written)48 b(so)i(that)f(the)g(\002rst)h(letter)f(is)h
(in)g(lo)n(wer)n(-case.)69 b(This)49 b(is)h(important;)i(we)806
4489 y(will)41 b(see)h(why)e(a)h(little)h(later)f(on.)900
4589 y(Ho)n(w)58 b(can)f(we)h(use)g(KB1?)96 b(By)58 b(posing)f
(queries.)95 b(That)57 b(is,)63 b(by)57 b(asking)806
4688 y(questions)40 b(about)g(the)h(information)e(KB1)j(contains.)k
(Here)41 b(are)g(some)g(e)o(xamples.)806 4788 y(W)-7
b(e)42 b(can)e(ask)i(Prolog)d(whether)h(Mia)i(is)g(a)f(w)o(oman)f(by)h
(posing)e(the)i(query:)971 4945 y Fs(?-)g(woman\(mia\).)806
5102 y Fw(Prolog)e(will)j(answer)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 3 15
TeXDict begin 3 14 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1234 b(3)p 0 TeXcolorgray 522 1051 a Fs(yes)357
1200 y Fw(for)38 b(the)g(ob)o(vious)f(reason)h(that)g(this)h(is)h(one)e
(of)g(the)h(f)o(acts)g(e)o(xplicitly)e(recorded)g(in)357
1299 y(KB1.)51 b(Incidentally)-5 b(,)40 b Ft(we)j Fw(don')o(t)e(type)h
(in)h(the)g Fs(?-)o Fw(.)51 b(This)43 b(symbol)e(\(or)h(something)357
1399 y(lik)o(e)d(it,)h(depending)c(on)j(the)g(implementation)e(of)h
(Prolog)g(you)h(are)g(using\))f(is)i(the)357 1498 y(prompt)49
b(symbol)i(that)g(the)h(Prolog)e(interpreter)g(displays)h(when)g(it)h
(is)g(w)o(aiting)357 1598 y(to)i(e)n(v)n(aluate)g(a)g(query)-5
b(.)84 b(W)-7 b(e)56 b(just)f(type)f(in)g(the)h(actual)f(query)f(\(for)
g(e)o(xample)357 1698 y Fs(woman\(mia\))l Fw(\))41 b(follo)n(wed)f(by)g
Fs(.)i Fw(\(a)f(full)g(stop\).)46 b(The)41 b(full)g(stop)g(is)h
(important.)j(If)357 1797 y(you)40 b(don')o(t)f(type)h(it,)i(Prolog)e
(w)o(on')o(t)g(start)h(w)o(orking)f(on)g(the)h(query)-5
b(.)451 1897 y(Similarly)g(,)53 b(we)e(can)g(ask)g(whether)f(Jody)h
(plays)g(air)g(guitar)f(by)h(posing)f(the)357 1997 y(follo)n(wing)39
b(query:)522 2157 y Fs(?-)i(playsAirGuitar\(j)o(od)o(y\))o(.)357
2318 y Fw(Prolog)h(will)j(again)d(answer)i(yes,)g(because)f(this)h(is)h
(one)e(of)g(the)h(f)o(acts)g(in)g(KB1.)357 2418 y(Ho)n(we)n(v)o(er)m(,)
39 b(suppose)h(we)h(ask)g(whether)f(Mia)h(plays)g(air)g(guitar:)522
2567 y Fs(?-)g(playsAirGuitar\(m)o(ia)o(\).)357 2715
y Fw(W)-7 b(e)42 b(will)f(get)g(the)g(answer)522 2864
y Fs(no)357 3013 y Fw(Why?)60 b(W)-7 b(ell,)48 b(\002rst)f(of)e(all,)j
(this)e(is)h(not)f(a)g(f)o(act)g(in)g(KB1.)61 b(Moreo)o(v)o(er)m(,)44
b(KB1)j(is)357 3112 y(e)o(xtremely)d(simple,)j(and)e(contains)h(no)f
(other)g(information)f(\(such)h(as)i(the)f Ft(rules)357
3212 y Fw(we)e(will)h(learn)f(about)f(shortly\))g(which)h(might)f(help)
h(Prolog)f(try)h(to)g(infer)g(\(that)357 3312 y(is,)g(deduce\))e
(whether)g(Mia)i(plays)f(air)h(guitar)-5 b(.)52 b(So)44
b(Prolog)e(correctly)g(concludes)357 3411 y(that)f Fs
(playsAirGuitar\(m)o(ia)o(\))35 b Fw(does)41 b Ft(not)h
Fw(follo)n(w)e(from)g(KB1.)451 3511 y(Here)h(are)g(tw)o(o)g(important)e
(e)o(xamples.)45 b(First,)d(suppose)e(we)h(pose)g(the)g(query:)522
3659 y Fs(?-)g(playsAirGuitar\(v)o(in)o(ce)o(nt\))o(.)357
3808 y Fw(Again)50 b(Prolog)g(answers)h(no.)76 b(Why?)g(W)-7
b(ell,)55 b(this)d(query)e(is)i(about)e(a)i(person)357
3908 y(\(V)-5 b(incent\))34 b(that)h(it)h(has)g(no)f(information)e
(about,)i(so)h(it)g(\(correctly\))e(concludes)g(that)357
4007 y Fs(playsAirGuitar\()o(vin)o(ce)o(nt\))i Fw(cannot)41
b(be)i(deduced)d(from)h(the)i(information)d(in)357 4107
y(KB1.)451 4207 y(Similarly)-5 b(,)40 b(suppose)g(we)h(pose)g(the)g
(query:)522 4355 y Fs(?-)g(tatooed\(jody\).)357 4504
y Fw(Again)58 b(Prolog)g(will)j(answer)e(no.)100 b(Why?)h(W)-7
b(ell,)65 b(this)60 b(query)e(is)i(about)e(a)357 4604
y(property)39 b(\(being)h(tatooed\))g(that)h(it)i(has)e(no)g
(information)e(about,)h(so)i(once)f(again)357 4703 y(it)61
b(\(correctly\))e(concludes)h(that)h(the)g(query)f(cannot)g(be)h
(deduced)e(from)h(the)357 4803 y(information)32 b(in)j(KB1.)44
b(\(Actually)-5 b(,)35 b(some)f(Prolog)g(implementations)f(will)i
(respond)357 4902 y(to)49 b(this)h(query)e(with)h(an)g(error)f
(message,)j(telling)e(you)f(that)i(the)f(predicate)f(or)357
5002 y(procedure)38 b Fs(tatooed)g Fw(is)k(not)e(de\002ned;)g(we)h
(will)g(soon)f(introduce)f(the)i(notion)e(of)357 5102
y(predicates.\))p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 16
TeXDict begin 4 15 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(4)1871 b(Learn)40 b(Prolog)g(No)n(w!)p 0
TeXcolorgray 900 1051 a(Needless)49 b(to)h(say)-5 b(,)50
b(we)g(can)f(also)g(mak)o(e)g(queries)f(concerning)f(propositions.)806
1151 y(F)o(or)40 b(e)o(xample,)f(if)j(we)f(pose)g(the)g(query)971
1313 y Fs(?-)g(party.)806 1475 y Fw(then)f(Prolog)g(will)i(respond)971
1638 y Fs(yes)806 1800 y Fw(and)e(if)h(we)g(pose)g(the)g(query)971
1963 y Fs(?-)g(rockConcert.)806 2125 y Fw(then)f(Prolog)g(will)i
(respond)971 2287 y Fs(no)806 2450 y Fw(e)o(xactly)e(as)h(we)h(w)o
(ould)e(e)o(xpect.)806 2605 y Fv(Kno)o(wledge)g(Base)h(2)806
2727 y Fw(Here)f(is)i(KB2,)f(our)f(second)h(kno)n(wledge)d(base:)971
2905 y Fs(happy\(yolanda\).)971 3005 y(listens2Music\(mi)o(a\))o(.)971
3104 y(listens2Music\(yo)o(la)o(nda)o(\):)o(-)d(happy\(yolanda\).)971
3204 y(playsAirGuitar\(m)o(ia)o(\):-)g(listens2Music\(m)o(ia\))o(.)971
3304 y(playsAirGuitar\(y)o(ol)o(and)o(a\))o(:-)g(listens2Music\(yo)o
(lan)o(da)o(\).)806 3482 y Fw(There)29 b(are)h(tw)o(o)g(f)o(acts)g(in)g
(KB2,)j Fs(listens2Music\(m)o(ia)o(\))25 b Fw(and)k Fs
(happy\(yolanda\))-6 b Fw(.)806 3581 y(The)40 b(last)i(three)e(items)i
(it)g(contains)e(are)h(rules.)900 3681 y(Rules)50 b(state)g
(information)d(that)i(is)h Ft(conditionally)d Fw(true)i(of)g(the)g
(situation)g(of)806 3781 y(interest.)64 b(F)o(or)47 b(e)o(xample,)g
(the)g(\002rst)h(rule)f(says)g(that)g(Y)-9 b(olanda)46
b(listens)i(to)g(music)806 3880 y Ft(if)58 b Fw(she)46
b(is)h(happ)o(y)-5 b(,)44 b(and)i(the)f(last)i(rule)e(says)h(that)g(Y)
-9 b(olanda)45 b(plays)g(air)h(guitar)f Ft(if)806 3980
y Fw(she)d(listens)h(to)g(music.)50 b(More)42 b(generally)-5
b(,)41 b(the)h Fs(:-)h Fw(should)e(be)h(read)g(as)i(\223if)5
b(\224,)42 b(or)806 4080 y(\223is)h(implied)e(by\224.)49
b(The)42 b(part)g(on)g(the)g(left)h(hand)e(side)i(of)f(the)g
Fs(:-)g Fw(is)h(called)f(the)806 4179 y(head)e(of)h(the)g(rule,)f(the)h
(part)g(on)g(the)g(right)f(hand)h(side)g(is)h(called)f(the)g(body)-5
b(.)44 b(So)806 4279 y(in)h(general)f(rules)g(say:)55
b Ft(if)j Fw(the)45 b(body)e(of)i(the)g(rule)g(is)h(true,)f
Ft(then)f Fw(the)h(head)g(of)806 4378 y(the)40 b(rule)h(is)h(true)f
(too.)k(And)40 b(no)n(w)h(for)f(the)h(k)o(e)o(y)f(point:)p
0 TeXcolorgray 0 TeXcolorgray 1013 4541 a Ft(If)55 b(a)g(knowledg)o(e)e
(base)h(contains)g(a)g(rule)h Fs(head)40 b(:-)h(body,)53
b Ft(and)1013 4640 y(Pr)l(olo)o(g)43 b(knows)g(that)h
Fs(body)e Ft(follows)h(fr)l(om)h(the)f(information)f(in)h(the)1013
4740 y(knowledg)o(e)d(base)o(,)g(then)h(Pr)l(olo)o(g)f(can)h(infer)i
Fs(head.)806 4902 y Fw(This)e(fundamental)d(deduction)h(step)i(is)h
(called)f(modus)f(ponens.)900 5002 y(Let')-5 b(s)50 b(consider)f(an)g
(e)o(xample.)71 b(Suppose)48 b(we)i(ask)g(whether)f(Mia)h(plays)f(air)
806 5102 y(guitar:)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 5 17
TeXDict begin 5 16 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1234 b(5)p 0 TeXcolorgray 522 1051 a Fs(?-)41
b(playsAirGuitar\(m)o(ia)o(\).)357 1220 y Fw(Prolog)75
b(will)i(respond)d(yes.)152 b(Why?)f(W)-7 b(ell,)86 b(although)74
b(it)j(can')o(t)e(\002nd)357 1319 y Fs(playsAirGuitar\()o(mia)o(\))34
b Fw(as)41 b(a)f(f)o(act)g(e)o(xplicitly)f(recorded)f(in)i(KB2,)h(it)f
(can)g(\002nd)357 1419 y(the)h(rule)522 1588 y Fs(playsAirGuitar\(m)o
(ia\))o(:-)35 b(listens2Music\(mi)o(a\))o(.)357 1757
y Fw(Moreo)o(v)o(er)m(,)25 b(KB2)h(also)f(contains)g(the)g(f)o(act)g
Fs(listens2Music\(mia)o(\))-6 b Fw(.)41 b(Hence)25 b(Prolog)357
1856 y(can)33 b(use)h(the)g(rule)f(of)h(modus)f(ponens)f(to)i(deduce)e
(that)i Fs(playsAirGuitar\(mi)o(a\))-7 b Fw(.)451 1957
y(Our)36 b(ne)o(xt)f(e)o(xample)f(sho)n(ws)i(that)g(Prolog)f(can)h
(chain)f(together)g(uses)h(of)g(modus)357 2056 y(ponens.)44
b(Suppose)c(we)h(ask:)522 2225 y Fs(?-)g(playsAirGuitar\(y)o(ol)o(an)o
(da\))o(.)357 2394 y Fw(Prolog)46 b(w)o(ould)h(respond)e(yes.)65
b(Why?)f(W)-7 b(ell,)50 b(\002rst)e(of)f(all,)j(by)c(using)h(the)g(f)o
(act)357 2494 y Fs(happy\(yolanda\))35 b Fw(and)41 b(the)g(rule)522
2663 y Fs(listens2Music\(yo)o(lan)o(da)o(\):-)35 b(happy\(yolanda\).)
357 2831 y Fw(Prolog)46 b(can)h(deduce)f(the)i(ne)n(w)f(f)o(act)h
Fs(listens2Music\(y)o(ola)o(nd)o(a\))-6 b Fw(.)65 b(This)48
b(ne)n(w)357 2931 y(f)o(act)58 b(is)h(not)e(e)o(xplicitly)g(recorded)f
(in)i(the)g(kno)n(wledge)e(base)i(\227)h(it)g(is)g(only)357
3031 y Ft(implicitly)54 b Fw(present)g(\(it)h(is)g Ft(inferr)m(ed)i
Fw(kno)n(wledge\).)84 b(Nonetheless,)56 b(Prolog)e(can)357
3130 y(then)43 b(use)h(it)g(just)h(lik)o(e)f(an)g(e)o(xplicitly)e
(recorded)g(f)o(act.)54 b(In)44 b(particular)m(,)e(from)h(this)357
3230 y(inferred)c(f)o(act)i(and)f(the)h(rule)522 3399
y Fs(playsAirGuitar\(y)o(ola)o(nd)o(a\):)o(-)35 b(listens2Music\(yol)o
(an)o(da\))o(.)357 3568 y Fw(it)45 b(can)f(deduce)g Fs
(playsAirGuitar\()o(yol)o(an)o(da)o(\))-6 b Fw(,)46 b(which)e(is)h
(what)g(we)g(ask)o(ed)f(it.)357 3667 y(Summing)38 b(up:)45
b(an)o(y)38 b(f)o(act)i(produced)d(by)i(an)h(application)e(of)h(modus)g
(ponens)f(can)357 3767 y(be)46 b(used)g(as)h(input)e(to)i(further)d
(rules.)62 b(By)46 b(chaining)f(together)g(applications)g(of)357
3866 y(modus)k(ponens)f(in)i(this)h(w)o(ay)-5 b(,)52
b(Prolog)c(is)j(able)f(to)g(retrie)n(v)o(e)f(information)f(that)357
3966 y(logically)k(follo)n(ws)i(from)e(the)i(rules)g(and)f(f)o(acts)h
(recorded)d(in)j(the)g(kno)n(wledge)357 4066 y(base.)451
4166 y(The)40 b(f)o(acts)g(and)f(rules)h(contained)e(in)i(a)g(kno)n
(wledge)d(base)j(are)g(called)g(clauses.)357 4266 y(Thus)61
b(KB2)h(contains)e(\002)n(v)o(e)h(clauses,)67 b(namely)61
b(three)f(rules)i(and)f(tw)o(o)g(f)o(acts.)357 4366 y(Another)55
b(w)o(ay)j(of)e(looking)g(at)h(KB2)h(is)g(to)f(say)h(that)f(it)h
(consists)f(of)g(three)357 4465 y(predicates)40 b(\(or)g(procedures\).)
j(The)e(three)f(predicates)g(are:)522 4634 y Fs(listens2Music)522
4734 y(happy)522 4833 y(playsAirGuitar)357 5002 y Fw(The)55
b Fs(happy)g Fw(predicate)g(is)i(de\002ned)e(using)h(a)g(single)h
(clause)f(\(a)g(f)o(act\).)91 b(The)357 5102 y Fs(listens2Music)35
b Fw(and)40 b Fs(playsAirGuitar)c Fw(predicates)j(are)i(each)f
(de\002ned)f(using)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 6 18
TeXDict begin 6 17 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(6)1871 b(Learn)40 b(Prolog)g(No)n(w!)p 0
TeXcolorgray 806 1051 a(tw)o(o)f(clauses)h(\(in)g(one)f(case,)h(tw)o(o)
g(rules,)g(and)f(in)h(the)g(other)e(case,)j(one)e(rule)g(and)806
1151 y(one)h(f)o(act\).)45 b(It)d(is)g(a)f(good)f(idea)g(to)h(think)g
(about)f(Prolog)g(programs)f(in)i(terms)g(of)806 1250
y(the)k(predicates)g(the)o(y)g(contain.)59 b(In)46 b(essence,)g(the)g
(predicates)f(are)h(the)f(concepts)806 1350 y(we)50 b(\002nd)f
(important,)i(and)e(the)h(v)n(arious)f(clauses)h(we)g(write)g(do)n(wn)f
(concerning)806 1449 y(them)c(are)g(our)g(attempts)g(to)h(pin)f(do)n
(wn)g(what)g(the)o(y)g(mean)g(and)g(ho)n(w)g(the)o(y)g(are)806
1549 y(inter)n(-related.)900 1649 y(One)40 b(\002nal)f(remark.)44
b(W)-7 b(e)41 b(can)e(vie)n(w)h(a)g(f)o(act)g(as)g(a)g(rule)f(with)h
(an)g(empty)f(body)-5 b(.)806 1748 y(That)52 b(is,)57
b(we)d(can)f(think)f(of)h(f)o(acts)h(as)f(conditionals)f(that)h(do)g
(not)g(ha)n(v)o(e)f(an)o(y)806 1848 y(antecedent)39 b(conditions,)g(or)
i(de)o(generate)e(rules.)806 2002 y Fv(Kno)o(wledge)h(Base)h(3)806
2124 y Fw(KB3,)g(our)f(third)g(kno)n(wledge)f(base,)i(consists)g(of)g
(\002)n(v)o(e)f(clauses:)971 2289 y Fs(happy\(vincent\).)971
2389 y(listens2Music\(bu)o(tc)o(h\).)971 2488 y(playsAirGuitar\(v)o(in)
o(cen)o(t\))o(:-)1095 2588 y(listens2Music\(vin)o(cen)o(t\))o(,)1095
2688 y(happy\(vincent\).)971 2787 y(playsAirGuitar\(b)o(ut)o(ch\))o(:-)
1095 2887 y(happy\(butch\).)971 2986 y(playsAirGuitar\(b)o(ut)o(ch\))o
(:-)1095 3086 y(listens2Music\(but)o(ch\))o(.)806 3251
y Fw(There)35 b(are)h(tw)o(o)h(f)o(acts,)h Fs(happy\(vincent\))31
b Fw(and)36 b Fs(listens2Music\(b)o(utc)o(h\))-7 b Fw(,)38
b(and)806 3351 y(three)i(rules.)900 3450 y(KB3)67 b(de\002nes)e(the)i
(same)f(three)g(predicates)f(as)i(KB2)f(\(namely)f Fs(happy)n
Fw(,)806 3550 y Fs(listens2Music)-6 b Fw(,)50 b(and)c
Fs(playsAirGuitar)-5 b Fw(\))47 b(b)n(ut)h(it)g(de\002nes)f(them)g(dif)
n(ferently)-5 b(.)806 3650 y(In)45 b(particular)m(,)h(the)g(three)g
(rules)g(that)g(de\002ne)g(the)g Fs(playsAirGuitar)41
b Fw(predicate)806 3749 y(introduce)e(some)h(ne)n(w)h(ideas.)46
b(First,)41 b(note)g(that)g(the)g(rule)971 3901 y Fs(playsAirGuitar\(v)
o(in)o(cen)o(t\))o(:-)1095 4001 y(listens2Music\(vin)o(cen)o(t\))o(,)
1095 4100 y(happy\(vincent\).)806 4252 y Fw(has)34 b
Ft(two)h Fw(items)g(in)f(its)i(body)-5 b(,)33 b(or)h(\(to)h(use)f(the)h
(standard)e(terminology\))e(tw)o(o)k(goals.)806 4352
y(So,)k(what)g(e)o(xactly)f(does)g(this)i(rule)e(mean?)45
b(The)38 b(most)h(important)f(thing)g(to)h(note)806 4452
y(is)45 b(the)f(comma)f Fs(,)h Fw(that)g(separates)g(the)g(goal)g
Fs(listens2Music\(v)o(inc)o(en)o(t\))38 b Fw(and)806
4551 y(the)47 b(goal)g Fs(happy\(vincent\))42 b Fw(in)47
b(the)g(rule')-5 b(s)48 b(body)-5 b(.)63 b(This)47 b(is)h(the)g(w)o(ay)
f(logical)806 4651 y(conjunction)40 b(is)k(e)o(xpressed)e(in)h(Prolog)f
(\(that)h(is,)h(the)f(comma)f(means)h Ft(and)r Fw(\).)51
b(So)806 4751 y(this)40 b(rule)f(says:)46 b(\223V)-5
b(incent)38 b(plays)i(air)g(guitar)e(if)i(he)g(listens)g(to)g(music)f
Ft(and)i Fw(he)f(is)806 4850 y(happ)o(y\224.)900 4950
y(Thus,)g(if)i(we)f(posed)f(the)h(query)971 5102 y Fs(?-)g
(playsAirGuitar\()o(vin)o(ce)o(nt)o(\).)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 7 19
TeXDict begin 7 18 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1234 b(7)p 0 TeXcolorgray 357 1051 a(Prolog)73
b(w)o(ould)h(answer)g(no.)146 b(This)75 b(is)g(because)f(while)h(KB3)f
(contains)357 1151 y Fs(happy\(vincent\))-6 b Fw(,)96
b(it)86 b(does)f Ft(not)i Fw(e)o(xplicitly)d(contain)g(the)h
(information)357 1250 y Fs(listens2Music\(v)o(inc)o(en)o(t\))-6
b Fw(,)47 b(and)e(this)h(f)o(act)g(cannot)f(be)g(deduced)f(either)-5
b(.)60 b(So)357 1350 y(KB3)k(only)f(ful\002ls)h(one)f(of)h(the)g(tw)o
(o)g(preconditions)d(needed)i(to)h(establish)357 1449
y Fs(playsAirGuitar\()o(vin)o(ce)o(nt\))-7 b Fw(,)41
b(and)g(our)f(query)g(f)o(ails.)451 1551 y(Incidentally)-5
b(,)43 b(the)i(spacing)f(used)g(in)h(this)g(rule)g(is)g(irrele)n(v)n
(ant.)56 b(F)o(or)44 b(e)o(xample,)357 1651 y(we)d(could)f(ha)n(v)o(e)g
(written)h(it)h(as)522 1823 y Fs(playsAirGuitar\(v)o(inc)o(en)o(t\):)o
(-)35 b(happy\(vincent\),)1643 1923 y(listens2Music\(vi)o(nc)o(ent)o
(\).)357 2096 y Fw(and)41 b(it)h(w)o(ould)f(ha)n(v)o(e)g(meant)g(e)o
(xactly)g(the)h(same)g(thing.)47 b(Prolog)41 b(of)n(fers)f(us)i(a)g
(lot)357 2195 y(of)47 b(freedom)e(in)i(the)g(w)o(ay)h(we)f(set)h(out)f
(kno)n(wledge)e(bases,)k(and)d(we)i(can)f(tak)o(e)357
2295 y(adv)n(antage)39 b(of)h(this)i(to)f(k)o(eep)f(our)h(code)f
(readable.)451 2397 y(Ne)o(xt,)46 b(note)f(that)g(KB3)h(contains)f(tw)o
(o)g(rules)h(with)f Ft(e)n(xactly)h Fw(the)f(same)h(head,)357
2496 y(namely:)522 2669 y Fs(playsAirGuitar\(b)o(utc)o(h\))o(:-)647
2769 y(happy\(butch\).)522 2868 y(playsAirGuitar\(b)o(utc)o(h\))o(:-)
647 2968 y(listens2Music\(b)o(utc)o(h\))o(.)357 3141
y Fw(This)d(is)h(a)g(w)o(ay)g(of)f(stating)g(that)g(Butch)g(plays)h
(air)f(guitar)g Ft(either)i Fw(if)f(he)f(listens)357
3240 y(to)37 b(music,)h Ft(or)i Fw(if)e(he)g(is)g(happ)o(y)-5
b(.)43 b(That)38 b(is,)h(listing)e(multiple)g(rules)h(with)g(the)g
(same)357 3340 y(head)43 b(is)h(a)h(w)o(ay)e(of)h(e)o(xpressing)e
(logical)h(disjunction)f(\(that)i(is,)h(it)f(is)h(a)f(w)o(ay)g(of)357
3439 y(saying)c Ft(or)r Fw(\).)46 b(So)41 b(if)g(we)g(posed)g(the)f
(query)522 3612 y Fs(?-)h(playsAirGuitar\(b)o(ut)o(ch)o(\).)357
3785 y Fw(Prolog)h(w)o(ould)g(answer)h(yes.)52 b(F)o(or)42
b(although)g(the)h(\002rst)g(of)g(these)g(rules)g(will)h(not)357
3884 y(help)38 b(\(KB3)g(does)h(not)f(allo)n(w)g(Prolog)g(to)h
(conclude)e(that)h Fs(happy\(butch\))-5 b Fw(\),)39 b(KB3)357
3984 y Ft(does)k Fw(contain)h Fs(listens2Music\(b)o(utc)o(h\))38
b Fw(and)43 b(this)i(means)f(Prolog)f(can)h(apply)357
4084 y(modus)c(ponens)f(using)i(the)g(rule)522 4256 y
Fs(playsAirGuitar\(b)o(utc)o(h\))o(:-)647 4356 y(listens2Music\(b)o
(utc)o(h\))o(.)357 4528 y Fw(to)g(conclude)e(that)i Fs
(playsAirGuitar\(b)o(utc)o(h\))-7 b Fw(.)451 4630 y(There)45
b(is)i(another)d(w)o(ay)i(of)f(e)o(xpressing)f(disjunction)g(in)i
(Prolog.)59 b(W)-7 b(e)47 b(could)357 4730 y(replace)40
b(the)h(pair)f(of)h(rules)g(gi)n(v)o(en)f(abo)o(v)o(e)f(by)i(the)f
(single)h(rule)522 4902 y Fs(playsAirGuitar\(b)o(utc)o(h\))o(:-)647
5002 y(happy\(butch\);)647 5102 y(listens2Music\(b)o(utc)o(h\))o(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 8 20
TeXDict begin 8 19 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(8)1871 b(Learn)40 b(Prolog)g(No)n(w!)p 0
TeXcolorgray 806 1051 a(That)e(is,)i(the)e(semicolon)f
Fs(;)i Fw(is)h(the)e(Prolog)g(symbol)f(for)h Ft(or)p
Fw(,)h(so)g(this)g(single)g(rule)806 1151 y(means)j(e)o(xactly)g(the)h
(same)g(thing)g(as)g(the)g(pre)n(vious)f(pair)g(of)h(rules.)52
b(Is)43 b(it)h(better)806 1250 y(to)39 b(use)g(multiple)f(rules)h(or)f
(the)h(semicolon?)44 b(That)39 b(depends.)44 b(On)39
b(the)f(one)h(hand,)806 1350 y(e)o(xtensi)n(v)o(e)h(use)i(of)g
(semicolon)f(can)g(mak)o(e)h(Prolog)f(code)g(hard)g(to)h(read.)49
b(On)41 b(the)806 1449 y(other)j(hand,)i(the)f(semicolon)g(is)h(more)f
(ef)n(\002cient)g(as)i(Prolog)d(only)h(has)h(to)g(deal)806
1549 y(with)41 b(one)f(rule.)900 1658 y(It)47 b(should)e(no)n(w)h(be)h
(clear)f(that)g(Prolog)g(has)h(something)e(to)h(do)g(with)h(logic:)806
1758 y(after)41 b(all,)h(the)g Fs(:-)f Fw(means)h(implication,)e(the)i
Fs(,)g Fw(means)f(conjunction,)e(and)j(the)f Fs(;)806
1858 y Fw(means)j(disjunction.)57 b(\(What)45 b(about)g(ne)o(gation?)56
b(That)45 b(is)h(a)g(whole)e(other)h(story)-5 b(.)806
1957 y(W)e(e')o(ll)47 b(be)g(discussing)f(it)i(in)f(Chapter)f(10.\))62
b(Moreo)o(v)o(er)m(,)45 b(we)i(ha)n(v)o(e)f(seen)h(that)g(a)806
2057 y(standard)h(logical)h(proof)f(rule)h(\(modus)f(ponens\))g(plays)h
(an)g(important)f(role)h(in)806 2156 y(Prolog)f(programming.)68
b(So)49 b(we)h(are)f(already)g(be)o(ginning)e(to)i(understand)e(why)806
2256 y(\223Prolog\224)39 b(is)j(short)f(for)f(\223Programming)e(with)j
(logic\224.)806 2432 y Fv(Kno)o(wledge)f(Base)h(4)806
2566 y Fw(Here)f(is)i(KB4,)f(our)f(fourth)g(kno)n(wledge)f(base:)971
2788 y Fs(woman\(mia\).)971 2887 y(woman\(jody\).)971
2987 y(woman\(yolanda\).)971 3186 y(loves\(vincent,mi)o(a\))o(.)971
3286 y(loves\(marsellus,)o(mi)o(a\).)971 3385 y(loves\(pumpkin,ho)o(ne)
o(y_b)o(un)o(ny\))o(.)971 3485 y(loves\(honey_bunn)o(y,)o(pum)o(pk)o
(in\))o(.)900 3706 y Fw(No)n(w)-5 b(,)38 b(this)g(is)h(a)f(pretty)f
(boring)f(kno)n(wledge)g(base.)44 b(There)37 b(are)h(no)f(rules,)h
(only)806 3806 y(a)44 b(collection)f(of)h(f)o(acts.)56
b(Ok,)45 b(we)g(are)f(seeing)g(a)g(relation)g(that)g(has)g(tw)o(o)h
(names)806 3905 y(as)50 b(ar)o(guments)d(for)h(the)i(\002rst)g(time)f
(\(namely)f(the)i Fs(loves)d Fw(relation\),)j(b)n(ut,)i(let')-5
b(s)806 4005 y(f)o(ace)40 b(it,)i(that')-5 b(s)41 b(a)h(rather)e
(predictable)f(idea.)900 4114 y(No,)48 b(the)f(no)o(v)o(elty)f(this)h
(time)g(lies)h(not)f(in)g(the)g(kno)n(wledge)e(base,)k(it)e(lies)h(in)
806 4214 y(the)42 b(queries)h(we)g(are)g(going)e(to)i(pose.)52
b(In)42 b(particular)m(,)g Ft(for)h(the)g(\002r)o(st)h(time)f(we')n(r)m
(e)806 4313 y(going)c(to)i(mak)o(e)g(use)g(of)g(variables)p
Fw(.)46 b(Here')-5 b(s)41 b(an)g(e)o(xample:)971 4508
y Fs(?-)g(woman\(X\).)900 4703 y Fw(The)j Fs(X)g Fw(is)g(a)h(v)n
(ariable)d(\(in)i(f)o(act,)h(an)o(y)e(w)o(ord)g(be)o(ginning)e(with)j
(an)g(upper)n(-case)806 4803 y(letter)i(is)i(a)f(Prolog)e(v)n(ariable,)
i(which)f(is)i(why)e(we)g(had)h(to)f(be)h(careful)f(to)g(use)806
4902 y(lo)n(wer)n(-case)39 b(initial)i(letters)f(in)g(our)g(earlier)g
(e)o(xamples\).)k(No)n(w)c(a)g(v)n(ariable)f(isn')o(t)h(a)806
5002 y(name,)h(rather)g(it')-5 b(s)44 b(a)e Ft(placeholder)g
Fw(for)g(information.)47 b(That)41 b(is,)j(this)e(query)f(asks)806
5102 y(Prolog:)k(tell)c(me)g(which)f(of)h(the)g(indi)n(viduals)f(you)g
(kno)n(w)g(about)g(is)h(a)h(w)o(oman.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 9 21
TeXDict begin 9 20 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1234 b(9)p 0 TeXcolorgray 451 1051 a(Prolog)37
b(answers)i(this)g(query)d(by)i(w)o(orking)f(its)i(w)o(ay)g(through)d
(KB4,)j(from)e(top)357 1151 y(to)k(bottom,)f(trying)g(to)h(unify)f
(\(or)h(match\))f(the)h(e)o(xpression)f Fs(woman\(X\))e
Fw(with)k(the)357 1250 y(information)e(KB4)j(contains.)50
b(No)n(w)42 b(the)h(\002rst)g(item)g(in)g(the)g(kno)n(wledge)d(base)j
(is)357 1350 y Fs(woman\(mia\))l Fw(.)82 b(So,)56 b(Prolog)c(uni\002es)
g Fs(X)i Fw(with)f Fs(mia)n Fw(,)k(thus)c(making)e(the)i(query)357
1449 y(agree)36 b(perfectly)f(with)i(this)h(\002rst)f(item.)45
b(\(Incidentally)-5 b(,)35 b(there')-5 b(s)36 b(a)i(lot)f(of)f(dif)n
(ferent)357 1549 y(terminology)k(for)i(this)i(process:)49
b(we)43 b(can)g(also)g(say)g(that)g(Prolog)f(instantiates)h
Fs(X)357 1649 y Fw(to)j Fs(mia)o Fw(,)h(or)f(that)g(it)h(binds)f
Fs(X)g Fw(to)g Fs(mia)o Fw(.\))61 b(Prolog)45 b(then)h(reports)f(back)g
(to)i(us)f(as)357 1748 y(follo)n(ws:)522 1906 y Fs(X)41
b(=)g(mia)357 2064 y Fw(That)50 b(is,)55 b(it)c(not)g(only)f(says)i
(that)f(there)f(is)i(information)d(about)h(at)h(least)h(one)357
2163 y(w)o(oman)38 b(in)i(KB4,)g(it)g(actually)f(tells)h(us)g(who)f
(she)g(is.)46 b(It)40 b(didn')o(t)e(just)i(say)f(yes,)h(it)357
2263 y(actually)45 b(ga)n(v)o(e)f(us)i(the)g(v)n(ariable)e(binding)g
(\(or)h(v)n(ariable)g(instantiation\))f(that)i(led)357
2362 y(to)41 b(success.)451 2462 y(But)k(that')-5 b(s)45
b(not)g(the)f(end)g(of)h(the)f(story)-5 b(.)56 b(The)45
b(whole)f(point)g(of)g(v)n(ariables)g(is)357 2562 y(that)50
b(the)o(y)g(can)h(stand)f(for)m(,)i(or)e(unify)g(with,)i(dif)n(ferent)d
(things.)75 b(And)50 b(there)g(is)357 2661 y(information)43
b(about)h(other)h(w)o(omen)g(in)h(the)f(kno)n(wledge)e(base.)60
b(W)-7 b(e)47 b(can)e(access)357 2761 y(this)c(information)e(by)h
(typing)g(a)h(semicolon:)522 2919 y Fs(X)g(=)g(mia)g(;)357
3076 y Fw(Remember)63 b(that)h Fs(;)g Fw(means)g Ft(or)p
Fw(,)70 b(so)65 b(this)g(query)d(means:)93 b Ft(ar)m(e)64
b(ther)m(e)g(any)357 3176 y(alternatives)p Fw(?)94 b(So)57
b(Prolog)f(be)o(gins)h(w)o(orking)e(through)g(the)j(kno)n(wledge)d
(base)357 3276 y(again)41 b(\(it)i(remembers)e(where)h(it)h(got)g(up)f
(to)g(last)i(time)f(and)f(starts)h(from)f(there\))357
3375 y(and)g(sees)j(that)e(if)h(it)g(uni\002es)f Fs(X)g
Fw(with)h Fs(jody)n Fw(,)g(then)f(the)g(query)f(agrees)h(perfectly)357
3475 y(with)e(the)g(second)f(entry)g(in)h(the)g(kno)n(wledge)e(base.)46
b(So)41 b(it)g(responds:)522 3632 y Fs(X)g(=)g(mia)g(;)522
3732 y(X)g(=)g(jody)357 3890 y Fw(It')-5 b(s)44 b(telling)f(us)h(that)g
(there)f(is)i(information)c(about)i(a)h(second)f(w)o(oman)g(in)h(KB4,)
357 3989 y(and)c(\(once)h(again\))f(it)i(actually)e(gi)n(v)o(es)h(us)h
(the)f(v)n(alue)g(that)g(led)g(to)h(success.)47 b(And)357
4089 y(of)40 b(course,)g(if)i(we)f(press)g Fs(;)g Fw(a)g(second)g
(time,)f(Prolog)g(returns)g(the)h(answer)522 4247 y Fs(X)g(=)g(mia)g(;)
522 4346 y(X)g(=)g(jody)f(;)522 4446 y(X)h(=)g(yolanda)451
4604 y Fw(But)48 b(what)e(happens)g(if)h(we)g(press)h
Fs(;)f Fw(a)g Ft(thir)m(d)i Fw(time?)64 b(Prolog)46 b(responds)f(no.)
357 4703 y(No)39 b(other)f(uni\002cations)g(are)i(possible.)k(There)39
b(are)g(no)g(other)f(f)o(acts)i(starting)f(with)357 4803
y(the)i(symbol)g Fs(woman)n Fw(.)49 b(The)41 b(last)h(four)f(entries)h
(in)f(the)h(kno)n(wledge)e(base)h(concern)357 4902 y(the)i
Fs(love)e Fw(relation,)h(and)h(there)f(is)i(no)e(w)o(ay)h(that)g(such)f
(entries)h(can)g(be)f(uni\002ed)357 5002 y(with)f(a)g(query)f(of)g(the)
h(form)f Fs(woman\(X\))m Fw(.)451 5102 y(Let')-5 b(s)42
b(try)e(a)i(more)e(complicated)f(query)-5 b(,)39 b(namely)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 10 22
TeXDict begin 10 21 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(10)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(?-)h(loves\(marsellus)o(,X\))o(,)35
b(woman\(X\).)806 1220 y Fw(No)n(w)-5 b(,)55 b(remember)d(that)h
Fs(,)g Fw(means)g Ft(and)p Fw(,)j(so)d(this)h(query)e(says:)71
b Ft(is)55 b(ther)m(e)e(any)806 1319 y(individual)47
b Fs(X)j Ft(suc)o(h)e(that)h(Mar)o(sellus)h(lo)o(ves)g
Fs(X)g Ft(and)g Fs(X)g Ft(is)g(a)f(woman)p Fw(?)70 b(If)49
b(you)806 1419 y(look)d(at)i(the)g(kno)n(wledge)d(base)j(you')o(ll)f
(see)h(that)g(there)f(is:)60 b(Mia)48 b(is)g(a)g(w)o(oman)806
1519 y(\(f)o(act)37 b(1\))g(and)f(Marsellus)i(lo)o(v)o(es)e(Mia)i(\(f)o
(act)f(5\).)44 b(And)37 b(in)h(f)o(act,)g(Prolog)e(is)i(capable)806
1618 y(of)k(w)o(orking)g(this)i(out.)52 b(That)43 b(is,)h(it)g(can)f
(search)g(through)e(the)i(kno)n(wledge)e(base)806 1718
y(and)j(w)o(ork)g(out)g(that)h(if)g(it)g(uni\002es)g
Fs(X)g Fw(with)g(Mia,)g(then)g(both)f(conjuncts)f(of)h(the)806
1818 y(query)36 b(are)j(satis\002ed)f(\(we')o(ll)h(learn)e(in)i(the)f
(follo)n(wing)f(chapter)g(ho)n(w)h(Prolog)f(does)806
1917 y(this\).)45 b(So)d(Prolog)d(returns)i(the)g(answer)971
2086 y Fs(X)g(=)g(mia)900 2255 y Fw(The)g(b)n(usiness)h(of)f(unifying)f
(v)n(ariables)h(with)g(information)e(in)j(the)g(kno)n(wledge)806
2355 y(base)j(is)h(the)g(heart)f(of)g(Prolog.)58 b(As)46
b(we')o(ll)g(learn,)g(there)f(are)g(man)o(y)f(interesting)806
2454 y(ideas)34 b(in)g(Prolog)f(\227)i(b)n(ut)f(when)g(you)f(get)h
(right)g(do)n(wn)f(to)h(it,)i(it')-5 b(s)35 b(Prolog')-5
b(s)34 b(ability)806 2554 y(to)44 b(perform)f(uni\002cation)g(and)h
(return)f(the)h(v)n(alues)g(of)h(the)f(v)n(ariable)f(bindings)g(to)806
2654 y(us)e(that)g(is)h(crucial.)806 2811 y Fv(Kno)o(wledge)e(Base)h(5)
806 2935 y Fw(W)-7 b(ell,)52 b(we')l(v)o(e)d(introduced)e(v)n
(ariables,)j(b)n(ut)g(so)g(f)o(ar)f(we')l(v)o(e)f(only)h(used)g(them)g
(in)806 3034 y(queries.)43 b(But)35 b(v)n(ariables)g(not)g(only)f
Ft(can)h Fw(be)g(used)g(in)g(kno)n(wledge)e(bases,)k(it')-5
b(s)36 b(only)806 3134 y(when)49 b(we)i(start)f(to)h(do)e(so)i(that)f
(we)h(can)f(write)g(truly)f(interesting)h(programs.)806
3233 y(Here')-5 b(s)41 b(a)g(simple)g(e)o(xample,)e(the)i(kno)n(wledge)
e(base)i(KB5:)971 3420 y Fs(loves\(vincent,mi)o(a\))o(.)971
3520 y(loves\(marsellus,)o(mi)o(a\).)971 3619 y(loves\(pumpkin,ho)o(ne)
o(y_b)o(un)o(ny\))o(.)971 3719 y(loves\(honey_bunn)o(y,)o(pum)o(pk)o
(in\))o(.)971 3918 y(jealous\(X,Y\):-)36 b(loves\(X,Z\),)h
(loves\(Y,Z\).)900 4105 y Fw(KB5)63 b(contains)e(four)h(f)o(acts)g
(about)g(the)g Fs(loves)f Fw(relation)h(and)f(one)h(rule.)806
4204 y(\(Incidentally)-5 b(,)61 b(the)f(blank)f(line)h(between)f(the)h
(f)o(acts)h(and)e(the)h(rule)g(has)g(no)806 4304 y(meaning:)81
b(it')-5 b(s)60 b(simply)f(there)g(to)h(increase)f(the)g(readability)-5
b(.)99 b(As)60 b(we)g(said)806 4403 y(earlier)m(,)45
b(Prolog)f(gi)n(v)o(es)g(us)h(a)h(great)e(deal)h(of)g(freedom)e(in)i
(the)g(w)o(ay)g(we)h(format)806 4503 y(kno)n(wledge)e(bases.\))62
b(But)47 b(this)f(rule)h(is)g(by)f(f)o(ar)g(the)g(most)h(interesting)e
(one)h(we)806 4603 y(ha)n(v)o(e)d(seen)h(so)g(f)o(ar:)52
b(it)45 b(contains)e(three)h(v)n(ariables)f(\(note)g(that)i
Fs(X)o Fw(,)g Fs(Y)p Fw(,)g(and)e Fs(Z)i Fw(are)806 4702
y(all)c(upper)n(-case)e(letters\).)46 b(What)c(does)e(it)i(say?)900
4803 y(In)34 b(ef)n(fect,)h(it)g(is)h(de\002ning)d(a)i(concept)e(of)h
(jealousy)-5 b(.)43 b(It)34 b(says)h(that)g(an)f(indi)n(vidual)806
4902 y Fs(X)39 b Fw(will)g(be)g(jealous)g(of)g(an)f(indi)n(vidual)g
Fs(Y)h Fw(if)g(there)f(is)i(some)f(indi)n(vidual)e Fs(Z)i
Fw(that)g Fs(X)806 5002 y Fw(lo)o(v)o(es,)50 b(and)e
Fs(Y)i Fw(lo)o(v)o(es)e(that)h(same)h(indi)n(vidual)d
Fs(Z)i Fw(too.)70 b(\(Ok,)51 b(so)e(jealousy)g(isn')o(t)806
5102 y(as)d(straightforw)o(ard)d(as)k(this)f(in)g(the)g(real)g(w)o
(orld.\))59 b(The)45 b(k)o(e)o(y)g(thing)g(to)h(note)g(is)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 11 23
TeXDict begin 11 22 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1192 b(11)p 0 TeXcolorgray 357 1051 a(that)50
b(this)h(is)g(a)g Ft(g)o(ener)o(al)e Fw(statement:)65
b(it)51 b(is)g(not)f(stated)g(in)h(terms)f(of)g Fs(mia)o
Fw(,)j(or)357 1151 y Fs(pumpkin)m Fw(,)d(or)d(an)o(yone)f(in)i
(particular)e(\227)i(it')-5 b(s)49 b(a)f(conditional)e(statement)i
(about)357 1250 y Ft(e)o(verybody)39 b Fw(in)i(our)f(little)i(w)o
(orld.)451 1354 y(Suppose)e(we)h(pose)g(the)g(query:)522
1533 y Fs(?-)g(jealous\(marsellu)o(s,)o(W\))o(.)357 1712
y Fw(This)49 b(query)f(asks:)63 b(can)49 b(you)f(\002nd)h(an)g(indi)n
(vidual)f Fs(W)h Fw(such)g(that)h(Marsellus)f(is)357
1811 y(jealous)41 b(of)h Fs(W)o Fw(?)49 b(V)-5 b(incent)41
b(is)i(such)f(an)f(indi)n(vidual.)47 b(If)41 b(you)g(check)g(the)h
(de\002nition)357 1911 y(of)35 b(jealousy)-5 b(,)35 b(you')o(ll)f(see)i
(that)f(Marsellus)g(must)h(be)f(jealous)g(of)g(V)-5 b(incent,)35
b(because)357 2011 y(the)o(y)k(both)h(lo)o(v)o(e)f(the)h(same)h(w)o
(oman,)e(namely)g(Mia.)46 b(So)40 b(Prolog)g(will)h(return)e(the)357
2110 y(v)n(alue)522 2289 y Fs(W)i(=)g(vincent)451 2468
y Fw(No)n(w)d(some)g(questions)f(for)h Ft(you)p Fw(.)44
b(First,)39 b(are)f(there)g(an)o(y)f(other)g(jealous)h(people)357
2568 y(in)49 b(KB5?)70 b(Furthermore,)48 b(suppose)g(we)i(w)o(anted)e
(Prolog)g(to)h(tell)h(us)f(about)f(all)357 2667 y(the)41
b(jealous)g(people:)46 b(what)c(query)e(w)o(ould)h(we)h(pose?)47
b(Do)41 b(an)o(y)g(of)g(the)h(answers)357 2767 y(surprise)e(you?)45
b(Do)c(an)o(y)f(seem)h(silly?)357 2972 y Fk(2)99 b(Pr)n(olog)41
b(Syntax)357 3107 y Fw(No)n(w)36 b(that)h(we')l(v)o(e)e(got)h(some)g
(idea)h(of)f(what)g(Prolog)g(does,)h(it')-5 b(s)37 b(time)g(to)f(go)g
(back)357 3207 y(to)j(the)h(be)o(ginning)c(and)j(w)o(ork)g(through)e
(the)j(details)f(more)g(carefully)-5 b(.)43 b(Let')-5
b(s)40 b(start)357 3307 y(by)c(asking)g(a)h(v)o(ery)e(basic)i
(question:)43 b(we')l(v)o(e)35 b(seen)i(all)g(kinds)f(of)g(e)o
(xpressions)g(\(for)357 3406 y(e)o(xample)42 b Fs(jody)n
Fw(,)i Fs(playsAirGuitar\(mi)o(a\))-7 b Fw(,)45 b(and)d
Fs(X)p Fw(\))h(in)h(our)e(Prolog)h(programs,)357 3506
y(b)n(ut)f(these)g(ha)n(v)o(e)f(just)i(been)e(e)o(xamples.)48
b(It')-5 b(s)43 b(time)f(for)f(precision:)48 b(e)o(xactly)41
b(what)357 3605 y(are)g(f)o(acts,)g(rules,)f(and)h(queries)f(b)n(uilt)h
(out)g(of?)451 3709 y(The)53 b(answer)f(is)i(terms,)h(and)e(there)f
(are)h(four)e(kinds)i(of)f(term)h(in)g(Prolog:)357 3809
y(atoms,)38 b(numbers,)f(v)n(ariables,)g(and)h(comple)o(x)e(terms)i
(\(or)g(structures\).)43 b(Atoms)38 b(and)357 3909 y(numbers)i(are)h
(lumped)f(together)g(under)g(the)i(heading)d(constants,)i(and)g
(constants)357 4008 y(and)f(v)n(ariables)g(together)g(mak)o(e)g(up)h
(the)g(simple)g(terms)g(of)f(Prolog.)451 4112 y(Let')-5
b(s)47 b(tak)o(e)g(a)g(closer)f(look.)62 b(T)-7 b(o)47
b(mak)o(e)f(things)g(crystal)h(clear)m(,)g(let')-5 b(s)47
b(\002rst)h(be)357 4212 y(precise)39 b(about)f(the)h(basic)h
(characters)e(\(that)h(is,)i(symbols\))d(at)i(our)e(disposal.)45
b(The)357 4311 y Ft(upper)n(-case)36 b(letter)o(s)i Fw(are)f
Fs(A)o Fw(,)i Fs(B)o Fw(,.)12 b(.)g(.)g(,)p Fs(Z)p Fw(;)39
b(the)e Ft(lower)n(-case)g(letter)o(s)i Fw(are)e Fs(a)o
Fw(,)h Fs(b)p Fw(,.)12 b(.)g(.)g(,)p Fs(z)p Fw(;)39 b(the)357
4411 y Ft(digits)49 b Fw(are)g Fs(0)p Fw(,)i Fs(1)p Fw(,)g
Fs(2)p Fw(,.)12 b(.)g(.)g(,)p Fs(9)p Fw(.)71 b(In)49
b(addition)e(we)j(ha)n(v)o(e)f(the)g Fs(_)g Fw(symbol,)h(which)f(is)357
4511 y(called)40 b(underscore,)e(and)i(some)g Ft(special)h(c)o(har)o
(acter)o(s)p Fw(,)e(which)h(include)g(characters)357
4610 y(such)53 b(as)h Fs(+)o Fw(,)j Fs(-)p Fw(,)g Fs(*)o
Fw(,)g Fs(/)p Fw(,)f Fs(<)p Fw(,)h Fs(>)o Fw(,)g Fs(=)p
Fw(,)f Fs(:)p Fw(,)h Fs(.)o Fw(,)g Fs(&)p Fw(,)g Fs(~)o
Fw(.)84 b(The)53 b(blank)f Ft(space)h Fw(is)h(also)357
4710 y(a)c(character)m(,)h(b)n(ut)f(a)g(rather)g(unusual)e(one,)k
(being)d(in)m(visible.)72 b(A)51 b(string)f(is)h(an)357
4809 y(unbrok)o(en)38 b(sequence)i(of)g(characters.)357
4974 y Fv(Atoms)357 5102 y Fw(An)h(atom)f(is)i(either:)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 12 24
TeXDict begin 12 23 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(12)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 909 1051 a(1.)p 0 TeXcolorgray
41 w(A)52 b(string)e(of)h(characters)f(made)h(up)f(of)h(upper)n(-case)e
(letters,)54 b(lo)n(wer)n(-case)1013 1151 y(letters,)33
b(digits,)f(and)e(the)h(underscore)d(character)m(,)j(that)g(be)o(gins)e
(with)i(a)g(lo)n(wer)n(-)1013 1250 y(case)39 b(letter)-5
b(.)46 b(Here)38 b(are)h(some)f(e)o(xamples:)44 b Fs(butch)n
Fw(,)39 b Fs(big_kahuna_burger)-7 b Fw(,)1013 1350 y
Fs(listens2Music)36 b Fw(and)41 b Fs(playsAirGuitar)-6
b Fw(.)p 0 TeXcolorgray 909 1510 a(2.)p 0 TeXcolorgray
41 w(An)62 b(arbitrary)f(sequence)g(of)h(characters)f(enclosed)h(in)g
(single)g(quotes.)1013 1609 y(F)o(or)87 b(e)o(xample)f(')p
Fs(Vincent)m Fw(',)99 b(')p Fs(The)40 b(Gimp)o Fw(',)99
b(')p Fs(Five_Dollar_Sha)o(ke)-6 b Fw(',)1013 1709 y(')p
Fs(&^\045&#@$)38 b(&*)p Fw(',)51 b(and)e(')42 b('.)72
b(The)49 b(sequence)g(of)g(characters)g(between)f(the)1013
1809 y(single)d(quotes)f(is)h(called)f(the)h(atom)f(name.)56
b(Note)45 b(that)g(we)g(are)f(allo)n(wed)1013 1908 y(to)g(use)f(spaces)
h(in)g(such)f(atoms;)i(in)f(f)o(act,)g(a)g(common)d(reason)i(for)g
(using)1013 2008 y(single)e(quotes)f(is)i(so)f(we)h(can)e(do)h
(precisely)f(that.)p 0 TeXcolorgray 909 2168 a(3.)p 0
TeXcolorgray 41 w(A)48 b(string)e(of)h(special)g(characters.)63
b(Here)47 b(are)g(some)g(e)o(xamples:)57 b Fs(@=)47 b
Fw(and)1013 2267 y Fs(====>)f Fw(and)h Fs(;)g Fw(and)g
Fs(:-)g Fw(are)h(all)g(atoms.)65 b(As)48 b(we)g(ha)n(v)o(e)f(seen,)i
(some)e(of)1013 2367 y(these)41 b(atoms,)g(such)f(as)i
Fs(;)f Fw(and)g Fs(:-)f Fw(ha)n(v)o(e)h(a)g(pre-de\002ned)e(meaning.)
806 2534 y Fv(Numbers)806 2656 y Fw(Real)i(numbers)e(aren')o(t)g
(particularly)g(important)g(in)h(typical)g(Prolog)g(applications.)806
2756 y(So)65 b(although)f(most)h(Prolog)f(implementations)g(do)h
(support)f(\003oating)g(point)806 2855 y(numbers)c(or)i(\003oats)g
(\(that)g(is,)68 b(representations)61 b(of)g(real)h(numbers)f(such)h
(as)806 2955 y(1657.3087)37 b(or)k Fj(\031)s Fw(\))g(we)g(say)g(little)
h(about)e(them)h(in)g(this)g(book.)900 3055 y(But)48
b(inte)o(gers)f(\(that)g(is:)60 b(.)12 b(.)g(.)g(,-2,)49
b(-1,)f(0,)h(1,)g(2,)g(3,.)12 b(.)g(.)g(\))66 b(are)47
b(useful)g(for)g(such)806 3154 y(tasks)59 b(as)g(counting)d(the)j
(elements)f(of)g(a)h(list,)64 b(and)58 b(we')o(ll)h(discuss)f(ho)n(w)g
(to)806 3254 y(manipulate)41 b(them)j(in)f(Chapter)g(5.)53
b(Their)43 b(Prolog)g(syntax)f(is)j(the)e(ob)o(vious)f(one:)806
3354 y Fs(23)o Fw(,)f Fs(1001)n Fw(,)h Fs(0)o Fw(,)f
Fs(-365)o Fw(,)g(and)f(so)i(on.)806 3508 y Fv(V)-8 b(ariables)806
3630 y Fw(A)56 b(v)n(ariable)g(is)h(a)g(string)f(of)g(upper)n(-case)f
(letters,)60 b(lo)n(wer)n(-case)c(letters,)k(digits)806
3730 y(and)44 b(underscore)e(characters)i(that)h(starts)h
Ft(either)h Fw(with)e(an)g(upper)n(-case)e(letter)i Ft(or)806
3829 y Fw(with)e(an)f(underscore.)49 b(F)o(or)43 b(e)o(xample,)f
Fs(X)o Fw(,)i Fs(Y)o Fw(,)g Fs(Variable)m Fw(,)f Fs(_tag)o
Fw(,)g Fs(X_526)n Fw(,)h Fs(List)n Fw(,)806 3929 y Fs(List24)m
Fw(,)d Fs(_head)n Fw(,)g Fs(Tail)o Fw(,)g Fs(_input)e
Fw(and)i Fs(Output)e Fw(are)h(all)i(Prolog)e(v)n(ariables.)900
4028 y(The)c(v)n(ariable)f Fs(_)i Fw(\(that)f(is,)h(a)g(single)f
(underscore)e(character\))h(is)i(rather)f(special.)806
4128 y(It')-5 b(s)41 b(called)g(the)g Ft(anonymous)e(variable)p
Fw(,)h(and)g(we)h(discuss)h(it)f(in)g(Chapter)g(4.)806
4282 y Fv(Complex)f(terms)806 4404 y Fw(Constants,)g(numbers,)e(and)i
(v)n(ariables)g(are)g(the)g(b)n(uilding)f(blocks:)45
b(no)n(w)40 b(we)g(need)806 4504 y(to)45 b(kno)n(w)g(ho)n(w)g(to)h
(\002t)g(them)f(together)g(to)g(mak)o(e)h(comple)o(x)d(terms.)60
b(Recall)46 b(that)806 4604 y(comple)o(x)39 b(terms)i(are)g(often)f
(called)g(structures.)900 4703 y(Comple)o(x)g(terms)i(are)g(b)n(uild)f
(out)h(of)f(a)h(functor)e(follo)n(wed)h(by)g(a)h(sequence)f(of)806
4803 y(ar)o(guments.)49 b(The)43 b(ar)o(guments)e(are)i(put)g(in)g
(ordinary)e(parentheses,)h(separated)g(by)806 4902 y(commas,)k(and)f
(placed)g(after)h(the)g(functor)-5 b(.)59 b(Note)46 b(that)g(the)g
(functor)e(has)i(to)h(be)806 5002 y(directly)37 b(follo)n(wed)g(by)h
(the)g(parenthesis;)h(you)e(can')o(t)g(ha)n(v)o(e)h(a)h(space)f
(between)f(the)806 5102 y(functor)46 b(and)h(the)h(parenthesis)e
(enclosing)h(the)h(ar)o(guments.)64 b(The)47 b(functor)f
Ft(must)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 13 25
TeXDict begin 13 24 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1192 b(13)p 0 TeXcolorgray 357 1051 a(be)39
b(an)h(atom.)45 b(That)39 b(is,)i(v)n(ariables)e Ft(cannot)h
Fw(be)f(used)h(as)g(functors.)k(On)c(the)g(other)357
1151 y(hand,)f(ar)o(guments)g(can)i(be)g(an)o(y)f(kind)g(of)h(term.)451
1253 y(No)n(w)-5 b(,)85 b(we')l(v)o(e)75 b(already)g(seen)h(lots)h(of)f
(e)o(xamples)f(of)h(comple)o(x)f(terms)357 1352 y(when)j(we)i(look)o
(ed)e(at)i(the)f(kno)n(wledge)e(bases)j(KB1)g(to)f(KB5.)161
b(F)o(or)357 1452 y(e)o(xample,)61 b Fs(playsAirGuitar\(j)o(ody)o(\))53
b Fw(is)59 b(a)g(comple)o(x)e(term:)81 b(its)60 b(functor)d(is)357
1552 y Fs(playsAirGuitar)64 b Fw(and)69 b(its)i(ar)o(gument)c(is)k
Fs(jody)n Fw(.)133 b(Other)69 b(e)o(xamples)g(are)357
1651 y Fs(loves\(vincent,m)o(ia\))47 b Fw(and,)57 b(to)c(gi)n(v)o(e)g
(an)h(e)o(xample)e(containing)g(a)i(v)n(ariable,)357
1751 y Fs(jealous\(marsell)o(us,)o(W\))-7 b Fw(.)451
1853 y(But)62 b(the)f(de\002nition)e(allo)n(ws)j(for)e(more)g(comple)o
(x)f(terms)i(than)g(this.)106 b(In)357 1953 y(f)o(act,)48
b(it)f(allo)n(ws)g(us)h(to)f(k)o(eep)f(nesting)g(comple)o(x)f(terms)i
(inside)g(comple)o(x)e(terms)357 2053 y(inde\002nitely)39
b(\(that)i(is,)h(it)f(is)h(allo)n(ws)g(recursi)n(v)o(e)d(structure\).)
44 b(F)o(or)d(e)o(xample)522 2227 y Fs(hide\(X,father\(fa)o(the)o(r\()o
(fat)o(he)o(r\()o(but)o(ch)o(\)\)\))o(\))357 2401 y Fw(is)65
b(a)g(perfectly)f(acceptable)f(comple)o(x)g(term.)116
b(Its)66 b(functor)c(is)k Fs(hide)n Fw(,)71 b(and)357
2501 y(it)81 b(has)f(tw)o(o)g(ar)o(guments:)123 b(the)80
b(v)n(ariable)f Fs(X)p Fw(,)90 b(and)79 b(the)i(comple)o(x)d(term)357
2600 y Fs(father\(father\(f)o(ath)o(er)o(\(bu)o(tc)o(h\)\))o(\))-6
b Fw(.)59 b(This)45 b(comple)o(x)e(term)i(has)h Fs(father)d
Fw(as)357 2700 y(its)36 b(functor)m(,)f(and)g(another)f(comple)o(x)g
(term,)i(namely)f Fs(father\(father\(bu)o(tch)o(\)\))-7
b Fw(,)357 2799 y(as)47 b(its)h(sole)f(ar)o(gument.)60
b(And)46 b(the)h(ar)o(gument)d(of)i(this)h(comple)o(x)e(term,)j(namely)
357 2899 y Fs(father\(butch\))-6 b Fw(,)42 b(is)g(also)f(comple)o(x.)j
(But)e(then)e(the)h(nesting)g(bottoms)f(out,)g(for)357
2999 y(the)h(ar)o(gument)d(here)j(is)h(the)e(constant)h
Fs(butch)n Fw(.)451 3101 y(As)k(we)f(shall)g(see,)h(such)e(nested)h
(\(or)f(recursi)n(v)o(ely)f(structured\))g(terms)h(enable)357
3201 y(us)k(to)f(represent)g(man)o(y)f(problems)g(naturally)-5
b(.)61 b(In)46 b(f)o(act)h(the)f(interplay)f(between)357
3300 y(recursi)n(v)o(e)h(term)i(structure)f(and)h(v)n(ariable)f
(uni\002cation)g(is)i(the)f(source)g(of)g(much)357 3400
y(of)40 b(Prolog')-5 b(s)41 b(po)n(wer)-5 b(.)451 3502
y(The)60 b(number)e(of)i(ar)o(guments)e(that)i(a)g(comple)o(x)f(term)h
(has)g(is)h(called)f(its)357 3602 y(arity)-5 b(.)86 b(F)o(or)54
b(e)o(xample,)j Fs(woman\(mia\))51 b Fw(is)56 b(a)f(comple)o(x)e(term)h
(of)h(arity)f(1,)k(and)357 3702 y Fs(loves\(vincent,m)o(ia\))35
b Fw(is)42 b(a)f(comple)o(x)e(term)i(of)g(arity)f(2.)451
3804 y(Arity)j(is)h(important)e(to)h(Prolog.)51 b(Prolog)42
b(w)o(ould)h(be)g(quite)g(happ)o(y)f(for)g(us)i(to)357
3904 y(de\002ne)39 b(tw)o(o)i(predicates)e(with)i(the)f(same)h(functor)
d(b)n(ut)j(with)f(a)h(dif)n(ferent)d(number)357 4003
y(of)51 b(ar)o(guments.)77 b(F)o(or)52 b(e)o(xample,)h(we)f(are)g(free)
g(to)g(de\002ne)f(a)i(kno)n(wledge)d(base)357 4103 y(that)g(de\002nes)f
(a)h(tw)o(o-place)f(predicate)f Fs(love)h Fw(\(this)h(might)f(contain)g
(such)g(f)o(acts)357 4202 y(as)d Fs(love\(vincent,mia\))-7
b Fw(\),)47 b(and)e(also)h(a)g(three-place)e Fs(love)h
Fw(predicate)g(\(which)357 4302 y(might)38 b(contain)f(such)i(f)o(acts)
g(as)g Fs(love\(vincent,mar)o(se)o(llu)o(s,)o(mia)o(\))-6
b Fw(\).)45 b(Ho)n(we)n(v)o(er)m(,)357 4402 y(if)36 b(we)g(did)f(this,)
i(Prolog)e(w)o(ould)g(treat)g(the)h(tw)o(o-place)f Fs(love)g
Fw(and)g(the)g(three-place)357 4501 y Fs(love)43 b Fw(as)i(dif)n
(ferent)d(predicates.)55 b(Later)44 b(in)g(the)g(book)f(\(for)g(e)o
(xample,)h(when)f(we)357 4601 y(introduce)d(accumulators)h(in)i
(Chapter)f(5\))h(we)g(shall)g(see)g(that)g(it)g(can)g(be)f(useful)357
4701 y(to)f(de\002ne)f(tw)o(o)h(predicates)f(with)i(the)f(same)g
(functor)e(b)n(ut)i(dif)n(ferent)e(arity)-5 b(.)451 4803
y(When)50 b(we)g(need)e(to)i(talk)g(about)e(predicates)h(and)g(ho)n(w)g
(we)h(intend)f(to)g(use)357 4902 y(them)57 b(\(for)f(e)o(xample,)61
b(in)c(documentation\))e(it)j(is)g(usual)g(to)g(use)f(a)h(suf)n(\002x)g
Fs(/)357 5002 y Fw(follo)n(wed)35 b(by)g(a)i(number)d(to)j(indicate)f
(the)g(predicate')-5 b(s)35 b(arity)-5 b(.)44 b(T)-7
b(o)36 b(return)f(to)i(KB2,)357 5102 y(instead)j(of)h(saying)f(that)h
(it)h(de\002nes)f(predicates)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 14 26
TeXDict begin 14 25 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(14)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(listens2Music)971 1151 y(happy)971
1250 y(playsAirGuitar)806 1419 y Fw(we)h(should)f(really)g(say)h(that)h
(it)f(de\002nes)g(predicates)971 1588 y Fs(listens2Music/1)971
1687 y(happy/1)971 1787 y(playsAirGuitar/1)806 1956 y
Fw(And)47 b(Prolog)g(can')o(t)g(get)h(confused)e(about)h(a)i(kno)n
(wledge)c(base)j(containing)e(the)806 2056 y(tw)o(o)37
b(dif)n(ferent)f(lo)o(v)o(e)h(predicates,)g(for)f(it)j(re)o(gards)c
(the)j Fs(love/2)d Fw(predicate)i(and)f(the)806 2155
y Fs(love/3)j Fw(predicate)g(as)j(distinct.)806 2349
y Fk(3)99 b(Exer)n(cises)806 2513 y Fv(Exer)o(cise)58
b(1.1.)147 b Fw(Which)58 b(of)g(the)g(follo)n(wing)f(sequences)g(of)h
(characters)g(are)p 0 TeXcolorgray 357 2420 118 4 v 357
2538 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
361 2538 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
-3020 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
471 2538 4 118 v 357 2541 118 4 v 0 TeXcolorgray 806
2613 a Fw(atoms,)40 b(which)h(are)f(v)n(ariables,)g(and)h(which)f(are)h
(neither?)p 0 TeXcolorgray 909 2799 a(1.)p 0 TeXcolorgray
41 w Fs(vINCENT)p 0 TeXcolorgray 909 2969 a Fw(2.)p 0
TeXcolorgray 41 w Fs(Footmassage)p 0 TeXcolorgray 909
3139 a Fw(3.)p 0 TeXcolorgray 41 w Fs(variable23)p 0
TeXcolorgray 909 3308 a Fw(4.)p 0 TeXcolorgray 41 w Fs(Variable2000)p
0 TeXcolorgray 909 3478 a Fw(5.)p 0 TeXcolorgray 41 w
Fs(big_kahuna_burge)o(r)p 0 TeXcolorgray 909 3648 a Fw(6.)p
0 TeXcolorgray 41 w Fs('big)f(kahuna)f(burger')p 0 TeXcolorgray
909 3818 a Fw(7.)p 0 TeXcolorgray 41 w Fs(big)h(kahuna)f(burger)p
0 TeXcolorgray 909 3987 a Fw(8.)p 0 TeXcolorgray 41 w
Fs('Jules')p 0 TeXcolorgray 909 4157 a Fw(9.)p 0 TeXcolorgray
41 w Fs(_Jules)p 0 TeXcolorgray 868 4327 a Fw(10.)p 0
TeXcolorgray 40 w Fs('_Jules')806 4546 y Fv(Exer)o(cise)58
b(1.2.)147 b Fw(Which)58 b(of)g(the)g(follo)n(wing)f(sequences)g(of)h
(characters)g(are)p 0 TeXcolorgray 357 4453 V 357 4571
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
361 4571 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
-3020 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
471 4571 4 118 v 357 4574 118 4 v 0 TeXcolorgray 806
4646 a Fw(atoms,)38 b(which)g(are)h(v)n(ariables,)f(which)g(are)g
(comple)o(x)f(terms,)i(and)f(which)g(are)h(not)806 4746
y(terms)h(at)i(all?)k(Gi)n(v)o(e)41 b(the)g(functor)e(and)i(arity)f(of)
h(each)f(comple)o(x)g(term.)p 0 TeXcolorgray 909 4932
a(1.)p 0 TeXcolorgray 41 w Fs(loves\(Vincent,mi)o(a\))p
0 TeXcolorgray 909 5102 a Fw(2.)p 0 TeXcolorgray 41 w
Fs('loves\(Vincent,m)o(ia\))o(')p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 15 27
TeXDict begin 15 26 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1192 b(15)p 0 TeXcolorgray 0 TeXcolorgray 460
1051 a(3.)p 0 TeXcolorgray 41 w Fs(Butch\(boxer\))p 0
TeXcolorgray 460 1226 a Fw(4.)p 0 TeXcolorgray 41 w Fs(boxer\(Butch\))p
0 TeXcolorgray 460 1400 a Fw(5.)p 0 TeXcolorgray 41 w
Fs(and\(big\(burger\),k)o(ah)o(una)o(\(b)o(ur)o(ger)o(\)\))p
0 TeXcolorgray 460 1575 a Fw(6.)p 0 TeXcolorgray 41 w
Fs(and\(big\(X\),kahuna)o(\(X)o(\)\))p 0 TeXcolorgray
460 1750 a Fw(7.)p 0 TeXcolorgray 41 w Fs(_and\(big\(X\),kahun)o(a\()o
(X\)\))p 0 TeXcolorgray 460 1925 a Fw(8.)p 0 TeXcolorgray
41 w Fs(\(Butch)39 b(kills)h(Vincent\))p 0 TeXcolorgray
460 2100 a Fw(9.)p 0 TeXcolorgray 41 w Fs(kills\(Butch)d(Vincent\))p
0 TeXcolorgray 419 2274 a Fw(10.)p 0 TeXcolorgray 40
w Fs(kills\(Butch,Vince)o(nt)357 2499 y Fv(Exer)o(cise)42
b(1.3.)100 b Fw(Ho)n(w)42 b(man)o(y)f(f)o(acts,)i(rules,)g(clauses,)g
(and)f(predicates)g(are)g(there)p 0 TeXcolorgray 3286
2406 118 4 v 3286 2524 4 118 v 0 0 0 0.05 TeXcolorcmyk
0 0 0 0.05 TeXcolorcmyk 3290 2524 112 118 v 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray 358 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 3401 2524 4 118 v 3286 2527 118 4 v 0
TeXcolorgray 357 2599 a Fw(in)g(the)g(follo)n(wing)f(kno)n(wledge)f
(base?)49 b(What)43 b(are)f(the)g(heads)g(of)g(the)g(rules,)g(and)357
2698 y(what)f(are)f(the)h(goals)g(the)o(y)f(contain?)522
2890 y Fs(woman\(vincent\).)522 2989 y(woman\(mia\).)522
3089 y(man\(jules\).)522 3189 y(person\(X\):-)d(man\(X\);)i
(woman\(X\).)522 3288 y(loves\(X,Y\):-)e(father\(X,Y\).)522
3388 y(father\(Y,Z\):-)f(man\(Y\),)j(son\(Z,Y\).)522
3487 y(father\(Y,Z\):-)d(man\(Y\),)j(daughter\(Z,Y\).)357
3712 y Fv(Exer)o(cise)h(1.4.)95 b Fw(Represent)41 b(the)g(follo)n(wing)
e(in)i(Prolog:)p 0 TeXcolorgray 3286 3619 V 3286 3737
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
3290 3737 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
1166 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
3401 3737 4 118 v 3286 3740 118 4 v 0 TeXcolorgray 0
TeXcolorgray 460 3904 a Fw(1.)p 0 TeXcolorgray 41 w(Butch)g(is)h(a)f
(killer)-5 b(.)p 0 TeXcolorgray 460 4078 a(2.)p 0 TeXcolorgray
41 w(Mia)42 b(and)e(Marsellus)h(are)g(married.)p 0 TeXcolorgray
460 4253 a(3.)p 0 TeXcolorgray 41 w(Zed)g(is)h(dead.)p
0 TeXcolorgray 460 4428 a(4.)p 0 TeXcolorgray 41 w(Marsellus)f(kills)h
(e)n(v)o(eryone)c(who)j(gi)n(v)o(es)f(Mia)h(a)h(footmassage.)p
0 TeXcolorgray 460 4603 a(5.)p 0 TeXcolorgray 41 w(Mia)g(lo)o(v)o(es)e
(e)n(v)o(eryone)e(who)j(is)h(a)f(good)f(dancer)-5 b(.)p
0 TeXcolorgray 460 4777 a(6.)p 0 TeXcolorgray 41 w(Jules)42
b(eats)f(an)o(ything)e(that)i(is)h(nutritious)e(or)h(tasty)-5
b(.)357 5002 y Fv(Exer)o(cise)46 b(1.5.)111 b Fw(Suppose)45
b(we)i(are)f(w)o(orking)f(with)i(the)f(follo)n(wing)f(kno)n(wledge)p
0 TeXcolorgray 3286 4909 V 3286 5027 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 3290 5027 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 356 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401 5027 4 118
v 3286 5030 118 4 v 0 TeXcolorgray 357 5102 a Fw(base:)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 16 28
TeXDict begin 16 27 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(16)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(wizard\(ron\).)971 1151
y(hasWand\(harry\).)971 1250 y(quidditchPlayer\()o(ha)o(rry)o(\).)971
1350 y(wizard\(X\):-)d(hasBroom\(X\),)f(hasWand\(X\).)971
1449 y(hasBroom\(X\):-)g(quidditchPlayer\()o(X\).)900
1647 y Fw(Ho)n(w)41 b(does)g(Prolog)e(respond)h(to)h(the)g(follo)n
(wing)e(queries?)p 0 TeXcolorgray 909 1824 a(1.)p 0 TeXcolorgray
41 w Fs(wizard\(ron\).)p 0 TeXcolorgray 909 2006 a Fw(2.)p
0 TeXcolorgray 41 w Fs(witch\(ron\).)p 0 TeXcolorgray
909 2187 a Fw(3.)p 0 TeXcolorgray 41 w Fs(wizard\(hermione\))o(.)p
0 TeXcolorgray 909 2368 a Fw(4.)p 0 TeXcolorgray 41 w
Fs(witch\(hermione\).)p 0 TeXcolorgray 909 2549 a Fw(5.)p
0 TeXcolorgray 41 w Fs(wizard\(harry\).)p 0 TeXcolorgray
909 2730 a Fw(6.)p 0 TeXcolorgray 41 w Fs(wizard\(Y\).)p
0 TeXcolorgray 909 2911 a Fw(7.)p 0 TeXcolorgray 41 w
Fs(witch\(Y\).)806 3188 y Fk(4)99 b(Practical)41 b(Session)806
3323 y Fw(Don')o(t)d(be)i(fooled)e(by)i(the)f(f)o(act)h(that)g(the)g
(description)e(of)i(the)g(practical)f(sessions)806 3422
y(is)f(shorter)e(than)h(the)h(te)o(xt)f(you)g(ha)n(v)o(e)f(just)i
(read;)h(the)e(practical)g(part)g(is)h(de\002nitely)806
3522 y(the)g(most)g(important.)43 b(Y)-8 b(es,)39 b(you)e(need)g(to)i
(read)e(the)h(te)o(xt)g(and)g(do)f(the)h(e)o(x)o(ercises,)806
3622 y(b)n(ut)i(that')-5 b(s)42 b(not)e(enough)f(to)i(become)e(a)i
(Prolog)f(programmer)-5 b(.)43 b(T)-7 b(o)41 b(really)g(master)806
3721 y(the)c(language)f(you)h(need)g(to)g(sit)i(do)n(wn)e(in)g(front)g
(of)g(a)h(computer)e(and)h(play)g(with)806 3821 y(Prolog)i(\227)j(a)f
(lot!)900 3924 y(The)k(goal)f(of)g(the)h(\002rst)h(practical)e(session)
h(is)h(for)e(you)g(to)h(become)f(f)o(amiliar)806 4024
y(with)c(the)g(basics)g(of)f(ho)n(w)h(to)g(create)g(and)f(run)g(simple)
h(Prolog)f(programs.)k(No)n(w)-5 b(,)806 4124 y(because)35
b(there)h(are)g(man)o(y)f(dif)n(ferent)g(implementations)f(of)i
(Prolog,)g(and)g(dif)n(ferent)806 4223 y(operating)51
b(systems)j(you)f(can)h(run)f(them)g(under)m(,)i(we)f(can')o(t)e(be)i
(too)f(speci\002c)806 4323 y(here.)64 b(Rather)m(,)48
b(what)f(we')o(ll)h(do)f(is)h(describe)e(in)i(v)o(ery)e(general)g
(terms)h(what)h(is)806 4422 y(in)m(v)n(olv)o(ed)42 b(in)j(running)e
(Prolog,)h(list)i(the)f(practical)f(skills)i(you)e(need)g(to)h(master)m
(,)806 4522 y(and)40 b(suggest)g(some)h(things)g(for)f(you)g(to)h(do.)
900 4626 y(The)k(simplest)h(w)o(ay)f(to)h(run)f(a)g(Prolog)g(program)e
(is)j(as)h(follo)n(ws.)58 b(Y)-9 b(ou)45 b(ha)n(v)o(e)806
4725 y(a)50 b(\002le)g(with)h(your)d(Prolog)h(program)f(in)i(it)h
(\(for)e(e)o(xample,)h(you)f(may)h(ha)n(v)o(e)f(a)806
4825 y(\002le)g Fs(kb2.pl)e Fw(which)h(contains)g(the)h(kno)n(wledge)e
(base)i(KB2\).)69 b(Y)-9 b(ou)49 b(then)f(start)806 4924
y(Prolog.)c(Prolog)c(will)i(display)e(its)i(prompt,)d(something)h(lik)o
(e)971 5102 y Fs(?-)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 17 29
TeXDict begin 17 28 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1192 b(17)p 0 TeXcolorgray 357 1051 a(which)40
b(indicates)h(that)g(it)g(is)h(ready)e(to)h(accept)g(a)g(query)-5
b(.)451 1153 y(No)n(w)g(,)49 b(at)g(this)f(stage,)i(Prolog)d(kno)n(ws)g
(absolutely)g(nothing)f(about)h(KB2)h(\(or)357 1252 y(indeed)55
b(an)o(ything)g(else\).)94 b(T)-7 b(o)57 b(see)h(this,)j(type)56
b(in)h(the)g(command)e Fs(listing)m Fw(,)357 1352 y(follo)n(wed)39
b(by)i(a)g(full)g(stop,)g(and)f(hit)h(return.)k(That)40
b(is,)i(type)522 1524 y Fs(?-)f(listing.)357 1697 y Fw(and)f(press)h
(the)g(return)f(k)o(e)o(y)-5 b(.)451 1798 y(No)n(w)g(,)48
b(the)f(listing)g(command)e(is)j(a)f(special)g(b)n(uilt-in)g(Prolog)f
(predicate)g(that)357 1898 y(instructs)h(Prolog)f(to)h(display)g(the)g
(contents)f(of)h(the)g(current)f(kno)n(wledge)f(base.)357
1998 y(But)i(we)g(ha)n(v)o(en')o(t)e(yet)i(told)g(Prolog)e(about)h(an)o
(y)g(kno)n(wledge)f(bases,)j(so)f(it)h(will)357 2097
y(just)41 b(say)522 2270 y Fs(yes)357 2442 y Fw(This)d(is)h(a)g
(correct)e(answer:)45 b(as)39 b(yet)f(Prolog)f(kno)n(ws)h(nothing)f
(\227)h(so)h(it)g(correctly)357 2542 y(displays)f(all)i(this)f(nothing)
f(and)g(says)i Fs(yes)n Fw(.)46 b(Actually)-5 b(,)38
b(with)h(more)g(sophisticated)357 2641 y(Prolog)55 b(implementations)e
(you)i(may)h(get)g(a)g(little)h(more)e(\(for)g(e)o(xample,)j(the)357
2741 y(names)h(of)g(libraries)g(that)h(ha)n(v)o(e)e(been)h(loaded;)68
b(libraries)59 b(are)g(discussed)h(in)357 2841 y(Chapter)36
b(12\))g(b)n(ut,)h(one)f(w)o(ay)h(or)g(another)m(,)e(you)h(will)i
(recei)n(v)o(e)d(what)i(is)h(essentially)357 2940 y(an)j(\223I)g(kno)n
(w)f(nothing)f(about)h(an)o(y)g(kno)n(wledge)f(bases!\224)45
b(answer)-5 b(.)451 3042 y(So)52 b(let')-5 b(s)52 b(tell)f(Prolog)f
(about)h(KB2.)76 b(Assuming)51 b(that)g(you')l(v)o(e)e(stored)h(KB2)357
3142 y(in)e(the)g(\002le)h Fs(kb2.pl)n Fw(,)h(and)e(that)h(this)f
(\002le)h(is)h(in)e(the)g(directory)f(where)h(you')l(re)357
3241 y(running)38 b(Prolog,)i(all)i(you)e(ha)n(v)o(e)g(to)h(type)g(is)
522 3414 y Fs(?-)g([kb2].)357 3586 y Fw(This)d(tells)i(Prolog)d(to)i
(consult)f(the)g(\002le)h Fs(kb2.pl)n Fw(,)g(and)f(load)g(the)h
(contents)e(as)j(its)357 3686 y(ne)n(w)45 b(kno)n(wledge)e(base.)59
b(Assuming)44 b(that)h Fs(kb2.pl)f Fw(contains)g(no)h(typos,)h(Prolog)
357 3785 y(will)g(read)f(it)i(in,)g(maybe)e(print)g(out)g(a)h(message)g
(saying)f(that)h(it)g(is)h(consulting)357 3885 y(this)41
b(\002le,)h(and)e(then)g(answer:)522 4057 y Fs(yes)451
4230 y Fw(Incidentally)-5 b(,)47 b(it)h(is)g(common)e(to)h(store)h
(Prolog)e(code)h(in)h(\002les)g(with)g(a)f Fs(.pl)357
4329 y Fw(suf)n(\002x.)j(It')-5 b(s)43 b(an)f(indication)f(of)h(what)h
(the)f(\002le)h(contains)f(\(namely)f(Prolog)h(code\))357
4429 y(and)i(with)i(some)f(Prolog)f(implementations)f(you)i(don')o(t)e
(actually)i(ha)n(v)o(e)g(to)g(type)357 4529 y(in)54 b(the)h
Fs(.pl)f Fw(suf)n(\002x)g(when)g(you)g(consult)g(a)h(\002le.)87
b(Nice)55 b(\227)g(b)n(ut)g(there)f(is)h(a)357 4628 y(dra)o(wback.)68
b(Files)50 b(containing)d(Perl)j(scripts)f(usually)g(ha)n(v)o(e)f(a)i
Fs(.pl)f Fw(suf)n(\002x)f(too,)357 4728 y(and)d(no)n(w)o(adays)f(there)
h(are)h(a)g(lot)g(of)f(Perl)h(scripts)g(in)g(use,)h(so)f(this)g(can)g
(cause)357 4828 y(confusion.)d(C'est)f(la)g(vie.)451
4929 y(If)f(the)g(abo)o(v)o(e)e(doesn')o(t)h(w)o(ork,)g(that)h(is,)g
(if)h(typing)522 5102 y Fs(?-)f([kb2].)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 18 30
TeXDict begin 18 29 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(18)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(produces)h(an)h(error)g(message)h(saying)f
(that)h(the)f(\002le)i Fs(kb2)e Fw(does)g(not)h(e)o(xist,)g(then)806
1151 y(you)c(probably)f(ha)n(v)o(en')o(t)h(started)h(Prolog)f(from)g
(the)i(directory)d(where)i Fs(kb2.pl)f Fw(is)806 1250
y(stored.)52 b(In)43 b(that)g(case,)h(you)e(can)h(either)g(stop)g
(Prolog)g(\(by)f(typing)g Fs(halt.)g Fw(after)806 1350
y(the)i(prompt\),)g(change)g(to)h(the)f(directory)g(where)g
Fs(kb2.pl)f Fw(is)j(stored,)f(and)f(start)806 1449 y(Prolog)38
b(again.)44 b(Or)c(you)f(can)h(tell)g(Prolog)f(e)o(xactly)g(where)g(to)
h(look)f(for)g Fs(kb2.pl)m Fw(.)806 1549 y(T)-7 b(o)37
b(do)f(this,)i(instead)f(of)f(writing)g(only)g Fs(kb2)h
Fw(between)f(the)h(square)f(brack)o(ets,)g(you)806 1649
y(gi)n(v)o(e)j(Prolog)h(the)h(whole)f(path)h(enclosed)e(in)i(single)g
(quotes.)k(F)o(or)40 b(e)o(xample,)f(you)806 1748 y(type)h(something)f
(lik)o(e)971 1934 y Fs(?-)i(['home/kris/Pro)o(log)o(/k)o(b2)o(.pl)o('])
o(.)900 2119 y Fw(or)971 2304 y Fs(?-)g(['c:/Documents)35
b(and)41 b(Settings/Kris/P)o(rol)o(og)o(/k)o(b2.)o(pl)o('].)900
2489 y Fw(Ok,)46 b(so)f(Prolog)f(should)g(no)n(w)h(kno)n(w)f(about)g
(all)h(the)g(KB2)h(predicates.)57 b(And)806 2589 y(we)41
b(can)g(check)f(whether)g(it)h(does)g(by)g(using)f(the)h
Fs(listing)d Fw(command)h(again:)971 2774 y Fs(?-)i(listing.)806
2959 y Fw(If)50 b(you)f(do)h(this,)i(Prolog)d(will)i(list)h
(\(something)c(lik)o(e\))i(the)g(follo)n(wing)f(on)g(the)806
3059 y(screen:)971 3244 y Fs(listens2Music\(mi)o(a\))o(.)971
3344 y(happy\(yolanda\).)971 3444 y(playsAirGuitar\(m)o(ia)o(\):-)1095
3543 y(listens2Music\(mia)o(\).)971 3643 y(playsAirGuitar\(y)o(ol)o
(and)o(a\))o(:-)1095 3743 y(listens2Music\(yol)o(and)o(a\))o(.)971
3842 y(listens2Music\(yo)o(la)o(nda)o(\):)o(-)1095 3942
y(happy\(yolanda\).)971 4141 y(yes)806 4326 y Fw(That)40
b(is,)h(it)g(will)h(list)f(the)g(f)o(acts)g(and)f(rules)g(that)h(mak)o
(e)f(up)g(KB2,)h(and)f(then)g(say)806 4426 y Fs(yes)n
Fw(.)84 b(Once)53 b(again,)i(you)d(may)h(get)g(a)h(little)g(more)f
(than)g(this,)j(such)d(as)h(the)806 4526 y(locations)40
b(of)g(v)n(arious)g(libraries)h(that)g(ha)n(v)o(e)f(been)h(loaded.)900
4632 y(Incidentally)-5 b(,)36 b Fs(listing)f Fw(can)i(be)g(used)g(in)h
(other)e(w)o(ays.)45 b(F)o(or)37 b(e)o(xample,)g(typing)971
4817 y Fs(?-)k(listing\(playsAi)o(rGu)o(it)o(ar)o(\).)806
5002 y Fw(simply)69 b(lists)h(all)h(the)e(information)e(in)j(the)f(kno)
n(wledge)e(base)j(about)e(the)806 5102 y Fs(playsAirGuitar)35
b Fw(predicate.)45 b(So)c(in)g(this)h(case)f(Prolog)f(will)i(display)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 19 31
TeXDict begin 19 30 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(1:)46 b(F)o(acts,)41 b(Rules,)h(and)e
(Queries)1192 b(19)p 0 TeXcolorgray 522 1051 a Fs(playsAirGuitar\(m)o
(ia\))o(:-)647 1151 y(listens2Music\(m)o(ia\))o(.)522
1250 y(playsAirGuitar\(y)o(ola)o(nd)o(a\):)o(-)647 1350
y(listens2Music\(y)o(ola)o(nd)o(a\))o(.)522 1549 y(yes)451
1719 y Fw(W)-7 b(ell)59 b(\227)e(no)n(w)g(you')l(re)e(ready)h(to)i(go.)
93 b(KB2)58 b(is)g(loaded)e(and)h(Prolog)f(is)357 1819
y(running,)h(so)f(you)e(can)i(\(and)e(should!\))89 b(start)56
b(making)e(e)o(xactly)h(the)g(sort)h(of)357 1918 y(inquiries)40
b(we)h(discussed)g(in)g(the)g(te)o(xt.)451 2019 y(But)g(let')-5
b(s)40 b(back)f(up)h(a)g(little,)h(and)e(summarise)g(a)h(fe)n(w)g(of)g
(the)g(practical)f(skills)357 2119 y(you)h(will)h(need)g(to)g(master)g
(to)g(get)g(this)g(f)o(ar:)p 0 TeXcolorgray 481 2307
a Fh(\017)p 0 TeXcolorgray 41 w Fw(Y)-9 b(ou)35 b(will)h(need)e(to)h
(kno)n(w)f(some)h(basic)g(f)o(acts)h(about)e(the)h(operating)e(system)
564 2406 y(you)48 b(are)g(using,)i(such)e(as)i(the)e(directory)f
(structure)h(it)h(uses.)69 b(After)48 b(all,)564 2506
y(you)42 b(will)i(need)e(to)i(kno)n(w)e(ho)n(w)g(to)h(sa)n(v)o(e)g(the)
g(\002les)h(containing)e(programs)564 2606 y(where)f(you)f(w)o(ant)h
(them.)p 0 TeXcolorgray 481 2777 a Fh(\017)p 0 TeXcolorgray
41 w Fw(Y)-9 b(ou)48 b(will)h(need)f(to)h(kno)n(w)e(ho)n(w)h(to)h(use)g
(some)f(sort)h(of)f(te)o(xt)g(editor)m(,)i(in)564 2876
y(order)38 b(to)h(write)g(and)g(modify)e(programs.)43
b(Some)c(Prolog)f(implementations)564 2976 y(come)52
b(with)g(b)n(uilt-in)g(te)o(xt)g(editors,)j(b)n(ut)d(if)g(you)g
(already)f(kno)n(w)g(a)i(te)o(xt)564 3076 y(editor)36
b(\(such)g(as)h(Emacs\))e(you)h(can)g(use)g(this)h(to)g(write)f(your)f
(Prolog)h(code.)564 3175 y(Just)49 b(mak)o(e)f(sure)g(that)g(you)f(sa)n
(v)o(e)h(your)f(\002les)i(as)g(simple)f(te)o(xt)g(\002les)h(\(for)564
3275 y(e)o(xample,)c(if)h(you)e(are)h(w)o(orking)f(under)g(W)m(indo)n
(ws,)i(don')o(t)d(sa)n(v)o(e)j(them)f(as)564 3375 y(W)-7
b(ord)41 b(documents\).)p 0 TeXcolorgray 481 3546 a Fh(\017)p
0 TeXcolorgray 41 w Fw(Y)-9 b(ou)39 b(may)g(w)o(ant)g(to)h(tak)o(e)f(e)
o(xample)f(Prolog)h(programs)e(from)h(the)i(internet.)564
3645 y(So)45 b(mak)o(e)e(sure)h(you)g(kno)n(w)f(ho)n(w)g(to)h(use)h(a)f
(bro)n(wser)f(to)i(\002nd)f(what)g(you)564 3745 y(w)o(ant,)d(and)f(to)i
(store)e(the)h(code)g(where)f(you)g(w)o(ant)h(it.)p 0
TeXcolorgray 481 3916 a Fh(\017)p 0 TeXcolorgray 41 w
Fw(Y)-9 b(ou)44 b(need)f(to)i(kno)n(w)e(ho)n(w)g(to)i(start)f(your)f(v)
o(ersion)g(of)h(Prolog,)g(and)f(ho)n(w)564 4016 y(to)e(consult)g
(\002les)h(with)f(it.)451 4204 y(The)e(sooner)f(you)h(pick)f(up)h
(these)h(skills,)g(the)f(better)-5 b(.)45 b(W)m(ith)40
b(them)f(out)g(of)g(the)357 4303 y(w)o(ay)c(\(which)g(shouldn')o(t)e
(tak)o(e)j(long\))e(you)g(can)i(start)g(concentrating)d(on)i(mastering)
357 4403 y(Prolog)40 b(\(which)g(will)h(tak)o(e)g(longer\).)451
4504 y(But)35 b(assuming)f(you)f(ha)n(v)o(e)h(mastered)f(these)i
(skills,)h(what)e(ne)o(xt?)43 b(Quite)35 b(simply)-5
b(,)357 4604 y Ft(play)41 b(with)h(Pr)l(olo)o(g!)48 b
Fw(Consult)42 b(the)g(v)n(arious)e(kno)n(wledge)g(bases)i(discussed)g
(in)g(the)357 4703 y(te)o(xt,)49 b(and)e(check)f(that)i(the)g(queries)e
(discussed)i(really)f(do)g(w)o(ork)g(the)h(w)o(ay)f(we)357
4803 y(said)k(the)o(y)e(did.)74 b(In)51 b(particular)m(,)g(tak)o(e)f(a)
h(look)f(at)h(KB5)g(and)f(mak)o(e)g(sure)h(you)357 4902
y(understand)f(why)h(you)g(get)h(those)g(peculiar)f(jealousy)g
(relations.)79 b(T)m(ry)52 b(posing)357 5002 y(ne)n(w)39
b(queries.)45 b(Experiment)38 b(with)i(the)f Fs(listing)f
Fw(predicate)h(\(it')-5 b(s)40 b(a)g(useful)g(tool\).)357
5102 y(T)-7 b(ype)49 b(in)g(the)h(kno)n(wledge)d(base)i(used)g(in)h(Ex)
o(ercise)f(1.5,)h(and)f(check)g(whether)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 20 32
TeXDict begin 20 31 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(20)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(your)35 b(answers)i(are)g(correct.)43
b(Best)c(of)d(all,)i(think)f(of)f(some)h(simple)g(situation)f(that)806
1151 y(interests)41 b(you,)f(and)g(create)h(a)g(brand-ne)n(w)d(kno)n
(wledge)h(base)i(from)f(scratch.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 21 33
TeXDict begin 21 32 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(2)428 2603 y Fm(Uni\002cation)g(and)g(Pr)l(oof)g
(Sear)l(ch)p 357 2785 2599 24 v 0 TeXcolorgray 0.95 TeXcolorgray
0 TeXcolorgray 714 4741 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
190.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial
797 3412 a Fl(This)f(chapter)h(has)g(t)m(w)m(o)g(main)g(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3562
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)25 b(discuss)j(uni\014cation)e(in)f
(Prolog,)k(and)d(to)f(explain)1004 3678 y(ho)m(w)48 b(Prolog)g
(uni\014cation)g(di\013ers)h(from)f(standa)m(rd)1004
3794 y(uni\014cation.)97 b(Along)56 b(the)g(w)m(a)m(y)-8
b(,)60 b(w)m(e'll)d(intro)s(duce)1004 3910 y Fg(=/2)p
Fl(,)41 b(the)e(built-in)g(p)m(redicate)i(fo)m(r)e(Prolog)f(uni\014ca-)
1004 4027 y(tion,)48 b(and)f Fg(unify)p 1691 4027 31
4 v 38 w(with)p 1933 4027 V 38 w(occurs)p 2277 4027 V
38 w(check/2)p Fl(,)j(the)1004 4143 y(built-in)41 b(p)m(redicate)i(fo)m
(r)f(standa)m(rd)g(uni\014cation.)p 0 TeXcolorgray 887
4325 a(2.)p 0 TeXcolorgray 41 w(T)-8 b(o)56 b(explain)h(the)h(sea)m
(rch)h(strategy)e(Prolog)g(uses)1004 4442 y(when)37 b(it)f(tries)h(to)f
(deduce)i(new)e(info)m(rmation)g(from)1004 4558 y(old)41
b(using)h(mo)s(dus)g(p)s(onens.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 22 34
TeXDict begin 22 33 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(22)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Uni\002cation)806
1182 y Fw(When)49 b(w)o(orking)f(with)h(kno)n(wledge)e(base)j(KB4)g(in)
f(the)h(pre)n(vious)d(chapter)m(,)j(we)806 1282 y(brie\003y)h
(mentioned)f(the)j(idea)f(of)g(uni\002cation.)78 b(W)-7
b(e)53 b(said,)i(for)d(e)o(xample,)h(that)806 1382 y(Prolog)60
b(uni\002es)i Fs(woman\(X\))d Fw(with)j Fs(woman\(mia\))l
Fw(,)67 b(thereby)61 b(instantiating)f(the)806 1481 y(v)n(ariable)37
b Fs(X)j Fw(to)f Fs(mia)o Fw(.)45 b(It')-5 b(s)40 b(no)n(w)f(time)g(to)
g(tak)o(e)g(a)h(closer)e(look)h(at)g(uni\002cation,)f(for)806
1581 y(it)j(is)h(one)e(of)h(the)g(most)g(fundamental)e(ideas)i(in)g
(Prolog.)900 1682 y(Recall)h(that)f(there)f(are)h(three)f(types)h(of)g
(term:)p 0 TeXcolorgray 909 1870 a(1.)p 0 TeXcolorgray
41 w(Constants.)110 b(These)62 b(can)g(either)f(be)i(atoms)f(\(such)f
(as)i Fs(vincent)m Fw(\))g(or)1013 1970 y(numbers)40
b(\(such)g(as)i Fs(24)o Fw(\).)p 0 TeXcolorgray 909 2141
a(2.)p 0 TeXcolorgray 41 w(V)-9 b(ariables.)45 b(\(Such)40
b(as)i Fs(X)p Fw(,)f Fs(Z3)o Fw(,)g(and)g Fs(List)n Fw(.\))p
0 TeXcolorgray 909 2313 a(3.)p 0 TeXcolorgray 41 w(Comple)o(x)f(terms.)
45 b(These)c(ha)n(v)o(e)g(the)g(form:)1013 2413 y Fs(functor\(term_1,.)
o(..,)o(te)o(rm_)o(n\))-7 b Fw(.)900 2601 y(W)g(e)45
b(are)f(going)f(to)i(w)o(ork)e(our)h(w)o(ay)g(to)n(w)o(ards)f(a)i
(de\002nition)e(of)h(when)g(Prolog)806 2700 y(will)h(unify)e(tw)o(o)i
(terms.)57 b(Our)45 b(starting)f(point)g(will)i(be)e(the)h(follo)n
(wing)e(w)o(orking)806 2800 y(de\002nition.)h(It)d(gi)n(v)o(es)g(the)g
(basic)g(intuition,)f(b)n(ut)g(is)i(a)g(little)g(light)e(on)h(detail:)p
0 TeXcolorgray 0 TeXcolorgray 935 2955 a Ft(T)-6 b(wo)53
b(terms)g(unify)f(if)h(the)n(y)e(ar)m(e)i(the)f(same)g(term)h(or)g(if)f
(the)n(y)g(contain)935 3055 y(variables)40 b(that)f(can)g(be)h
(uniformly)f(instantiated)f(with)j(terms)f(in)g(suc)o(h)f(a)935
3154 y(way)j(that)e(the)h(r)m(esulting)g(terms)h(ar)m(e)f(equal.)806
3307 y Fw(This)51 b(means,)i(for)d(e)o(xample,)i(that)f(the)g(terms)g
Fs(mia)g Fw(and)f Fs(mia)g Fw(unify)-5 b(,)52 b(because)806
3407 y(the)o(y)42 b(are)i(the)f(same)g(atom.)53 b(Similarly)-5
b(,)43 b(the)g(terms)h Fs(42)f Fw(and)g Fs(42)g Fw(unify)-5
b(,)42 b(because)806 3506 y(the)o(y)k(are)h(the)g(same)g(number)m(,)g
(the)g(terms)g Fs(X)g Fw(and)g Fs(X)g Fw(unify)-5 b(,)47
b(because)f(the)o(y)h(are)806 3606 y(the)i(same)h(v)n(ariable,)g(and)f
(the)g(terms)h Fs(woman\(mia\))c Fw(and)i Fs(woman\(mia\))e
Fw(unify)-5 b(,)806 3706 y(because)46 b(the)o(y)g(are)h(the)g(same)h
(comple)o(x)d(term.)64 b(The)46 b(terms)i Fs(woman\(mia\))43
b Fw(and)806 3805 y Fs(woman\(vincent\))-6 b Fw(,)41
b(ho)n(we)n(v)o(er)m(,)d(do)i(not)g(unify)-5 b(,)39 b(as)i(the)o(y)f
(are)g(not)g(the)h(same)f(\(and)806 3905 y(neither)47
b(of)h(them)h(contains)e(a)i(v)n(ariable)f(that)g(could)g(be)g
(instantiated)g(to)h(mak)o(e)806 4004 y(them)40 b(the)h(same\).)900
4105 y(No)n(w)-5 b(,)57 b(what)e(about)e(the)i(terms)f
Fs(mia)g Fw(and)g Fs(X)p Fw(?)87 b(The)o(y)53 b(are)i(not)f(the)h
(same.)806 4205 y(Ho)n(we)n(v)o(er)m(,)45 b(the)i(v)n(ariable)e
Fs(X)i Fw(can)f(be)h(instantiated)f(to)h Fs(mia)e Fw(which)h(mak)o(es)h
(them)806 4305 y(equal.)42 b(So,)36 b(by)e(the)g(second)g(part)g(of)g
(our)f(w)o(orking)g(de\002nition,)h Fs(mia)g Fw(and)g
Fs(X)g Fw(unify)-5 b(.)806 4404 y(Similarly)g(,)39 b(the)i(terms)g
Fs(woman\(X\))d Fw(and)j Fs(woman\(mia\))c Fw(unify)-5
b(,)39 b(because)i(the)o(y)f(can)806 4504 y(be)35 b(made)f(equal)h(by)f
(instantiating)h Fs(X)g Fw(to)g Fs(mia)o Fw(.)44 b(Ho)n(w)35
b(about)g Fs(loves\(vincent,X)o(\))806 4604 y Fw(and)51
b Fs(loves\(X,mia\))-5 b Fw(?)79 b(No.)g(It)52 b(is)h(impossible)e(to)h
(\002nd)g(an)g(instantiation)f(of)806 4703 y Fs(X)k Fw(that)g(mak)o(es)
h(the)f(tw)o(o)h(terms)f(equal.)88 b(Do)55 b(you)g(see)h(why?)88
b(Instantiating)806 4803 y Fs(X)64 b Fw(to)h Fs(vincent)d
Fw(w)o(ould)i(gi)n(v)o(e)f(us)i(the)g(terms)f Fs(loves\(vincent,vi)o
(nce)o(nt)o(\))806 4902 y Fw(and)53 b Fs(loves\(vincent,mia)o(\))-6
b Fw(,)58 b(which)c(are)g(ob)o(viously)e(not)i(equal.)86
b(Ho)n(we)n(v)o(er)m(,)806 5002 y(instantiating)39 b
Fs(X)i Fw(to)g(mia,)g(w)o(ould)f(yield)g(the)h(terms)f
Fs(loves\(vincent,mia)o(\))35 b Fw(and)806 5102 y Fs(loves\(mia,mia\))
-6 b Fw(,)41 b(which)f(aren')o(t)g(equal)g(either)-5
b(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 23 35
TeXDict begin 23 34 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(23)p 0 TeXcolorgray 451 1051 a(Usually)46
b(we)g(are)g(not)g(only)f(interested)g(in)h(the)g(f)o(act)g(that)g(tw)o
(o)h(terms)e(unify)-5 b(,)357 1151 y(we)38 b(also)g(w)o(ant)g(to)f(kno)
n(w)g(ho)n(w)g(the)h(v)n(ariables)f(ha)n(v)o(e)g(to)h(be)f
(instantiated)g(to)h(mak)o(e)357 1250 y(them)k(equal.)50
b(And)42 b(Prolog)f(gi)n(v)o(es)i(us)f(this)i(information.)k(When)42
b(Prolog)g(uni\002es)357 1350 y(tw)o(o)i(terms)g(it)g(performs)e(all)j
(the)f(necessary)f(instantiations,)h(so)g(that)g(the)g(terms)357
1449 y(really)38 b(are)h(equal)f(afterw)o(ards.)44 b(This)39
b(functionality)-5 b(,)37 b(together)h(with)h(the)g(f)o(act)g(that)357
1549 y(we)50 b(are)h(allo)n(wed)e(to)i(b)n(uild)f(comple)o(x)e(terms)i
(\(that)g(is,)k(recursi)n(v)o(ely)48 b(structured)357
1649 y(terms\))40 b(mak)o(es)h(uni\002cation)f(a)h(po)n(werful)e
(programming)f(mechanism.)451 1752 y(The)k(basic)g(intuitions)f(should)
g(no)n(w)h(be)g(clear)-5 b(.)49 b(Here')-5 b(s)42 b(the)g(de\002nition)
f(which)357 1852 y(mak)o(es)h(them)f(precise.)49 b(It)43
b(tells)g(us)g(not)e(only)h(which)f(terms)h(Prolog)g(will)g(unify)-5
b(,)357 1951 y(b)n(ut)41 b(also)g(what)g(it)g(will)h(do)f(to)g(the)g(v)
n(ariables)f(to)h(achie)n(v)o(e)f(this.)p 0 TeXcolorgray
460 2128 a(1.)p 0 TeXcolorgray 41 w Ft(If)57 b Fs(term1)43
b Ft(and)j Fs(term2)d Ft(ar)m(e)i(constants,)f(then)g
Fs(term1)f Ft(and)j Fs(term2)d Ft(unify)564 2228 y(if)f(and)e(only)g
(if)i(the)n(y)e(ar)m(e)i(the)f(same)g(atom,)f(or)h(the)g(same)g(number)
-9 b(.)p 0 TeXcolorgray 460 2409 a Fw(2.)p 0 TeXcolorgray
41 w Ft(If)49 b Fs(term1)35 b Ft(is)i(a)f(variable)g(and)h
Fs(term2)e Ft(is)i(any)f(type)g(of)h(term,)g(then)f Fs(term1)564
2508 y Ft(and)k Fs(term2)e Ft(unify)-5 b(,)39 b(and)h
Fs(term1)e Ft(is)h(instantiated)f(to)h Fs(term2)n Fw(.)45
b Ft(Similarly)-5 b(,)40 b(if)564 2608 y Fs(term2)j Ft(is)j(a)e
(variable)g(and)i Fs(term1)d Ft(is)j(any)e(type)g(of)h(term,)h(then)e
Fs(term1)564 2707 y Ft(and)g Fs(term2)c Ft(unify)-5 b(,)42
b(and)i Fs(term2)c Ft(is)j(instantiated)e(to)h Fs(term1)n
Fw(.)49 b Ft(\(So)42 b(if)g(the)n(y)564 2807 y(ar)m(e)f(both)f
(variables,)h(the)n(y')n(r)m(e)f(both)g(instantiated)f(to)j(eac)o(h)e
(other)-9 b(,)40 b(and)g(we)564 2907 y(say)h(that)g(the)n(y)f(shar)m(e)
h(values.\))p 0 TeXcolorgray 460 3087 a Fw(3.)p 0 TeXcolorgray
41 w Ft(If)63 b Fs(term1)49 b Ft(and)i Fs(term2)e Ft(ar)m(e)i(comple)n
(x)f(terms,)j(then)d(the)n(y)g(unify)g(if)h(and)564 3187
y(only)41 b(if:)p 0 TeXcolorgray 613 3368 a Fw(\(a\))p
0 TeXcolorgray 41 w Ft(The)n(y)f(have)h(the)g(same)g(functor)f(and)g
(arity)-5 b(,)42 b(and)p 0 TeXcolorgray 609 3508 a Fw(\(b\))p
0 TeXcolorgray 40 w Ft(all)f(their)g(corr)m(esponding)e(ar)m(guments)h
(unify)-5 b(,)41 b(and)p 0 TeXcolorgray 613 3648 a Fw(\(c\))p
0 TeXcolorgray 41 w Ft(the)g(variable)g(instantiations)f(ar)m(e)i
(compatible)o(.)j(\(F)-9 b(or)42 b(e)n(xample)o(,)f(it)h(is)747
3748 y(not)49 b(possible)h(to)f(instantiate)g(variable)g
Fs(X)h Ft(to)g Fs(mia)f Ft(when)g(unifying)747 3847 y(one)38
b(pair)g(of)g(ar)m(guments,)g(and)f(to)i(instantiate)e
Fs(X)h Ft(to)h Fs(vincent)d Ft(when)747 3947 y(unifying)k(another)f
(pair)i(of)g(ar)m(guments)p Fw(.\))p 0 TeXcolorgray 460
4128 a(4.)p 0 TeXcolorgray 41 w Ft(T)-6 b(wo)46 b(terms)h(unify)e(if)h
(and)f(only)g(if)i(it)f(follows)g(fr)l(om)g(the)g(pr)m(e)o(vious)f(thr)
m(ee)564 4227 y(clauses)c(that)g(the)n(y)f(unify)-5 b(.)451
4404 y Fw(Let')g(s)42 b(ha)n(v)o(e)e(a)h(look)g(at)g(the)g(form)f(of)g
(this)i(de\002nition.)i(The)d(\002rst)h(clause)f(tells)357
4504 y(us)55 b(when)f(tw)o(o)g(constants)h(unify)-5 b(.)85
b(The)54 b(second)f(clause)i(tells)h(us)e(when)g(tw)o(o)357
4604 y(terms,)43 b(one)g(of)g(which)g(is)h(a)g(v)n(ariable,)e(unify)g
(\(such)h(terms)g(will)h(al)o(w)o(ays)g(unify;)357 4703
y(v)n(ariables)d(unify)h(with)g Ft(anything)p Fw(\).)48
b(Just)43 b(as)g(importantly)-5 b(,)41 b(this)i(clause)f(also)h(tells)
357 4803 y(what)38 b(instantiations)g(we)g(ha)n(v)o(e)g(to)g(perform)e
(to)j(mak)o(e)e(the)i(tw)o(o)f(terms)h(the)f(same.)357
4902 y(Finally)-5 b(,)48 b(the)f(third)g(clause)g(tells)h(us)g(when)e
(tw)o(o)i(comple)o(x)d(terms)j(unify)-5 b(.)63 b(Note)357
5002 y(the)40 b(structure)f(of)g(this)i(de\002nition.)j(Its)d(\002rst)g
(three)e(clauses)h(mirror)f(perfectly)g(the)357 5102
y(\(recursi)n(v)o(e\))f(structure)i(of)h(terms.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 24 36
TeXDict begin 24 35 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(24)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(The)f(fourth)e(clause)i(is)h(also)f
(important:)k(it)d(says)f(that)g(the)g(\002rst)h(three)e(clauses)806
1151 y(tell)43 b(us)g(all)h(we)f(need)f(to)h(kno)n(w)f(about)g(the)h
(uni\002cation)e(of)i(tw)o(o)g(terms.)52 b(If)42 b(tw)o(o)806
1250 y(terms)f(can')o(t)f(be)h(sho)n(wn)g(to)g(unify)f(using)h(clauses)
h(1\2263,)e(then)h(the)o(y)f Ft(don')n(t)h Fw(unify)-5
b(.)806 1350 y(F)o(or)46 b(e)o(xample,)i Fs(batman)d
Fw(does)i(not)g(unify)f(with)h Fs(daughter\(ink\))-5
b Fw(.)65 b(Why)47 b(not?)806 1449 y(W)-7 b(ell,)52 b(the)d(\002rst)g
(term)g(is)h(a)g(constant,)g(and)e(the)h(second)f(is)i(a)g(comple)o(x)d
(term.)806 1549 y(But)40 b(none)f(of)h(the)g(\002rst)h(three)f(clauses)
g(tell)h(us)g(ho)n(w)e(to)h(unify)f(tw)o(o)i(such)f(terms,)806
1649 y(hence)g(\(by)g(clause)h(4\))f(the)o(y)h(don')o(t)e(unify)-5
b(.)806 1815 y Fv(Examples)806 1943 y Fw(T)e(o)44 b(mak)o(e)f(sure)h
(we')l(v)o(e)f(fully)h(understood)d(this)k(de\002nition,)e(let')-5
b(s)45 b(w)o(ork)f(through)806 2043 y(se)n(v)o(eral)51
b(e)o(xamples.)77 b(In)52 b(these)g(e)o(xamples)f(we')o(ll)h(mak)o(e)f
(use)i(of)e(an)h(important)806 2143 y(b)n(uilt-in)c(predicate,)i(the)f
Fs(=/2)g Fw(predicate)f(\(recall)g(that)i(writing)e Fs(/2)h
Fw(at)h(the)f(end)806 2242 y(indicates)40 b(that)h(this)h(predicate)d
(tak)o(es)j(tw)o(o)f(ar)o(guments\).)900 2347 y(The)36
b Fs(=/2)f Fw(predicate)f(tests)k(whether)c(its)j(tw)o(o)f(ar)o
(guments)e(unify)-5 b(.)43 b(F)o(or)35 b(e)o(xample,)806
2447 y(if)41 b(we)g(pose)g(the)g(query)971 2628 y Fs(?-)g
(=\(mia,mia\).)806 2809 y Fw(Prolog)e(will)j(respond)d(yes,)i(and)g(if)
g(we)g(pose)g(the)g(query)971 2990 y Fs(?-)g(=\(mia,vincent\).)806
3171 y Fw(Prolog)e(will)j(respond)d(no.)900 3276 y(But)46
b(we)f(usually)g(w)o(ouldn')o(t)e(pose)i(these)h(queries)e(in)i(quite)f
(this)h(w)o(ay)-5 b(.)58 b(Let')-5 b(s)806 3376 y(f)o(ace)43
b(it,)i(the)f(notation)f Fs(=\(mia,mia\))d Fw(is)45 b(rather)e
(unnatural.)52 b(It)44 b(w)o(ould)f(be)h(nicer)806 3475
y(if)e(we)g(could)f(use)h(in\002x)f(notation)g(\(that)g(is,)i(if)f(we)g
(could)f(put)g(the)h Fs(=/2)f Fw(functor)806 3575 y(between)f(its)i(ar)
o(guments\))c(and)j(write)g(things)f(lik)o(e:)971 3756
y Fs(?-)h(mia)f(=)h(mia.)806 3937 y Fw(In)f(f)o(act,)h(Prolog)f(lets)h
(us)g(do)g(this,)g(so)g(in)g(the)g(e)o(xamples)e(that)i(follo)n(w)f
(we')o(ll)h(use)806 4037 y(in\002x)f(notation.)900 4142
y(Let')-5 b(s)42 b(return)d(to)i(our)g(\002rst)g(e)o(xample:)971
4323 y Fs(?-)g(mia)f(=)h(mia.)971 4422 y(yes)900 4604
y Fw(Why)54 b(does)h(Prolog)f(say)h(yes?)87 b(This)55
b(may)g(seem)g(lik)o(e)g(a)g(silly)h(question:)806 4703
y(surely)43 b(it')-5 b(s)45 b(ob)o(vious)d(that)i(the)g(terms)f(unify!)
53 b(That')-5 b(s)44 b(true,)g(b)n(ut)g(ho)n(w)f(does)h(this)806
4803 y(follo)n(w)39 b(from)g(the)h(de\002nition)f(gi)n(v)o(en)g(abo)o
(v)o(e?)44 b(It)c(is)h(important)e(to)h(learn)g(to)g(think)806
4902 y(systematically)f(about)h(uni\002cation)f(\(it)i(is)g(utterly)f
(fundamental)e(to)i(Prolog\),)f(and)806 5002 y(thinking)k
(systematically)i(means)g(relating)g(the)g(e)o(xamples)g(to)g(the)h
(de\002nition)e(of)806 5102 y(uni\002cation)39 b(gi)n(v)o(en)h(abo)o(v)
o(e.)k(So)d(let')-5 b(s)42 b(think)e(this)i(e)o(xample)d(through.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 25 37
TeXDict begin 25 36 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(25)p 0 TeXcolorgray 451 1051 a(The)55
b(de\002nition)e(has)i(three)f(clauses.)88 b(No)n(w)-5
b(,)57 b(clause)e(2)f(is)i(for)e(when)g(one)357 1151
y(ar)o(gument)48 b(is)j(a)g(v)n(ariable,)g(and)f(clause)h(3)f(is)h(for)
f(when)g(both)f(ar)o(guments)g(are)357 1250 y(comple)o(x)55
b(terms,)61 b(so)c(these)h(are)f(of)f(no)h(use)g(here.)94
b(Ho)n(we)n(v)o(er)55 b(clause)j(1)f Ft(is)357 1350 y
Fw(rele)n(v)n(ant)46 b(to)i(our)f(e)o(xample.)64 b(This)48
b(tells)g(us)g(that)g(tw)o(o)g(constants)f(unify)f(if)i(and)357
1449 y(only)39 b(if)h(the)o(y)g(are)g(e)o(xactly)f(the)h(same)h
(object.)k(As)c Fs(mia)e Fw(and)h Fs(mia)f Fw(are)h(the)h(same)357
1549 y(atom,)f(uni\002cation)g(succeeds.)451 1653 y(A)i(similar)f(ar)o
(gument)d(e)o(xplains)i(the)h(follo)n(wing)f(responses:)522
1831 y Fs(?-)h(2)g(=)g(2.)522 1930 y(yes)522 2129 y(?-)g(mia)f(=)h
(vincent.)522 2229 y(no)357 2407 y Fw(Once)47 b(again,)i(clause)f(1)g
(is)g(rele)n(v)n(ant)f(here)g(\(after)h(all,)h Fs(2)p
Fw(,)h Fs(mia)o Fw(,)g(and)d Fs(vincent)357 2507 y Fw(are)e(all)i
(constants\).)59 b(And)46 b(as)g Fs(2)g Fw(is)h(the)f(same)f(number)f
(as)j Fs(2)p Fw(,)g(and)e(as)i Fs(mia)e Fw(is)357 2606
y Ft(not)h Fw(the)f(same)g(atom)f(as)i Fs(vincent)m Fw(,)g(Prolog)e
(responds)f(yes)j(to)f(the)f(\002rst)i(query)357 2706
y(and)40 b(no)h(to)g(the)g(second.)451 2809 y(Ho)n(we)n(v)o(er)i
(clause)h(1)g(does)f(hold)h(one)f(small)h(surprise)g(for)f(us.)55
b(Consider)44 b(the)357 2909 y(follo)n(wing)39 b(query:)522
3087 y Fs(?-)i('mia')e(=)i(mia.)522 3187 y(yes)357 3365
y Fw(What')-5 b(s)43 b(going)e(on)g(here?)49 b(Why)42
b(do)g(these)g(tw)o(o)h(terms)f(unify?)48 b(W)-7 b(ell,)44
b(as)f(f)o(ar)f(as)357 3464 y(Prolog)48 b(is)i(concerned,)e
Fs('mia')g Fw(and)g Fs(mia)h Fw(are)g(the)g(same)g(atom.)70
b(In)48 b(f)o(act,)j(for)357 3564 y(Prolog,)41 b(an)o(y)g(atom)h(of)g
(the)g(form)g Fs('symbols')d Fw(is)k(considered)d(the)j(same)f(entity)
357 3663 y(as)54 b(the)f(atom)g(of)f(the)i(form)e Fs(symbols)m
Fw(.)83 b(This)53 b(can)g(be)g(a)h(useful)e(feature)h(in)357
3763 y(certain)40 b(kinds)h(of)f(programs,)f(so)i(don')o(t)f(for)o(get)
f(it.)451 3867 y(On)i(the)g(other)f(hand,)g(to)h(the)g(query)522
4045 y Fs(?-)g('2')f(=)h(2.)357 4222 y Fw(Prolog)f(will)i(respond)e
(no.)47 b(And)41 b(if)h(you)e(think)h(about)f(the)i(de\002nitions)e(gi)
n(v)o(en)h(in)357 4322 y(Chapter)g(1,)i(you)e(will)i(see)g(that)f(this)
h(has)g(to)f(be)g(the)h(w)o(ay)f(things)g(w)o(ork.)49
b(After)357 4422 y(all,)j Fs(2)e Fw(is)h(a)g(number)m(,)f(b)n(ut)g
Fs('2')f Fw(is)i(an)f(atom.)72 b(The)o(y)49 b(simply)h(cannot)f(be)h
(the)357 4521 y(same.)451 4625 y(Let')-5 b(s)42 b(try)e(an)h(e)o
(xample)f(with)h(a)g(v)n(ariable:)522 4803 y Fs(?-)g(mia)f(=)h(X.)522
5002 y(X)g(=)g(mia)522 5102 y(yes)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 26 38
TeXDict begin 26 37 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(26)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(Again,)49 b(this)f(in)h(an)f(easy)h(e)o
(xample:)59 b(clearly)48 b(the)g(v)n(ariable)f Fs(X)i
Fw(can)f(be)g(uni\002ed)806 1151 y(with)38 b(the)g(constant)f
Fs(mia)n Fw(,)i(and)f(Prolog)f(does)g(so,)i(and)e(tells)i(us)f(that)g
(it)h(has)f(made)806 1250 y(this)j(uni\002cation.)j(Fine,)d(b)n(ut)g
(ho)n(w)g(does)f(this)i(follo)n(w)e(from)g(our)g(de\002nition?)900
1350 y(The)d(rele)n(v)n(ant)f(clause)i(here)f(is)h(clause)f(2.)45
b(This)38 b(tells)g(us)g(what)f(happens)f(when)806 1449
y(at)49 b(least)g(one)f(of)h(the)f(ar)o(guments)f(is)j(a)f(v)n
(ariable.)68 b(In)48 b(our)g(e)o(xample)f(it)j(is)f(the)806
1549 y(second)i(term)h(which)f(is)j(the)e(v)n(ariable.)78
b(The)52 b(de\002nition)f(tells)i(us)g(uni\002cation)806
1649 y(is)f(possible,)i(and)d(also)h(says)g(that)g(the)f(v)n(ariable)g
(is)h(instantiated)f(to)h(the)g(\002rst)806 1748 y(ar)o(gument,)35
b(namely)i Fs(mia)o Fw(.)45 b(And)37 b(this,)i(of)e(course,)g(is)i(e)o
(xactly)e(what)g(Prolog)g(does.)900 1848 y(No)n(w)57
b(for)f(an)h(important)f(e)o(xample:)77 b(what)57 b(happens)f(with)h
(the)g(follo)n(wing)806 1948 y(query?)971 2113 y Fs(?-)41
b(X)g(=)g(Y.)806 2279 y Fw(W)-7 b(ell,)44 b(depending)c(on)i(your)f
(Prolog)h(implementation,)e(you)i(may)g(just)i(get)e(back)806
2379 y(the)e(output)971 2545 y Fs(?-)h(X)g(=)g(Y.)971
2645 y(yes)806 2811 y Fw(Prolog)k(is)i(simply)g(agreeing)d(that)j(the)g
(tw)o(o)f(terms)h(unify)e(\(after)h(all,)i(v)n(ariables)806
2910 y(unify)36 b(with)h(an)o(ything,)f(so)h(the)o(y)g(certainly)f
(unify)h(with)g(each)g(other\))f(and)h(making)806 3010
y(a)h(note)h(that)f(from)g(no)n(w)g(on,)g Fs(X)h Fw(and)f
Fs(Y)g Fw(denote)g(the)g(same)h(object,)f(that)h(is,)h(share)806
3109 y(v)n(alues.)900 3209 y(On)h(the)g(other)f(hand,)g(you)g(may)g
(get)h(the)g(follo)n(wing)e(output:)971 3375 y Fs(X)i(=)g(_5071)971
3475 y(Y)g(=)g(_5071)971 3574 y(yes)806 3740 y Fw(What')-5
b(s)39 b(going)f(on)h(here?)44 b(Essentially)39 b(the)g(same)g(thing.)
45 b(Note)39 b(that)g Fs(_5071)e Fw(is)j(a)806 3840 y(v)n(ariable)k
(\(recall)h(from)g(Chapter)f(1)i(that)g(strings)f(of)g(letters)h(and)f
(numbers)f(that)806 3940 y(start)e(with)g(the)g(underscore)e(character)
h(are)g(v)n(ariables\).)48 b(No)n(w)42 b(look)f(at)h(clause)g(2)806
4039 y(of)49 b(the)h(de\002nition)f(of)h(uni\002cation.)71
b(This)50 b(tells)h(us)g(that)f(when)f(tw)o(o)h(v)n(ariables)806
4139 y(are)h(uni\002ed,)i(the)o(y)d(share)i(v)n(alues.)76
b(So)52 b(Prolog)e(has)i(created)f(a)g(ne)n(w)h(v)n(ariable)806
4238 y(\(namely)39 b Fs(_5071)n Fw(\))i(and)f(from)f(no)n(w)i(on)f
(both)g Fs(X)g Fw(and)h Fs(Y)f Fw(share)h(the)g(v)n(alue)f(of)g(this)
806 4338 y(v)n(ariable.)57 b(In)46 b(ef)n(fect,)f(Prolog)g(is)h
(creating)e(a)i(common)e(v)n(ariable)g(name)h(for)f(the)806
4438 y(tw)o(o)f(original)e(v)n(ariables.)51 b(Needless)43
b(to)g(say)-5 b(,)43 b(there')-5 b(s)43 b(nothing)e(magic)i(about)e
(the)806 4537 y(number)c Fs(5071)n Fw(.)46 b(Prolog)39
b(just)g(needs)g(to)h(generate)e(a)i(brand)e(ne)n(w)h(v)n(ariable)f
(name,)806 4637 y(and)48 b(using)g(numbers)g(is)i(a)f(handy)f(w)o(ay)h
(to)g(do)g(this.)70 b(It)49 b(might)g(just)g(as)h(well)806
4737 y(generate)39 b Fs(_5075)n Fw(,)i(or)g Fs(_6189)n
Fw(,)g(or)g(whate)n(v)o(er)-5 b(.)900 4836 y(Here)41
b(is)g(another)f(e)o(xample)f(in)m(v)n(olving)g(only)h(atoms)g(and)g(v)
n(ariables.)45 b(Ho)n(w)c(do)806 4936 y(you)f(think)g(will)h(Prolog)f
(respond?)971 5102 y Fs(?-)h(X)g(=)g(mia,)f(X)h(=)g(vincent.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 27 39
TeXDict begin 27 38 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(27)p 0 TeXcolorgray 451 1051 a(Prolog)41
b(will)i(respond)e(no.)48 b(This)43 b(query)d(in)m(v)n(olv)o(es)h(tw)o
(o)i(goals,)f Fs(X)f(=)g(mia)g Fw(and)357 1151 y Fs(X)g(=)g(vincent)m
Fw(.)51 b(T)-7 b(ak)o(en)42 b(separately)-5 b(,)41 b(Prolog)h(w)o(ould)
g(succeed)f(at)i(both)f(of)g(them,)357 1250 y(instantiating)j
Fs(X)h Fw(to)g Fs(mia)f Fw(in)h(the)g(\002rst)h(case)f(and)f(to)h
Fs(vincent)e Fw(in)i(the)g(second.)357 1350 y(And)h(that')-5
b(s)49 b(e)o(xactly)e(the)h(problem)e(here:)60 b(once)48
b(Prolog)f(has)h(w)o(ork)o(ed)f(through)357 1449 y(the)38
b(\002rst)h(goal,)f Fs(X)g Fw(is)h(instantiated)e(to)i(\(and)e
(therefore)f(equal)i(to\))g Fs(mia)n Fw(,)h(so)g(that)f(it)357
1549 y(simply)i(can')o(t)g(unify)g(with)h Fs(vincent)e
Fw(an)o(ymore.)k(Hence)e(the)g(second)f(goal)g(f)o(ails.)357
1649 y(An)45 b Ft(instantiated)i Fw(v)n(ariable)e(isn')o(t)g(really)g
(a)i(v)n(ariable)d(an)o(ymore:)54 b(it)46 b(has)g(become)357
1748 y(what)41 b(it)g(w)o(as)h(instantiated)e(with.)451
1848 y(No)n(w)h(let')-5 b(s)42 b(look)e(at)h(an)g(e)o(xample)f(in)m(v)n
(olving)f(comple)o(x)g(terms:)522 2008 y Fs(?-)i(k\(s\(g\),Y\))d(=)j
(k\(X,t\(k\)\).)522 2208 y(X)g(=)g(s\(g\))522 2307 y(Y)g(=)g(t\(k\))522
2407 y(yes)357 2567 y Fw(Clearly)h(the)h(tw)o(o)f(comple)o(x)f(terms)i
(unify)e(if)i(the)f(stated)h(v)n(ariable)e(instantiations)357
2667 y(are)49 b(carried)g(out.)72 b(But)50 b(ho)n(w)f(does)h(this)g
(follo)n(w)f(from)g(the)h(de\002nition?)71 b(W)-7 b(ell,)357
2766 y(\002rst)55 b(of)f(all,)k(clause)d(3)g(has)f(to)h(be)g(used)f
(here)g(because)g(we)h(are)f(trying)g(to)357 2866 y(unify)48
b(tw)o(o)h(comple)o(x)f(terms.)71 b(So)49 b(the)h(\002rst)g(thing)e(we)
i(need)f(to)g(do)g(is)i(check)357 2966 y(that)i(both)f(comple)o(x)f
(terms)j(ha)n(v)o(e)e(the)h(same)g(functor)f(and)g(arity)-5
b(.)82 b(And)52 b(the)o(y)357 3065 y(do.)85 b(Clause)55
b(3)f(also)h(tells)g(us)g(that)f(we)h(ha)n(v)o(e)e(to)i(unify)e(the)h
(corresponding)357 3165 y(ar)o(guments)43 b(in)i(each)g(comple)o(x)f
(term.)58 b(So)46 b(do)f(the)g(\002rst)h(ar)o(guments,)e
Fs(s\(g\))g Fw(and)357 3265 y Fs(X)o Fw(,)k(unify?)61
b(By)46 b(clause)h(2,)g(yes,)h(and)d(we)i(instantiate)f
Fs(X)g Fw(to)h Fs(s\(g\))n Fw(.)62 b(So)47 b(do)f(the)357
3364 y(second)41 b(ar)o(guments,)g Fs(Y)i Fw(and)f Fs(t\(k\))n
Fw(,)i(unify?)50 b(Again)41 b(by)i(clause)f(2,)h(yes,)g(and)f(we)357
3464 y(instantiate)e Fs(Y)i Fw(to)f Fs(t\(k\))n Fw(.)451
3563 y(Here')-5 b(s)41 b(another)f(e)o(xample)f(with)j(comple)o(x)d
(terms:)522 3724 y Fs(?-)i(k\(s\(g\),)d(t\(k\)\))i(=)h(k\(X,t\(Y\)\).)
522 3923 y(X)g(=)g(s\(g\))522 4023 y(Y)g(=)g(k)522 4122
y(yes)357 4283 y Fw(It)50 b(should)g(be)g(clear)g(that)h(the)f(tw)o(o)h
(terms)f(unify)g(if)g(these)h(instantiations)f(are)357
4382 y(carried)43 b(out.)57 b(But)45 b(can)g(you)e(e)o(xplain,)i(step)g
(by)f(step,)i(ho)n(w)e(this)h(relates)g(to)g(the)357
4482 y(de\002nition?)451 4582 y(Here)c(is)h(a)f(last)h(e)o(xample:)522
4742 y Fs(?-)f(loves\(X,X\))c(=)k(loves\(marcellus,m)o(ia)o(\).)357
4902 y Fw(Do)54 b(these)g(terms)g(unify?)84 b(No,)57
b(the)o(y)c(don')o(t.)84 b(It')-5 b(s)54 b(true)g(that)g(the)o(y)g(are)
g(both)357 5002 y(comple)o(x)45 b(terms)h(and)h(ha)n(v)o(e)f(the)h
(same)f(functor)g(and)g(arity)-5 b(,)47 b(b)n(ut)g(clause)g(3)f(also)
357 5102 y(demands)k(that)h(all)h(corresponding)c(ar)o(guments)h(ha)n
(v)o(e)i(to)g(unify)-5 b(,)52 b(and)f(that)h(the)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 28 40
TeXDict begin 28 39 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(28)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(v)n(ariable)59 b(instantiations)g(ha)n(v)o(e)
h(to)g(be)g(compatible.)102 b(This)60 b(is)h(not)f(the)g(case)806
1151 y(here.)53 b(Unifying)42 b(the)h(\002rst)i(ar)o(guments)c(w)o
(ould)i(instantiate)g Fs(X)h Fw(with)g Fs(marcellus)l
Fw(.)806 1250 y(Unifying)34 b(the)i(second)g(ar)o(guments)e(w)o(ould)h
(instantiate)h Fs(X)h Fw(with)f Fs(mia)o Fw(.)44 b(Either)36
b(w)o(ay)-5 b(,)806 1350 y(we')l(re)40 b(block)o(ed.)806
1503 y Fv(The)h(occurs)g(check)806 1625 y Fw(Uni\002cation)31
b(is)j(a)f(well-kno)n(wn)d(concept,)j(used)f(in)h(se)n(v)o(eral)f
(branches)f(of)h(computer)806 1725 y(science.)45 b(It)c(has)g(been)f
(thoroughly)e(studied,)i(and)g(man)o(y)f(uni\002cation)h(algorithms)806
1825 y(are)51 b(kno)n(wn.)75 b(But)52 b(Prolog)e(does)h
Ft(not)i Fw(use)e(a)h(standard)e(uni\002cation)g(algorithm)806
1924 y(when)45 b(it)h(performs)e(its)j(v)o(ersion)e(of)g
(uni\002cation.)60 b(Instead)45 b(it)h(tak)o(es)g(a)h(shortcut.)806
2024 y(Y)-9 b(ou)40 b(need)g(to)h(kno)n(w)f(about)g(this)i(shortcut.)
900 2123 y(Consider)e(the)h(follo)n(wing)f(query:)971
2270 y Fs(?-)h(father\(X\))c(=)k(X.)806 2417 y Fw(Do)73
b(these)g(terms)h(unify)e(or)h(not?)143 b(A)74 b(standard)e
(uni\002cation)g(algorithm)806 2517 y(w)o(ould)57 b(say:)81
b(\223No,)63 b(the)o(y)57 b(don')o(t\224.)96 b(Why)58
b(is)h(that?)99 b(W)-7 b(ell,)63 b(pick)58 b(an)o(y)g(term)806
2616 y(and)67 b(instantiate)h Fs(X)g Fw(to)g(the)g(term)g(you)f(pick)o
(ed.)125 b(F)o(or)68 b(e)o(xample,)73 b(if)68 b(you)806
2716 y(instantiate)50 b Fs(X)i Fw(to)f Fs(father\(father\(bu)o(tc)o
(h\))o(\))-6 b Fw(,)54 b(the)d(left)g(hand)f(side)h(becomes)806
2816 y Fs(father\(father\(f)o(at)o(her)o(\(b)o(utc)o(h\))o(\)\))-6
b Fw(,)61 b(and)56 b(the)i(right)e(hand)g(side)h(becomes)806
2915 y Fs(father\(father\(b)o(ut)o(ch\))o(\))-6 b Fw(.)86
b(Ob)o(viously)52 b(these)i(don')o(t)f(unify)-5 b(.)83
b(Moreo)o(v)o(er)m(,)55 b(it)806 3015 y(mak)o(es)37 b(no)g(dif)n
(ference)e(what)i(term)g(you)g(instantiate)g Fs(X)g Fw(to.)45
b(No)37 b(matter)g(what)g(you)806 3114 y(choose,)43 b(the)h(tw)o(o)h
(terms)f(cannot)f(possibly)h(be)g(made)f(the)h(same,)h(for)f(the)g
(term)806 3214 y(on)38 b(the)h(left)g(will)h(al)o(w)o(ays)f(be)g(one)f
(symbol)g(longer)g(than)g(the)h(term)g(on)f(the)h(right)806
3314 y(\(the)f(functor)f Fs(father)g Fw(on)i(the)g(left)g(will)h(al)o
(w)o(ays)f(gi)n(v)o(e)f(it)i(that)f(one)f(e)o(xtra)g(le)n(v)o(el\).)806
3413 y(A)51 b(standard)f(uni\002cation)f(algorithm)h(will)h(spot)g
(this)h(\(we')o(ll)f(see)g(why)f(shortly)806 3513 y(when)40
b(we)h(discuss)h(the)e(occurs)h(check\),)e(halt,)i(and)f(tell)i(us)f
(no.)900 3613 y(The)48 b(recursi)n(v)o(e)f(de\002nition)h(of)g(Prolog)g
(uni\002cation)f(gi)n(v)o(en)g(earlier)h(w)o(on')o(t)g(do)806
3712 y(this.)95 b(Because)57 b(the)h(left)f(hand)g(term)g(is)h(the)g(v)
n(ariable)e Fs(X)p Fw(,)h(by)g(clause)g(2)h(it)806 3812
y(decides)g(that)g(the)h(terms)g Ft(do)f Fw(unify)-5
b(,)61 b(and)d(\(in)h(accordance)d(with)j(clause)g(2\))806
3911 y(instantiates)41 b Fs(X)h Fw(to)g(the)g(right)f(hand)g(side,)h
(namely)e Fs(father\(X\))p Fw(.)f(But)j(there')-5 b(s)42
b(an)806 4011 y Fs(X)50 b Fw(in)g(this)h(term,)h(and)d
Fs(X)i Fw(has)f(been)f(instantiated)h(to)g Fs(father\(X\))p
Fw(,)d(so)k(Prolog)806 4111 y(realises)40 b(that)g Fs(father\(X\))c
Fw(is)41 b(really)f Fs(father\(father\(X)o(\)\))o Fw(.)35
b(But)40 b(there')-5 b(s)40 b(an)f Fs(X)806 4210 y Fw(here)k(too,)i
(and)e Fs(X)i Fw(has)f(been)g(instantiated)f(to)h Fs(father\(X\))p
Fw(,)d(so)k(Prolog)e(realises)806 4310 y(that)51 b Fs
(father\(father\(X)o(\)\))45 b Fw(is)52 b(really)f Fs
(father\(father\(fa)o(the)o(r\()o(X\))o(\)\))p Fw(,)45
b(and)806 4410 y(so)54 b(on.)85 b(Ha)n(ving)53 b(instantiated)g
Fs(X)i Fw(to)f Fs(father\(X\))p Fw(,)c(Prolog)k(is)h(committed)d(to)806
4509 y(carrying)39 b(out)h(an)h(unending)e(sequence)g(of)i(e)o
(xpansions.)900 4609 y(At)54 b(least,)i(that')-5 b(s)54
b(the)f(theory)-5 b(.)80 b(What)53 b(happens)f(in)h(practice?)81
b(W)-7 b(ell,)57 b(with)806 4708 y(older)40 b(Prolog)h
(implementations,)f(what)h(we')l(v)o(e)g(just)h(described)e(is)j(e)o
(xactly)e(what)806 4808 y(happens.)j(Y)-9 b(ou)40 b(w)o(ould)g(get)h(a)
h(message)f(lik)o(e:)971 4955 y Fs(Not)f(enough)f(memory)g(to)i
(complete)d(query!)806 5102 y Fw(and)i(a)h(long)f(string)h(of)g
(symbols)f(lik)o(e:)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 29 41
TeXDict begin 29 40 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(29)p 0 TeXcolorgray 522 1051 a Fs(X)41
b(=)g(father\(father\(fat)o(he)o(r\(f)o(at)o(he)o(r\(f)o(at)o(her)o
(\(f)o(ath)o(er)647 1151 y(\(father\(father\()o(fat)o(he)o(r\()o(fat)o
(he)o(r\(f)o(at)o(her)o(\(f)o(at)o(her)647 1250 y(\(father\(father\()o
(fat)o(he)o(r\()o(fat)o(he)o(r\(f)o(at)o(her)o(\(f)o(at)o(her)647
1350 y(\(father\(father\()o(fat)o(he)o(r\()o(fat)o(he)o(r\(f)o(at)o
(her)o(\(f)o(at)o(her)647 1449 y(\(father\(father\()o(fat)o(he)o(r\()o
(fat)o(he)o(r\(f)o(at)o(her)o(\(f)o(at)o(her)357 1601
y Fw(Prolog)f(is)i(desperately)e Ft(trying)h Fw(to)g(come)g(back)f
(with)h(the)h(correctly)d(instantiated)357 1701 y(terms,)46
b(b)n(ut)g(it)g(can')o(t)f(halt,)h(because)f(the)h(instantiation)f
(process)g(is)h(unbounded.)357 1800 y(From)35 b(an)g(abstract)h
(mathematical)e(perspecti)n(v)o(e,)h(what)h(Prolog)e(is)j(trying)e(to)g
(do)h(is)357 1900 y(sensible.)45 b(Intuiti)n(v)o(ely)-5
b(,)36 b(the)i(only)g(w)o(ay)g(the)g(tw)o(o)h(terms)f(could)g(be)g
(made)f(to)i(unify)357 2000 y(w)o(ould)47 b(be)g(if)h
Fs(X)g Fw(w)o(as)g(instantiated)f(to)h(a)g(term)f(containing)f(an)h
(in\002nitely)h(long)357 2099 y(string)37 b(of)h Fs(father)e
Fw(functors,)h(so)h(that)g(the)g(ef)n(fect)g(of)f(the)h(e)o(xtra)f
Fs(father)f Fw(functor)357 2199 y(on)51 b(the)g(left)h(hand)e(side)i(w)
o(as)h(cancelled)d(out.)77 b(But)52 b(the)g(terms)f(we)h(compute)357
2299 y(with)i(are)g Ft(\002nite)f Fw(entities.)85 b(In\002nite)53
b(terms)h(are)g(an)g(interesting)f(mathematical)357 2398
y(abstraction,)36 b(b)n(ut)h(the)o(y')l(re)f(not)g(something)g(we)h
(can)g(w)o(ork)g(with.)44 b(No)37 b(matter)g(ho)n(w)357
2498 y(hard)j(Prolog)g(tries,)h(it)h(can)e(ne)n(v)o(er)g(b)n(uild)g
(one.)451 2597 y(No)n(w)-5 b(,)46 b(it')-5 b(s)46 b(anno)o(ying)d(to)i
(ha)n(v)o(e)g(Prolog)f(running)f(out)i(of)g(memory)f(lik)o(e)h(this,)
357 2697 y(and)56 b(sophisticated)g(Prolog)f(implementations)g(ha)n(v)o
(e)h(found)f(w)o(ays)i(of)f(coping)357 2797 y(more)46
b(gracefully)-5 b(.)62 b(T)m(ry)47 b(posing)f(the)h(query)e
Fs(father\(X\))38 b(=)j(X)48 b Fw(to)f(SWI)h(Prolog)357
2896 y(or)40 b(SICStus)i(Prolog.)j(The)40 b(answer)h(will)h(be)f
(something)e(lik)o(e:)522 3048 y Fs(X)i(=)g(father\(father\(fat)o(he)o
(r\(f)o(at)o(he)o(r\(.)o(..)o(\)\)\))o(\)\))o(\)\)\))522
3148 y(yes)357 3299 y Fw(That)d(is,)j(these)e(implementations)e(insist)
j(that)f(uni\002cation)f Ft(is)i Fw(possible,)e(b)n(ut)h(the)o(y)357
3399 y Ft(don')n(t)j Fw(f)o(all)h(into)g(the)f(trap)h(of)f(actually)g
(trying)g(to)g(instantiate)h(a)g(\002nite)g(term)f(for)357
3499 y Fs(X)j Fw(as)h(the)g(nai)n(v)o(e)e(implementations)g(do.)59
b(Instead,)45 b(the)o(y)g(detect)g(that)h(there)f(is)h(a)357
3598 y(potential)40 b(problem,)f(halt,)h(declare)h(that)g
(uni\002cation)e(is)j(possible,)e(and)h(print)f(out)357
3698 y(a)h(\002nite)g(representation)e(of)i(an)g(in\002nite)f(term,)h
(lik)o(e)g(the)522 3850 y Fs(father\(father\(fa)o(the)o(r\()o(fat)o(he)
o(r\()o(...)o(\)\))o(\)\)\))o(\)\))o(\))357 4001 y Fw(in)f(the)f(pre)n
(vious)f(query)-5 b(.)44 b(Can)c(you)f(compute)f(with)i(these)g
(\002nite)g(representations)357 4101 y(of)f(in\002nite)h(terms?)45
b(That)40 b(depends)e(on)h(the)h(implementation.)j(In)d(some)f(systems)
357 4201 y(you)h(cannot)g(do)g(much)g(with)h(them.)46
b(F)o(or)40 b(e)o(xample,)f(posing)h(the)h(query)522
4352 y Fs(?-)g(X)g(=)g(father\(X\),)c(Y)k(=)g(father\(Y\),)d(X)j(=)g
(Y.)357 4504 y Fw(w)o(ould)d(result)g(in)h(a)g(crash)f(\(note)g(that)h
(the)g Fs(X)f(=)h(Y)g Fw(demands)e(that)i(we)g(unify)e(tw)o(o)357
4604 y(\002nite)54 b(representations)e(of)h(in\002nite)g(terms\).)84
b(Nonetheless,)56 b(in)e(some)f(modern)357 4703 y(systems)35
b(uni\002cation)e(w)o(orks)h(rob)n(ustly)f(with)i(such)f
(representations)f(\(for)g(e)o(xample,)357 4803 y(both)53
b(SWI)i(and)e(Sicstus)i(can)f(handle)f(the)h(pre)n(vious)e(e)o
(xample\))g(so)j(you)e(can)357 4902 y(actually)43 b(use)i(them)f(in)g
(your)f(programs.)54 b(Ho)n(we)n(v)o(er)m(,)43 b(why)g(you)h(might)f(w)
o(ant)i(to)357 5002 y(use)e(such)f(representations,)f(and)h(what)h
(such)f(representations)f(actually)h(are,)h(are)357 5102
y(topics)e(that)g(lie)g(be)o(yond)e(the)i(scope)f(of)h(this)g(book.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 30 42
TeXDict begin 30 41 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(30)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(In)49 b(short,)h(there)e(are)h(actually)f
Ft(thr)m(ee)h Fw(dif)n(ferent)e(responses)i(to)g(the)g(question)806
1151 y(\223does)57 b Fs(father\(X\))e Fw(unify)h(with)i
Fs(X)p Fw(\224.)g(There)f(is)h(the)g(answer)g(gi)n(v)o(en)e(by)h(the)
806 1250 y(standard)f(uni\002cation)g(algorithm)g(\(which)h(is)h(to)g
(say)g(no\),)j(the)c(response)g(of)806 1350 y(older)45
b(Prolog)h(implementations)f(\(which)h(is)h(to)g(run)f(amok)g(until)g
(the)o(y)g(use)h(up)806 1449 y(the)54 b(a)n(v)n(ailable)g(memory\),)i
(and)e(the)h(answer)f(gi)n(v)o(en)g(by)g(sophisticated)g(Prolog)806
1549 y(implementations)43 b(\(which)h(is)i(to)f(say)g(yes,)h(and)e
(return)g(a)h(\002nite)h(representation)806 1649 y(of)63
b(an)g(in\002nite)g(term\).)113 b(In)63 b(short,)68 b(there)63
b(is)h(no)f(`right')f(answer)h(to)h(this)806 1748 y(question.)42
b(What)34 b(is)i(important)c(is)j(that)g(you)e(understand)f(the)i(dif)n
(ference)e(between)806 1848 y(standard)51 b(uni\002cation)g(and)g
(Prolog)h(uni\002cation,)h(and)f(kno)n(w)f(ho)n(w)h(the)h(Prolog)806
1948 y(implementation)38 b(that)j Fs(you)g Fw(w)o(ork)f(with)h(handles)
f(such)h(e)o(xamples.)900 2069 y(No)n(w)-5 b(,)38 b(in)h(the)f
(practical)g(session)g(at)h(the)f(end)g(of)g(the)h(chapter)e(we)h(ask)h
(you)e(to)806 2169 y(try)f(out)h(such)g(e)o(xamples)f(with)h(your)f
(Prolog)g(interpreter)-5 b(.)43 b(Here)37 b(we)g(w)o(ant)g(to)g(say)806
2268 y(a)f(little)g(more)f(about)g(the)h(dif)n(ference)e(between)h
(Prolog)g(uni\002cation)f(and)i(standard)806 2368 y(uni\002cation.)61
b(Gi)n(v)o(en)46 b(the)h(v)o(ery)f(dif)n(ferent)f(w)o(ays)i(the)o(y)f
(handle)g(this)h(e)o(xample,)g(it)806 2468 y(may)e(seem)i(that)f
(standard)f(uni\002cation)g(algorithms)g(and)h(the)g(Prolog)g(approach)
806 2567 y(to)52 b(uni\002cation)e(are)i(inherently)e(dif)n(ferent.)77
b(Actually)-5 b(,)54 b(the)o(y')l(re)c(not.)78 b(There)52
b(is)806 2667 y(one)39 b(simple)g(dif)n(ference)f(between)h(the)g(tw)o
(o)h(algorithms)e(that)i(accounts)f(for)g(their)806 2766
y(dif)n(ferent)46 b(beha)n(viour)h(when)h(f)o(aced)g(with)h(the)f(task)
h(of)f(unifying)f(terms)i(lik)o(e)f Fs(X)806 2866 y Fw(and)c
Fs(father\(X\))p Fw(.)d(A)46 b(standard)e(algorithm,)g(when)g(gi)n(v)o
(en)g(tw)o(o)h(terms)g(to)g(unify)-5 b(,)806 2966 y(\002rst)43
b(carries)f(out)g(what)g(is)h(kno)n(wn)e(as)i(the)f(occurs)g(check.)48
b(This)43 b(means)f(that)g(if)806 3065 y(it)j(is)h(ask)o(ed)f(to)g
(unify)f(a)h(v)n(ariable)f(with)i(a)f(term,)h(it)f(\002rst)h(checks)e
(whether)g(the)806 3165 y(v)n(ariable)g(occurs)h(in)h(the)g(term.)60
b(If)45 b(it)i(does,)f(the)g(standard)f(algorithm)f(declares)806
3265 y(that)35 b(uni\002cation)f(is)i(impossible,)f(for)g(clearly)g(it)
h(is)g(the)f(presence)f(of)h(the)h(v)n(ariable)806 3364
y Fs(X)43 b Fw(in)f Fs(father\(X\))e Fw(which)i(leads)h(to)g(the)g
(problems)f(discussed)g(earlier)-5 b(.)52 b(Only)42 b(if)806
3464 y(the)j(v)n(ariable)f(does)g(not)h(occur)f(in)i(the)f(term)f(do)h
(standard)f(algorithms)g(attempt)806 3563 y(to)d(carry)f(out)g(the)h
(uni\002cation.)900 3685 y(T)-7 b(o)42 b(put)g(it)h(another)e(w)o(ay)-5
b(,)42 b(standard)g(uni\002cation)f(algorithms)g(are)h
Ft(pessimistic)p Fw(.)806 3785 y(The)o(y)d(\002rst)j(carry)e(out)g(the)
h(occurs)f(check,)g(and)g(only)g(when)g(the)o(y)g(are)h(sure)f(that)806
3884 y(the)53 b(situation)g(is)i(safe)f(the)o(y)f(do)g(go)g(ahead)g
(and)g(actually)g(try)g(to)h(unify)e(the)806 3984 y(terms.)57
b(So)45 b(a)g(standard)e(uni\002cation)h(algorithm)f(will)j(ne)n(v)o
(er)d(get)i(lock)o(ed)f(into)g(a)806 4084 y(situation)j(where)g(it)h
(is)g(endlessly)g(trying)e(to)i(instantiate)f(v)n(ariables,)h(or)g(ha)n
(ving)806 4183 y(to)41 b(appeal)f(to)h(in\002nite)g(terms.)900
4305 y(Prolog,)i(on)f(the)i(other)e(hand,)h(is)h Ft(optimistic)p
Fw(.)53 b(It)43 b(assumes)h(that)f(you)g(are)g(not)806
4404 y(going)c(to)h(gi)n(v)o(e)g(it)h(an)o(ything)e(dangerous.)k(So)e
(it)g(tak)o(es)g(a)g(shortcut:)k(it)c(omits)f(the)806
4504 y(occurs)46 b(check.)63 b(As)48 b(soon)e(as)i(you)e(gi)n(v)o(e)h
(it)g(tw)o(o)h(terms,)g(it)g(rushes)f(ahead)f(and)806
4604 y(tries)i(to)f(unify)g(them.)65 b(As)48 b(Prolog)e(is)j(a)f
(programming)c(language,)j(this)h(is)h(an)806 4703 y(intelligent)42
b(strate)o(gy)-5 b(.)53 b(Uni\002cation)42 b(is)j(one)e(of)g(the)h
(fundamental)d(processes)i(that)806 4803 y(mak)o(es)48
b(Prolog)f(w)o(ork,)i(so)g(it)g(needs)e(to)i(be)f(carried)f(out)h(as)h
(f)o(ast)g(as)g(possible.)806 4902 y(Carrying)40 b(out)i(an)g(occurs)f
(check)g(e)n(v)o(ery)f(time)j(uni\002cation)d(is)j(called)f(for)f(w)o
(ould)806 5002 y(slo)n(w)52 b(it)h(do)n(wn)e(considerably)-5
b(.)78 b(Pessimism)53 b(is)g(safe,)i(b)n(ut)e(optimism)e(is)j(a)e(lot)
806 5102 y(f)o(aster!)44 b(Prolog)37 b(can)h(only)g(run)f(into)h
(problems)e(if)j(you,)e(the)h(programmer)m(,)d(ask)k(it)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 31 43
TeXDict begin 31 42 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(31)p 0 TeXcolorgray 357 1051 a(to)45 b(do)g(something)e
(lik)o(e)j(unify)e Fs(X)h Fw(with)g Fs(father\(X\))l
Fw(.)59 b(And)45 b(it)h(is)g(unlik)o(ely)e(you)357 1151
y(will)i(e)n(v)o(er)f(\(intentionally\))f(ask)i(it)g(to)g(do)f(an)o
(ything)f(lik)o(e)i(that)g(when)f(writing)g(a)357 1250
y(real)c(program.)451 1350 y(One)j(\002nal)f(remark.)52
b(Prolog)43 b(comes)g(with)h(a)g(b)n(uilt-in)f(predicate)f(that)i
(carries)357 1449 y(out)e(standard)f(uni\002cation)g(\(that)h(is,)h
(uni\002cation)e(with)h(the)g(occurs)g(check\).)48 b(The)357
1549 y(predicate)39 b(is)522 1709 y Fs(unify_with_occur)o(s_c)o(he)o
(ck/)o(2.)357 1868 y Fw(So)i(if)g(we)g(posed)g(the)g(query)522
2028 y Fs(?-)g(unify_with_occur)o(s_)o(ch)o(eck)o(\(f)o(ath)o(er)o(\(X)
o(\),X)o(\).)357 2187 y Fw(we)g(w)o(ould)f(get)h(the)g(response)f(no.)
357 2342 y Fv(Pr)o(ogramming)f(with)i(uni\002cation)357
2464 y Fw(As)f(we')l(v)o(e)e(said,)i(uni\002cation)e(is)i(a)g
(fundamental)d(operation)h(in)h(Prolog.)44 b(It)c(plays)357
2564 y(a)51 b(k)o(e)o(y)g(role)g(in)g(Prolog)f(proof)g(search)h(\(as)g
(we)h(shall)f(soon)g(learn\),)i(and)d(this)357 2664 y(alone)h(mak)o(es)
h(it)g(vital.)78 b(Ho)n(we)n(v)o(er)m(,)53 b(as)f(you)f(get)h(to)g(kno)
n(w)f(Prolog)f(better)m(,)k(it)357 2763 y(will)40 b(become)e(clear)h
(that)g(uni\002cation)f(is)i(interesting)e(and)h(important)f(in)h(its)h
(o)n(wn)357 2863 y(right.)k(Indeed,)38 b(sometimes)h(you)f(can)h(write)
g(useful)g(programs)e(simply)i(by)f(using)357 2962 y(comple)o(x)49
b(terms)i(to)g(de\002ne)g(interesting)f(concepts.)75
b(Uni\002cation)50 b(can)h(then)g(be)357 3062 y(used)40
b(to)h(pull)g(out)g(the)g(information)d(you)i(w)o(ant.)451
3162 y(Here')-5 b(s)43 b(a)g(simple)f(e)o(xample)f(of)h(this,)h(due)f
(to)g(Iv)n(an)g(Bratk)o(o.)2380 3132 y Fr(1)2462 3162
y Fw(The)g(follo)n(wing)357 3261 y(tw)o(o)35 b(line)h(kno)n(wledge)d
(base)i(de\002nes)g(tw)o(o)h(predicates,)f(namely)f Fs(vertical/1)e
Fw(and)357 3361 y Fs(horizontal/1)-5 b Fw(,)39 b(which)g(specify)f
(what)h(it)h(means)e(for)g(a)i(line)f(to)g(be)g(v)o(ertical)f(or)357
3461 y(horizontal)h(respecti)n(v)o(ely:)522 3620 y Fs
(vertical\(line\(po)o(int)o(\(X)o(,Y\))o(,p)o(oi)o(nt\()o(X,)o(Z\)\))o
(\).)522 3819 y(horizontal\(line\()o(poi)o(nt)o(\(X,)o(Y\))o(,p)o(oin)o
(t\()o(Z,Y)o(\)\))o(\).)451 3979 y Fw(No)n(w)-5 b(,)55
b(at)e(\002rst)g(glance)f(this)i(kno)n(wledge)c(base)j(may)f(seem)h
(too)f(simple)h(to)357 4079 y(be)h(interesting:)73 b(it)56
b(contains)e(just)h(tw)o(o)g(f)o(acts,)k(and)54 b(no)g(rules.)87
b(But)56 b(w)o(ait)f(a)357 4178 y(minute:)60 b(the)49
b(tw)o(o)g(f)o(acts)g(are)g(e)o(xpressed)e(using)h(comple)o(x)f(terms)i
(which)f(again)357 4278 y(ha)n(v)o(e)55 b(comple)o(x)f(terms)i(as)g(ar)
o(guments.)88 b(Indeed,)58 b(there)d(are)h(three)f(le)n(v)o(els)h(of)
357 4377 y(terms)41 b(nested)f(inside)h(terms.)k(Moreo)o(v)o(er)m(,)38
b(the)j(deepest)f(le)n(v)o(el)h(ar)o(guments)d(are)j(all)357
4477 y(v)n(ariables,)48 b(so)h(the)f(concepts)f(are)h(being)f
(de\002ned)g(in)h(a)g(general)f(w)o(ay)-5 b(.)67 b(Maybe)357
4577 y(it')-5 b(s)42 b(not)e(quite)h(as)h(simple)e(as)i(it)g(seems.)k
(Let')-5 b(s)42 b(tak)o(e)f(a)g(closer)g(look.)451 4676
y(Right)62 b(do)n(wn)f(at)h(the)f(bottom)g(le)n(v)o(el,)66
b(we)c(ha)n(v)o(e)f(a)h(comple)o(x)e(term)i(with)357
4776 y(functor)38 b Fs(point)g Fw(and)i(tw)o(o)g(ar)o(guments.)j(Its)e
(tw)o(o)f(ar)o(guments)e(are)h(intended)g(to)h(be)357
4876 y(instantiated)c(to)i(numbers:)k Fs(point\(X,Y\))34
b Fw(represents)j(the)g(Cartesian)g(coordinates)p 0 TeXcolorgray
357 4944 1040 4 v 447 4999 a Fq(1)476 5023 y Fo(See)e(his)f(book)g
Fp(Pr)m(olo)o(g)h(Pr)m(o)o(gr)o(aming)g(for)f(Arti\002cial)i(Intellig)o
(ence)p Fo(,)j(Addison-W)-5 b(esle)o(y)36 b(Publishing)357
5102 y(Compan)o(y)l(,)42 b(1990,)g(second)h(edition,)g(pages)g
(41\22643.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 32 44
TeXDict begin 32 43 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(32)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(of)j(a)i(point.)55 b(That)44
b(is,)i(the)e Fs(X)g Fw(indicates)g(the)h(horizontal)d(distance)i(the)g
(point)g(is)806 1151 y(from)f(some)i(\002x)o(ed)f(point,)g(while)h(the)
g Fs(Y)f Fw(indicates)h(the)f(v)o(ertical)g(distance)h(from)806
1250 y(that)c(same)g(\002x)o(ed)f(point.)900 1351 y(No)n(w)-5
b(,)40 b(once)g(we')l(v)o(e)g(speci\002ed)g(tw)o(o)h(distinct)g
(points,)f(we')l(v)o(e)g(speci\002ed)g(a)i(line,)806
1451 y(namely)i(the)h(line)g(between)g(them.)58 b(So)46
b(the)f(tw)o(o)h(comple)o(x)d(terms)j(representing)806
1551 y(points)k(are)h(b)n(undled)e(together)h(as)h(the)g(tw)o(o)g(ar)o
(guments)e(of)i(another)e(comple)o(x)806 1650 y(term)38
b(with)h(the)g(functor)e Fs(line)n Fw(.)46 b(In)38 b(ef)n(fect,)h(we)g
(represent)f(a)h(line)g(by)f(a)h(comple)o(x)806 1750
y(term)g(which)g(has)h(tw)o(o)g(ar)o(guments)e(which)h(are)h(comple)o
(x)e(terms)i(themselv)o(es)f(and)806 1850 y(represent)i(points.)49
b(W)-7 b(e')l(re)43 b(using)f(Prolog')-5 b(s)42 b(ability)g(to)g(b)n
(uild)g(comple)o(x)f(terms)h(to)806 1949 y(w)o(ork)e(our)g(w)o(ay)h(up)
g(a)g(hierarchy)d(of)j(concepts.)900 2050 y(Being)57
b(v)o(ertical,)k(and)56 b(being)h(horizontal,)i(are)e(properties)f(of)h
(lines.)95 b(The)806 2150 y(predicates)41 b Fs(vertical)e
Fw(and)i Fs(horizontal)e Fw(therefore)h(both)h(tak)o(e)h(one)g(ar)o
(gument)806 2250 y(which)j(represents)h(a)h(line.)62
b(The)46 b(de\002nition)f(of)h Fs(vertical/1)d Fw(simply)j(says:)57
b(a)806 2349 y(line)51 b(that)g(goes)g(between)f(tw)o(o)h(points)g
(that)g(ha)n(v)o(e)g(the)g(same)g(x-coordinate)e(is)806
2449 y(v)o(ertical.)80 b(Note)53 b(ho)n(w)g(we)g(capture)f(the)h(ef)n
(fect)f(of)h(\223the)f(same)h(x-coordinate\224)806 2549
y(in)h(Prolog:)71 b(we)54 b(simply)g(mak)o(e)f(use)h(of)g(the)g(same)g
(v)n(ariable)f Fs(X)h Fw(as)h(the)f(\002rst)806 2648
y(ar)o(gument)38 b(of)j(the)g(tw)o(o)g(comple)o(x)e(terms)i
(representing)e(the)i(points.)900 2749 y(Similarly)-5
b(,)53 b(the)f(de\002nition)f(of)g Fs(horizontal/1)d
Fw(simply)j(says:)68 b(a)53 b(line)e(that)806 2849 y(goes)45
b(between)f(tw)o(o)i(points)f(that)h(ha)n(v)o(e)e(the)i(same)g
(y-coordinate)c(is)47 b(horizontal.)806 2949 y(T)-7 b(o)57
b(capture)g(the)h(ef)n(fect)f(of)g(\223the)h(same)g(y-coordinate\224,)h
(we)f(use)g(the)f(same)806 3048 y(v)n(ariable)34 b Fs(Y)j
Fw(as)f(the)g(second)g(ar)o(gument)d(of)j(the)g(tw)o(o)g(comple)o(x)f
(terms)h(representing)806 3148 y(the)k(points.)900 3249
y(What)57 b(can)g(we)g(do)f(with)h(this)g(kno)n(wledge)d(base?)93
b(Let')-5 b(s)58 b(look)e(at)h(some)806 3349 y(e)o(xamples:)971
3520 y Fs(?-)41 b(vertical\(line\(p)o(oin)o(t\()o(1,)o(1\),)o(po)o(int)
o(\(1)o(,3)o(\)\)\))o(.)971 3619 y(yes)806 3790 y Fw(This)33
b(should)f(be)i(clear:)42 b(the)33 b(query)f(uni\002es)i(with)f(the)h
(de\002nition)e(of)h Fs(vertical/1)806 3890 y Fw(in)39
b(our)f(little)j(kno)n(wledge)c(base)i(\(and)f(in)i(particular)m(,)e
(the)h(representations)e(of)i(the)806 3990 y(tw)o(o)44
b(points)f(ha)n(v)o(e)g(the)h(same)g(\002rst)g(ar)o(gument\))d(so)j
(Prolog)f(says)h(yes.)55 b(Similarly)806 4089 y(we)41
b(ha)n(v)o(e:)971 4260 y Fs(?-)g(vertical\(line\(p)o(oin)o(t\()o(1,)o
(1\),)o(po)o(int)o(\(3)o(,2)o(\)\)\))o(.)971 4360 y(no)806
4531 y Fw(This)62 b(query)f(does)g(not)h(unify)f(with)h(the)g
(de\002nition)f(of)h Fs(vertical/1)d Fw(\(the)806 4630
y(representations)34 b(of)h(the)h(tw)o(o)g(points)g(ha)n(v)o(e)f(dif)n
(ferent)f(\002rst)j(ar)o(guments\))c(so)k(Prolog)806
4730 y(says)k(no.)900 4831 y(But)g(we)h(can)f(also)g(ask)g(more)f
(general)g(questions:)971 5002 y Fs(?-)h(horizontal\(line)o(\(po)o(in)o
(t\()o(1,1)o(\),)o(poi)o(nt)o(\(2)o(,Y\))o(\)\))o(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 33 45
TeXDict begin 33 44 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(33)p 0 TeXcolorgray 522 1051 a Fs(Y)41
b(=)g(1)g(;)522 1250 y(no)357 1405 y Fw(Here)52 b(our)g(query)f(is:)71
b(if)53 b(we)g(w)o(ant)g(a)g(horizontal)e(line)h(between)g(a)h(point)f
(at)357 1505 y(\(1,1\),)46 b(and)g(point)g(whose)g(x-coordinate)e(is)k
(2,)g(what)e(should)g(the)h(y-coordinate)357 1604 y(of)d(that)h(second)
g(point)f(be?)58 b(Prolog)44 b(correctly)f(tells)j(us)f(that)h(the)f
(y-coordinate)357 1704 y(should)37 b(be)i(1.)45 b(If)38
b(we)h(then)g(ask)g(Prolog)e(for)h(a)h(second)f(possibility)g(\(note)g
(the)h Fs(;)o Fw(\))357 1803 y(it)i(tells)h(us)g(that)f(no)f(other)g
(possibilities)i(e)o(xist.)451 1903 y(No)n(w)f(consider)f(the)h(follo)n
(wing:)522 2058 y Fs(?-)g(horizontal\(line\()o(po)o(in)o(t\(2)o(,3)o
(\),P)o(\)\))o(.)522 2257 y(P)g(=)g(point\(_1972,3\))36
b(;)522 2456 y(no)357 2611 y Fw(This)49 b(query)e(is:)62
b(if)49 b(we)g(w)o(ant)g(a)g(horizontal)e(line)i(between)f(a)h(point)f
(at)h(\(2,3\),)357 2711 y(and)f(some)h(other)g(point,)h(what)f(other)f
(points)h(are)g(permissible?)70 b(The)49 b(answer)357
2810 y(is:)i(an)o(y)42 b(point)g(whose)g(y-coordinate)e(is)k(3.)52
b(Note)43 b(that)g(the)g Fs(_1972)e Fw(in)i(the)g(\002rst)357
2910 y(ar)o(gument)f(of)j(the)g(answer)g(is)h(a)f(v)n(ariable,)g(which)
g(is)h(Prolog')-5 b(s)44 b(w)o(ay)h(of)g(telling)357
3010 y(us)c(that)g(an)o(y)f(x-coordinate)e(at)k(all)f(will)h(do.)451
3109 y(A)65 b(general)e(remark:)92 b(the)65 b(answer)f(gi)n(v)o(en)f
(to)h(our)g(last)h(query)-5 b(,)69 b(namely)357 3209
y Fs(point\(_1972,3\))-6 b Fw(,)66 b(is)d Ft(structur)m(ed)p
Fw(.)106 b(That)61 b(is,)67 b(the)61 b(answer)g(is)h(a)f(comple)o(x)357
3308 y(term,)h(representing)56 b(a)j(sophisticated)f(concept)f
(\(namely)g(\223an)o(y)g(point)h(whose)357 3408 y(y-coordinate)33
b(is)j(3\224\).)44 b(This)36 b(structure)e(w)o(as)j(b)n(uilt)f(using)f
(uni\002cation)f(and)h(nothing)357 3508 y(else:)58 b(no)47
b(logical)f(inference)f(\(and)h(in)h(particular)m(,)f(no)h(use)g(of)f
(modus)g(ponens\))357 3607 y(w)o(as)j(used)g(to)g(produce)d(it.)70
b(Building)48 b(structure)g(by)g(uni\002cation)g(turns)g(out)h(to)357
3707 y(be)41 b(a)i(po)n(werful)d(idea)h(in)h(Prolog)f(programming,)d(f)
o(ar)k(more)f(po)n(werful)f(than)h(this)357 3807 y(rather)55
b(simple)g(e)o(xample)f(might)h(suggest.)90 b(Moreo)o(v)o(er)m(,)56
b(when)f(a)h(program)e(is)357 3906 y(written)41 b(that)i(mak)o(es)f
(hea)n(vy)f(use)h(of)g(uni\002cation,)f(it)h(is)h(lik)o(ely)f(to)g(be)g
(e)o(xtremely)357 4006 y(ef)n(\002cient.)84 b(W)-7 b(e)56
b(will)e(study)g(a)g(beautiful)f(e)o(xample)g(in)h(Chapter)g(7)g(when)f
(we)357 4105 y(discuss)f(dif)n(ference)e(lists,)55 b(which)c(are)h
(used)g(to)g(implement)e(Prolog')-5 b(s)51 b(b)n(uilt-in)357
4205 y(grammar)39 b(system,)i(De\002nite)g(Clause)g(Grammars.)451
4305 y(This)g(style)g(of)f(programming)d(is)k(particularly)e(useful)h
(in)g(applications)f(where)357 4404 y(the)k(important)e(concepts)h(ha)n
(v)o(e)h(a)g(natural)f(hierarchical)f(structure)h(\(as)i(the)o(y)e(did)
357 4504 y(in)54 b(the)h(simple)g(kno)n(wledge)d(base)j(abo)o(v)o(e\),)
g(for)f(we)h(can)g(then)f(use)g(comple)o(x)357 4604 y(terms)59
b(to)h(represent)e(this)i(structure,)j(and)c(uni\002cation)g(to)g
(access)h(it.)103 b(This)357 4703 y(w)o(ay)40 b(of)h(w)o(orking)e
(plays)h(an)h(important)e(role)h(in)h(computational)d(linguistics,)i
(for)357 4803 y(e)o(xample,)48 b(because)f(information)e(about)i
(language)f(has)i(a)g(natural)f(hierarchical)357 4902
y(structure)40 b(\(think)f(of)i(the)g(w)o(ay)f(sentences)h(can)g(be)f
(analysed)g(into)h(noun)e(phrases)357 5002 y(and)d(v)o(erb)g(phrases,)h
(and)g(noun)e(phrases)i(analysed)f(into)h(determiners)f(and)g(nouns,)
357 5102 y(and)k(so)h(on\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 34 46
TeXDict begin 34 45 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(34)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(2)99 b(Pr)n(oof)42 b(Sear)n(ch)806
1181 y Fw(No)n(w)e(that)h(we)g(kno)n(w)f(about)f(uni\002cation,)h(we)h
(are)f(in)h(a)g(position)f(to)h(learn)f(ho)n(w)806 1280
y(Prolog)f(actually)h(searches)g(a)g(kno)n(wledge)f(base)h(to)h(see)f
(if)h(a)g(query)e(is)i(satis\002ed.)806 1380 y(That)48
b(is,)i(we)f(are)f(ready)g(to)g(learn)g(about)g(proof)e(search.)68
b(W)-7 b(e)49 b(will)g(introduce)806 1479 y(the)40 b(basic)i(ideas)f
(in)m(v)n(olv)o(ed)e(by)h(w)o(orking)f(through)g(a)j(simple)f(e)o
(xample.)900 1579 y(Suppose)f(we)h(are)g(w)o(orking)e(with)j(the)f
(follo)n(wing)e(kno)n(wledge)g(base)971 1745 y Fs(f\(a\).)971
1845 y(f\(b\).)971 2044 y(g\(a\).)971 2144 y(g\(b\).)971
2343 y(h\(b\).)971 2542 y(k\(X\))h(:-)g(f\(X\),)g(g\(X\),)f(h\(X\).)806
2709 y Fw(Suppose)g(we)j(then)e(pose)h(the)g(query)971
2875 y Fs(?-)g(k\(Y\).)806 3041 y Fw(It)h(is)h(probably)d(clear)h(that)
i(there)e(is)i(only)e(one)h(answer)g(to)g(this)g(query)-5
b(,)41 b(namely)806 3141 y Fs(k\(b\))n Fw(,)g(b)n(ut)g(ho)n(w)f(e)o
(xactly)h(does)f(Prolog)g(w)o(ork)g(this)i(out?)j(Let')-5
b(s)42 b(see.)900 3241 y(Prolog)e(reads)i(the)f(kno)n(wledge)e(base,)i
(and)g(tries)h(to)g(unify)e Fs(k\(Y\))g Fw(with)i(either)806
3340 y(a)57 b(f)o(act,)j(or)d(the)f(head)g(of)h(a)g(rule.)92
b(It)57 b(searches)g(the)g(kno)n(wledge)d(base)j(top)806
3440 y(to)49 b(bottom,)h(and)f(carries)g(out)g(the)g(uni\002cation,)h
(if)g(it)g(can,)h(at)e(the)h(\002rst)g(place)806 3540
y(possible.)56 b(Here)44 b(there)g(is)i(only)e(one)g(possibility:)53
b(it)45 b(must)g(unify)e Fs(k\(Y\))h Fw(to)g(the)806
3639 y(head)c(of)g(the)h(rule)g Fs(k\(X\))f(:-)h(f\(X\),)e(g\(X\),)g
(h\(X\))o Fw(.)900 3739 y(When)46 b(Prolog)g(uni\002es)h(the)f(v)n
(ariable)g(in)h(a)g(query)e(to)i(a)g(v)n(ariable)e(in)i(a)g(f)o(act)806
3839 y(or)g(rule,)i(it)f(generates)f(a)h(brand)f(ne)n(w)g(v)n(ariable)g
(\(say)h Fs(_G34)n Fw(\))g(to)g(represent)e(the)806 3938
y(shared)40 b(v)n(ariables.)45 b(So)c(the)g(original)f(query)f(no)n(w)h
(reads:)971 4105 y Fs(k\(_G34\))806 4271 y Fw(and)g(Prolog)g(kno)n(ws)g
(that)971 4437 y Fs(k\(_G34\))e(:-)j(f\(_G34\),)d(g\(_G34\),)h
(h\(_G34\).)900 4604 y Fw(So)k(what)g(do)g(we)g(no)n(w)g(ha)n(v)o(e?)51
b(The)42 b(original)g(query)g(says:)50 b(\223I)44 b(w)o(ant)f(to)g
(\002nd)806 4703 y(an)50 b(indi)n(vidual)e(that)j(has)f(property)e
Fs(k)p Fw(\224.)74 b(The)50 b(rule)g(says,)j(\223an)d(indi)n(vidual)e
(has)806 4803 y(property)43 b Fs(k)i Fw(if)g(it)h(has)g(properties)d
Fs(f)p Fw(,)j Fs(g)p Fw(,)h(and)d Fs(h)p Fw(\224.)59
b(So)45 b(if)h(Prolog)e(can)h(\002nd)g(an)806 4902 y(indi)n(vidual)40
b(with)i(properties)e Fs(f)p Fw(,)i Fs(g)p Fw(,)g(and)g
Fs(h)o Fw(,)h(it)f(will)h(ha)n(v)o(e)e(satis\002ed)i(the)f(original)806
5002 y(query)-5 b(.)58 b(So)46 b(Prolog)e(replaces)i(the)f(original)g
(query)f(with)i(the)g(follo)n(wing)e(list)j(of)806 5102
y(goals:)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 35 47
TeXDict begin 35 46 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(35)p 0 TeXcolorgray 522 1051 a Fs(f\(_G34\),)38
b(g\(_G34\),)g(h\(_G34\).)451 1212 y Fw(Our)54 b(discussion)g(of)g(the)
h(querying)d(process)i(so)h(f)o(ar)f(can)g(be)h(made)f(more)357
1311 y(ele)o(gant)g(and)h(succinct)g(if)h(we)g(think)f(graphically)-5
b(.)87 b(Consider)55 b(the)g(follo)n(wing)357 1411 y(diagram:)p
0 TeXcolorgray 0 TeXcolorgray 1098 1965 a @beginspecial
151 @llx 606 @lly 285 @urx 662 @ury 1340 @rwi @setspecial
%%BeginDocument: chap2-pspic1.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap2-pspic1.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 151 606 285 662
%%DocumentFonts: CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap2-pspic1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 51 /three put
dup 52 /four put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 89 /Y put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 107 /k put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F977EFEFBE4B0AC369070B3652B7542ED968F2FFE533C
CC1D8B7C35A5E29CBF897D9C8EF5A14FAB67FB0F77D9BC7ECA7FEA2B7A35DAE9
DF290446920B4C534715BEEF4819E438491C9DAB191FED40312E6AD0F142653D
A546D27C470377E95C9B1336AE16F5EC016DDF11F79234A880A99AB7E1784384
2B2B7EA60F88D50CB5BE5F12FBDBE6481D67434810D24D6260EF6D7975C3D2ED
C2E7C2F5D2C8CFC5F6FDA3736CFDEC04A31DFF256C6198A819D55C36D2C5556D
4AEB2371A60B1C9951D8A457A4F1CB344477D7A65161332224B0253D61A9F5AB
6BB0345592B42926CF2AC2C9B9EAA0489C6D09EA559B9E0DFCCA1A39673371E8
054176E97358DECFA6BE9B8612606BD71EE76ACABD4070C05B82C58509CC2E62
4E738FA2C0117AF693E5EDC640F5E1D4AF398B968C9DFB0B022776922B60CFAD
564C1C0665B2E9E576C11C4075F11A0832D4CEDA6CF087824EF502A43830B823
E31313BF7119F0871D66B3B390ADA6E7AE165E475189A3DD01B7C3A527A6DED4
07DCA42C29BAC20A476A80199EEDB53219103D50C16C7ADA4B3A932692615492
C046257CAC1CBCC31D44C06BCC58D737F7D239EBE3EEE1A4F981B1FDC52CE047
DAB64EBA1EEF23FDD6D15A5E4B14C74C0766E857E9E8AC1C2DD5D792284965F0
0F59BF602D2632D99EC6250B2EE635842201231CA58B99CBD64E8626DD3751C6
FB8E2F2860942F2C184DCB96E253D3B955F509788DA6C2B8989DDE361B3E647E
74A243877B5D493E16FAA75186E7E463661F67414DF1A49EED1ABA9543F0A89C
4DF01C43A24BFE5463C9619F0CE816D457CD214D05982AE778AEA1330D4DDD26
4FD3CB99633F373987DF19D29CB845F00A177EAD188847E7F6497E494C70B652
0E59FA5987CEA4D8F5685C51A54E690E7BF4BEB7FD5733825CDF4A716744D3D1
9D54103148EEF22BEEE604EF958923630C1C7B9AA0F2E00E7E7ADBA01502C9A1
C30E9D0368FB964B52F4C9E95607035B192D0DB3CEBA93BC5C9F4E0AE9FA92C8
B5C2BD542B3D46C1828FF9EF81158A47BD89E373F2E45F09F58B50A9CC417F6A
E6190B75D6E7EAAA7B51AA1C12F5385FBCA376332D27BACFE5D0DBE738084795
BA938A28FB17FB62CFED083861B9ACA692EB09DFB0B956B404C74657B72A77E3
3B0B6B33B5418F210BACAA8CCC7D60AF299F7A6109C4C1DFF94FBB5CF83F65A6
F1952EB4096C1B91B6657C4BB33D7A290A4FD1B16EE901CCC6BD34A540CC0B84
B38A2C24D781EAEFEFB6AA49B036F3A5D6B2E57ACB49B1B12A15889917716A54
910E71FB6278604A40050F806138BF547EF45B3D8111AE4E0CBFCF1D5B4E0A30
94DE74D0F6A2AF779C4C3EB248CFA39F91D158513A55AD74EEDEF9323418456C
69BA9FB90C044713650632C0C6C59A860FB262168EBB9F88CE3EDA258CBD462A
0C4996F7292D36D4B6BDD139C69E0B2048B609DFD545AA99CF8EC08CF47C4090
55FA93DCC555683BF6E2BCE859A035DF08003075C5109F898D7ECDC4655B3ED2
D4F69A23BCC5743A6DF5F634D5A1793EB144B4034E440AF248939790081C2D47
60DFBE929FECAED2A466ED87873C3772A3EC51B1A81693FCCEEC9EFBD59535C5
8B915E7A0F7CBF0C84EA4C5D588BADEA3126296ACFC9B5C71D0890A636CBD371
FB8E126407ECD104288CC9BDA66504490560781C7C304449084A11FB59FDF8A6
D3A542E3F222155B582999E5E2ED391D6CBDDA111FB2625069E57129652E16BD
EAE32DD4672E4D4C4AE6754336416227A68E47E30ABD93644E4C24350694BDE1
ADFCBD642AFA51F63D243C1A8F47276DAECF097069162A774F66AA6CDADF2322
62065DD54FC81DABC08A988491881789BCA2CC9D229B17BE5A08B4E849813874
E73992E818C66E25FFA1345CBE61C7548D2D862881B6C3A841900C9DFCC0F7FF
916AB3E818C053424444DEFD64FF844C90BA8ACC0E567982F9CF0D4F94588F0D
7391248B42275ED0899A3BEC91025EF2C73A768BFA813D3166C62DB4E633DB0F
B7CD4F7D4346555A12EBAA3698F01EBAFB3405626A20EC44574FC7B94052710D
09948ACB39347834A2499338BEE60D289EF1A2DA0E23E9E357282ED4EB6968E5
D925072127AD613F183246F03770482CB505EC8D77EB1AB91362259AB7F8C4EB
B95632FBE36F67657AB166575FA1EAB8974FDE0F4AC19621C6E9DDA3A519417B
24EE12D02684CA61037ED1DBBBCB637EFF579C5D76A3E2FAF599AE361FD666E8
951C2DC740CF23BBC662F0ED178B293FC06369663A778B833326CE818E45AB18
AF4225B74D3114EFEDDB67FBCF310F7E5F4A56CBA06CB81D31DD01008D9FCCED
EBD24A1699ECE99E1C696A84568AFF78B7839BE24221DF453006B959E692A84E
DAE11D200FCC0A5709AC8CFC3EBA52C4B529B223DEE1BF48D790AC6210C20B3C
638B35291FD33E975DA15B49F5D621222C1D066E165BF33048F8A485801D2BA1
72CE7C1E2089BA9B4982CA9FEE1AF4BC6D246718205A40273A1F7353A648A483
2173D87A6388F97240EC846753CAAC4B9C4B12D911AEE927F0E8FE40027905F5
944AF4110944D18CE4350CF74FE32B007C1109D93F67F1DD9FC64BF7C41125C2
801088803448B0C048E17801ED990FE3A459EF57BE4B055CDC2D94507FAFD4AD
7CD3CA1AC62BDD6311C58C6FD6D832FF6CB07C1B9422A2DBB99D5F77E601BED6
95A5CBF7E9432EAC84182FE565B3DA84B18DB4C34B0A5C7BFF2680A97C9F3C2B
60990E7F4C6351C02A36C6B39564C458937D879680AE8814427096704D192C80
AE9F55C63C299F26CF82A7CC421061E7B38FD58098079273C8BF79D9BF158845
8DEA8D9A0239CF5B3F814F6DECB68B1AAAC40DFBDF21966FEBF52238F68BDCB6
3780F6E2F931CAC2C2DB8F0E70853D173BA79620657F4E46BC7AA45014BC2C2C
B3E58CCC48609EBB42519FC5DEE63F228E4D78A3D8A367264FF0B23FB6F7E4D2
091CA902C8F51A9FCA1CFA2469D518D452012819590B0E79C68A157238AE9DB5
15AEB5C6BF2DEBD9CD06C278BB72957138482456BF4F8B5AB4B99E670D8A1D9F
45D83365D7FEDB32E6B379E9143BF7E91F35B3BF8993137F1B003DD8BC24FB4D
221E0B505722BF6C180D9F12440A4176BCCF6DB7DE16722BB4ADC78B3F1D8B1C
71FBB4D0E7716D6C3576F31CF7430A6D8E7F8BD1BD0BFD3854BB468EE533A97D
852D931E9B09821BD121F361A00143E212C7AFFCAEC367AB5B67730239E51F13
74F1F698895911D141D04F5AC28721A97FF7B4D631573A7211435459F58BF305
38DEC3F32231CF0FCA762E23E3AD36024D76C64469A634136F1C8B3DCCAA7833
987BC8743AB9055003A2070E1BE4536C36264F7F0EF8CFD819F096DABE5D54AD
8689E6EAC2E0630718D2AE91472831CF851F929D2EA43563D5D64DC5A16B0B2C
2325373A573FAAB4D6E4CCFCF7500A26ABC849FFF07C9DC5A972A2AB2B7FE7B2
129330497F697DD24C56314F281CDE40336C8B92AFE8A0B5F373D63808B567FA
5998A06254D6E19556C73934D57E69F2A8BB6AE565693B5DA5A3F2794D3B2CD5
68C409481FCC709639F12DAED17008B98A749AC5AE02DCC19F9323BB78C5A3C8
CB45CA08342737F310088ABD876296C8BE8E75380560D1382241D8087A9463D6
AD34757388C726AB8AE1DBE839E050A14364A08DB727BA4F399E5AF2DB3FE399
E20A827548E746711C5D5D074EB30651083EC098E000734304B4185418FA8DD1
C215BE3284D6A82BF089D2BDDE2A4A93ADBF9CE4E50EF10C15A7BCAF2541E63F
2AAF26CD5381FA42006180946604CE96C2C57736BF8D859A20CF68FB88D8B7D8
806B70BC9271B58F9652FCB7309C00C604CDC2B2C02478326288F8BC14F3B652
2D9185A33A0030F79BBCE0297BD08701F1FE370C8F88916D3EBB08897630CEF8
64FCB8470514BA6C8093E6DD9D7449E6F54E3C60F4F94011BFAB9F7E84B0C8E0
AC08C2C252A3ED1C05C294B694ABA9269B297553BFAFD8EB14EA1D54E9521DDA
6F4BE837752CB0FB0C052F526AD79250C311C0193FCA0D41018C8A18C5943296
7E37D2ACEA7FD5218A380DDCB2D61B5D180D85FE3FB524D70B205554B70F9676
171D1F3BC4417BBCA6D7582EFE895D8712F0F064F0DFBD5A7B50D8EE910FBE0D
4BD6FA773D102F926CAFE7126118FB040868355C2007E89333CFA6EF5800B37E
3ABEA97A64D0DFA58418229DC9F4DDCEF9C4905F7842906626D1E9327D3B6447
76543A107FB12902E0BC8DF6022FDB0025A01D6472C2A1D35718B807F8589F2D
F8D0E8FD341CC4C4D1B935D768BC980F5864C2C5771102F6353492344076CEA4
9594E9115A569739A77F946F109A66150CDEF479B3F60DD30AC4E85F50464883
736017A8ADE42607493026E0D8D0C105CB6F6EEAE96745B28D962B4C992CDE70
5ED7CA1C2713BA3CCF90BABB9B18F00A346E6D21761C3BE97246150D9A541267
C44D2FF8932627569E98F24AD11FFCA5755F4693719AA2942C532967207744A7
0470FFB7C48615220581B4FD29FBE8280EC0FCCD93CB740FF9E8739384805D91
E0B8E5A832BCF04F746F00DA3DFB41510C46AD80A8E931A04A4616DF9136FFBF
5085532B4ED998BF166532AF86509A25EF6824A59B933980295FD057DCB6253C
21B3D3706FAD284C3B75753319AB086964F11884A49AD2FC174984142FA0B213
FCCE9A0329BE1FF1B07844C1CB64183740DF77AB58A4CE189CF063DA24D27CBF
EC3D47AC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap2-pspic1.dvi)
@start /Fa 148[44 2[44 44 44 12[44 17[44 7[44 1[44 8[44
44 5[44 44 2[44 44 40[{}14 83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1035 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 44.34969 22.17484
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1035 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)42 b(k\(Y\))639 926 y
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 139.68881 69.8444
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 639 926 a 32
w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 135.88881 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)h(f\()p
895 926 27 4 v 30 w(G34\),g\()p 1233 926 V 29 w(G34\),h\()p
1570 926 V 28 w(G34\))1219 901 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1219 901 a 1219 901
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 24.06482
def /r 24.06482 def /h 6.89726 def /d 6.81386 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1219 901 a 1051 926 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 44.32964 9.91112 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fa(Y)g(=)p 1230 926 27 4 v 75 w(G34)1219 901 y
 tx@Dict begin PutEnd  end
 1219 901
a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 357 2126 a(Ev)o(erything)c(in)k(a)g(box)e(is)i(either)f(a)
h(query)e(or)h(a)h(goal.)86 b(In)54 b(particular)m(,)h(our)357
2226 y(original)50 b(goal)h(w)o(as)h(to)f(pro)o(v)o(e)f
Fs(k\(Y\))n Fw(,)k(thus)d(this)h(is)h(sho)n(wn)d(in)i(the)f(top)g(box.)
357 2325 y(When)37 b(we)h(uni\002ed)f Fs(k\(Y\))f Fw(with)i(the)g(head)
f(of)g(the)h(rule)f(in)h(the)f(kno)n(wledge)f(base,)357
2425 y Fs(X)i(Y)p Fw(,)h(and)f(the)g(ne)n(w)h(internal)e(v)n(ariable)h
Fs(_G34)f Fw(were)h(made)g(to)h(share)f(v)n(alues,)g(and)357
2525 y(we)h(were)g(left)h(with)f(the)g(goals)g Fs(f\(_G34\),g\(_G34\),)
o(h\()o(_G3)o(4\))-7 b Fw(,)40 b(just)g(as)g(sho)n(wn.)451
2624 y(No)n(w)-5 b(,)39 b(whene)n(v)o(er)e(it)j(has)g(a)f(list)h(of)f
(goals,)h(Prolog)e(tries)h(to)h(satisfy)f(them)g(one)357
2724 y(by)c(one,)i(w)o(orking)d(through)g(the)j(list)g(in)f(a)h(left)f
(to)h(right)e(direction.)43 b(The)36 b(leftmost)357 2823
y(goal)44 b(is)h Fs(f\(_G34\))m Fw(,)h(which)e(reads:)53
b(\223I)44 b(w)o(ant)h(an)f(indi)n(vidual)f(with)i(property)d
Fs(f)o Fw(\224.)357 2923 y(Can)k(this)g(goal)f(be)h(satis\002ed?)60
b(Prolog)45 b(tries)h(to)g(do)f(so)h(by)f(searching)g(through)357
3023 y(the)52 b(kno)n(wledge)e(base)i(from)f(top)h(to)h(bottom.)78
b(The)52 b(\002rst)h(item)f(it)h(\002nds)g(that)357 3122
y(uni\002es)43 b(with)g(this)g(goal)g(is)g(the)g(f)o(act)h
Fs(f\(a\))n Fw(.)52 b(This)43 b(satis\002es)i(the)e(goal)f
Fs(f\(_G34\))357 3222 y Fw(and)47 b(we)h(are)g(left)g(with)g(tw)o(o)g
(more)f(goals.)65 b(No)n(w)-5 b(,)49 b(when)e(we)h(unify)f
Fs(f\(_G34\))357 3322 y Fw(to)f Fs(f\(a\))n Fw(,)i Fs(_G34)d
Fw(is)j(instantiated)d(to)i Fs(a)o Fw(,)h(and)e(this)g(instantiation)g
(applies)g(to)g(all)357 3421 y(occurrences)36 b(of)i
Fs(_G34)e Fw(in)j(the)f(list)h(of)f(goals.)44 b(So)39
b(the)f(list)h(no)n(w)e(looks)h(lik)o(e)g(this:)522 3582
y Fs(g\(a\),h\(a\))357 3743 y Fw(and)g(our)h(graphical)f
(representation)f(of)i(the)g(proof)f(search)h(no)n(w)g(looks)f(lik)o(e)
i(this:)p 0 TeXcolorgray 0 TeXcolorgray 1098 4680 a @beginspecial
151 @llx 560 @lly 285 @urx 662 @ury 1340 @rwi @setspecial
%%BeginDocument: chap2-pspic2.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap2-pspic2.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 151 560 285 662
%%DocumentFonts: CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap2-pspic2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 51 /three put
dup 52 /four put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 89 /Y put
dup 97 /a put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 107 /k put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F977EFEFBE4B0AC369070B3652B7542ED968F2FFE533C
CC1D8B7C35A5E29CBF897D9C8EF5A14FAB67FB0F77D9BC7ECA7FEA2B7A35DAE9
DF290446920B4C534715BEEF4819E438491C9DAB191FED40312E6AD0F142653D
A546D27C470377E95C9B1336AE16F5EC016DDF11F79234A880A99AB7E1784384
2B2B7EA60F88D50CB5BE5F12FBDBE6481D67434810D24D6260EF6D7975C3D2ED
C2E7C2F5D2C8CFC5F6FDA3736CFDEC04A31DFF256C6198A819D55C36D2C5556D
4AEB2371A60B1C9951D8A457A4F1CB344477D7A65161332224B0253D61A9F5AB
6BB0345592B42926CF2AC2C9B9EAA0489C6D09EA559B9E0DFCCA1A39673371E8
054176E97358DECFA6BE9B8612606BD71EE76ACABD4070C05B82C58509CC2E62
4E738FA2C0117AF693E5EDC640F5E1D4AF398B968C9DFB0B022776922B60CFAD
564C1C0665B2E9E576C11C4075F11A0832D4CEDA6CF087824EF502A43830B823
E31313BF7119F0871D66B3B390ADA6E7AE165E475189A3DD01B7C3A527A6DED4
07DCA42C29BAC20A476A80199EEDB53219103D50C16C7ADA4B3A932692615492
C046257CAC1CBCC31D44C06BCC58D737F7D239EBE3EEE1A4F981B1FDC52CE047
DAB64EBA1EEF23FDD6D15A5E4B14C74C0766E857E9E8AC1C2DD5D792284965F0
0F59BF602D2632D99EC6250B2EE635842201231CA58B99CBD64E8626DD3751C6
FB8E2F2860942F2C184DCB96E253D3B955F509788DA6C2B8989DDE361B3E647E
74A243877B5D493E16FAA75186E7E463661F67414DF1A49EED1ABA92CB5DE7E5
A67D422015897BF849D5F6C083D1C0BFB5F4671FD86467C1D92099E1AE77B2AE
AE256C8FAC76BD8CDAF0B8639B5BC93DA9F95FC332E6ACF5492EF3F0E58CF499
AF8E7330A29CFEA108EBA3BC7AF35466DBE6B6F7FAB390C83DE369C48C9B79DF
753FA2D419AA6862290FC295D102DEC16E24B5EF9C672D853F15B7D91DCEFA73
21F7B451B5511506B42888B0702B8643F60A51A6ED31906F0AAE5F86D2178858
7318DA62DA15BC418A95CB0D30238FA868E334BC5A1104A1790C4B0939598286
42218F3C299030DC7F996D7AE677310771D44B2D0C17274BAA5A7A7FC9FABFAE
22EC3A52945E66EF2712E54334687E8FF4CDF5A7D0A348BF25A41D8D85EF19B6
6F88C2E08549559AE4BEE134388BB171D0961986DC53F8FA85EF54E973862BFD
ABFAB60376DE3F9E641004773886A04ADAF6F101831BBC569396194B0CB84243
6D3B6DB6ED212E9BFFEDA7D3958C62CD9E9126BA926E6A7AF094A1F9CCC08D01
256B7CED1EDB921F33CAFF807F256B31120CF711DE24CAB53C624A207BC61C29
D379F2DDDF33386D5FAA4C18AEA81E9989466532AF71DBDA671CCABE69652A7A
0E48CD62C9C8EEFBC3160A42630263A36ACF465ED120C5D9C0BA278948DD3AE5
50B3D8CBD6A090B9572E2881A8D9E567C5A8C686F4E4A3F2972382441633AB9F
4342BF12A83F51413323BC8250901D653A70D47671678C8F5CA3C1AA4D03113B
2FD8EB1352F664B2BFE42F0A95B39353C7E6F16C8B1F5607B42DA4B685827479
170AE75F90678F7F3C2B15E13CEAB77811E50A8FCCAD4088659C49ABC0D748DF
C2F2D05E4FCA2D8F85E7BA1AA2010962CF1989F1179C80ED82109EF203E8E6F4
2E794849B1860F032E844EAC0E22D4B4002ACD8A06F29B2074D15252EBF506F0
D503912F035B4188BA2C4BC80C4023C3DA54B87DABE8C2C8AF443F9C36A543B2
7054A05A7030484039E4F06CF06AFC5B28E833D591665C6A228CB9EABED14DE2
329CCBDE222B4C31FFEC8DF5E2D6E788F9D862840DCA808B149025C5541CBEB3
E7AC9021815B9649141BBE104709B3149B67DDCDC7B1BA5582A709F7ED2D8927
D9513D6D1FDFC787C29403A08BC4A7691D4D8D328E3857C61E18F995AD367C63
D0680586A196F673E0F12D3B91A0F8711B5F8240DAC440DA29FD7F571A8A726D
6158E2843ADE55C89CFAFC51F3EC4939091C56620AA66289665B000B68375EA6
894B275DDA261736302CF799EE7EB3588B57508B18A2E9B8C48DBCAFB88ACC91
6941F596BA2919CC247AD474240426D9DAD9056FACD60F25F30D7D15B5B08134
05C917B436DB688B5F6D9F1111F21FF2183FC542B648EB94A4054C44F6A3E512
7817472D4C3C9782BCFDAB05E03F714A543CD8FF8DBCBB4F5308BE00F3D645DC
DC915414F95E3E74E55AE900E522C442FC4D9B6907F566658ECCFF972C734D3F
479989632BA17E63853582FB5F2EE724E56DA635B8EA241CDC2C0D2823A6DC7B
8AB17C53778E80F8880BAF3A5B4057D3326B33637B9F7253388C8A7AE0C2040D
E5F957F92E8F2AB7A34C58FF72552778C640D254EC82F111A7AA31A4C9A067B3
3D202D05A1DDC9DE07FBDEEF1F7AA5DB0137DB5E155AAA42E480BC1F62443E4E
9A7C6CE46F1BFAC78043599CDA78F22714FB9DE8C5AF2324828CC12D3FA11C55
9A54AD0DE920D1F322710D440CDB7F7495686835AF3ED3BCCF435AA6701C55EE
37AC13AF7DC913CA2707BF03AA2F2B58BC33653C4F9C2E27702B0CEBD6F68A63
CB671BD8E477A36AC1851AAFEEC039BA5E223B7BF66E3000FFF53DDE8A6709C3
A670A5978062F434BC9BA6BE3C671D5B39C62B336D99A412D16B9B03F52C2543
3727673ADA3D055E8F11B6766AE1E1BC485DADB84844E4BD3DA3716C58535189
0018EAEEE6F730A9CFD19B57B0848EE88BE0F3B0A3EC5F59512E9E4F1B1D6F0D
910CC393BA92FCF736A68F7F7F3B76488B6E107954CB1E04B44597783145681D
B7536B55A4B8BC6DA4189ACA9A715958BF1D6F52B85D96CE7942F0C701007785
67F8CEC0B11280DF1F4F9A52556C6D0CF74FA498AD28490AED734D4F4A2ADE3C
B99FDB5907C5DB3CD48605F50D6D2381F44664560C4C321557F6C50332FA5980
A971DDC13689CA4822CEC6FC5C04C8BA6318DFD495A319684008EAA9F79341D4
43708F922CC1AD5189FD9B23F85DD3F66B91D14437FD3466A639EF1D593434E3
A7F36BDBA5FD07B113C44D41F5214306A336A98AA1625704A5B7A7072D0A6719
59751417BDD30DE3963731EAF44B0D8844F9F15591B27312E4288A76847B7B57
3CD7F88F93404D5876AA6CADD5ABE05AC939D563C8A24484EE1E041BBE3DE8B6
EC46080C668C86F821674EAF85E715848BC5B54CE60D1A1E2F991701D96497C0
C88B8FB4585595FC262A7F632015FF3949A2A5300176D78EE8981681172F3181
DCFD7EE09A72841850533781FFEFA725879CCA633220094C116E4851F35BFFF2
2BDCDCFB0F22EC3028ABB0DC826D3590F95DA3BE15B844AE46EB4B2D9E8E67F2
A233EE76E0699BE60D669E5BD207FE37148DB28E148028502F1D40730D5348AA
94C75EA00BFBF4632557F6F7200F99823F1FBFB208B2C2EE5C0FA626538C9375
182CC540900CD24078AABA6B65483EDE96DDB095792F7E161D1242815AF7DBA3
6B8BE10B07B984610DA9121B7F154D729FF5AA38570490E07CC72D53C012AD79
6E091A7E17AEA386AD1524CD8EE1EE6B5DB1BE56A03E3C639107E79C705D92EF
BEF796928EDC68D38B77712E13A7777B9E8A1BD9E1FD2ED804FC65B77EE75ABF
24DF93D7E85FE8CCB9D4207C84D5D678668FB149142D89F0FDD89C60F9E7D142
A8E1D1577B398817AABC5549738B6679E753BF5544A65888E56FBD7B03E1653D
F36A29C8C3EC4F2E71B214DEAAE72F4522A6B4FB16DBF696910502E843F4A4BF
C2F270A1B504FC04958DD09392FA8209698795FEA72038EE1255D456E512373A
88C88F7D832A8BDB029C2A0E8912D84E8501D62DF486E1A7F99123BA96AB83BC
E10BE66715D94E28A58FAEE38A1B6EE55D9B22AC16094272405A926CD858860D
79CD2E9F0E1692063CE87B144971F28607E5878E2E8065B83B9CDAC06939DCD6
EA24A6E5CD43BAED24EBE9FB9C03B551BDDEFBBAAE980A74DB4C594CF0A2AEB6
FAA4336000C464D27E586060ACB92CE61A9E607798C7DB97270BF538CEE40FE9
1A441B52BFAC96FF9DD3A78A5A8BF84A6B023659CAD750A44FE28299E93F70EF
C60DF53DC0AC0A50CDEA9366ADEEDF70323B7C5B104E1655A3B6719B39F3BC13
248D6D723064BAFF54513822A586938EBB801FCA3897E67BBF451F19A2F0F02E
D17DA5C671EFFD6676A9A275DFCD067F1DB8D977A083ED98F08BB8E56E41826E
E3A081CB2EF97B8A897724D96BE596B157E6023D64BF63F2433F94E4A6BD7055
A759237F1F3831C1F33245B75E8229906F0A20830376D39FA182A0BAFA38D1B8
3C3B11E923B0FE8A6C8666FAAD772A6851ED3F4D9D2798963E9393B47544E249
1B10C85BF3CEF2792C31FBDD90F161785D35F14B5EC5F1B27EBBC002EE93554C
FADA7BCE7B98D6136702C81A7D48A3E6484D9E91946B2F44A4F32CFF73BA2F46
A1B13F5D50CBAC4B41C0278C5F60B118822B107E4C9E7954FF07C966B61B0118
9F2975B40F1A527AD0EB396E3BBECFB9FAC37DAE979D3A1123ED1627F8636868
79782DCE7B4315394E813AD279E2B5523A8DD33A916E97AD2E1F06EF999EE5C7
05AD420B569DAE40A39451CE38D74F65192873691E560A47A75D1D71948325BB
8B4E08E8E5EB2B55F378897A0812BD48F240C0D332658246A6BFEE9B5308992B
A4542F4F173C4961D1474C05AD4D871E34DB38E4735EC693882763AEAD8682D8
F58B84FF28DCACE971D035275D1ACDC9F1B83BFE581ECC21C6E8DCB6DE7E7066
BF5CB23EAD2453845A61E1D165181963393E017A3E8100BDF36C1015577B700B
276530617A0CF49B4F317103A3D3E8917C52251583ADACBFA4A28356698AC2BE
BBE82A4BBBC9A68B129271A105F612232F28182623B2603925FE408FD5AB095B
246DC7F145CF180BC444D7F0E408B2C5A4F9574D77AD9CB65B7C14245A92A3D8
80FF6AC385144539A2EECD6149A20E7D1630BB5979F696618950770BA936D3F7
5320F637C1A7C058C1B73783EF3A304AB2B9D1DEE4D3B979DDCEF3D6D4A404DD
4FF2FE2E2C4172B8418445
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap2-pspic2.dvi)
@start /Fa 148[44 2[44 44 44 4[44 7[44 17[44 7[44 1[44
8[44 44 5[44 44 2[44 44 40[{}15 83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1035 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 44.34969 22.17484
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1035 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)42 b(k\(Y\))639 926 y
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 139.68881 69.8444
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 639 926 a 32
w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 135.88881 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)h(f\()p
895 926 27 4 v 30 w(G34\),g\()p 1233 926 V 29 w(G34\),h\()p
1570 926 V 28 w(G34\))1219 901 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1219 901 a 1219 901
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 24.06482
def /r 24.06482 def /h 6.89726 def /d 6.81386 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1219 901 a 1051 926 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 44.32964 9.91112 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fa(Y)g(=)p 1230 926 27 4 v 75 w(G34)1219 901 y
 tx@Dict begin PutEnd  end
 1219 901
a 926 1304 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 70.59946 35.29973
3.01385 } false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 926 1304 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 66.79945 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)f(g\(a\),h\(a\))1219 1279 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1219 1279
a 1219 1279 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 24.06482
def /r 24.06482 def /h 6.89726 def /d 6.81386 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1219 1279 a 1051 1304 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 44.32964 9.91112 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end


@endspecial 1056 1304 27 4 v 31 w Fa(G34)h(=)g(a)1219
1279 y
 tx@Dict begin PutEnd  end
 1219 1279 a 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 451 4841 a(But)e(the)g(f)o(act)g Fs(g\(a\))e
Fw(is)j(in)e(the)h(kno)n(wledge)d(base,)j(so)g(the)g(\002rst)g(goal)f
(we)h(ha)n(v)o(e)357 4941 y(to)j(pro)o(v)o(e)e(is)j(satis\002ed)f(too.)
46 b(So)41 b(the)g(goal)f(list)i(becomes)522 5102 y Fs(h\(a\))p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 36 48
TeXDict begin 36 47 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(36)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(and)g(the)h(graphical)e(representation)g(is)j
(no)n(w)p 0 TeXcolorgray 0 TeXcolorgray 1546 2338 a @beginspecial
151 @llx 519 @lly 285 @urx 662 @ury 1340 @rwi @setspecial
%%BeginDocument: chap2-pspic3.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap2-pspic3.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 151 519 285 662
%%DocumentFonts: CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap2-pspic3.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 51 /three put
dup 52 /four put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 88 /X put
dup 89 /Y put
dup 97 /a put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 107 /k put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F977EFEFBE4B0AC369070B3652B7542ED968F2FFE533C
CC1D8B7C35A5E29CBF897D9C8EF5A14FAB67FB0F77D9BC7ECA7FEA2B7A35DAE9
DF290446920B4C534715BEEF4819E438491C9DAB191FED40312E6AD0F142653D
A546D27C470377E95C9B1336AE16F5EC016DDF11F79234A880A99AB7E1784384
2B2B7EA60F88D50CB5BE5F12FBDBE6481D67434810D24D6260EF6D7975C3D2ED
C2E7C2F5D2C8CFC5F6FDA3736CFDEC04A31DFF256C6198A819D55C36D2C5556D
4AEB2371A60B1C9951D8A457A4F1CB344477D7A65161332224B0253D61A9F5AB
6BB0345592B42926CF2AC2C9B9EAA0489C6D09EA559B9E0DFCCA1A39673371E8
054176E97358DECFA6BE9B8612606BD71EE76ACABD4070C05B82C58509CC2E62
4E738FA2C0117AF693E5EDC640F5E1D4AF398B968C9DFB0B022776922B60CFAD
564C1C0665B2E9E576C11C4075F11A0832D4CEDA6CF087824EF502A43830B823
E31313BF7119F0871D66B3B390ADA6E7AE165E475189A3DD01B7C3A527A6DED4
07DCA42C29BAC20A476A80199EEDB53219103D50C16C7ADA4B3A932692615492
C046257CAC1CBCC31D44C06BCC58D737F7D239EBE3EEE1A4F981B1FDC52CE047
DAB64EBA1EEF23FDD6D15A5E4B14C74C0766E857E9E8AC1C2DD5D792284965F0
0F59BF602D2632D99EC6250B2EE635842201231CA58B99CBD64E8626DD3751C6
FB8E2F2860942F2C184DCB96E253D3B955F509788DA6C2B8989DDE361B3E647E
74A243877B5D493E16FAA75186E7E463661F67414DF1A49EED1ABA92CB5DE7E5
A67D422015897BF849D5F6C083D1C0BFB5F4671FD86467C1D92099E1AE77B2AE
AE256C8FAC76BD8CDAF0B8639B5BC93DA9F95FC332E6ACF5492EF3F0E58CF499
AF8E7330A29CFEA108EBA3BC7AF35466DBE6B6F7FAB390C83DE369C48C9B79DF
753FA2D419AA6862290FC295D102DEC16E24B5EF9C672D853F15B7D91DCEFA73
21F7B451B5511506B42888B0702B8643F60A51A6ED31906F0AAE5F86D2178858
7318DA62DA15BC418A95CB0D30238FA868E334BC5A1104A1790C4B0939598286
42218F3C299030DC7F996D7AE677310771D44B2D0C17274BAA5A7A7FC9FABFAE
22EC3A52945E66EF2712E54334687E8FF4CDF5A7D0A348BF25A41D8D85EF19B6
6F88C2E08549559AE4BEE134388BB171D0961986DC53F8FA85EF54E973862BFD
ABFAB60376DE3F9E641004773886A04ADAF6F101831BBC569396194B0CB84243
6D3B6DB6ED212E9BFFEDA7D3958C62CD9E9126BA926E6A7AF094A1F9CCC08D01
256B7CED1EDB921F33CAFF807F256B31120CF711DE24CAB53C624A207BC61C29
D379F2DDDF33386D5FAA4C18AEA81E9989466532AF71DBDA671CCABE69652A7A
0E48CD62C9C8EEFBC3160A42630263A36ACF465ED120C5D9C0BA278948DD3AE5
50B3D8CBD6A090B9572E2881A8D9E567C5A8C686F4E4A3F2972382441633AB9F
4342BF12A83F51413323BC8250901D653A70D47671678C8F5CA3C1AA4D03113B
2FD8EB1352F664B2BFE42F0A95B39353C7E6F16C8B1F5607B42DA4B685827479
170AE75F90678F7F3C2B15E13CEAB77811E50A8FCCAD4088659C49ABC0D748DF
C2F2D05E4FCA2D8F85E7BA1AA2010962CF1989F1179C80ED82109EF203E8E6F4
2E794849B1860F032E844EAC0E22D4B4002ACD8A06F29B2074D15252EBF506F0
D503912F035B4188BA2C4BC80C4023C3DA54B87DABE8C2C8AF443F9C36A543B2
7054A05A7030484039E4F06CF06AFC5B28E833D591665C6A228CB9EABED14DE2
329CCBDE222B4C31FFEC8DF5E2D6E788F9D862840DCA808B149025C5541CBEB3
E7AC9021815B9649141BBE104709B3149B67DDCDC7B1BA5582A709F7ED2D8927
D9513D6D1FDFC787C29403A08BC4A7691D4D8D328E3857C61E18F995AD367C63
D0680587706D5763F78DDE351875A5CD9751D6B2A68253D5F56819F8C6EA25D7
33D197D58FD41F487D819E80689DCF5A46741006D9540181B41DB1F7A921AD5E
6545C414C8404A16D1CD4C6E0CA162FB46DEA4435ABC73E957D6E877A01796F5
53E59F4CA4E1DB51FA3506CB0AA99C35B6D731C0C99C9246C9131F524AAFCD1D
16C8CE9FB328ABD7AEA39B335199310B5AA9C6CB989E53A63A237AC69339AD92
405CA1FA28702E200F0013F8F6B1BE5B9FD0D277D54714F84D137371F864238E
6E4E10893B20F482A61DC0A9A739E239A7F88005873CDAD2B24FF697FE1C3566
3E21BD821F0CAE706CCE5F54F1BEB0432BF29E36153E58CD6A3926D0E5E89752
4170F3FA41DE8B7EDC8EAEFCD83C2D4A24A7395733A30E5E7D926CBD583DA825
9E11C0DE44FBDC99B09EA6A2B74C34E77871F0D86286ACF4DA4099B090DF6134
74117D0095EA9F09233B9333B02ADDA459BF66BD88AE4FF0504CCAD28B6CC639
73A02353E9832C7CDA98D05D01BD4CC597B395DF47FEF61EEB62207B23342ACC
57663F0A730992C3DF5B687B402A24B4A35E264042CD0057E4133240C63BA36F
D0BF6B46DBA8AFF1FB9113DF842EA3B09173E7BDBE6014E0DE69837ED1DBBB82
520640C84CF5E64D6E5AC85450AF63D8A44CD25FCF93CFB05D9F5F8F31E91507
EDFE8F18AB6201D6A9E9B427A35F57C6DD64FB5EC7A23D2B42BA8F1F18D00C9B
0285FC19FF2FE64199A07C25C7D2C8B3BAF67BCF35DA4C9746E614ABC8201921
D71C4244E9B4D23EDD76CA7A10611E588B63B0F17E0298C5BACFE6AF6A46E170
A49628C217C17F07EDAD10554F00E2DD7C4D835EF2273F04E33C886B3B1A7CC4
7D6F85CB73C0594267520B0E6B68851D8C766E39BCDF541308322CC9CE0A284A
D7F793838FCF426E6DACDE1E623EBA45566D2004BC5F44AF5CEDE15AC1210690
0CDB53102301D8849D7B11CD165D500DF9920B59E9299D7882C16F7CF8CB1B78
E1C94624357556B143A35B489E0AADAF1B24FEA022226E0CB193F24770ADDE3D
711B650BB12C8BB3EDE6179F76AC5D7AC2FFED52256D1BCC8026C2F37FD4E790
67F2476C8B78D29195240A02C8AAB6EC3B650A28028C1623F0239B23C0BB7C87
3F9B2DAFAD14D2D017E153B222F10E7D1BFACC741550397679ECB4C1309713B4
6D14936F7F69A85047F03E9D1180A995750295F9487590ABDA5E5D7072BFC018
6314DCA9D6B20D86247E1C1B228035ED5F4A46C84417AFCAEE8B9434BAA355B2
C9C8FCAAFD6BC25AE986449596DFA374797898D41DEE77E7DDF89A50835F50B0
E4490FB8805E3953ED704BC32F028980AA50C1367929B7A5A495CF99BB8195D7
E8B7D4CC4BE056874ACF299A0F47BDA1C3DDDC7C45930A9E59C3652490E8B133
2E568A92BBD93B3EA6D2E1F79ECF5FCDF627428C60436C3249DA8FBBA30F10ED
047B39C54509B7C83DDDB8EF31F937EDC35C7E3D9D3236B72B47501978AFAD6F
A75257F7E2E680B5B010DC0178239D29327BD2092AC276A876E86D915F5B758B
36453F7A621790C5FD18EC15936B2A5558799C8D49085ACB83B1606947E8B6D8
7C18B0A6D6755E1A12D33AAE67E3F91C100B71F081991FE8B5FDA5B4CA40D8E8
8BE4849A93C675B1355A533F8B7F407D2B92BE8E3B713C568EAAE0CC646CC956
40DBE205A310500856A1F14FD378C2FF16EC4A8F01C72EF15406E4A76917E545
A3D2357983BA5B765394D4539E90A525D75361E1807D46E7A45524A8CC78C7D5
27309F5ED1AA74907E8412AC5CF0FA2D69308AA53B1077A59464901957507D4B
848A6A96C57C46E9A82D39347F64AA10F41EB3FA3D00D25E36B26372CFDA4342
2AC37C58249BF289C98B7F2A7374DE5A7109F9B01BC018899CE2821422FDD05B
0FD9AE953D8DD239BEB258AC9112037A1C7C7EDC320108AC2E27B981786D554D
2167C63DBA0AD3C193FE5987602DCCD3E91EF013F7866E4F06F7104AC45CDBA8
AB98F085EF2E5BD3598EC52859C9C9FCA3FA0B37A4CABB77DB2746FCEE56A7A0
792AD8B3BEC08A75E82247E9DE2A7EFE66A9EEE15E19365FE741643F05A36A37
AB1CBF731F1972B3ADDCED4AEEB292AC400E75C1EF2E4D83BFC6D5D826FB8FC4
80B99FBC800A4922C648E3BD73236C44520F4519F14D068D7F437D2B6F66AE00
54A112112A29F2728FBE8C6F104871CF8AA067D387C4B512460EFAF8B1B8DA6E
D3E4819FAD5C77B5FFC9686664A30AEC8F78DD903F78857568401149DF3D0B57
D5984313A85D8F9371529F1982FD585CF22433CDE7148B9542990AC7C9D939D0
F3FAA4C79DD1EE3D40D38A4EA58F62B40483622FF19100042D5B1FC31696F47C
96D725405AE9BAEC2D014907B668A2E5FC51A8FFFBB2441CCBE4322BB3BDA453
C473FF3CA0BC00E6B876BF5C85ED3570BCAA8F5BC021063A3A8F26BAA59BD59E
96186067FB53241357A2082325BC4A36B88A7DED08FA65621A7F676DCE919EEC
CCCE3D700012A287D4C3BB8DDB35B1C3CBF553917DD9C7A3C2258E02A76A8375
358CB76DFDA28F7DD1A3D544EE6E81637987AEFFC814D9CEE9E2E1DC7A79DF01
B391ED0E7F9B2BB62B79DD14214959D198ED667A198BC140DADC2044AEB1D4EA
B96F32D18256FDFBF11A907AEC7FEB7BEDCA0DD879007DD3565DE39A8E3173F1
D3F1A8E9C1351B4483FC4AF666E59FCB3EDB5FEC11CF49DED26968ADC45E979F
0C30E6C8FDA9CA42EA37AADEAF9FB49DB6FC7D04E8BE9FCD2D1321517892AAC1
AC17B04381C675DF26224F701EB875CC4C66D6CDDE755ED7C2258886E1BF49A0
6C36CABD9268A18E975B5E8D65954D14BD3F30D54FDB4A5E32EE14182F7A9DA7
62F8F79ED05A27C30BE75E624D5587E98BE3F11718381DB342CB0F4CA6BAE83C
CEF03C6A24F66769C90F45D7619DAA5524F138873770124D9332C1C7BB19E635
8FFF43CC1D567F84EDF52AC9B7E78C7228043395A54676AF42DBE072F2BD0DCF
2840085DB7D6892689CB732D2301EB2DA7A2579F98E14C4B325A26FA5432543A
058FFC44473CAAF9739F793C3433D56B297D48BE99F8FC9E99D5F04FA1EAFA1A
D3E02DD5916B0257FE27FA8353A0BD79018AE73036F50BB08DD898A8FB7CD40F
2A154B4B04A4DF4CCABAB4E173B3F98E8348A984F866C62E3D7E652CC6FE3DEB
60CB47650180CA2195115BC0B306592C05744A33E2DA767E094DBEA5958978B4
5D571555F29EBE6E56E9C2DB3F0CA575426A75B1C694C88B93FB2177B490E006
2579E524D34597EE1C7CA50002AF90DDE968C59028CB6018EAC31F6B15C34821
74F75807B4FC447AE08E00FED90FBF09E023
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap2-pspic3.dvi)
@start /Fa 148[44 2[44 44 44 4[44 7[44 44 16[44 7[44
1[44 8[44 44 5[44 44 2[44 44 40[{}16 83.022 /CMTT10 rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1035 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 44.34969 22.17484
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1035 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)42 b(k\(Y\))639 926 y
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 139.68881 69.8444
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 639 926 a 32
w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 135.88881 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)h(f\()p
895 926 27 4 v 30 w(G34\),g\()p 1233 926 V 29 w(G34\),h\()p
1570 926 V 28 w(G34\))1219 901 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1219 901 a 1219 901
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 24.06482
def /r 24.06482 def /h 6.89726 def /d 6.81386 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1219 901 a 1051 926 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 44.32964 9.91112 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fa(X)g(=)p 1230 926 27 4 v 75 w(G34)1219 901 y
 tx@Dict begin PutEnd  end
 1219 901
a 926 1304 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 70.59946 35.29973
3.01385 } false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 926 1304 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 66.79945 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)f(g\(a\),h\(a\))1219 1279 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1219 1279
a 1219 1279 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 24.06482
def /r 24.06482 def /h 6.89726 def /d 6.81386 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1219 1279 a 1051 1304 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 44.32964 9.91112 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end


@endspecial 1056 1304 27 4 v 31 w Fa(G34)h(=)g(a)1219
1279 y
 tx@Dict begin PutEnd  end
 1219 1279 a 1035 1658 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 44.34969 22.17484
3.01385 } false /N@T-0-0-0-0 16 {InitRnode } NewNode end  end
 1035 1658 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)f(h\(a\))1219 1633 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1219
1633 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 806 2505 a(But)g(there)g(is)i(no)e(w)o(ay)g(to)h(satisfy)f
Fs(h\(a\))o Fw(,)h(the)f(last)h(remaining)e(goal.)49
b(The)42 b(only)806 2605 y(information)h(about)i Fs(h)i
Fw(we)f(ha)n(v)o(e)g(in)g(the)g(kno)n(wledge)e(base)i(is)h
Fs(h\(b\))o Fw(,)g(and)f(this)806 2704 y(w)o(on')o(t)39
b(unify)h(with)h Fs(h\(a\))o Fw(.)900 2805 y(So)k(what)f(happens)f(ne)o
(xt?)55 b(W)-7 b(ell,)46 b(Prolog)e(decides)g(it)h(has)f(made)g(a)h
(mistak)o(e,)806 2904 y(and)c(checks)g(whether)f(it)j(has)f(missed)g
(an)o(y)e(possible)i(w)o(ays)g(of)f(unifying)f(a)i(goal)806
3004 y(with)c(a)g(f)o(act)h(or)e(the)i(head)e(of)h(a)g(rule)g(in)g(the)
g(kno)n(wledge)e(base.)45 b(It)38 b(does)g(this)h(by)806
3104 y(going)47 b(back)g(up)h(the)g(path)g(sho)n(wn)g(in)g(the)h
(graphical)d(representation,)i(looking)806 3203 y(for)c(alternati)n(v)o
(es.)59 b(No)n(w)-5 b(,)46 b(there)f(is)h(nothing)e(else)i(in)g(the)f
(kno)n(wledge)f(base)h(that)806 3303 y(uni\002es)38 b(with)h
Fs(g\(a\))n Fw(,)h(b)n(ut)e(there)g Ft(is)i Fw(another)d(w)o(ay)i(of)f
(unifying)f Fs(f\(_G34\))m Fw(.)45 b(Points)806 3402
y(in)55 b(the)g(search)g(where)g(there)g(are)g(se)n(v)o(eral)f
(alternati)n(v)o(e)g(w)o(ays)i(of)f(unifying)e(a)806
3502 y(goal)43 b(against)h(the)g(kno)n(wledge)e(base)j(are)f(called)g
(choice)f(points.)55 b(Prolog)44 b(k)o(eeps)806 3602
y(track)h(of)g(choice)h(points)f(it)i(has)f(encountered,)e(so)i(that)g
(if)g(it)h(mak)o(es)f(a)g(wrong)806 3701 y(choice)39
b(it)h(can)g(retreat)f(to)h(the)g(pre)n(vious)e(choice)h(point)g(and)g
(try)h(something)e(else)806 3801 y(instead.)75 b(This)51
b(process)f(is)i(called)f(backtracking,)f(and)g(it)i(is)g(fundamental)c
(to)806 3901 y(proof)39 b(search)h(in)h(Prolog.)900 4001
y(So)52 b(let')-5 b(s)54 b(carry)d(on)h(with)g(our)f(e)o(xample.)78
b(Prolog)51 b(backtracks)g(to)h(the)h(last)806 4100 y(choice)40
b(point.)46 b(This)41 b(is)i(the)e(point)f(in)i(the)f(graphical)f
(representation)f(where)h(the)806 4200 y(list)i(of)e(goals)h(w)o(as:)
971 4368 y Fs(f\(_G34\),g\(_G34\),)o(h\()o(_G3)o(4\))o(.)806
4535 y Fw(Prolog)f(must)j(no)n(w)e(redo)g(this)i(w)o(ork.)48
b(First)43 b(it)f(must)g(try)g(to)g(re-satisfy)g(the)g(\002rst)806
4635 y(goal)e(by)h(searching)f(further)g(in)h(the)h(kno)n(wledge)d
(base.)47 b(It)41 b(can)g(do)g(this:)48 b(it)42 b(sees)806
4735 y(that)j(it)h(can)e(unify)g(the)i(\002rst)f(goal)g(with)g
(information)e(in)i(the)h(kno)n(wledge)c(base)806 4834
y(by)47 b(unifying)f Fs(f\(_G34\))g Fw(with)i Fs(f\(b\))o
Fw(.)68 b(This)48 b(satis\002es)h(the)g(goal)e Fs(f\(_G34\))f
Fw(and)806 4934 y(instantiates)41 b Fs(X)g Fw(to)g Fs(b)o
Fw(,)h(so)f(that)g(the)g(remaining)e(goal)i(list)h(is)971
5102 y Fs(g\(b\),h\(b\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 37 49
TeXDict begin 37 48 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(37)p 0 TeXcolorgray 357 1051 a(But)57
b Fs(g\(b\))e Fw(is)i(a)g(f)o(act)f(in)h(the)f(kno)n(wledge)e(base,)60
b(so)d(this)g(is)g(satis\002ed)g(too,)357 1151 y(lea)n(ving)40
b(the)h(goal)f(list:)522 1293 y Fs(h\(b\).)357 1436 y
Fw(Moreo)o(v)o(er)m(,)46 b(this)i(f)o(act)g(too)f(is)h(in)g(the)f(kno)n
(wledge)f(base,)j(so)f(this)g(goal)f(is)h(also)357 1536
y(satis\002ed.)g(So)42 b(Prolog)f(no)n(w)g(has)h(an)f(empty)g(list)i
(of)e(goals.)48 b(This)42 b(means)f(that)h(it)357 1635
y(has)47 b(no)n(w)g(pro)o(v)o(ed)e(e)n(v)o(erything)g(required)h(to)i
(establish)f(the)h(original)e(goal)h(\(that)357 1735
y(is,)42 b Fs(k\(Y\))n Fw(\).)48 b(So)42 b(the)f(original)g(query)f
Ft(is)i Fw(satis\002able,)h(and)e(moreo)o(v)o(er)m(,)d(Prolog)i(has)357
1835 y(also)35 b(disco)o(v)o(ered)e(what)i(it)h(has)g(to)f(do)g(to)g
(satisfy)h(it)g(\(namely)d(instantiate)i Fs(Y)h Fw(to)f
Fs(b)p Fw(\).)451 1934 y(It)43 b(is)h(interesting)e(to)h(consider)f
(what)h(happens)e(if)i(we)g(then)g(ask)g(for)f(another)357
2034 y(solution)e(by)g(typing:)522 2177 y Fs(;)357 2320
y Fw(This)55 b(forces)g(Prolog)f(to)h(backtrack)f(to)h(the)g(last)i
(choice)d(point,)k(to)d(try)g(and)357 2419 y(\002nd)48
b(another)f(possibility)-5 b(.)67 b(Ho)n(we)n(v)o(er)m(,)48
b(there)f(are)i(no)e(other)h(choice)g(points,)h(as)357
2519 y(there)h(are)g(no)g(other)g(possibilities)h(for)e(unifying)g
Fs(h\(b\))n Fw(,)k Fs(g\(b\))o Fw(,)g Fs(f\(_G34\))m
Fw(,)g(or)357 2619 y Fs(k\(Y\))41 b Fw(with)h(clauses)h(in)f(the)h(kno)
n(wledge)d(base,)i(so)h(Prolog)e(w)o(ould)h(respond)e(no.)357
2718 y(On)50 b(the)h(other)f(hand,)h(if)g(there)f(had)g(been)g(other)g
(rules)g(in)m(v)n(olving)f Fs(k)o Fw(,)54 b(Prolog)357
2818 y(w)o(ould)40 b(ha)n(v)o(e)f(gone)h(of)n(f)g(and)g(tried)g(to)h
(use)g(them)f(in)h(e)o(xactly)e(the)i(w)o(ay)f(we)h(ha)n(v)o(e)357
2917 y(described:)59 b(that)49 b(is,)i(by)d(searching)f(top)h(to)g
(bottom)g(in)g(the)h(kno)n(wledge)d(base,)357 3017 y(left)d(to)f(right)
g(in)h(goal)f(lists,)i(and)e(backtracking)e(to)j(the)g(pre)n(vious)e
(choice)g(point)357 3117 y(whene)n(v)o(er)e(it)i(f)o(ails.)451
3216 y(Let')-5 b(s)46 b(tak)o(e)f(a)h(look)e(at)i(the)f(graphical)f
(representation)f(of)i(the)g(entire)g(search)357 3316
y(process.)67 b(Some)48 b(general)g(remarks)f(are)h(called)h(for)m(,)g
(for)e(such)i(representations)357 3416 y(are)41 b(an)f(important)g(w)o
(ay)h(of)f(thinking)g(about)g(proof)f(search)i(in)g(Prolog.)p
0 TeXcolorgray 0 TeXcolorgray 1002 5102 a @beginspecial
151 @llx 468 @lly 308 @urx 662 @ury 1570 @rwi @setspecial
%%BeginDocument: chap2-pspic4.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap2-pspic4.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 151 468 308 662
%%DocumentFonts: CMTT10 CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap2-pspic4.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 121 /dagger put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D40539DE74A31B0CA623CA9DCE374762E175D0A
65D0D0B45F164D2441F7CBB3F86FE50191DF171E0ACFEA45E9CAB2BE910515E5
B5FF9D2A28AF222DB3A1E1EBC8C3BD5CC0AAB87006F4B7FB9F10C6BEFA6F261A
5B25FD44700ACA85FAF43A89C1380403CEB3BCE247E57D562848BAD491C7015F
0EF6865B3F398C720EDC7D66E3532C6389FFC941B250373BDD6D8F80FE59F3B3
7CA5D9FBEF891874A1AD09F68F3F761C6E4B96FD501BC43CF046FA932047C601
255A672A4704DA6CE54BE541C186C6B9CAB339B7285310E08EEF4120654BB3E5
4531F86E9E162D186C96F0BDF652B10FB882BBDB3ACEFC0E364920F1E2760475
0C4A97593D36244BD35727D42B5EA2E94DEAABDC44903D33F3743CFAE6E641FD
EBFE94BFDA686EC3D18D0DF7EE3F9EC6C4EDC5AD9B11D011D83B82BBCDC481A4
3CE3B7A026DEFF7FFCC16460
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 51 /three put
dup 52 /four put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 107 /k put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F977EFEFBE4B0AC369070B3652B7542ED968F2FFE533C
CC1D8B7C35A5E29CBF897D9C8EF5A14FAB67FB0F77D9BC7ECA7FEA2B7A35DAE9
DF290446920B4C534715BEEF4819E438491C9DAB191FED40312E6AD0F142653D
A546D27C470377E95C9B1336AE16F5EC016DDF11F79234A880A99AB7E1784384
2B2B7EA60F88D50CB5BE5F12FBDBE6481D67434810D24D6260EF6D7975C3D2ED
C2E7C2F5D2C8CFC5F6FDA3736CFDEC04A31DFF256C6198A819D55C36D2C5556D
4AEB2371A60B1C9951D8A457A4F1CB344477D7A65161332224B0253D61A9F5AB
6BB0345592B42926CF2AC2C9B9EAA0489C6D09EA559B9E0DFCCA1A39673371E8
054176E97358DECFA6BE9B8612606BD71EE76ACABD4070C05B82C58509CC2E62
4E738FA2C0117AF693E5EDC640F5E1D4AF398B968C9DFB0B022776922B60CFAD
564C1C0665B2E9E576C11C4075F11A0832D4CEDA6CF087824EF502A43830B823
E31313BF7119F0871D66B3B390ADA6E7AE165E475189A3DD01B7C3A527A6DED4
07DCA42C29BAC20A476A80199EEDB53219103D50C16C7ADA4B3A932692615492
C046257CAC1CBCC31D44C06BCC58D737F7D239EBE3EEE1A4F981B1FDC52CE047
DAB64EBA1EEF23FDD6D15A5E4B14C74C0766E857E9E8AC1C2DD5D792284965F0
0F59BF602D2632D99EC6250B2EE635842201231CA58B99CBD64E8626DD3751C6
FB8E2F2860942F2C184DCB96E253D3B955F509788DA6C2B8989DDE361B3E647E
74A243877B5D493E16FAA75186E7E463661F67414DF1A49EED1ABA92CB5DE7E5
A67D422015897BF849D5F6C083D1C0BFB5F4671FD86467C1D92099E1AE77B2AE
AE256C8FAC76BD8CDAF0B8639B5BC93DA9F95FC332E6ACF5492EF3F0E58CF499
AF8E7330A29CFEA108EBA3BBBF8A957D3DAE33E4256B328E47790CA040FDE7AC
BAB9CD81431D83E8F8F63251495D697C39066073BA727B0E325EB254CFAAFF46
79D517E2AF16291F826F737BF5FF3E29615123BDD600E8C7747F809B7735371F
E5A2F54624315981DB9E59213A129480FBF0CCA7BF4BADB8D4AE414A1410886E
FF8D51DA6ED2D8D688554EFA8D7F2F30ACBF386CA6A33275476B7C8D2F5DF6F5
111D51A943196DA9590DC4A01E067DB1138128DCF46CC05B8261D9FA08099B2C
6FC8D78756D64E5D4198E64B4F05A16AF6A05FAB64873BC676C7214D6FA64F5E
6D35B8E77A5FA47B1E218EFCF1AF6A6DFF38E77DCACD3AC127C03818954DBD2C
212D2C708E9C9661587C8EA6D54AF8AB617BAB11A3A5EDA03CAC5AC431C89360
7DFC23FE45A04F184800733B13440F514AF796BCDD8590E309015324C4F33870
BE5C171E4DAAE3B96B8C7AE57204E9646515EB8FEF55DBF964A5C2AA9623B867
4A23B180BFA90C5B560C52B771DEAC9A8B5866AF79C9C268CD84F332FB505DB3
A35DE963CEF8CFA34D66EA9629B85979E878C00247A227893C488185343BDFA6
006168CB6D42230045E7AA3F84DC7F506506EDE0A8FF9DF430A749D8D6D4C669
B2628350B9A35A3592152316750CF10C2510688D9DCA5C19DACFC81E5E9F5F3A
078AECD4A3FE4EA0EEF3F387D58915979287566CCA8F5DE4CBA318052DEFF17F
648F76D3347EFE165E525DB414D597D45C6E71A3C0EE7BA99B94B170F45C7503
F40F4E3D39ACE81E6816449AA859A9754CAD9C7E1BE37A3855D0EE58EF88C8D0
4C2B23DC47BC6EEE14D9AC89078910F3D70211659CDBCE05F0733AF96D03A9DD
901C372B3188E10E45B9F8B6465C64AF1E59AEFDC087AD5C60BD1B299344DC37
EB5160BA66CB7B48FF81AB15094F74295A600EE8A429778B0570F274853290B5
E5EF775D62175B6409A678916CF881217B87860C2A898CF32BAF2418E0A1FA6E
54E2459EF628398BFB9EAEB515DA86A293CD50EDD130C05A0B4D3B4E3D89B517
E9D4E5B8998116B70628B2E5E0762C58C64972D2926AB688CADAD93CD5B10285
510BAF294C33AA741810252E13FFD1B309A74AD6C00F7BE95AF0304108899180
878B410D0CABC53339E8CDF1F206EFD828CD333D36D4A37C19C120E34CB4ECB2
CAB30D7882E0121A128C0F1C00B32A965DCEEF95FFDBCB43B876047DF533A24B
0383F02B319F79C1BAF6768191B5F1441A14CDA0CFA53F7ACC573E8C431C6E4E
BA916E9B277FAA68647B7DFD59FC78F3D4EB61355172668109923A5B8862C99A
150123DEC9B8DED157575D708414E6D98E01F9C15DB13D437C2923577C77F3E3
69C481757203E5CF6B909770A5D7E9C8D55D1AAA314C67221C6552D1B12133DB
85D5C92906587B6D615A3DFC8DDC62B7A522A509E4EBEAF331E32C7EB3863C14
1279B25A6E87030B88F23B4BB4C6AD2DB990735F92D4EA4E3133830B19FEA4F1
E45977B41B9BD11BD46BDE1CBED16D7C46E647376C634DB86A497C371F38357F
A4507C65BD5E6F1E7CD3A052303A2FBBC1976128E353F8E4C39DF6422272DE72
C2810715E31893D40A468560DCCDF8638189BA830172D0204028A3FB789491AB
8798D971A0EE4181A14F4361E30F36E26E9ACA10835E9B0CF7EB1BB79F8D6DA3
B137B76B415CDBFCEF4236D2D476FC40F2655775E65BF1543447806FBE956FC1
266B5CF239503DA54FDDFED64D1E7C61EE1943FFBACCBD36160A077FF97BF13E
8B8791CC198A385BC5EBE1C4CD6FF3EF280E02E1A8B82E171D23EF8CE8AEE496
E29DBB7E8C4591D055A4FD40884A01BDD69B5D7546EB476CC7CD3240EA8DF281
8467D6A25AF7DED361BB525A2B1DE8BC6968D49ADB26383C54099F4BC377DC43
529CA075F5FA939688C11F16242C80743E8927AE3E9352E834D94B3B003952AD
76827E9DA47B65782DCD28117C3A93899289691FC479F8D31C2F181114145AF2
E71182E6D51908EED46678391306BDD7A1A1C0EE26E7B9CA045E242D3CE78D86
691B184D8614039033ECBDAC885DB4C286B15801D57DC6100497265664614568
A51082C0A9D594206ABB2967E8EB378974A09033AAABB6C688F7147D064A16AB
6BADD560859B3DC0451E8513F05DE2B9EAFCE44F183035689134F0743B75BFBA
7DAB1B79A252627260A7189B667C759DAF731612A596F2333E96052629B3B46E
A74715BD537AF046700AB9BFFFAE80F03BF659128A5AEE79E32403361CA7364E
FB8ADFEBFE00275DE9A4D80294E0D064A9D7A71E8E1707634AE951C1319D51EB
E448D5315FBE450153A74C8424DDF85ECC879257EC78F1582D39F8EBC7B3B376
B60A3C3F23EDB2213078A1F22CDAFF46BE327E586D5E9401C2BFB34CDE32D86B
01AEEFB2FE7C4D24325E9AA580B313166A3D2246EBC69353B039E71FB3CA0A07
D4E391946BC6E811B8AB8D66F1F6EE4EDAAB6B5FDEBA3752D8A86E9F85C4DED7
243ABD0D28E405470507E1D627C7F486743A045BD9FCFEC47ACC0B8EB8A017A0
6C9CFA724F9983DB92B7E4837874312C768C01D99D2A9F66A3E7C0D06A2176AC
27CB9168BA4FBE02BC9ABF6581DE2E0E9E7674534D44D021810DB5EB5CA3B2F6
3FAB01C652EECFE13EDB6827FFF3AC029BED6D8079A141103717AD77C899FE86
E5DE7FE0D417A072EA3C701981DC36F6C1941578DD3A30598E3796CDD35A7206
600B78EAA766054CA750EB2BE97D34651ED6D86931A875BF19CC5516EFD734B3
7D0A8C5D2F3E55807038313C9B026A3AB55E8FFD8309A0D0387317EF82F29099
208406C128ABF7BFCE7245B2C4A273360099B2A025746B794E1800E3E2D3ED1E
A5AB12C7969FFAE73E095B3F7657E487AF114D4A95B71B60399707F823EA8D86
875F9CF0114D294C612B27E702FEBE8412007B634ECD93576DAE003BEFCD1FF4
0DCCB5BF1ED243772C9E521CCEDE16C645133D7995E1BEBF203D20B56C6E4DED
5AC11084945183C52C63433687992BFEE4F8109A4DC43C1EAEF13ABBBC5142C0
44F4F555C7025F07B68259AD05A4D2187CE0F569149C8202D671795E79753B89
CD77FA6A1DE57693F57B276BE33F1AE966CAF40E0C5BB9CFDD62EC756D474FBC
47FA58A9735F3F8596D4DF6A327132CACC07C57F338401FAABE3DAD0B3F2785B
6FFE96F7C3AA9D93B19AFC5C2CC53F7EE6A7AB0DA741968D3A31569CA85D14B0
EBB1C0FCB39EE9DC6590A86DE424E6B14DB353FADFB818F31E86A86572684313
202AA52C47B14AF203AB12499726F888F1E671B09ADA2AE133C800E8BE0C0D58
63417425462CA6341BF1E999DE3FB4A4359F5FA0B7A949D9C8E028E966B56708
601029B4A8EDE8AF8FA0D32F3256D2A538FF26D3566AD03250E54D1E5827EEA8
2B5841DBC598EE2972A2057C6B1F5BA60F63C0970D8F1FE5247808F4B9EFB00D
4C5372EAE088D369993D2D1FD33DCC71554DA894FD5056EEE65BFEFF141749DA
ED770A5A7AB76089A6D081F67EBC8E0A65E0BBB32DA45A891DC34AD7B2BBACCB
5DE89E4AAA6089A730AE73DB95A3154697D644563E2AF7D08B432029617EE2A6
C02218C58749CAED0B67A90C32698682C5922F7344AB5F9456A1CC2E567BA506
42DA50713A31D0DF52129B6D246B6C671F0328E75D1D7B02DB29F3D3B2C8F397
7BC2661FC35099F90BBB6E5060914FAD49B9CAC25C605D95D1B90099F5F98CEB
2D1F85F72B61289F084E5438EB3D383C074BF79AA09E39FA2BE564522EA99A0E
01433776800148E7DEF524F7261F3348A90A85C373BEF3E0AAE5EC27E1601068
7CCBA3577088DE93DD63ADEBD42898804D82EF765360056F6148DD412E366696
4E2F8E50948CD722B5B2152ABC26E0DA65CBEA51EC8F1ACC00243FF802CC4277
3DBA37AB27B684B3BB497562FB73B32ABC666CDE09D771F4871C844601035EBF
8EAAF897BCBDA3373901DD29EE08CE9D5B6AD4C696F1DD2338CF194EA5536E07
F8F22C7D67D7FDD6FEEE98D60755E78C7724B232E08B180CB1D3458F565F51F5
3FA7C2CE90731EF60F25DD078740B18DCDC630FF868F75439B6E492F55D80755
B4E3929F6D5EB43CAF261C39ECF0553E40EAEDD5295060D6E3E9039DFD9979BF
6A1207410EE7BB7A254DCC5CB4014DFCDD9772DF09D5A3F9BC0A33A9BDAE0116
887AF44C02533D603A52DAED26231326837366418AAA46EA248F39E663D3A543
FEBA51365B6642DE2EE1880F039FD2105466263EC9F5DDF085BAE087571B6CE8
596E3EA988E721CB74DA4C15C4AA9EB23EEB0B02F5821F270B4957A1AD016E4E
F28472EDFF6EB9E162D7A577BE6B8CF07122741CC47050103AEAD6D51086FAC1
60C454DD7D659F3D4FDA3E0CA5FB11
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap2-pspic4.dvi)
@start /Fa 134[77 121[{}1 172.188 /CMSY10 rf /Fb 148[44
2[44 44 44 3[44 44 7[44 17[44 7[44 1[44 8[44 44 5[44
44 2[44 44 40[{}16 83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1130 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 44.34969 22.17484
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1130 548 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fb(?-)43 b(k\(Y\))734 926 y
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 139.68881 69.8444
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 734 926 a 32
w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 135.88881 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)f(f\()p
989 926 27 4 v 31 w(G34\),g\()p 1328 926 V 28 w(G34\),h\()p
1664 926 V 29 w(G34\))1314 901 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1314 901 a 1314 901
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 24.06482
def /r 24.06482 def /h 6.89726 def /d 6.81386 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1314 901 a 1146 926 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 44.32964 9.91112 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fb(Y)h(=)p 1325 926 27 4 v 74 w(G34)1314 901 y
 tx@Dict begin PutEnd  end
 1314 901
a 639 1304 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 70.59946 35.29973
3.01385 } false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 639 1304 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 66.79945 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fb(?-)g(g\(a\),h\(a\))932 1279 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 932 1279
a 932 1279 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 24.06482
def /r 24.06482 def /h 6.89726 def /d 6.81386 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 932 1279 a 764 1304 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 44.32964 9.91112 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end


@endspecial 769 1304 27 4 v 31 w Fb(G34)g(=)g(a)932
1279 y
 tx@Dict begin PutEnd  end
 932 1279 a 748 1682 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 44.34969 22.17484
3.01385 } false /N@T-0-0-0-0 16 {InitRnode } NewNode end  end
 748 1682 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)g(h\(a\))932 1657 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 932
1657 a 918 2060 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 3.33333 1.66666 3.01385 }
false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end  end
 918 2060 a 932 2035 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end 
 grestore end
 932 2035 a 932
2035 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 4.6089 def
/r 4.6089 def /h 11.38892 def /d 7.04663 def LPutCoor end PutBegin
 end
 932 2035 a 894 2060 a Fa(y)932 2035 y
 tx@Dict begin PutEnd  end
 932 2035
a 1403 1304 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 70.59946 35.29973
3.01385 } false /N@T-0-0-1 16 {InitRnode } NewNode end  end
 1403 1304 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 66.79945 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fb(?-)g(g\(b\),h\(b\))1696 1279 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1696 1279
a 1696 1279 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 24.06482
def /r 24.06482 def /h 6.89726 def /d 6.81386 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 1696 1279 a 1527 1304 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 44.32964 9.91112 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end


@endspecial 1532 1304 27 4 v 32 w Fb(G34)f(=)h(b)1696
1279 y
 tx@Dict begin PutEnd  end
 1696 1279 a 1512 1682 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 44.34969 22.17484
3.01385 } false /N@T-0-0-1-0 16 {InitRnode } NewNode end  end
 1512 1682 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)g(h\(b\))1696 1657 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1696
1657 a 1617 2060 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 18.98093 9.49046
3.01385 } false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end  end
 1617 2060 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 15.18092 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial 1696 2035 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1696 2035 a 0 TeXcolorgray 0
TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 38 50
TeXDict begin 38 49 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(38)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(This)k(diagram)f(has)h(the)g(form)f(of)h(a)h
(tree;)h(in)e(f)o(act)h(it)g(is)g(our)e(\002rst)i(e)o(xample)e(of)806
1151 y(what)49 b(is)i(kno)n(wn)e(as)i(a)f(search)f(tree.)73
b(The)50 b(nodes)f(of)h(such)g(trees)g(say)g(which)806
1250 y(goals)43 b(ha)n(v)o(e)h(to)g(be)g(satis\002ed)h(at)g(the)f(v)n
(arious)f(steps)h(of)g(the)g(proof)f(search,)h(and)806
1350 y(the)i(edges)h(k)o(eep)f(track)h(of)f(the)h(v)n(ariable)f
(instantiations)g(that)h(are)g(made)f(when)806 1449 y(the)c(current)g
(goal)g(\(that)g(is,)i(the)f(\002rst)g(one)g(in)g(the)f(list)i(of)f
(goals\))f(is)h(uni\002ed)f(to)806 1549 y(a)52 b(f)o(act)h(or)f(to)g
(the)h(head)e(of)h(a)h(rule)f(in)h(the)f(kno)n(wledge)e(base.)80
b(Leaf)52 b(nodes)806 1649 y(which)35 b(still)i(contain)d
(unsatis\002ed)i(goals)f(are)h(points)f(where)g(Prolog)g(f)o(ailed)g
(\(either)806 1748 y(because)i(it)i(made)e(a)i(wrong)e(decision)g(some)
n(where)g(along)g(the)h(path,)g(or)g(because)806 1848
y(no)47 b(solution)g(e)o(xists\).)68 b(Leaf)47 b(nodes)h(with)g(an)g
(empty)f(goal)h(list)h(correspond)c(to)806 1948 y(a)f(possible)g
(solution.)55 b(The)44 b(edges)g(along)f(the)h(path)g(from)g(the)g
(root)f(node)h(to)g(a)806 2047 y(successful)h(leaf)g(node)g(tell)h(you)
f(the)g(v)n(ariable)g(instantiations)f(that)i(need)f(to)h(be)806
2147 y(made)40 b(to)h(satisfy)g(the)g(original)f(query)-5
b(.)900 2246 y(Let')g(s)45 b(ha)n(v)o(e)f(a)h(look)f(at)h(another)f(e)o
(xample.)55 b(Suppose)44 b(that)g(we)h(are)g(w)o(orking)806
2346 y(with)c(the)g(follo)n(wing)e(kno)n(wledge)g(base:)971
2487 y Fs(loves\(vincent,mi)o(a\))o(.)971 2587 y(loves\(marcellus,)o
(mi)o(a\).)971 2786 y(jealous\(A,B\):-)d(loves\(A,C\),)h(loves\(B,C\).)
806 2927 y Fw(No)n(w)j(we)i(pose)e(the)h(query)971 3069
y Fs(?-)g(jealous\(X,Y\).)806 3210 y Fw(The)f(search)h(tree)g(for)f
(the)h(query)e(looks)i(lik)o(e)g(this:)p 0 TeXcolorgray
0 TeXcolorgray 1159 4861 a @beginspecial 144 @llx 472
@lly 371 @urx 662 @ury 2270 @rwi @setspecial
%%BeginDocument: chap2-pspic5.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap2-pspic5.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 144 472 371 662
%%DocumentFonts: CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap2-pspic5.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 88 /X put
dup 89 /Y put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F9779E5FC0575729CE67A777CC63C4C9E2FD541287A3A
42A90C674BE17D468F96194BAB0E7440A2520AAF712BF6F3C628A3AFABC5D019
38F311D72D8FAD83EFCBF754613E1D550CA19DF51DCCFFA894081463075E72EF
CDD42B814A8C332C88E30895D3EBDA4889229DEB6DF494296DB56AFD9448C8BD
CB5CEA07346F415D469B638EB9DBDC3423CF739AC5383637D50F4A7EE6C700B8
0BBDA44D03DB8D7AA14D48B578ADC22A95ACC3B6EBA104BAECE43AB290570765
EF1EBB21117F839B5547D9A091D57D0063E4DDD7B9015E4C8A4887FF168A700D
04A7303BBC67E6A2F4D86D0A69096437B07E0D6E591ABD90B6D1A3EC389BD83E
E4E8840ABDD9AF4A69AABDD6C057C13508FFD810926D8B51A16CA7DD21208344
0C3C61D2BF3B821B98289693286E89AD428BF4E1035E92E55FB21E639AF66E6A
3A55B48D8D7589DAF8148D380D77F8E7DE4DAE00D18C90D8A9E89AD8F05901C8
972882D6229D128BE9EE534D290B6700B77015178BAC678557B7F11AB8528DDC
7BB77BEFA1341475F8FE3057BF6E9F3C42F844450CDDA2D5E1622913E69B6CF8
506AD1C2F79B1DDA335356B44FF1625F8400B9041822D7257822D94CD115CE16
BC7ABE5075C3442F67D4C551690D0D92DE979409103DE0E095F7129DC64B4012
AC9CE863CE8B738ACCFEF0BFB148E17AC26F748ECCBD48000277EC929B3DB8A4
8C4794FFCD5DFA64BDF5EE0FD9971FAC631E93B2E2990ECE96EF6D712B4FD780
87539392EA37F1E0672AD64EBB14C9F19F9E6DD333B78E91E4D7058517DCD523
FE710FF61D766E9B334BDD7EA54C5BDCF6D612B27BF30449DB579D45152EE022
3988AB6689FF07620A15DB00EFEDAA1F5E7A11BD19E0E704E119B5DE3A262503
19FA68D3A7C76703D9959B4266FF9E1E3152CAFC5F902D6E00746B8B22FFCF17
FE5AF6705411C565859440C20360124FD1504C60D87AA9CF68F93D6E03DA4AE6
A7E98A7920B72534DFD66CEC52715E496F7050A16A6C62D6F124DE122BA6312C
7F9946F2DBA4FA83EDF6A6CD3BCBB0AB202B0C6997DF8584D5DB0E5C30E5A42D
B22DD8E13A29F907AC84ABCBAF770E42D324E8CA78613F35EA64AA88C3C0E4F8
F0327884D3C7467A1598A876ED18B65ED8CF27CA4047225BD496F93E01565E76
1F18523AE7C302FA8DEEB992C641B525F9C4C27688B2FFF3F78AB70599760774
555ACA3DB4C8AE49E89D704555CCF7F685836785FBAE9B954327317EC07837E5
A45DC54B2B25B0996CDCFC704F000B642B19D23BADDFB71BAF02579D5FC0DF5A
AF91F50D9A6FE73546A1D1134E117D38C827F4DAD4624AD8D7C582092C221F8A
233301D92C6DEF173E0B5523F9E6C2DB9D9AA36A34805520C4F4950DAB3832E0
6ECF2626177E3520AABA0AECF7C4B350822CADB2A65AC41130737273FFB6421F
FBF66E37315B0C7027E7E9261C1253C8A8A1547ECC7FAAC1BDF36DB441170E9D
C3106AB600C9A5AA4DDC351B16BA6A51EB602065424F294DBD5F0DBF2A99D716
BAB66E4F0859AFD74E7296687E07A74EB382E8EF5E589796A2815462B9B36B70
6892D16700D6A10203D03263B1C28B26EADB953ED292A3FAF469BE383F47BB8E
249300A4E2A66056BB18F8C1EF81C89BC38FD6372FD614B326DD719272E1FE8A
FE0D4F38ADA72D5BEEA8E4B391FE883E5BF1578611CF6CAC749486C2EB18A752
D400F706992F9DC0D697DC9C7756A1BBD2139CB6629F63C0FB83C522073FB1D7
F6218E89026E5CB20CBF49AC18F02A398DBA0EA2EBFBC82BDC7DF9013E5A8D56
4C1EADCB680809350011F3F973D3A5F3DDFE96A6C003C30FD2970B441E290133
6E70AB82C4B4329E5CFF0AA13525A1E62E41EC7542019F64CA9BCC196C473E15
8E28A1B681A3C8089C4BC9E39F56C5D7E81C44732587AE0AD5F6535250BD9B82
8B8E5DDE11719A59D4C890589C7FFC9F6EF171A9A4FA400DB65784D11F5A64EA
728DE0AD8B0330D0AA3C61AC84461E2B0E587E25F1760854F731043B016450F8
5ED57D9B34872CD28B4B966C2CE0AB77C8B7C4479C144AFDC37E4571DCA588B1
C1EFA0C90B254CBE2FAE7CB6E46837942CBAF09315674D696A29E4AB8A89BF42
54DFAED59454D9D8C01D6D40550B486A61A48561B00199D84EFEEFCCEDDD1E51
AC1353F7C1C5C4962F026DDD17E49F3FD8A486533C554D9AEB704BDC869ECE7C
1DA9805E7A5F74BA6B69EEBFD18EDE6374960106B04D9451BFA1C04C88CCC6DC
508E6AB0298D96EDD406734FAA23A554286BF913F7B82B9220EAAF5D2CF835AE
D9257EE677F1F14D79B9E29AA08A9A1D1C8ACB7BB7DDF90F0B10B973D6D94F53
ABD70FCE958A9AF55683FF85150D3E90BA28AA076C206BE9C19D99A775B0FC01
1E4F9E0CA905D11B0D70E5FECD1831E3E86EA34827273F3AC172CB3EF35479B8
AAED446DB6EC6E1EC26573A8356F3F75FADB05114FA6F461478CBD7B6D29896E
8D989516DA4CFB9C632583E8C6ECFFD35112EFBB584381B51D5111091F5482C3
8C83486AAE5BCC1EDCC321E6C5317241BC77ED5A6A56061D2B106D2EF80646BC
FF40AC13A7A37B39A7333DCA08B91CEF302F316FACB6379E152E4F4AC22D0DBB
39E4C3398C1B48BAF8546876F26BF0BFDC95456404A0B5AD5274BC3A3DECE739
75101F66B88E05B4B8DF640A796F4BE9EE12F0C0A77F66BEE7128372A44EB51B
A208CBF45D88E65AAD48E80D0FB7D42E62EA05DB855F4825E283FC358CA1EA04
5A755CB47A6638A0CA7BCE2541006D24A8C984400DB68D01C799A7BB44D2FFC5
09D07FE33230DDBFFFAFA0F554E4686389E6E1868C18517C9EBCAF6267820FC4
22366B87AC25B5E9534A8DD32E5B7D97EBEE0DC5C9A54E3D7F441CA1502E25BC
DBDB625A7F18B554D6D1C7F4FA13E9C176D08A7168631C3036A7A3BFC4C5F0AC
A82ABE6C1E3D79A8B27BD2869D59774173CC09F8645A81EF35B01257BF97B1FA
C820801BA056E8187E30ABC42188536CAE2919D5FECA0738FEC8D9BAD036CCC3
82934CB6D963CBAB816369ACD19F79E984C645D29937F8DD25CF29B37BFAEEEB
7F613B377A63E5A2F380322EC23C6DDD8FD0421959D84E5BBB51F07C635BCBD0
4E95FF13E3754636C59B32E9B364EC3DC54F4DE87188BBA4C2D890CDCD042E72
F0C4E65BFFC81633C001A165062005A9393D4EA1EEDB215FA71615202B59A065
A3F09B8C5422B1DC82FFBDF9200EC031D136CA1B52B126D5B9BCB89C28F5BE84
A2A10DEBE34E3E7D8103DA630D0A9667CAD8F520BD17B35D89D1E1FED1AD1AAE
11FF1C379528CFC14B5016CA86BA9CF93A6C5D1B113EA90589B15EB9453679CE
CDE3A75BD8ABBA076EDF2CD82B7F9AFDBEC9AA20D9AFB7043F9F285ACB1476E7
D3F9BEF2A13345364530114A919889131D85D4D91640060BC8D4DCA58B0CE460
27326A2C67F3CFFBA5C9173978B7618A0483A6806F9C57E6C286FB531F15E103
28D53E8C0A7A9D508E2218762F7C3094CCD05D3771F66CDBE05445CB8DC50B7A
51CD719533A600650B70D085867AB442BABC43CBA27E0D90D45A2CBD6B4BFD29
FA78B1A8DD5332E267B5D6EEF0370A144668450F15B2AA0C911AB6975B5E38B3
24A1ADD9F8CF3C1EC23D552BD64372CD1DCF9E71904321C25397A61AA33C765D
6775BB68C697BEB64107F22B85B26C802CCE9B334AE4BFF426DD60CED09DE345
9F7CD89C252F40147D144BC66AA66AE4999D4732B934102373FE5FFB973637AD
7D1F5EDEEEF69D698662CDCACFF650E7E5D5B414F9D144C4A950DF7233401369
BE52DB8E763943AC6B7E54979BD7BE87F17AE9BE2D1BA0BF0696E8F7A1E10611
328AA89FAFEFE822B9FDB1CE500CC80BB20BFAC22025DC46B4A77E86960F0010
FF184171B37695EB912AF0260AB3C6E2158E311D8A7936A6C62F68C213FDAD53
57B265830E6BC22112CAE0E89385085EE3B8713DC4EB1AFC653B588F6790F69D
1C986ADE6F6A0803F02656FD40BB0562E6E50855CCA29020A0A03B96D37CCD6D
55FA03CCCCAE8E89370FD0AEE575FFAF0F8D6C2B4A0FAA52017E432FFA5E8955
160A25F08B717AC0722F106FC6AD0124E81F737CC45F68E8695AD4586BABF75F
C3DA565E2E0AEF357A55ABA61C6387E243C65EB70B282EFA1747E007127CAB89
B0B42A4858C997BDD69B29235EA964B51E5108036D829530008040C8C8FE8F3B
55A8F31EF111C1F3EDFD1E4D938E71AE5F806510CA0EAF75D75624A50C253D66
BD0894F703E7E0B433FC40A4FB363F784A9D4C086FE41EBE63A29284ECC2E0FB
5F5489BC36A15376A46D1EF6D8FC304C5230D2DDCF223DBB74C4C874BA21B939
C622A8698ED45DF6596B64EE0CA5A0C8EAD552349E33176C0CDE864DF379A53D
B9C815E257FA5B3EDA63B5B853719065B2DDF629D8D548BD5C5125DD18817C9C
EB143B5F3C53F9DF8F19B52AE133CC3977DDA1012BA8604DA3C8BCC482EE48A3
DCF1DA21D6AB6D42CFA5064EF231F29184218CD87D321EBF6D9C7CCB39A5FAAF
93868E344F96FDD7C8E6069B88DA1BABC38B68456232B4A636401278C3F42008
B331EA15D9EF13E84BBFA14828D05FA7812CEAB544B7F4E057FEC20DF5FB195F
48954FF1AFFC04E4502253F60733B410D33E36F5B5FB00F28D784843432445B0
6053D45211EF5964A1DCC2DB1D2E03E679C14934DB3536ACB33D342FAF4B1317
364B4F84290F1A382AD2CA0B7A2F5F8E298AAB55989BE950FB522D6C5A8ED396
27F6B9D8A710F6BAD352F525E0AF61E24AD028A779D6D9E7F4D36AADE890EE8F
D5D679AC853EAAF78DFC82872132A96A78A1B3AF52121794293940AA9B0B0E78
B422C8B4F44A4DB8FC28D692BAE4814730A9C62EB4C0852336D2D8CEE3B341C8
540202022C0A38DDB4EE6BDB19B7972F9CC1E07A20D21A9FC1387117F2D627D5
504CF577C5DB5BC49A3927E5726F6C848CFB530331F8705FA4B74D1316B49803
528533463EA5EEFCDC8828E992926645BE98944D5A0900AC77807F3C6824B10B
DB5AEAB757DD324C2B4CE1CD02D148724BEC139BA3FB56862A7835C9806FE80B
3F4FA3A2C8CE6E9725A02F6D3DAC2A973882D0E26E6F78A4C11E3E40FCA39F43
8BEEEDE530A60622B765A5A62BDD13213D3F55FE7407D85C82FD6C1418B4C913
7A28B266284BDF33E0055B779A64AF3D9F84E3DF4CA4D0B4DF9F8E8D049815A4
CFF4D82CC8A0B7F38655D246187D9CB891D69DE5B080994784AA1A10551FDD3F
79DF17FF1A17E3DC05F0C31C290EF9B8E5AEA208F15D32770A10888B1BA4D666
DC69C051BBF6D62B008F6EC1FA94810DACC345308B73EBF4DC5A0663535B6C7C
E023D64005D780658C0889061CD6E1E49970D1A3E66BE742ED5B2D6888158A7B
17C53CB0BF9BAED7F62276FB6E67247B686A98C171E3A9F6A5B9A54AEE57C3A9
D62233509E62CA584011B556114FF20E17EDBF9B8D0102551864052476949492
2879F8A187FC518AD26D9218759795AED4469375C5FB47EA3C17E0A7AAA46554
DE2A21A3D3385362ED88BFB7576103637333C5E272B5A6F36F85F52E448A3ACC
546794F343CA2DEDA211B5EA5897F7FE25BC0EC13855E28ED2D1604FB4DE18AA
85100A2DB4B8C3E4EEA47C1580B6895DF1D9E9866FECC07110E195F1E25C987C
8D33799B360FFA0B99776D39367D6134E7DE181EAC31AAE17118D0C72E6B78F8
BFCA73310CAAA371795927F06CA78C897700C09CBDCD48885F5FE1FC3D4A1C46
39FA255DD6016D963F69DA67F5B8CAAD8D63623572DC8518DB9D1549A1C188B6
DD5E87FD8F95A43DC8B056FFBCE2C6DB458F1E21C0DE30FFE6B36E4B97DDA0B5
44FCD42868CCCDC5AD9DDEE3680AB78E10A90C179BDAF2E7800292AE0E909077
70E10A5A2A2303A06EED113C9F805447D58D47BE96BAFAFF04CBA3C0F2DB6691
434BCA2B8144015C704D14337A0E959A374FCA5CAF985CC1A3AA1F0927F4A4D6
16DDB78F93CFB29D64154800FF830DDA20DEA566E09BB20B71017329FA7E266C
9B60B2B21E79CE89D2ACA50BC1500080B979C6A41A5B8564A52428BC47AB60D0
80D6169F4EA7EBBC850D695B4819259B68613C72AB74978930852FC4AFA8A6EC
819A1F750A5EBC83891D18D9314F9BDA41BF510D8E4931F87644F49C1716CAAC
1CF87F7B7621E82DB135C88C7CD05A109CA001D6E7686DBF0EE1DB6B99F0D72A
FEC13C56F74500E7844133E3426FC32F4EB8721600330F1417DA1F18F55F250E
28F8F0465C09296D6D1104828489177234414147B81663D560693E67F369F03B
712228DD89EC53256205BBB4B5D9FF149ADFF3454195A1E0407860A01119F56F
26EBBC72A5A916A7649A58C33EFE6A2AC2BAD639CAD6485AC803B87837FCE29A
D518946BB04991BBB8DFF24F082CD576DBDD7D2189ACD3EBEF51E3F0D917B050
A77B05C8772FAB9CD2D154013FC98C6FDD5399A1B00107014F0A2C0B88DB5EE3
F28DD1C8278F0385DA62AC70B35873E861D9B2E0427DC9F81B6A62EE0ACAE830
2BC115F96B114011A300FA14581F53E7425D443FA36D701930D7E4FCD361155A
3E5DB0950484135F3A4DF1EC1FAC80E110D248C12EA96459ED20E68B286D7B48
CBC71ED2CB000F7DB42CFD57030F288FEF9DD88B5B4D4040B29E8715C5154F2D
7BAC2BEBA473AB45201826868B322D23CA2349320085B79414A9A0E0363FB5A4
ADC47EEF6A74805A8FB76A7AEA0B16F77FB230DEF150DD293955D9DBA7B972F4
76621BF181AB1459474DB41863EF108FA740266928516BD444577B0E92F0E6D4
230749073A7E1DF2D8CEB7935689FB47B3F2CD91DC6B160B1FA74F6CC45039F4
6C0B916DE50EA63860BCBD476BA5A62187E6C99E599047B7C6CDFAB9F7BB12DA
C85A9BA2FA47B3394ADED8B434F2398E6519CC11C2297078CE47AF8D516634A6
5FD8F14184A9DECE33E8BE53CBACC4E6AE960C24C322C410268187B42D2E43C0
B12530C8AE5E4C0E7AD2EB2AD1E913F157F1D38611A7A4A58AB96C59750070E8
E17C63EF451837CA67952F7F1F6419A526F6F1BC4B4A84F7787ECD1AF4B8A806
E7E8E6BA58201764A11F14AC0568D918591217510E546E1FF818DA6B52E52842
0E71223CFAF8359DFA733DEE402BC5B93A95
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap2-pspic5.dvi)
@start /Fa 137[44 44 44 44 44 2[44 44 44 44 1[44 44 3[44
1[44 1[44 7[44 44 16[44 7[44 1[44 5[44 44 44 7[44 44
2[44 44 40[{}26 83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1161 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 86.34932 43.17465
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1161 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 82.54932 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)43 b(jealous\(X,Y\))815 973 y
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 169.71854 84.85927
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 815
973 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 165.91853 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)f(loves\()p
1246 973 27 4 v 29 w(G5,)p 1407 973 V 31 w(G6\),loves\()p
1878 973 V 27 w(G7,)p 2037 973 V 30 w(G6\))1520 948 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end

1520 948 a 1520 948 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 28.45274
def /r 28.45274 def /h 8.5417 def /d 9.56941 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1520 948 a 1283 928 a Fa(X)i(=)p
1463 928 27 4 v 74 w(G5,)1283 1028 y(Y)g(=)p 1463 1028
V 74 w(G7)1520 948 y
 tx@Dict begin PutEnd  end
 1520 948 a 639 1398 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 95.37923 47.6896
3.01385 } false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 639 1398 a
32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 91.57922 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)f(loves\()p
1071 1398 27 4 v 28 w(G7,mia\))1035 1373 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1035 1373
a 1035 1373 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 42.67912
def /r 42.67912 def /h 8.5417 def /d 9.56941 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1035 1373 a 686 1353 27 4 v 712 1353 a
Fa(G5)g(=)g(vincent,)p 681 1453 V 707 1453 a(G6)g(=)g(mia)1035
1373 y
 tx@Dict begin PutEnd  end
 1035 1373 a 813 1682 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-0 16 {InitRnode } NewNode end  end
 813 1682 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 880 1657 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 880 1657 a 880 1657
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 33.3897 def
/r 33.3897 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 880 1657 a 608 1682 27 4 v 634 1682 a Fa(G7)g(=)g(vincent)880
1657 y
 tx@Dict begin PutEnd  end
 880 1657 a 1124 1682 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-1 16 {InitRnode } NewNode end  end
 1124 1682 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 1191 1657 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1191 1657 a 1191
1657 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 38.63965
def /r 38.63965 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 1191 1657 a 875 1682 27 4 v 901 1682 a Fa(G7)g(=)g(marcellus)
1191 1657 y
 tx@Dict begin PutEnd  end
 1191 1657 a 1608 1398 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 95.37923 47.6896
3.01385 } false /N@T-0-0-1 16 {InitRnode } NewNode end  end
 1608 1398 a 32 w
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 91.57922 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)g(loves\()p
2040 1398 27 4 v 28 w(G7,mia\))2004 1373 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 2004 1373
a 2004 1373 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 42.67912
def /r 42.67912 def /h 8.5417 def /d 9.56941 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2004 1373 a 1655 1353 27 4 v 1681 1353
a Fa(G5)g(=)g(marcellus,)p 1650 1453 V 1676 1453 a(G6)g(=)g(mia)2004
1373 y
 tx@Dict begin PutEnd  end
 2004 1373 a 1782 2060 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-1-0 16 {InitRnode } NewNode end  end
 1782 2060 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 1849 2035 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1849 2035 a 1849
2035 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 33.3897 def
/r 33.3897 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1849 2035 a 1577 2060 27 4 v 1603 2060 a Fa(G7)g(=)g(vincent)
1849 2035 y
 tx@Dict begin PutEnd  end
 1849 2035 a 2093 2060 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-1-1 16 {InitRnode } NewNode end  end
 2093 2060 a 31 w
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 2160 2035 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 2160
2035 a 2160 2035 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 38.63965
def /r 38.63965 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2160 2035 a 1844 2060 27 4 v 1870
2060 a Fa(G7)g(=)g(marcellus)2160 2035 y
 tx@Dict begin PutEnd  end
 2160 2035 a
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 900 5002 a(There)51 b(is)h(only)f(one)g(possible)g(w)o(ay)
h(of)f(unifying)f Fs(jealous\(X,Y\))d Fw(against)806
5102 y(the)40 b(kno)n(wledge)f(base,)i(namely)f(by)g(using)h(the)g
(rule)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 39 51
TeXDict begin 39 50 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(39)p 0 TeXcolorgray 522 1051 a Fs(jealous\(A,B\):-)36
b(loves\(A,C\),)h(loves\(B,C\).)357 1215 y Fw(So)k(the)g(ne)n(w)g
(goals)f(that)h(ha)n(v)o(e)g(to)g(be)g(satis\002ed)g(are:)522
1379 y Fs(loves\(_G5,_G6\),l)o(ove)o(s\()o(_G7)o(,_)o(G6)o(\))357
1543 y Fw(No)n(w)51 b(we)i(ha)n(v)o(e)e(to)h(unify)f
Fs(loves\(_G5,_G6\))46 b Fw(against)51 b(the)h(kno)n(wledge)e(base.)357
1643 y(There)39 b(are)h(tw)o(o)g(w)o(ays)g(of)g(doing)e(this)j(\(it)f
(can)g(either)f(be)h(uni\002ed)f(with)h(the)g(\002rst)357
1743 y(f)o(act)j(or)h(with)f(the)h(second)f(f)o(act\))g(and)g(this)h
(is)h(why)d(the)i(path)f(branches)f(at)i(this)357 1842
y(point.)70 b(In)48 b(both)h(cases)h(the)f(goal)g Fs(loves\(_G7,mia\))
44 b Fw(remains,)50 b(and)f(this)h(can)357 1942 y(also)44
b(be)g(satis\002ed)g(by)g(using)f(either)h(of)f(tw)o(o)h(f)o(acts.)55
b(All)45 b(in)f(all)h(there)e(are)h(four)357 2041 y(leaf)52
b(nodes)f(with)i(an)f(empty)f(goal)h(list,)k(which)c(means)g(that)g
(there)g(are)g(four)357 2141 y(w)o(ays)37 b(of)g(satisfying)g(the)h
(original)e(query)-5 b(.)42 b(The)37 b(v)n(ariable)g(instantiations)f
(for)h(each)357 2241 y(solution)h(can)g(be)h(read)f(of)n(f)g(the)h
(path)f(from)g(the)h(root)f(to)h(the)g(leaf)g(node.)44
b(So)39 b(the)357 2340 y(four)h(solutions)g(are:)p 0
TeXcolorgray 460 2505 a(1.)p 0 TeXcolorgray 41 w Fs(X)h(=)g(_G5)g(=)g
(vincent)d Fw(and)j Fs(Y)g(=)g(_G7)f(=)h(vincent)p 0
TeXcolorgray 460 2670 a Fw(2.)p 0 TeXcolorgray 41 w Fs(X)g(=)g(_G5)g(=)
g(vincent)d Fw(and)j Fs(Y)g(=)g(_G7)f(=)h(marcellus)p
0 TeXcolorgray 460 2835 a Fw(3.)p 0 TeXcolorgray 41 w
Fs(X)g(=)g(_G5)g(=)g(marcellus)d Fw(and)i Fs(Y)h(=)g(_G7)f(=)i(vincent)
p 0 TeXcolorgray 460 3000 a Fw(4.)p 0 TeXcolorgray 41
w Fs(X)f(=)g(_G5)g(=)g(marcellus)d Fw(and)i Fs(Y)h(=)g(_G7)f(=)i
(marcellus)357 3164 y Fw(W)-7 b(ork)41 b(through)d(this)k(e)o(xample)d
(carefully)-5 b(,)39 b(and)i(mak)o(e)f(sure)h(you)f(understand)f(it.)
357 3354 y Fk(3)99 b(Exer)n(cises)357 3517 y Fv(Exer)o(cise)50
b(2.1.)125 b Fw(Which)51 b(of)g(the)g(follo)n(wing)e(pairs)i(of)f
(terms)h(unify?)75 b(Where)p 0 TeXcolorgray 3286 3424
118 4 v 3286 3542 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 3290 3542 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 358 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0
TeXcolorgray 3401 3542 4 118 v 3286 3545 118 4 v 0 TeXcolorgray
357 3617 a Fw(rele)n(v)n(ant,)34 b(gi)n(v)o(e)h(the)f(v)n(ariable)g
(instantiations)h(that)g(lead)f(to)h(successful)g(uni\002cation.)p
0 TeXcolorgray 460 3781 a(1.)p 0 TeXcolorgray 41 w Fs(bread)40
b(=)h(bread)p 0 TeXcolorgray 460 3946 a Fw(2.)p 0 TeXcolorgray
41 w Fs('Bread')e(=)i(bread)p 0 TeXcolorgray 460 4111
a Fw(3.)p 0 TeXcolorgray 41 w Fs('bread')e(=)i(bread)p
0 TeXcolorgray 460 4276 a Fw(4.)p 0 TeXcolorgray 41 w
Fs(Bread)f(=)h(bread)p 0 TeXcolorgray 460 4441 a Fw(5.)p
0 TeXcolorgray 41 w Fs(bread)f(=)h(sausage)p 0 TeXcolorgray
460 4606 a Fw(6.)p 0 TeXcolorgray 41 w Fs(food\(bread\))c(=)k(bread)p
0 TeXcolorgray 460 4772 a Fw(7.)p 0 TeXcolorgray 41 w
Fs(food\(bread\))c(=)k(X)p 0 TeXcolorgray 460 4937 a
Fw(8.)p 0 TeXcolorgray 41 w Fs(food\(X\))e(=)i(food\(bread\))p
0 TeXcolorgray 460 5102 a Fw(9.)p 0 TeXcolorgray 41 w
Fs(food\(bread,X\))36 b(=)41 b(food\(Y,sausage\))p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 40 52
TeXDict begin 40 51 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(40)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 868 1051 a(10.)p 0 TeXcolorgray
40 w Fs(food\(bread,X,bee)o(r\))35 b(=)41 b(food\(Y,sausage,X\))p
0 TeXcolorgray 868 1214 a Fw(11.)p 0 TeXcolorgray 40
w Fs(food\(bread,X,bee)o(r\))35 b(=)41 b(food\(Y,kahuna_bur)o(ge)o(r\))
p 0 TeXcolorgray 868 1378 a Fw(12.)p 0 TeXcolorgray 40
w Fs(food\(X\))e(=)i(X)p 0 TeXcolorgray 868 1542 a Fw(13.)p
0 TeXcolorgray 40 w Fs(meal\(food\(bread\))o(,dr)o(in)o(k\(b)o(ee)o
(r\))o(\))36 b(=)41 b(meal\(X,Y\))p 0 TeXcolorgray 868
1705 a Fw(14.)p 0 TeXcolorgray 40 w Fs(meal\(food\(bread\))o(,X\))35
b(=)41 b(meal\(X,drink\(bee)o(r\))o(\))806 1900 y Fv(Exer)o(cise)f
(2.2.)95 b Fw(W)-7 b(e)42 b(are)f(w)o(orking)e(with)j(the)f(follo)n
(wing)e(kno)n(wledge)g(base:)p 0 TeXcolorgray 357 1807
118 4 v 357 1924 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 361 1924 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray -2861 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 471 1924 4 118 v 357 1927 118 4 v 0 TeXcolorgray
971 2061 a Fs(house_elf\(dobby\))o(.)971 2160 y(witch\(hermione\).)971
2260 y(witch\('McGonagal)o(l')o(\).)971 2360 y(witch\(rita_skeet)o(er)o
(\).)971 2459 y(magic\(X\):-)e(house_elf\(X\).)971 2559
y(magic\(X\):-)g(wizard\(X\).)971 2658 y(magic\(X\):-)g(witch\(X\).)900
2820 y Fw(Which)j(of)g(the)g(follo)n(wing)f(queries)g(are)h
(satis\002ed?)47 b(Where)40 b(rele)n(v)n(ant,)f(gi)n(v)o(e)g(all)806
2919 y(the)h(v)n(ariable)g(instantiations)h(that)g(lead)g(to)g
(success.)p 0 TeXcolorgray 909 3080 a(1.)p 0 TeXcolorgray
41 w Fs(?-)g(magic\(house_elf\))o(.)p 0 TeXcolorgray
909 3244 a Fw(2.)p 0 TeXcolorgray 41 w Fs(?-)g(wizard\(harry\).)p
0 TeXcolorgray 909 3407 a Fw(3.)p 0 TeXcolorgray 41 w
Fs(?-)g(magic\(wizard\).)p 0 TeXcolorgray 909 3571 a
Fw(4.)p 0 TeXcolorgray 41 w Fs(?-)g(magic\('McGonagal)o(l')o(\).)p
0 TeXcolorgray 909 3735 a Fw(5.)p 0 TeXcolorgray 41 w
Fs(?-)g(magic\(Hermione\).)806 3896 y Fw(Dra)o(w)f(the)h(search)g(tree)
g(for)f(the)h(query)e Fs(magic\(Hermione\))-6 b Fw(.)806
4029 y Fv(Exer)o(cise)63 b(2.3.)162 b Fw(Here)64 b(is)g(a)g(tin)o(y)f
(le)o(xicon)f(\(that)i(is,)69 b(information)61 b(about)p
0 TeXcolorgray 357 3936 V 357 4054 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 4054 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -3020 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 4054 4 118
v 357 4057 118 4 v 0 TeXcolorgray 806 4128 a Fw(indi)n(vidual)45
b(w)o(ords\))h(and)g(a)i(mini)f(grammar)e(consisting)h(of)h(one)f
(syntactic)h(rule)806 4228 y(\(which)37 b(de\002nes)h(a)g(sentence)g
(to)h(be)f(an)g(entity)g(consisting)f(of)h(\002)n(v)o(e)g(w)o(ords)g
(in)g(the)806 4327 y(follo)n(wing)h(order:)45 b(a)c(determiner)m(,)e(a)
i(noun,)e(a)j(v)o(erb,)d(a)j(determiner)m(,)c(a)j(noun\).)971
4504 y Fs(word\(determiner,)o(a\))o(.)971 4604 y(word\(determiner,)o
(ev)o(ery)o(\).)971 4703 y(word\(noun,crimin)o(al)o(\).)971
4803 y(word\(noun,'big)36 b(kahuna)j(burger'\).)971 4902
y(word\(verb,eats\).)971 5002 y(word\(verb,likes\))o(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 41 53
TeXDict begin 41 52 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(41)p 0 TeXcolorgray 522 1051 a Fs(sentence\(Word1,W)o
(ord)o(2,)o(Wor)o(d3)o(,W)o(ord)o(4,)o(Wor)o(d5)o(\):)o(-)647
1151 y(word\(determiner)o(,Wo)o(rd)o(1\))o(,)647 1250
y(word\(noun,Word2)o(\),)647 1350 y(word\(verb,Word3)o(\),)647
1449 y(word\(determiner)o(,Wo)o(rd)o(4\))o(,)647 1549
y(word\(noun,Word5)o(\).)357 1736 y Fw(What)45 b(query)e(do)i(you)f(ha)
n(v)o(e)g(to)h(pose)g(in)g(order)e(to)i(\002nd)g(out)g(which)f
(sentences)357 1836 y(the)53 b(grammar)g(can)g(generate?)83
b(List)55 b(all)f(sentences)g(that)g(this)g(grammar)e(can)357
1935 y(generate)39 b(in)i(the)g(order)f(that)h(Prolog)f(will)i
(generate)e(them)g(in.)357 2069 y Fv(Exer)o(cise)g(2.4.)95
b Fw(Here)41 b(are)g(six)g(Italian)g(w)o(ords:)p 0 TeXcolorgray
3286 1976 118 4 v 3286 2094 4 118 v 0 0 0 0.05 TeXcolorcmyk
0 0 0 0.05 TeXcolorcmyk 3290 2094 112 118 v 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray 1433 w Fi(E)p 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray 3401 2094 4 118 v 3286 2097
118 4 v 0 TeXcolorgray 451 2170 a Ft(astante)p Fw(,)f
Ft(astoria)p Fw(,)h Ft(bar)o(atto)p Fw(,)e Ft(cobalto)p
Fw(,)h Ft(pistola)p Fw(,)g Ft(statale)p Fw(.)357 2271
y(The)o(y)35 b(are)h(to)h(be)f(arranged,)f(crossw)o(ord)h(puzzle)f(f)o
(ashion,)i(in)f(the)h(follo)n(wing)d(grid:)p 0 TeXcolorgray
0 TeXcolorgray 1031 3657 a @beginspecial 0 @llx 0 @lly
150 @urx 140 @ury 1500 @rwi @setspecial
%%BeginDocument: crosswd2.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: crosswd2.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Mon Aug 30 20:11:22 2004
%%For: kris@tora (Kristina Striegnitz)
%%BoundingBox: 0 0 150 140
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0.5 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.000 0.000 0.010 srgb} bind def

end
save
newpath 0 140 moveto 0 0 lineto 150 0 lineto 150 140 lineto closepath clip newpath
-139.5 379.3 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 100
% Polyline
10.000 slw
n 2700 4500 m 4800 4500 l 4800 4800 l 2700 4800 l
 cp gs col-1 10.00 shd ef gr gs col0 s gr 
% Polyline
n 2700 5100 m 4800 5100 l 4800 5400 l 2700 5400 l 2700 5250 l
 cp gs col-1 10.00 shd ef gr gs col0 s gr 
% Polyline
n 2700 5700 m 4800 5700 l 4800 6000 l 2700 6000 l 2700 5775 l
 cp gs col-1 10.00 shd ef gr gs col0 s gr 
% Polyline
n 3000 4200 m 3000 6300 l 3300 6300 l 3300 4200 l 3075 4200 l
 cp gs col-1 10.00 shd ef gr gs col0 s gr 
% Polyline
n 3600 4200 m 3600 6300 l 3900 6300 l 3900 4200 l 3750 4200 l
 cp gs col-1 10.00 shd ef gr gs col0 s gr 
% Polyline
n 4200 4200 m 4200 6300 l 4500 6300 l 4500 4200 l
 cp gs col-1 10.00 shd ef gr gs col0 s gr 
% Polyline
n 3000 4500 m
 3300 4500 l gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3600 4500 m
 3900 4500 l gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
n 4200 4500 m
 4500 4500 l gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3000 4800 m
 3300 4800 l gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3600 4800 m
 4500 4800 l gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3000 5100 m
 4500 5100 l gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3000 5400 m
 4500 5400 l gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3000 5700 m
 4500 5700 l gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3000 6000 m
 4500 6000 l gs col31 1.00 shd ef gr gs col0 s gr 
/Times-Roman ff 180.00 scf sf
2325 4725 m
gs 1 -1 sc (H1) col0 sh gr
/Times-Roman ff 180.00 scf sf
2325 5325 m
gs 1 -1 sc (H2) col0 sh gr
/Times-Roman ff 180.00 scf sf
2325 5925 m
gs 1 -1 sc (H3) col0 sh gr
/Times-Roman ff 180.00 scf sf
3075 4125 m
gs 1 -1 sc (V1) col0 sh gr
/Times-Roman ff 180.00 scf sf
3675 4125 m
gs 1 -1 sc (V2) col0 sh gr
/Times-Roman ff 180.00 scf sf
4275 4125 m
gs 1 -1 sc (V3) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage

%%EndDocument
 @endspecial 451 3948 a(The)50 b(follo)n(wing)f(kno)n(wledge)f(base)i
(represents)f(a)i(le)o(xicon)e(containing)g(these)357
4048 y(w)o(ords:)522 4217 y Fs(word\(astante,)36 b(a,s,t,a,n,t,e\).)522
4317 y(word\(astoria,)g(a,s,t,o,r,i,a\).)522 4416 y(word\(baratto,)g
(b,a,r,a,t,t,o\).)522 4516 y(word\(cobalto,)g(c,o,b,a,l,t,o\).)522
4615 y(word\(pistola,)g(p,i,s,t,o,l,a\).)522 4715 y(word\(statale,)g
(s,t,a,t,a,l,e\).)357 4885 y Fw(Write)i(a)g(predicate)f
Fs(crossword/6)c Fw(that)38 b(tells)h(us)f(ho)n(w)f(to)h(\002ll)h(in)e
(the)h(grid.)44 b(The)357 4984 y(\002rst)39 b(three)g(ar)o(guments)e
(should)g(be)i(the)g(v)o(ertical)f(w)o(ords)h(from)f(left)h(to)g
(right,)f(and)357 5084 y(the)j(last)g(three)g(ar)o(guments)e(the)i
(horizontal)e(w)o(ords)i(from)e(top)i(to)g(bottom.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 42 54
TeXDict begin 42 53 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(42)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(4)99 b(Practical)41 b(Session)806
1180 y Fw(By)48 b(this)h(stage,)h(you)e(should)f(ha)n(v)o(e)h(had)f
(your)g(\002rst)i(taste)g(of)f(running)f(Prolog)806 1280
y(programs.)c(The)d(purpose)e(of)i(the)g(second)f(practical)h(session)g
(is)h(to)g(suggest)e(tw)o(o)806 1380 y(sets)53 b(of)f(k)o(e)o(yboard)e
(e)o(x)o(ercises)i(which)g(will)h(help)g(you)e(get)i(f)o(amiliar)f
(with)g(the)806 1479 y(w)o(ay)44 b(Prolog)f(w)o(orks.)56
b(The)44 b(\002rst)h(set)g(has)g(to)g(do)f(with)g(uni\002cation,)g(the)
g(second)806 1579 y(with)d(proof)e(search.)900 1679 y(First)51
b(of)f(all,)j(start)e(up)f(your)f(Prolog)g(interpreter)-5
b(.)73 b(That)50 b(is,)j(get)d(a)h(screen)806 1778 y(displaying)43
b(the)h(usual)g(\223I'm)g(ready)g(to)g(start\224)h(prompt,)f(which)g
(probably)e(looks)806 1878 y(something)d(lik)o(e:)971
2021 y Fs(?-)806 2164 y Fw(V)-9 b(erify)37 b(your)h(answers)h(to)g(Ex)o
(ercise)f(2.1,)g(the)h(uni\002cation)e(e)o(xamples.)44
b(Y)-9 b(ou)38 b(don')o(t)806 2264 y(need)e(to)h(consult)f(an)o(y)h
(kno)n(wledge)d(bases,)k(simply)f(ask)g(Prolog)f(directly)h(whether)806
2363 y(it)i(is)h(possible)f(to)g(unify)f(the)i(terms)f(by)f(using)h
(the)g(b)n(uilt-in)g Fs(=/2)f Fw(predicate.)44 b(F)o(or)806
2463 y(e)o(xample,)g(to)h(test)h(whether)e Fs(food\(bread,X\))c
Fw(and)k Fs(food\(Y,sausage\))39 b Fw(unify)-5 b(,)806
2562 y(just)41 b(type)f(in)971 2705 y Fs(food\(bread,X\))c(=)41
b(food\(Y,sausage\).)806 2849 y Fw(and)f(hit)h(return.)900
2948 y(Y)-9 b(ou)29 b(should)f(also)i(look)e(at)i(what)g(happens)e
(when)g(your)g(Prolog)h(implementation)806 3048 y(attempts)38
b(to)g(unify)f(terms)i(that)f(can')o(t)f(be)i(uni\002ed)e(because)h(it)
h(doesn')o(t)d(carry)i(out)806 3147 y(an)43 b(occurs)g(check.)53
b(F)o(or)44 b(e)o(xample,)f(see)h(what)g(happens)e(when)h(you)g(gi)n(v)
o(e)g(it)h(the)806 3247 y(follo)n(wing)39 b(query:)971
3390 y Fs(g\(X,Y\))g(=)i(Y.)806 3533 y Fw(If)f(it)i(handles)e(such)h(e)
o(xamples,)e(try)i(the)g(trickier)f(one)h(mentioned)e(in)i(the)g(te)o
(xt:)971 3676 y Fs(X)g(=)g(f\(X\),)f(Y)h(=)g(f\(Y\),)e(X)i(=)g(Y.)900
3819 y Fw(Once)33 b(you')l(v)o(e)d(e)o(xperimented)h(with)i(that,)h
(it')-5 b(s)34 b(time)g(to)f(mo)o(v)o(e)e(on)i(to)g(something)806
3919 y(ne)n(w)-5 b(.)78 b(There)52 b(is)h(another)e(b)n(uilt-in)g
(Prolog)h(predicate)f(for)g(answering)g(queries)806 4019
y(about)42 b(uni\002cation,)g(namely)g Fs(\\=/2)g Fw(\(that)h(is:)52
b(the)43 b(2-place)f(predicate)g Fs(\\=)p Fw(\).)52 b(This)806
4118 y(w)o(orks)47 b(in)g(the)h(opposite)e(w)o(ay)i(to)f(the)h
Fs(=/2)e Fw(predicate:)58 b(it)49 b(succeeds)e(when)f(its)806
4218 y(tw)o(o)i(ar)o(guments)e(do)h Ft(not)i Fw(unify)-5
b(.)66 b(F)o(or)47 b(e)o(xample,)h(the)g(terms)h Fs(a)f
Fw(and)f Fs(b)h Fw(do)g(not)806 4317 y(unify)-5 b(,)39
b(which)h(e)o(xplains)g(the)h(follo)n(wing)e(dialogue:)971
4461 y Fs(?-)i(a)g(\\=)f(b.)971 4560 y(yes)900 4703 y
Fw(Mak)o(e)46 b(sure)h(you)f(understand)e(ho)n(w)j Fs(\\=/2)e
Fw(w)o(orks)h(by)h(trying)e(it)j(out)e(on)g(\(at)806
4803 y(least\))f(the)g(follo)n(wing)f(e)o(xamples.)57
b(But)46 b(do)f(this)h(acti)n(v)o(ely)-5 b(,)44 b(not)h(passi)n(v)o
(ely)-5 b(.)58 b(That)806 4902 y(is,)38 b(after)f(you)f(type)g(in)h(an)
g(e)o(xample,)f(pause,)h(and)g(try)g(to)g(w)o(ork)f(out)h(for)f
(yourself)806 5002 y(what)k(Prolog)g(is)h(going)e(to)i(respond.)j(Only)
c(then)g(hit)h(return)e(to)i(see)g(if)g(you)f(are)806
5102 y(right.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 43 55
TeXDict begin 43 54 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(43)p 0 TeXcolorgray 0 TeXcolorgray 460
1051 a(1.)p 0 TeXcolorgray 41 w Fs(a)41 b(\\=)g(a)p 0
TeXcolorgray 460 1209 a Fw(2.)p 0 TeXcolorgray 41 w Fs('a')g(\\=)f(a)p
0 TeXcolorgray 460 1366 a Fw(3.)p 0 TeXcolorgray 41 w
Fs(A)h(\\=)g(a)p 0 TeXcolorgray 460 1524 a Fw(4.)p 0
TeXcolorgray 41 w Fs(f\(a\))f(\\=)h(a)p 0 TeXcolorgray
460 1682 a Fw(5.)p 0 TeXcolorgray 41 w Fs(f\(a\))f(\\=)h(A)p
0 TeXcolorgray 460 1839 a Fw(6.)p 0 TeXcolorgray 41 w
Fs(f\(A\))f(\\=)h(f\(a\))p 0 TeXcolorgray 460 1997 a
Fw(7.)p 0 TeXcolorgray 41 w Fs(g\(a,B,c\))d(\\=)j(g\(A,b,C\))p
0 TeXcolorgray 460 2155 a Fw(8.)p 0 TeXcolorgray 41 w
Fs(g\(a,b,c\))d(\\=)j(g\(A,C\))p 0 TeXcolorgray 460 2312
a Fw(9.)p 0 TeXcolorgray 41 w Fs(f\(X\))f(\\=)h(X)451
2462 y Fw(Thus)60 b(the)h Fs(\\=/2)e Fw(predicate)g(is)i
(\(essentially\))f(the)h(ne)o(gation)d(of)i(the)g Fs(=/2)357
2561 y Fw(predicate:)69 b(a)54 b(query)e(in)m(v)n(olving)f(one)i(of)g
(these)g(predicates)g(will)h(be)f(satis\002ed)357 2661
y(when)38 b(the)h(corresponding)c(query)i(in)m(v)n(olving)g(the)h
(other)g(is)i(not,)f(and)f(vice)g(v)o(ersa.)357 2761
y(This)56 b(is)i(the)e(\002rst)h(e)o(xample)e(we)i(ha)n(v)o(e)f(seen)h
(of)f(a)h(Prolog)e(mechanism)g(for)357 2860 y(handling)43
b(ne)o(gation.)56 b(W)-7 b(e)46 b(discuss)g(Prolog)e(ne)o(gation)f
(\(and)h(its)i(peculiarities\))f(in)357 2960 y(Chapter)40
b(10.)451 3059 y(It')-5 b(s)44 b(time)g(to)g(mo)o(v)o(e)e(on)h(and)g
(introduce)f(one)h(of)g(the)h(most)g(helpful)e(tools)i(in)357
3159 y(Prolog:)i Fs(trace)n Fw(.)i(This)42 b(is)h(a)f(b)n(uilt-in)f
(Prolog)f(predicate)h(that)g(changes)g(the)h(w)o(ay)357
3259 y(Prolog)51 b(runs:)67 b(it)52 b(forces)g(Prolog)f(to)h(e)n(v)n
(aluate)e(queries)i(one)f(step)h(at)g(a)h(time,)357 3358
y(indicating)43 b(what)h(it)h(is)g(doing)e(at)i(each)f(step.)56
b(Prolog)44 b(w)o(aits)h(for)f(you)f(to)i(press)357 3458
y(return)50 b(before)h(it)h(mo)o(v)o(es)f(to)h(the)f(ne)o(xt)g(step,)k
(so)d(that)g(you)f(can)g(see)i(e)o(xactly)357 3558 y(what)c(is)i(going)
d(on.)72 b(It)50 b(w)o(as)g(really)g(designed)e(to)i(be)f(used)h(as)g
(a)g(deb)n(ugging)357 3657 y(tool,)41 b(b)n(ut)g(it')-5
b(s)43 b(also)e(helpful)f(when)h(you')l(re)f(learning)g(Prolog:)46
b(stepping)40 b(through)357 3757 y(programs)d(using)i
Fs(trace)e Fw(is)k(an)e Ft(e)n(xcellent)h Fw(w)o(ay)g(of)f(learning)e
(ho)n(w)i(Prolog)f(proof)357 3857 y(search)i(w)o(orks.)451
3956 y(Let')-5 b(s)43 b(look)e(at)i(an)f(e)o(xample.)47
b(In)42 b(the)g(te)o(xt,)g(we)g(look)o(ed)f(at)i(the)f(proof)e(search)
357 4056 y(in)m(v)n(olv)o(ed)51 b(when)j(we)g(made)f(the)h(query)e
Fs(k\(Y\))h Fw(to)h(the)g(follo)n(wing)e(kno)n(wledge)357
4155 y(base:)522 4305 y Fs(f\(a\).)522 4404 y(f\(b\).)522
4604 y(g\(a\).)522 4703 y(g\(b\).)522 4902 y(h\(b\).)522
5102 y(k\(X\):-)39 b(f\(X\),)h(g\(X\),)f(h\(X\).)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 44 56
TeXDict begin 44 55 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(44)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(Suppose)f(this)h(kno)n(wledge)e(base)i(is)h
(in)f(\002le)g Fs(proof.pl)m Fw(.)46 b(W)-7 b(e)41 b(\002rst)f(consult)
g(it:)971 1217 y Fs(?-)h([proof].)971 1317 y(yes)806
1483 y Fw(W)-7 b(e)42 b(then)e(type)h Fs(trace)m Fw(,)h(follo)n(wed)d
(by)i(a)g(full)g(stop,)g(and)f(hit)h(return:)971 1649
y Fs(?-)g(trace.)971 1748 y(yes)806 1914 y Fw(Prolog)e(is)i(no)n(w)f
(in)h(trace)f(mode,)g(and)g(will)h(e)n(v)n(aluate)f(all)h(queries)f
(step)g(by)g(step.)806 2014 y(F)o(or)f(e)o(xample,)f(if)h(we)h(pose)f
(the)h(query)e Fs(k\(X\))n Fw(,)i(and)f(then)g(hit)h(return)e(e)n(v)o
(ery)g(time)806 2114 y(Prolog)h(comes)i(back)f(with)h(a)h
Fs(?)o Fw(,)g(we)f(obtain)f(\(something)f(lik)o(e\))i(the)g(follo)n
(wing:)971 2280 y Fs([trace])d(2)k(?-)e(k\(X\).)1095
2379 y(Call:)g(\(6\))g(k\(_G34\))f(?)1095 2479 y(Call:)h(\(7\))g
(f\(_G34\))f(?)1095 2579 y(Exit:)h(\(7\))g(f\(a\))g(?)1095
2678 y(Call:)g(\(7\))g(g\(a\))g(?)1095 2778 y(Exit:)g(\(7\))g(g\(a\))g
(?)1095 2877 y(Call:)g(\(7\))g(h\(a\))g(?)1095 2977 y(Fail:)g(\(7\))g
(h\(a\))g(?)1095 3077 y(Fail:)g(\(7\))g(g\(a\))g(?)1095
3176 y(Redo:)g(\(7\))g(f\(_G34\))f(?)1095 3276 y(Exit:)h(\(7\))g
(f\(b\))g(?)1095 3376 y(Call:)g(\(7\))g(g\(b\))g(?)1095
3475 y(Exit:)g(\(7\))g(g\(b\))g(?)1095 3575 y(Call:)g(\(7\))g(h\(b\))g
(?)1095 3674 y(Exit:)g(\(7\))g(h\(b\))g(?)1095 3774 y(Exit:)g(\(6\))g
(k\(b\))g(?)971 3973 y(X)h(=)g(b)971 4073 y(yes)900 4239
y Fw(Study)j(this)i(carefully)-5 b(.)55 b(That)45 b(is,)h(try)f(doing)f
(the)h(same)g(thing)f(yourself,)g(and)806 4339 y(relate)j(this)h
(output)e(to)h(the)h(discussion)f(of)g(the)g(e)o(xample)f(in)i(the)f
(te)o(xt,)i(and)d(in)806 4438 y(particular)m(,)52 b(to)f(the)h(nodes)f
(in)g(the)h(search)f(tree.)78 b(T)-7 b(o)51 b(get)h(you)e(started,)k
(we')o(ll)806 4538 y(remark)35 b(that)i(the)g(third)g(line)g(is)h
(where)e(the)h(v)n(ariable)f(in)h(the)g(query)f(is)i(\(wrongly\))806
4637 y(instantiated)47 b(to)h Fs(a)p Fw(.)67 b(The)47
b(\002rst)i(line)f(mark)o(ed)f Fs(fail)g Fw(is)i(where)e(Prolog)g
(realises)806 4737 y(it')-5 b(s)47 b(tak)o(en)f(the)g(wrong)f(path)h
(and)g(starts)h(to)g(backtrack,)e(and)h(the)g(line)h(mark)o(ed)806
4837 y Fs(redo)39 b Fw(is)j(where)f(it)g(tries)h(alternati)n(v)o(es)e
(for)g(the)h(goal)f Fs(f\(_G34\))m Fw(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 45 57
TeXDict begin 45 56 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(2:)46 b(Uni\002cation)40 b(and)h(Proof)f
(Search)1070 b(45)p 0 TeXcolorgray 451 1051 a(While)42
b(learning)f(Prolog,)f(use)i(trace,)f(and)g(use)h(it)h(hea)n(vily)-5
b(.)46 b(It')-5 b(s)42 b(a)g(great)g(w)o(ay)357 1151
y(to)f(learn.)k(Oh)c(yes:)46 b(you)40 b(also)h(need)f(to)h(kno)n(w)e
(ho)n(w)i(to)g(turn)f(trace)g(of)n(f.)45 b(Simply)357
1250 y(type)40 b(notrace)g(\(follo)n(wed)f(by)i(a)g(full)g(stop\))g
(and)f(hit)h(return:)522 1416 y Fs(?-)g(notrace.)522
1516 y(yes)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 46 58
TeXDict begin 46 57 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 47 59
TeXDict begin 47 58 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(3)2060 2603 y Fm(Recursion)p 357 2785
2599 24 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
714 4450 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
120.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial 797
3703 a Fl(This)f(chapter)h(has)g(t)m(w)m(o)g(main)g(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3852
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)41 b(intro)s(duce)h(recursive)h
(de\014nitions)f(in)g(Prolog.)p 0 TeXcolorgray 887 4035
a(2.)p 0 TeXcolorgray 41 w(T)-8 b(o)80 b(sho)m(w)h(that)f(there)i(can)e
(b)s(e)g(mismatches)1004 4151 y(b)s(et)m(w)m(een)44 b(the)f(decla)m
(rative)f(meaning)g(of)g(a)g(Prolog)1004 4267 y(p)m(rogram,)g(and)f
(its)h(p)m(ro)s(cedural)g(meaning.)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 48 60
TeXDict begin 48 59 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(48)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Recursi)o(v)o(e)42
b(De\002nitions)806 1193 y Fw(Predicates)k(can)g(be)g(de\002ned)g
(recursi)n(v)o(ely)-5 b(.)59 b(Roughly)45 b(speaking,)i(a)f(predicate)g
(is)806 1292 y(recursi)n(v)o(ely)39 b(de\002ned)g(if)j(one)e(or)h(more)
f(rules)h(in)g(its)h(de\002nition)e(refers)g(to)h(itself.)806
1467 y Fv(Example)g(1:)k(Eating)806 1600 y Fw(Consider)40
b(the)h(follo)n(wing)e(kno)n(wledge)g(base:)971 1793
y Fs(is_digesting\(X,Y)o(\))c(:-)41 b(just_ate\(X,Y\).)971
1893 y(is_digesting\(X,Y)o(\))35 b(:-)1303 1993 y(just_ate\(X,Z\),)1303
2092 y(is_digesting\(Z,Y)o(\).)971 2292 y(just_ate\(mosquit)o(o,)o(blo)
o(od)o(\(jo)o(hn)o(\)\))o(.)971 2391 y(just_ate\(frog,mo)o(sq)o(uit)o
(o\))o(.)971 2491 y(just_ate\(stork,f)o(ro)o(g\).)900
2684 y Fw(At)61 b(\002rst)g(glance)f(this)h(seems)f(pretty)g(ordinary:)
83 b(it')-5 b(s)61 b(just)g(a)g(kno)n(wledge)806 2783
y(base)54 b(containing)f(three)i(f)o(acts)g(and)f(tw)o(o)i(rules.)87
b(But)55 b(the)g(de\002nition)f(of)g(the)806 2883 y Fs(is_digesting/2)
42 b Fw(predicate)k(is)j(recursi)n(v)o(e.)64 b(Note)48
b(that)f Fs(is_digesting/2)c Fw(is)806 2983 y(\(at)49
b(least)g(partially\))f(de\002ned)g(in)h(terms)g(of)f(itself,)k(for)c
(the)h Fs(is_digesting/2)806 3082 y Fw(functor)39 b(occurs)i(in)h(both)
e(the)i(head)e(and)h(body)f(of)i(the)f(second)g(rule.)47
b(Crucially)-5 b(,)806 3182 y(ho)n(we)n(v)o(er)m(,)42
b(there)i(is)h(an)g(`escape')e(from)g(this)i(circularity)-5
b(.)54 b(This)45 b(is)g(pro)o(vided)d(by)806 3282 y(the)h
Fs(just_ate/2)c Fw(predicate,)k(which)f(occurs)h(in)g(the)g(\002rst)h
(rule.)53 b(\(Signi\002cantly)-5 b(,)806 3381 y(the)60
b(body)f(of)h(the)g(\002rst)h(rule)f(mak)o(es)g(no)f(mention)g(of)h
Fs(is_digesting/2)-5 b Fw(.\))806 3481 y(Let')g(s)41
b(no)n(w)g(consider)f(both)h(the)g(declarati)n(v)o(e)e(and)i
(procedural)e(meanings)h(of)h(this)806 3580 y(de\002nition.)900
3689 y(The)k(w)o(ord)g(\223declarati)n(v)o(e\224)f(is)i(used)f(to)h
(talk)g(about)e(the)i(logical)f(meaning)f(of)806 3789
y(Prolog)j(kno)n(wledge)f(bases.)68 b(That)48 b(is,)j(the)d(declarati)n
(v)o(e)f(meaning)g(of)h(a)h(Prolog)806 3888 y(kno)n(wledge)37
b(base)j(is)h(simply)e(\223what)h(it)g(says\224,)h(or)e(\223what)h(it)g
(means,)g(if)g(we)g(read)806 3988 y(it)h(as)g(a)f(collection)g(of)g
(logical)g(statements\224.)45 b(And)40 b(the)g(declarati)n(v)o(e)f
(meaning)g(of)806 4088 y(this)52 b(recursi)n(v)o(e)e(de\002nition)h(is)
i(f)o(airly)e(straightforw)o(ard.)76 b(The)51 b(\002rst)i(clause)f
(\(the)806 4187 y(escape)42 b(clause,)i(the)f(one)f(that)i(is)g(not)e
(recursi)n(v)o(e,)g(or)h(as)h(we)f(shall)h(usually)e(call)806
4287 y(it,)k(the)f(base)g(clause\),)h(simply)e(says)i(that:)54
b Ft(if)k Fs(X)45 b Fw(has)h(just)f(eaten)g Fs(Y)o Fw(,)i
Ft(then)d Fs(X)i Fw(is)806 4386 y(no)n(w)40 b(digesting)g
Fs(Y)o Fw(.)47 b(This)41 b(is)h(ob)o(viously)c(a)k(sensible)f
(de\002nition.)900 4495 y(So)d(what)f(about)f(the)i(second)e(clause,)i
(the)f(recursi)n(v)o(e)f(clause?)45 b(This)37 b(says)h(that:)806
4595 y Ft(if)56 b Fs(X)45 b Fw(has)f(just)g(eaten)g Fs(Z)g
Ft(and)i Fs(Z)e Fw(is)h(digesting)e Fs(Y)o Fw(,)j Ft(then)d
Fs(X)h Fw(is)h(digesting)e Fs(Y)p Fw(,)i(too.)806 4694
y(Again,)39 b(this)j(is)g(ob)o(viously)c(a)k(sensible)f(de\002nition.)
900 4803 y(So)35 b(no)n(w)g(we)g(kno)n(w)g(what)g(this)g(recursi)n(v)o
(e)f(de\002nition)g(says,)j(b)n(ut)e(what)g(happens)806
4902 y(when)44 b(we)i(pose)f(a)h(query)e(that)h(actually)g(needs)g(to)g
(use)h(this)g(de\002nition?)58 b(That)806 5002 y(is,)f(what)d(does)g
(this)g(de\002nition)f(actually)g(do?)85 b(T)-7 b(o)54
b(use)g(the)g(normal)f(Prolog)806 5102 y(terminology)-5
b(,)37 b(what)k(is)h(its)g(procedural)d(meaning?)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 49 61
TeXDict begin 49 60 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(49)p
0 TeXcolorgray 451 1051 a(This)45 b(is)g(also)g(reasonably)d
(straightforw)o(ard.)54 b(The)44 b(base)h(rule)f(is)h(lik)o(e)g(all)g
(the)357 1151 y(earlier)h(rules)h(we')l(v)o(e)f(seen.)64
b(That)47 b(is,)i(if)f(we)f(ask)h(whether)e Fs(X)h Fw(is)h(digesting)e
Fs(Y)o Fw(,)357 1250 y(Prolog)37 b(can)i(use)g(this)g(rule)f(to)h(ask)g
(instead)g(the)f(question:)44 b(has)39 b Fs(X)g Fw(just)g(eaten)g
Fs(Y)o Fw(?)451 1350 y(What)47 b(about)f(the)h(recursi)n(v)o(e)e
(clause?)63 b(This)47 b(gi)n(v)o(es)f(Prolog)f(another)h(strate)o(gy)
357 1449 y(for)51 b(determining)f(whether)h Fs(X)i Fw(is)g(digesting)e
Fs(Y)o Fw(:)69 b Ft(it)53 b(can)f(try)h(to)f(\002nd)f(some)i
Fs(Z)357 1549 y Ft(suc)o(h)46 b(that)i Fs(X)f Ft(has)g(just)g(eaten)f
Fs(Z)p Fw(,)i(and)e Fs(Z)h Ft(is)h(dig)o(esting)e Fs(Y)p
Fw(.)63 b(That)47 b(is,)i(this)e(rule)357 1649 y(lets)e(Prolog)e(break)
g(the)i(task)f(apart)g(into)g(tw)o(o)h(subtasks.)56 b(Hopefully)-5
b(,)42 b(doing)h(so)357 1748 y(will)g(e)n(v)o(entually)d(lead)j(to)f
(simple)g(problems)f(which)h(can)g(be)h(solv)o(ed)e(by)h(simply)357
1848 y(looking)47 b(up)h(the)h(answers)g(in)g(the)g(kno)n(wledge)e
(base.)70 b(The)48 b(follo)n(wing)g(picture)357 1948
y(sums)41 b(up)f(the)h(situation:)p 0 TeXcolorgray 0
TeXcolorgray 357 2470 a @beginspecial 148 @llx 640 @lly
468 @urx 674 @ury 3200 @rwi @setspecial
%%BeginDocument: chap3-pspic3.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap3-pspic3.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 148 640 468 674
%%DocumentFonts: CMR10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap3-pspic3.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 110 /n put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6DFD21EAD729CDB7B378CEDD34262B37A194EDD0BDB24AA42649375B
491DC08F6B03DFEB517B2FC125DA9373AFAA94F4E4BC09510A73E079F4ABDD8F
93529E898B13ABCDE7322323B3A2A02A0BF388E89B4F529A66FA22D38E3EE342
54475A1989BFB7A119CF95750D5A18BB4FA9CDA30DB6F1AEF8AE8448BBC999C9
FD0D74DE9A17A3153617F07CACE92977B68FB5A1CFB29FD42494D5D2B9C1ED81
2F3CCEEC1BC079E837DDBB57C7E351F9925FB96349F8D9786D8E6FF03E9C4C1E
67DB235577B68003BA14073E2702296B284F803259283005D97035874D2B9AFD
4D3F29B4B1E6EDE30DDB9C68348CC174A091791FA74520C8614D4FB1125CBD6F
B9367559D715ED057FDF6DAAC180C7FA5CCEFD0C5878A91B20D4919792C03CA9
3AFC986C34C08358A3E85F241E3F8F815FCE7C8E07C2A4258E17D65823264049
3803D47C96A2745580EDC957AC4291730A840A2BADA50A28342A2B7093A3F731
4F4F656E974389E133C53F89D5DD6407BB98B211697941A927BC72A0956FA78E
2DC624B2C253F76778698BD1510D509244AB0465D4261E3AC31D77C4F755096B
50C9CD8103CFF51490796CF35B02E38BFB36CBF2E6D0D7304344C4523C369946
C3BAD318835D4707E90A0340BB7B6ABEBE9EF7E7FF54D1784AB514FAC0FDC8DE
B8DE95405811AB2F25F2391855929C2C452295D698C749DF868A962183036CEE
800D650FE2CD2E74C038665ECA680B173A27305874D4AEC967043DBCF9275F02
7D92A0AC4C098A5DA5939BFA435FE56060110EA1E9FF2BCC9C5E93964FD43199
8133454CF0A83B9946D6D2235AE3F345BEFA7D935A4FD76D7A9CF080E34D1983
6FAB58E2C907D4EC63F6431805A40EF837884510B1A8C7CF8F290F034784C81D
9FA6ED8ACCFF15B6ADA1CD0460591326B7A7A5FE7216BCE081EF42F0846374B5
0FF9F6FB8025D2DBEE17991FF93E7C09B55135397A77ECB051306B93C58A2598
60E294DF402A6F07B1FD679025022AFFEC2938452C72400B45A1A49F1DA9113A
BA4C4528E9DAB7F86323AE99A1932A49161F10A37FF2A4D56FAF883DB84F209D
76982A6131DE0B316E898A4C039154A90CA72991180F9EEA6E0105B8A4443A37
3C8DE253233006178B9A6BC69ECF2556E28A2DEFB6371422CDD07263005CD570
9DC4C9DD7FC9563CE02E9DC08B593F7487CB390BE164AABEBDC37B3AFBB14163
4F0D84EB6821FC9B0C4B5071A6C93E35605E573A5E9DB5182C0B0C2F9574C60C
CDC6900E58FA1563199E8251C508E4505E84548D054048770540F478500F9ACA
DE503CCADC4EAB653CAFABD51BFE35B0152B2F2D34116F1200912B51DD2080FD
668F97C05F88DADBE0B962F4524DAAB8980A6C950A36F54A19B2381E58089874
6A333CA2AEDBAFCE1E6099DAD342BDA4EFCC900086F07FBB5063A8126D14D6B9
CC9125C26E6940371EB4FE4A9361BBE9774C857619F0BDE5CC5F798F796D20D8
35D693B130428A89C44BA45DA2B96EE47A1FAB0FE2A25DED422E0BB062BFEB90
9CD4A49E4600DB37432A85C4F32D57BE89EAED8A5EBF11ECE522351062F46387
55879CFED832451BC50C016E0B528CC121CED14B356B9FF6B9FFA12528FA2AC6
EBB41EAE6A1500B64835A3AC8654987B973667180588354E5EF5821AE5D15A4C
D7D8FC80FDC04812FA0F007C12820D87A19003D19804608CC65AF0E6BB61C595
8BBEBBF48ADF88420AF96E4EFC473DF7E37D00E1EA71F6E0CB7D0696653C999B
222D0C72AE259AD521B151303103C743B9E440499C11ED5974DDE1F36A3F7B91
6DDCD573E08A27CB1347610D835EFECA02E3020C4114F3764154D6BFCAB0DD9B
F9D336F25E5799BB341C0177F10D973072111AC1D229749F777687ED0EEB593F
4E81904CE7E1CE465A16FF368D414EEC20824BD7652F36A8355AA673AA61555E
699C0CC2B0C7A6710779480EEF0B5C9AB1A74676A1A70798378604F17B678AE6
EB13C53D9A3B896762452E38A1FF7BED9BBBA6BCABDF0F1771AEDE8BA1D267A8
DDE4B8B6338D8CF730881326E27BC33436A35995B50C42F810D0EAE72FB04C6D
2B44E497D881A16DC7532F71A109FF2E3952261C0205AF3BC52223C47281BA7C
7C8C97423A8BD29076BAEC3567CD7EAFDFADA9448F11C3D60961EA635B0822CA
658095988EF6B5C0E9CFDF6BA5EA4CFE2F87629E03895C5B946B0283724FEDDB
37864049CBABE7284BED88A60C81F140CE9CF4B5E6F52BA057443EC42BF9D6BF
6DF098BE95AF020AAE363E593B2F501F32CF3DA2F78E3D8D284B274DBC4407A5
EE2D3B342D1D81315AEF884EABB7E7806547E0D4FEFA2E95563797E8344F1DB5
B3628E247CF29B13E10848498C341054EBD5FD116DE2BBD1C0E48A14AFEDEA58
83050D0FB58A0C9925604E5B30C8EB84AB99C35791FE45F069B7946B5EB1D7A5
CFCC0057D71A85F859F77FCADE8149571F1F24E2448764B0F66A9401B1B84736
D8B8F767CCFE040D4C281C062BF21F62CDFBD66AAB75EDCF23631C8E249B6CDB
9A826AE1A9B8E6A4E23DF2338A520ED524EE0EA58A24BE6B8599AFD156AC73C4
94C1BBB69A7E26C048BC4377CC1BC095C0451CD41CE20E34B80A0D8A9AE9E2AC
3CF3CF421EFD99F5A3561145414FEA478E7F9CD86DACD7E45FE7AC91A26581D8
591E6B1E651AA0913406E7DB2B5F5DFBA1A872D17AFBBC17A93D71F3A3D32150
0914B5738D55DC7A1B97A0F984F440B9BBAD519082751E7E9A0963029DD594C3
815E5EB9B4BEC82B041AC9E555164799ED2C74697D12EF1AC78B34E566672E71
A0A5B53E64CA3367F1C389CD51E7B2BCEC765248C2F863BB5A38D87C7BA9A9B5
5CFB48945479C09580F378E3BF2E510245323B24F840AA363C8C06EC0F4D5800
5511B081AE79A725E8A0B92BC6D1851F91CCF4BCDF74A2B5C7E3189CCAC9070A
54F0922562F3CDA68E66D237AB61097DF64FC4DD0770AA5E026E2E2292E061F8
67D76B48220B021622192725D6896F61AE8EF24BF7ED544AE148C640AF38AEC1
7FF918AA8019E618B67700680D76C4999AD69FD5ECFFCCC9DD6D7FA5BDF77BDE
931A5F4FB134292B14F6FD16EA8D033186C348FE99D07AC9A0FA656F5459C160
9C17F72D62662FAA1ADA07D867DB78A41326FA48AC93B7A8D246D486567E4698
4F42494629F11DE81F4F0C9DBB4F7821162A5339B6203D03E5CC88BC275CC161
0DEDA9DC1449B61E34177E44B2EFA4C5072B9F16604CD7D8A779A247D42457F9
7A43737E9FD9AF805005D9F4C4848F247B55D5E7DD03313AE762D2194E267070
9A5423F452273C51E00D74495B493CF2C8DDA17B9C36CCDFA1C4FFFEC0CEFD76
4B907B96351650D4FE6D60E640B5E1E890CDD18A50189F029EA3CC7BCD4DA0CE
BC7502D2E9156D8AF958D0CE1B62F76E5F0704AF78123A216BE1B9FE52152856
9CFE5692F2C3433A231A195600EC84766544161905E9FBC5339E551D5ED5E2B8
A23800F72F4A32219BFE2E5A07C561073C844DD49E6960761A49DB67CB70FAA0
99E27DBAF059B66D866CCF33B24F6039EB7928E4FEB7C220B828FAC6E00B6CA9
1B079924FD9661C421C1D3A6DE7B96DE76611139BFBB8758327E677C9FF58C2A
EC2D7D178F7845CB25F040A274E47683EB6015B9ABE2EF00BA775899B7846726
756971E55E21F9A87AA14FDD89DDC765BC139768972EDD8D97F35D0D2BDB6B3D
792E453E3594EC34E86726B906394C24F0C6B7AFA723123531BA983A627C4121
E484BD7ADCDDCB43F42269EE6486C5A8CAE004502C5EC5A556A6DF00484150B2
1D4C29C1D48AF7D52B2140F7499B20A447011065D7F08FBFAEA422068EF10AEE
1BD6A57AEF05AD9340ED4F163608F7A0B0393FD0F20E0DDEDE14714F2B375F45
770BFC63AD2A4FA4F2A902F199E5BE907D517DB9C25FED541C361306B9217803
F4B4D2692EB8691932CFD2CDA7E6F68779231C48453663C90101D998B73DEC06
A8F6BA3D56DD7836199908859B9BB09519A6CD66340EAA4DE3C52F623EC2A77C
AAB4D380E0B2E8DE67E01369ED68D7FEC8D323312DF84AF70C4F0FE4F5E833FE
9863689796240B7BDC50E6F576CDE692EFC0F8579B071024EA8F9B1DF15D629C
600AA3E5B5240454831E2D69FB7ACDFA6126341ADF5F7A08EF2E237586F01303
0A95328510D3AA9E049203F4860A1BA888BE9A8C4562DF7288E01655494DAB0A
EA12DA6FE08221F329B443EF89A753CD8BE90774F0DF1926F7C5A11897028B12
6BF288C236E76CB815BE9102548251D4D19002089B6999C55957E8B44766F87F
E1D400DE85DB95CEAB4F7DA82C29D003CCED885841ECE7C408FEA5221885A677
3EF907EBC623BE50E61DF236947E28E926E383DED5F42A9667261D319600D3D1
F4BFE73A0FAE0AFC7333537F19F4CF26D8AD2FB045344C353E0A0A8EEEC1F804
B8200E3BC7E28592B62C033CDFC26C50EB90D6E44F06A72844FC4C83324177E8
E09F63C44488D3187633DA48A03AFC36801C182B9DAC2376026193D5281D02B5
14EE1F66BBA994EF66DAAFD32D0B84531D5B7072A7A64643381DB88728D09206
E08C63FA476AF4E58E370B2A8079B38B8A001C90DB320FABCBE1E36AC0583772
746A0A17F1521017507EBB8E95CD73DA86F5C90A4602435DF865812AA7CB262E
02EB2D3195C52FBE6966D8FE7E7A677597ABA4007AB6A7D4B477C491160A5EDB
3B9931FFD9DA2E8385C7B35F69B77C429F335CA3E00F19F2A8B454CCFA76C430
E706B49A14F56664876F62DFD8DDFD565D08C0DC8167D80BF916EE5F2F4B36E8
995085DF033A7B6469F0EA0F7700921DC4495ED95C6EA2338B4943330609F6DF
5A23C87F4186D714B4A5CAD075A75C68C0350A487DDFE3189C38F343E7B6C62E
3ED0ACFAD60C5E74A9CAB0222D4330773C385F9CABA5812DA493E904D3D67944
11ABCED62CB0C7F280C9DB87A1EE8EF2D312BCF3AA4DDB870082A80231689336
3C47E93B47921340C68BABFE781EACB7C8F58504719B56F75C17278A7C3AB318
0657059C0438A3452ACFE2CF65E3A15B0BF80E8B3B8521E118DA7EDD50C9EF8D
B22B7E05FF648C69F4E4E2C393803A3F97DF86B8EFBE901EAAC0D3D13EC37E0D
0FD5796129C16F89F617B103592E67439065C6CC421E4ADC0AECD589E7123E3A
CEB0F2180D81459D660CAB222F5BAA1705B6DDB1F5827587AA26C290D9C1AC11
68ECC925CB8D174D2FCA89D1D0BFE8BCEB3E07D64E4C19A69E9932DA23DE56EC
7F1459ABF3D339E6D249C5DC88CEC4134A22E5F896FB00EEA7B448388582E685
51DD868D33418CF954FC321C2E9BFB4621AE0744DA085D32B67857CAC95E9AEC
071AF17597C52496C164E6E668CE063E0B4470F2CE7C53A0887FA4DD75F8F622
A2C0B3E14AC73D2AF93BFF837CE1A798559C38B8E9D487DE5521417A99D51E6B
1D5A4A75DC6A23602C1949EBC84EAAEC96E279664F5884FABC6D73C5399CBB2A
933299EDE1A9A51405CF49408CACDDEEADC3833A65C144478FE7AD235AF1F50D
A9228CE492D3654140A645B7BCB9077FB3F559DE9E5165ABAF7B7CF293154320
F8B6D53C8D388F10A3932BB277B4C2FC7D136CA875B67D2153512A96C6069144
F37D04B6890378403BE0F6FCB2DC3B751C792A0D156ED90E7AEB31DCF7BFF3DF
69BDDCB881004C2DC5536EF470AA2EB0084D8ADD34491A6EE8D3B82EA512D299
64E0AC471DD5209B05AE167AA9834DEDD5C69B0814337FC16014142E31532941
BBC19100F6E7A2AE92AE5D975577713FFC18A6C57C05FCA22EB9261E1D678DF4
851784EB30CA8910FE2ABB16C137B0ACE39A09A4BC8EB6800748CBE3F9317BD4
43F823E51A0FEF0DBF5BE4426E32E01B338E335AF37EABF5CD6974B25504BD7F
129D409916D34704346D7708BDB5BDA56A8F040C18E2617C539E3DDAD505C2B1
4FC4E450AC92B65D99961EC6D92A1B7271EA1394FB8580116E15F83AC596044D
FAD11B6AEC7F85C70D2890AD8A6CD1ECFBED7EAA588FB7B1937C86167DB5083F
385BE3C301ED3178A0F8D0B010EC31C534D8EA521E2587B333897BE06B8ECBA5
461EFC2D23D616F04931D57A7DD724036161A9F508C461BB4D82A0047E172EAD
7833C4D0D3F83D62F1557589701F00E0F6A39960C98B2461EDA3A37BEAEED076
F8A644CCDE8443958C8DD9129801A1E5FC1D4FBB50C0964AA9BF670D3FCD8D1D
BE528D5E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap3-pspic3.dvi)
@start /Fa 138[46 32 33 4[46 3[25 23 1[42 1[37 46 2[42
6[51 62 62 88[{}13 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
639 523 a
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@X1 16 {InitRnode } NewNode end  end
 639 523 a Fa(X)1174 523 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@Y1 16 {InitRnode } NewNode end  end
 1174 523 a Fa(Y)1973
523 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@X2 16 {InitRnode } NewNode end  end
 1973 523 a Fa(X)2389 523 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 6.11111 3.05556 3.41666
} false /N@Z2 16 {InitRnode } NewNode end  end
 2389 523 a Fa(Z)2794
523 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@Y2 16 {InitRnode } NewNode end  end
 2794 523 a Fa(Y)2884 523 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 3.0 3.0 0 0 /N@X1 /N@Y1 InitNC { /AngleA 45.  def
/AngleB 150.  def 0.5  0.5  NCCurve  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  0  setlinecap stroke  grestore  grestore end
 2884 523 a 2884 523
a
 tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2884 523 a 2884 523 a
 tx@Dict begin NAngle  RotBegin  end
 2884 523 a 2884 429 a
 tx@Dict begin mark RAngle /a ED cleartomark a neg  RotBegin  end
 2884 429
a 19 x Fa(just)p 3025 448 25 4 v 31 w(ate)2884 429 y
 tx@Dict begin RotEnd  end

2884 429 a 2884 523 a
 tx@Dict begin RotEnd  end
 2884 523 a 2884 523 a
 tx@Dict begin PutEnd  end
 2884 523
a 2884 523 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 3.0 3.0 0 0 /N@X1 /N@Y1 InitNC { /AngleA -45.  def
/AngleB -150.  def 0.5  0.5  NCCurve  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  3.0 -2 0 add  DotLine  grestore  grestore end
 2884 523 a 2884 523 a
 tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2884 523 a 2884 523
a
 tx@Dict begin NAngle  RotBegin  end
 2884 523 a 2884 618 a
 tx@Dict begin mark RAngle /a ED cleartomark a neg  RotBegin  end
 2884 618 a 20 x Fa(is)p 2945
638 25 4 v 30 w(digesting)2884 618 y
 tx@Dict begin RotEnd  end
 2884 618 a 2884
523 a
 tx@Dict begin RotEnd  end
 2884 523 a 2884 523 a
 tx@Dict begin PutEnd  end
 2884 523 a 2884 523 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 3.0 3.0 0 0 /N@X2 /N@Y2 InitNC { /AngleA -45.  def
/AngleB -150.  def 0.5  0.5  NCCurve  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  3.0 -2 0 add  DotLine  grestore  grestore end
 2884
523 a 2884 523 a
 tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2884 523 a 2884 523 a
 tx@Dict begin NAngle  RotBegin  end
 2884 523 a 2884
618 a
 tx@Dict begin mark RAngle /a ED cleartomark a neg  RotBegin  end
 2884 618 a 20 x Fa(is)p 2945 638 25 4 v 30 w(digesting)2884
618 y
 tx@Dict begin RotEnd  end
 2884 618 a 2884 523 a
 tx@Dict begin RotEnd  end
 2884 523 a 2884 523 a
 tx@Dict begin PutEnd  end
 2884
523 a 2884 523 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 3.0 3.0 0 0 /N@X2 /N@Z2 InitNC { /AngleA 45.  def
/AngleB 150.  def 0.5  0.5  NCCurve  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  0  setlinecap stroke  grestore  grestore end
 2884 523 a 2884 523 a
 tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2884 523 a 2884
523 a
 tx@Dict begin NAngle  RotBegin  end
 2884 523 a 2884 429 a
 tx@Dict begin mark RAngle /a ED cleartomark a neg  RotBegin  end
 2884 429 a 19 x Fa(just)p
3025 448 25 4 v 31 w(ate)2884 429 y
 tx@Dict begin RotEnd  end
 2884 429 a 2884 523
a
 tx@Dict begin RotEnd  end
 2884 523 a 2884 523 a
 tx@Dict begin PutEnd  end
 2884 523 a 2884 523 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 3.0 3.0 0 0 /N@Z2 /N@Y2 InitNC { /AngleA 45.  def
/AngleB 150.  def 0.5  0.5  NCCurve  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  0  setlinecap stroke  grestore  grestore end
 2884 523
a 2884 523 a
 tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2884 523 a 2884 523 a
 tx@Dict begin NAngle  RotBegin  end
 2884 523 a 2884 429
a
 tx@Dict begin mark RAngle /a ED cleartomark a neg  RotBegin  end
 2884 429 a 20 x Fa(is)p 2945 449 25 4 v 30 w(digesting)2884
429 y
 tx@Dict begin RotEnd  end
 2884 429 a 2884 523 a
 tx@Dict begin RotEnd  end
 2884 523 a 2884 523 a
 tx@Dict begin PutEnd  end
 2884
523 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 451 2652 a(Let')-5 b(s)42 b(see)f(ho)n(w)g(this)g(w)o
(orks.)k(If)c(we)h(pose)e(the)h(query:)522 2817 y Fs(?-)g
(is_digesting\(sto)o(rk)o(,m)o(osq)o(ui)o(to\))o(.)357
2983 y Fw(then)h(Prolog)h(goes)g(to)g(w)o(ork)g(as)h(follo)n(ws.)52
b(First,)44 b(it)g(tries)g(to)f(mak)o(e)g(use)h(of)f(the)357
3082 y(\002rst)48 b(rule)e(listed)i(concerning)c Fs(is_digesting)-5
b Fw(;)51 b(that)c(is,)j(the)d(base)g(rule.)64 b(This)357
3182 y(tells)43 b(it)f(that)g Fs(X)g Fw(is)h(digesting)e
Fs(Y)h Fw(if)g Fs(X)g Fw(just)h(ate)f Fs(Y)o Fw(,)h(By)f(unifying)e
Fs(X)i Fw(with)g Fs(stork)357 3281 y Fw(and)e Fs(Y)h
Fw(with)g Fs(mosquito)e Fw(it)i(obtains)g(the)f(follo)n(wing)g(goal:)
522 3447 y Fs(just_ate\(stork,m)o(osq)o(ui)o(to\))o(.)451
3612 y Fw(But)g(the)g(kno)n(wledge)d(base)i(doesn')o(t)f(contain)h(the)
g(information)e(that)j(the)f(stork)357 3712 y(just)54
b(ate)g(the)g(mosquito,)h(so)g(this)f(attempt)f(f)o(ails.)85
b(So)54 b(Prolog)f(ne)o(xt)g(tries)i(to)357 3811 y(mak)o(e)48
b(use)h(of)f(the)h(second)e(rule.)69 b(By)49 b(unifying)d
Fs(X)j Fw(with)g Fs(stork)e Fw(and)h Fs(Y)h Fw(with)357
3911 y Fs(mosquito)38 b Fw(it)k(obtains)e(the)h(follo)n(wing)e(goals:)
522 4076 y Fs(just_ate\(stork,Z)o(\),)522 4176 y(is_digesting\(Z,m)o
(osq)o(ui)o(to\))o(.)357 4341 y Fw(That)57 b(is,)63 b(to)58
b(sho)n(w)f Fs(is_digesting\(sto)o(rk,)o(mo)o(sq)o(uit)o(o\))-7
b Fw(,)63 b(Prolog)56 b(needs)i(to)357 4441 y(\002nd)40
b(a)i(v)n(alue)e(for)g Fs(Z)h Fw(such)g(that,)g(\002rstly)-5
b(,)522 4606 y Fs(just_ate\(stork,Z)o(\).)357 4771 y
Fw(and)40 b(secondly)-5 b(,)522 4936 y Fs(is_digesting\(Z,m)o(osq)o(ui)
o(to\))o(.)357 5102 y Fw(And)40 b(there)h Ft(is)h Fw(such)e(a)i(v)n
(alue)e(for)g Fs(Z)p Fw(,)h(namely)f Fs(frog)n Fw(.)47
b(It)41 b(is)h(immediate)e(that)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 50 62
TeXDict begin 50 61 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(50)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(just_ate\(stork,f)o(ro)o(g\).)806
1213 y Fw(will)e(succeed,)f(for)g(this)h(f)o(act)g(is)h(listed)f(in)g
(the)f(kno)n(wledge)f(base.)44 b(And)38 b(deducing)971
1375 y Fs(is_digesting\(fro)o(g,)o(mos)o(qu)o(ito)o(\).)806
1538 y Fw(is)g(almost)g(as)h(simple,)f(for)f(the)h(\002rst)g(clause)g
(of)g Fs(is_digesting/2)32 b Fw(reduces)37 b(this)806
1637 y(goal)j(to)h(deducing)971 1800 y Fs(just_ate\(frog,mo)o(sq)o(uit)
o(o\))o(.)806 1962 y Fw(and)f(this)h(is)h(a)g(f)o(act)f(listed)g(in)g
(the)g(kno)n(wledge)e(base.)900 2062 y(W)-7 b(ell,)56
b(that')-5 b(s)53 b(our)e(\002rst)i(e)o(xample)d(of)i(a)h(recursi)n(v)o
(e)e(rule)g(de\002nition.)78 b(W)-7 b(e')l(re)806 2161
y(going)49 b(to)i(learn)g(a)g(lot)g(more)f(about)g(them,)j(b)n(ut)e
(one)g(v)o(ery)e(practical)i(remark)806 2261 y(should)42
b(be)h(made)g(right)g(a)o(w)o(ay)-5 b(.)52 b(Hopefully)42
b(it')-5 b(s)44 b(clear)g(that)f(when)g(you)f(write)i(a)806
2360 y(recursi)n(v)o(e)h(predicate,)j(it)g(should)e(al)o(w)o(ays)i(ha)n
(v)o(e)e(at)i(least)g(tw)o(o)g(clauses:)59 b(a)47 b(base)806
2460 y(clause)c(\(the)g(clause)h(that)g(stops)f(the)h(recursion)e(at)i
(some)g(point\),)e(and)h(one)g(that)806 2560 y(contains)h(the)i
(recursion.)58 b(If)45 b(you)g(don')o(t)f(do)h(this,)i(Prolog)d(can)h
(spiral)h(of)n(f)f(into)806 2659 y(an)h(unending)e(sequence)i(of)g
(useless)i(computations.)60 b(F)o(or)47 b(e)o(xample,)f(here')-5
b(s)47 b(an)806 2759 y(e)o(xtremely)39 b(simple)i(e)o(xample)e(of)i(a)g
(recursi)n(v)o(e)f(rule)g(de\002nition:)971 2921 y Fs(p)h(:-)g(p.)806
3084 y Fw(That')-5 b(s)58 b(it.)98 b(Nothing)57 b(else.)98
b(It')-5 b(s)59 b(beautiful)e(in)h(its)h(simplicity)-5
b(.)97 b(And)58 b(from)806 3183 y(a)g(declarati)n(v)o(e)f(perspecti)n
(v)o(e)g(it')-5 b(s)60 b(an)e(e)o(xtremely)f(sensible)h(\(if)h(rather)f
(boring\))806 3283 y(de\002nition:)66 b(it)52 b(says)h(\223if)e
(property)f(p)i(holds,)h(then)f(property)d(p)j(holds\224.)77
b(Y)-9 b(ou)806 3382 y(can')o(t)39 b(ar)o(gue)h(with)h(that.)900
3482 y(But)f(from)f(a)h(procedural)e(perspecti)n(v)o(e,)g(this)i(is)h
(a)g(wildly)e(dangerous)f(rule.)45 b(In)806 3582 y(f)o(act,)40
b(we)h(ha)n(v)o(e)e(here)h(the)h(ultimate)f(in)g(dangerous)e(recursi)n
(v)o(e)h(rules:)46 b(e)o(xactly)39 b(the)806 3681 y(same)51
b(thing)g(on)g(both)f(sides,)55 b(and)c(no)g(base)g(clause)h(to)f(let)h
(us)g(escape.)77 b(F)o(or)806 3781 y(consider)39 b(what)i(happens)f
(when)g(we)h(pose)g(the)g(follo)n(wing)e(query:)971 3943
y Fs(?-)i(p.)806 4105 y Fw(Prolog)g(asks)i(itself:)50
b(\223Ho)n(w)42 b(do)g(I)h(pro)o(v)o(e)d Fs(p)p Fw(?\224)51
b(and)41 b(it)j(realises,)f(\223He)o(y)-5 b(,)42 b(I')l(v)o(e)f(got)806
4205 y(a)j(rule)g(for)g(that!)55 b(T)-7 b(o)45 b(pro)o(v)o(e)d
Fs(p)j Fw(I)f(just)h(need)e(to)i(pro)o(v)o(e)d Fs(p)p
Fw(!\224.)56 b(So)44 b(it)h(asks)g(itself)806 4305 y(\(again\):)h
(\223Ho)n(w)41 b(do)h(I)g(pro)o(v)o(e)e Fs(p)p Fw(?\224)49
b(and)41 b(it)i(realises,)f(\223He)o(y)-5 b(,)41 b(I')l(v)o(e)g(got)g
(a)i(rule)e(for)806 4404 y(that!)47 b(T)-7 b(o)42 b(pro)o(v)o(e)d
Fs(p)j Fw(I)g(just)g(need)f(to)g(pro)o(v)o(e)f Fs(p)p
Fw(!\224.)47 b(So)42 b(it)g(asks)g(itself)h(\(yet)e(again\):)806
4504 y(\223Ho)n(w)f(do)g(I)h(pro)o(v)o(e)d Fs(p)p Fw(?\224)46
b(and)40 b(it)h(realises,)g(\223He)o(y)-5 b(,)40 b(I')l(v)o(e)f(got)i
(a)g(rule)f(for)g(that!)45 b(T)-7 b(o)806 4604 y(pro)o(v)o(e)39
b Fs(p)i Fw(I)g(just)g(need)g(to)g(pro)o(v)o(e)e Fs(p)o
Fw(!\224)46 b(and)41 b(so)g(on)g(and)f(so)h(forth.)900
4703 y(If)46 b(you)g(mak)o(e)g(this)h(query)-5 b(,)46
b(Prolog)g(w)o(on')o(t)f(answer)i(you:)56 b(it)47 b(will)h(head)d(of)n
(f,)806 4803 y(looping)57 b(desperately)h(a)o(w)o(ay)h(in)g(an)g
(unending)e(search.)99 b(That)59 b(is,)65 b(it)60 b(w)o(on')o(t)806
4902 y(terminate,)41 b(and)h(you')o(ll)g(ha)n(v)o(e)g(to)g(interrupt)f
(it.)52 b(Of)42 b(course,)g(if)h(you)f(use)g Fs(trace)n
Fw(,)806 5002 y(you)c(can)i(step)g(through)d(one)i(step)h(at)g(a)g
(time,)g(until)g(you)e(get)i(sick)g(of)f(w)o(atching)806
5102 y(Prolog)g(loop.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 51 63
TeXDict begin 51 62 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(51)p
0 TeXcolorgray 357 1051 a Fv(Example)41 b(2:)46 b(Descendant)357
1173 y Fw(No)n(w)e(that)h(we)g(kno)n(w)e(something)g(about)h
Ft(what)i Fw(recursion)d(in)i(Prolog)e(in)m(v)n(olv)o(es,)357
1273 y(it)d(is)g(time)f(to)g(ask)h Ft(why)f Fw(it)h(is)g(so)f
(important.)44 b(Actually)-5 b(,)38 b(this)i(is)g(a)g(question)e(that)
357 1372 y(can)44 b(be)g(answered)f(on)h(a)g(number)f(of)g(le)n(v)o
(els,)i(b)n(ut)f(for)g(no)n(w)-5 b(,)43 b(let')-5 b(s)46
b(k)o(eep)d(things)357 1472 y(f)o(airly)j(practical.)63
b(So:)58 b(when)46 b(it)h(comes)g(to)g(writing)f(useful)g(Prolog)g
(programs,)357 1571 y(are)41 b(recursi)n(v)o(e)e(de\002nitions)h
(really)h(so)g(important?)j(And)d(if)g(so,)g(why?)451
1671 y(Let')-5 b(s)62 b(consider)e(an)g(e)o(xample.)105
b(Suppose)60 b(we)h(ha)n(v)o(e)f(a)i(kno)n(wledge)d(base)357
1771 y(recording)38 b(f)o(acts)k(about)e(the)h(child)f(relation:)522
1934 y Fs(child\(bridget,ca)o(rol)o(in)o(e\).)522 2034
y(child\(caroline,d)o(onn)o(a\))o(.)357 2198 y Fw(That)35
b(is,)j(Caroline)d(is)i(a)f(child)g(of)f(Bridget,)h(and)g(Donna)e(is)j
(a)f(child)g(of)f(Caroline.)357 2297 y(No)n(w)46 b(suppose)g(we)h
(wished)f(to)h(de\002ne)f(the)h(descendant)e(relation;)j(that)f(is,)i
(the)357 2397 y(relation)44 b(of)i(being)e(a)i(child)f(of,)i(or)e(a)h
(child)f(of)g(a)h(child)f(of,)i(or)e(a)h(child)f(of)g(a)357
2497 y(child)h(of)h(a)g(child)f(of,)i(and)e(so)h(on.)63
b(Here')-5 b(s)47 b(a)g(\002rst)g(attempt)g(to)g(do)f(this.)64
b(W)-7 b(e)357 2596 y(could)40 b(add)g(the)h(follo)n(wing)e(tw)o(o)j
Ft(non)p Fw(-recursi)n(v)o(e)37 b(rules)k(to)g(the)g(kno)n(wledge)e
(base:)522 2760 y Fs(descend\(X,Y\))e(:-)j(child\(X,Y\).)522
2959 y(descend\(X,Y\))d(:-)j(child\(X,Z\),)1228 3059
y(child\(Z,Y\).)451 3223 y Fw(No)n(w)-5 b(,)46 b(f)o(airly)f(ob)o
(viously)f(these)i(de\002nitions)f(w)o(ork)g(up)g(to)h(a)g(point,)g(b)n
(ut)f(the)o(y)357 3322 y(are)50 b(clearly)h(limited:)66
b(the)o(y)50 b(only)g(de\002ne)g(the)h(concept)f(of)g(descendant-of)e
(for)357 3422 y(tw)o(o)g(generations)f(or)h(less.)68
b(That')-5 b(s)49 b(ok)e(for)h(the)g(abo)o(v)o(e)f(kno)n(wledge)f
(base,)k(b)n(ut)357 3522 y(suppose)45 b(we)i(get)g(some)g(more)f
(information)e(about)i(the)g(child-of)f(relation)h(and)357
3621 y(we)41 b(e)o(xpand)e(our)h(list)i(of)f(child-of)e(f)o(acts)j(to)f
(this:)522 3785 y Fs(child\(anne,bridg)o(et\))o(.)522
3885 y(child\(bridget,ca)o(rol)o(in)o(e\).)522 3984 y
(child\(caroline,d)o(onn)o(a\))o(.)522 4084 y(child\(donna,emil)o(y\).)
451 4248 y Fw(No)n(w)55 b(our)g(tw)o(o)g(rules)h(are)f(inadequate.)86
b(F)o(or)55 b(e)o(xample,)j(if)d(we)h(pose)f(the)357
4347 y(queries)522 4511 y Fs(?-)41 b(descend\(anne,don)o(na)o(\).)357
4675 y Fw(or)522 4838 y Fs(?-)g(descend\(bridget,)o(em)o(il)o(y\).)357
5002 y Fw(we)e(get)g(the)f(answer)h(no,)f(which)g(is)i
Ft(not)g Fw(what)f(we)g(w)o(ant.)45 b(Sure,)38 b(we)h(could)f(`\002x')
357 5102 y(this)j(by)g(adding)e(the)i(follo)n(wing)e(tw)o(o)j(rules:)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 52 64
TeXDict begin 52 63 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(52)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(descend\(X,Y\))c(:-)41 b(child\(X,Z_1\),)
1677 1151 y(child\(Z_1,Z_2\),)1677 1250 y(child\(Z_2,Y\).)971
1449 y(descend\(X,Y\))36 b(:-)41 b(child\(X,Z_1\),)1677
1549 y(child\(Z_1,Z_2\),)1677 1649 y(child\(Z_2,Z_3\),)1677
1748 y(child\(Z_3,Y\).)900 1886 y Fw(But,)47 b(let')-5
b(s)47 b(f)o(ace)f(it,)h(this)f(is)h(clumsy)e(and)g(hard)g(to)h(read.)
59 b(Moreo)o(v)o(er)m(,)44 b(if)i(we)806 1985 y(add)d(further)f
(child-of)g(f)o(acts,)j(we)f(could)f(easily)g(\002nd)h(ourselv)o(es)f
(ha)n(ving)f(to)i(add)806 2085 y(more)c(and)g(more)g(rules)h(as)h(our)e
(list)i(of)f(child-of)e(f)o(acts)i(gro)n(w)-5 b(,)40
b(rules)h(lik)o(e:)971 2223 y Fs(descend\(X,Y\))36 b(:-)41
b(child\(X,Z_1\),)1677 2322 y(child\(Z_1,Z_2\),)1677
2422 y(child\(Z_2,Z_3\),)2631 2521 y(.)1843 2621 y(.)1843
2721 y(.)1677 2820 y(child\(Z_17,Z_18)o(\).)1677 2920
y(child\(Z_18,Z_19)o(\).)1677 3020 y(child\(Z_19,Y\).)806
3157 y Fw(This)g(is)h(not)e(a)i(particularly)d(pleasant)h(\(or)h
(sensible\))f(w)o(ay)h(to)g(go!)900 3257 y(But)50 b(we)g(don')o(t)d
(need)i(to)h(do)e(this)i(at)g(all.)72 b(W)-7 b(e)50 b(can)f(a)n(v)n
(oid)h(ha)n(ving)e(to)h(use)806 3356 y(e)n(v)o(er)h(longer)g(rules)i
(entirely)-5 b(.)76 b(The)51 b(follo)n(wing)f(recursi)n(v)o(e)g
(predicate)h(de\002nition)806 3456 y(\002x)o(es)41 b(e)n(v)o(erything)d
(e)o(xactly)i(the)h(w)o(ay)g(we)g(w)o(ant:)971 3593 y
Fs(descend\(X,Y\))36 b(:-)41 b(child\(X,Y\).)971 3793
y(descend\(X,Y\))36 b(:-)41 b(child\(X,Z\),)1677 3892
y(descend\(Z,Y\).)900 4030 y Fw(What)e(does)f(this)g(say?)45
b(The)38 b(declarati)n(v)o(e)f(meaning)g(of)g(the)i(base)f(clause)g
(is:)46 b Ft(if)806 4129 y Fs(Y)c Fw(is)h(a)g(child)f(of)h
Fs(X)o Fw(,)g Ft(then)f Fs(Y)h Fw(is)g(a)g(descendant)e(of)h
Fs(X)p Fw(.)50 b(Ob)o(viously)41 b(sensible.)50 b(So)806
4229 y(what)d(about)f(the)h(recursi)n(v)o(e)f(clause?)65
b(Its)48 b(declarati)n(v)o(e)e(meaning)g(is:)59 b Ft(if)h
Fs(Z)48 b Fw(is)g(a)806 4329 y(child)d(of)h Fs(X)p Fw(,)i
Ft(and)g Fs(Y)e Fw(is)h(a)g(descendant)e(of)h Fs(Z)p
Fw(,)i Ft(then)d Fs(Y)i Fw(is)g(a)g(descendant)e(of)h
Fs(X)o Fw(.)806 4428 y(Again,)39 b(this)j(is)g(ob)o(viously)c(true.)900
4528 y(So)33 b(let')-5 b(s)35 b(no)n(w)d(look)h(at)h(the)f(procedural)e
(meaning)g(of)i(this)h(recursi)n(v)o(e)e(predicate,)806
4628 y(by)i(stepping)g(through)g(an)h(e)o(xample.)42
b(What)36 b(happens)d(when)i(we)h(pose)f(the)g(query:)971
4765 y Fs(descend\(anne,don)o(na)o(\))806 4902 y Fw(Prolog)j(\002rst)i
(tries)h(the)e(\002rst)i(rule.)j(The)c(v)n(ariable)e
Fs(X)i Fw(in)g(the)f(head)g(of)h(the)f(rule)h(is)806
5002 y(uni\002ed)j(with)h Fs(anne)f Fw(and)h Fs(Y)g Fw(with)h
Fs(donna)d Fw(and)i(the)g(ne)o(xt)g(goal)f(Prolog)h(tries)g(to)806
5102 y(pro)o(v)o(e)39 b(is)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 53 65
TeXDict begin 53 64 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(53)p
0 TeXcolorgray 522 1051 a Fs(child\(anne,donna)o(\))451
1209 y Fw(This)39 b(attempt)g(f)o(ails,)h(ho)n(we)n(v)o(er)m(,)d(since)
i(the)g(kno)n(wledge)e(base)i(neither)f(contains)357
1309 y(the)50 b(f)o(act)g Fs(child\(anne,donna)o(\))45
b Fw(nor)k(an)o(y)g(rules)h(that)h(w)o(ould)e(allo)n(w)h(to)g(infer)357
1408 y(it.)74 b(So)50 b(Prolog)f(backtracks)g(and)h(looks)f(for)h(an)g
(alternati)n(v)o(e)f(w)o(ay)h(of)g(pro)o(ving)357 1508
y Fs(descend\(anne,do)o(nna)o(\))-6 b Fw(.)52 b(It)43
b(\002nds)g(the)g(second)f(rule)h(in)g(the)g(kno)n(wledge)e(base)357
1608 y(and)f(no)n(w)g(has)i(the)f(follo)n(wing)e(subgoals:)522
1766 y Fs(child\(anne,_633\))o(,)522 1866 y(descend\(_633,don)o(na\))o
(.)451 2024 y Fw(Prolog)j(tak)o(es)h(the)f(\002rst)h(subgoal)f(and)g
(tries)h(to)f(unify)g(it)h(with)g(something)e(in)357
2124 y(the)50 b(kno)n(wledge)e(base.)73 b(It)51 b(\002nds)f(the)g(f)o
(act)g Fs(child\(anne,bridge)o(t\))44 b Fw(and)50 b(the)357
2223 y(v)n(ariable)44 b Fs(_633)h Fw(gets)h(instantiated)g(to)g
Fs(bridget)m Fw(.)61 b(No)n(w)45 b(that)h(the)g(\002rst)h(subgoal)357
2323 y(is)42 b(satis\002ed,)f(Prolog)f(mo)o(v)o(es)g(to)h(the)g(second)
f(subgoal.)k(It)e(has)f(to)g(pro)o(v)o(e)522 2481 y Fs
(descend\(bridget,)o(don)o(na)o(\))451 2640 y Fw(This)e(is)g(the)g
(\002rst)g(recursi)n(v)o(e)e(call)i(of)f(the)h(predicate)e
Fs(descend/2)m Fw(.)45 b(As)39 b(before,)357 2739 y(Prolog)h(starts)h
(with)h(the)e(\002rst)i(rule,)f(b)n(ut)f(f)o(ails,)i(because)e(the)h
(goal)522 2898 y Fs(child\(bridget,do)o(nna)o(\))357
3056 y Fw(cannot)53 b(be)i(pro)o(v)o(ed.)85 b(Backtracking,)57
b(Prolog)c(\002nds)i(that)g(there)g(is)g(a)h(second)357
3155 y(possibility)i(to)g(be)g(check)o(ed)f(for)h Fs(descend\(bridget)o
(,do)o(nn)o(a\))-6 b Fw(,)62 b(namely)c(the)357 3255
y(second)40 b(rule,)g(which)h(again)e(gi)n(v)o(es)i(Prolog)f(tw)o(o)h
(ne)n(w)g(subgoals:)522 3413 y Fs(child\(bridget,_1)o(785)o(\),)522
3513 y(descend\(_1785,do)o(nna)o(\).)451 3671 y Fw(The)36
b(\002rst)g(one)f(can)h(be)f(uni\002ed)g(with)h(the)g(f)o(act)g
Fs(child\(bridget,c)o(aro)o(li)o(ne\))357 3771 y Fw(of)47
b(the)g(kno)n(wledge)e(base,)k(so)f(that)f(the)g(v)n(ariable)g
Fs(_1785)f Fw(is)i(instantiated)f(with)357 3871 y Fs(caroline)l
Fw(.)g(Ne)o(xt)40 b(Prolog)g(tries)i(to)f(pro)o(v)o(e)522
4029 y Fs(descend\(caroline)o(,do)o(nn)o(a\).)357 4187
y Fw(This)i(is)g(the)g(second)f(recursi)n(v)o(e)f(call)i(of)g
(predicate)e Fs(descend/2)l Fw(.)52 b(As)43 b(before,)f(it)357
4287 y(tries)f(the)g(\002rst)h(rule)e(\002rst,)i(obtaining)d(the)i
(follo)n(wing)e(ne)n(w)i(goal:)522 4445 y Fs(child\(caroline,d)o(onn)o
(a\))451 4604 y Fw(This)69 b(time)g(Prolog)f(succeeds,)76
b(since)69 b Fs(child\(caroline,)o(don)o(na)o(\))63 b
Fw(is)70 b(a)357 4703 y(f)o(act)76 b(in)g(the)g(database.)151
b(Prolog)75 b(has)h(found)f(a)h(proof)f(for)g(the)h(goal)357
4803 y Fs(descend\(carolin)o(e,d)o(on)o(na\))37 b Fw(\(the)43
b(second)f(recursi)n(v)o(e)f(call\).)53 b(But)43 b(this)h(means)357
4902 y(that)58 b Fs(descend\(bridget,)o(do)o(nna)o(\))52
b Fw(\(the)58 b(\002rst)h(recursi)n(v)o(e)e(call\))h(is)h(also)f(true,)
357 5002 y(which)45 b(means)h(that)g(our)f(original)g(query)g
Fs(descend\(anne,do)o(nna)o(\))40 b Fw(is)47 b(true)f(as)357
5102 y(well.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 54 66
TeXDict begin 54 65 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(54)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(Here)45 b(is)h(the)f(search)g(tree)g(for)g
(the)g(query)f Fs(descend\(anne,do)o(nna)o(\))-6 b Fw(.)59
b(Mak)o(e)806 1151 y(sure)37 b(that)g(you)g(understand)e(ho)n(w)i(it)h
(relates)f(to)h(the)f(discussion)g(in)h(the)f(te)o(xt;)h(that)806
1250 y(is,)g(ho)n(w)f(Prolog)g(tra)n(v)o(erses)g(this)h(search)f(tree)h
(when)f(trying)f(to)i(pro)o(v)o(e)d(this)k(query)-5 b(.)p
0 TeXcolorgray 0 TeXcolorgray 863 3316 a @beginspecial
151 @llx 426 @lly 449 @urx 662 @ury 2980 @rwi @setspecial
%%BeginDocument: chap3-pspic1.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap3-pspic1.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 151 426 449 662
%%DocumentFonts: CMTT9 CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap3-pspic1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 121 /dagger put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D40539DE74A31B0CA623CA9DCE374762E175D0A
65D0D0B45F164D2441F7CBB3F86FE50191DF171E0ACFEA45E9CAB2BE910515E5
B5FF9D2A28AF222DB3A1E1EBC8C3BD5CC0AAB87006F4B7FB9F10C6BEFA6F261A
5B25FD44700ACA85FAF43A89C1380403CEB3BCE247E57D562848BAD491C7015F
0EF6865B3F398C720EDC7D66E3532C6389FFC941B250373BDD6D8F80FE59F3B3
7CA5D9FBEF891874A1AD09F68F3F761C6E4B96FD501BC43CF046FA932047C601
255A672A4704DA6CE54BE541C186C6B9CAB339B7285310E08EEF4120654BB3E5
4531F86E9E162D186C96F0BDF652B10FB882BBDB3ACEFC0E364920F1E2760475
0C4A97593D36244BD35727D42B5EA2E94DEAABDC44903D33F3743CFAE6E641FD
EBFE94BFDA686EC3D18D0DF7EE3F9EC6C4EDC5AD9B11D011D83B82BBCDC481A4
3CE3B7A026DEFF7FFCC16460
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT9
%!PS-AdobeFont-1.0: CMTT9 003.002
%%Title: CMTT9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT9 known{/CMTT9 findfont dup/UniqueID known{dup
/UniqueID get 5000831 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT9 def
/FontBBox {-6 -233 542 698 }readonly def
/UniqueID 5000831 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT9.) readonly def
/FullName (CMTT9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 51 /three put
dup 52 /four put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E6BABDA4215500A0
42D1A3D0D02C0C98BB1D6ED0B7791274C38B038FC7921FF1FB8FAE7258C09259
4B8E1BD9EDCEDE9ADAD9BD9598EEA9691589649A9A21539161E374075BEE3457
689F308A4A7AC9F2FE4B301A6C36B0442FB92E3B002623493DC087800B5A0521
0DB96A23175AC584DE166F59142779F26FEE9783E28DE49FC3A8D6583EE63FBA
610DA773CA18ACE6F64A4867A1A7817120ABF9DE4D17782866E6CB6B65A9F6D8
3667C8D3E61E5356E35343FDD4C6436DF73934470916CB5F0ECEA6BFF092E735
C7C355B56189D1DD5715EC97E50145FFC17BB1497315A9585D713A7A6DFC7933
995468EFD0F59E3C15865B87925A3F2930E20D5A35970E2C44F1629FA16E00EE
EE21EFC50D49F5BC02300D0A7BB85E649CB4E2E828C8B1C5469463013E71D723
2CB11BCBAC191AC751A2AF7FC228395CE9472DC1809052012AEC2CD66695DAF0
4CA04234F0187F4116C93F59A7F1F8123DE87F111853B785A20CA8B49B3B0CEC
B11AD345E1A11578D2EFEB0536D125237086CC8CD9F34A5137AC5DDFD8746014
D74AAE8239B81ACF65F379CF2153B06A238A2D767F294CAE0D79228F0B7D45CE
510AC9657A1776202FEF42F96D476E7DF407786AEA12DEA0013D3B4C5D0640F5
BC5BB72C34066270399CE595827175B23B25072723BD24E07F6BCD9EF0175DEF
93714BAA53960F81103CFB731CED4A267B53727BCA3C97B0BA5004055D4EF0EC
F725658E53AC86E4061B489AD4154915C3981B3B703E1E2A8D390CCECCA99385
45EBE35441B062D7D12DAB2B31569387187D74A4043FD71F1C6D352EAE0F6757
4345FBFB6DB15CAE47CAC4BAE47AECAE5FF5EC19057DCEFA1B23F47364ABDF47
088A7C6A2AE26B10459B6D41CB69182FD1472F326CE3A15B59255D1DE3B616D8
9D1F12561038839781E657C896B8C58A32DF5AEA23732A0966D96C68C988ED7A
09B7E2C8F9F3D0D56879764781566299A4EDD3588BDF70E3D924D25074F30988
E35BDD827AE4D0B4A06F55A9976BF0DB3C0B1D09CD08E8CB168B50617691638C
0EC1A791C228177D4FFB021EC3DF5082CA3487AD2EFC8DE9466A690ADDB4C52A
FE2A6DB4CC275CD33D9136E735279FBB2008D59E667905EBB04326EC33C98B2C
94744B7F540D86E90DED64572ECF1EAD3A58EC101642B245A9C7232DC8FB8741
03F97883BB32FB955C22F878FA0FD114451A3B3859B0B5537AFAB73AEC7DB2BF
409E1FB41D473714F6BEA73CB085139879FA31710E01915C2938C37BAD6D7D71
45B897E00857D3931A489EAC7B42BCE4E65F73F67FE027CE482DC47598ABCB95
39E98DA8ECA3E23F0799D5963ABA6E2984DEACBE7B46B40ADC6213E0F4D08971
58F68C946C748E4B4217CBA2391BE2086C9758F4E32C9B6413E48D84D33A6E85
84747029C0A9C9B92841D217A902BA8EB333999D62FDA9F82BFC8ED11F67988A
0CAE42182E414A9766AFFF4B046A09D476F8E3F15A8C7829BEE982D8350BDF5F
F215F2BBBF68D4B567BAB798B9604C79306C475926E9FEC0F07A99F43473C6FD
B15AC29C3D07FEBAD1BAFF75AAF2FBE94F104F1DBF838044FAD94B661B06AECD
D9AEBD02B60CA4546DD6B5B5C1A3833ED07845671CEFCA8955CE0DE5DB8FC93B
3306683CBFB8E5B79A863DE78D455DE9D592043C2686F88A43140F8B9F3B553B
7047420E93E753829F8D47AC7621CFE3626F271E31F0019CC02D0B57F67BB47D
8CFB63E902EA3231C00EC66EEC0D30FE8394558BD3535C888C4CEFC6EB72E737
712ADC6300162D5D79BEE0CA1F6E4127A0BC90656C01692F6D82C85550AFC97E
C2693E379160FDB9636FA41AE9C75B7F6643B05971C6D67CE30971D590FC07B3
E0B36B4D1C7F25110B5DA2130D574FA292B47322975A2BADBDB39AAE69BDDBDA
A880F9AAB580117708C79204DFFDC08BF4A48919B5C22228845CE8C3109E93AC
2479E523B8A1C12A6E541118F121DC6B4EAED83491A03192D5C3A2A45D1A2467
757E7B377C635CF5CAE11A7CB49D49F3A1BB2286090B5F0E4F89869D1771D50C
54B5C5E091E3048A2C194F0ED00DD64FB95BAC6FA9D61ECD093ED416DA3A4981
DB07CFF17C4F55C62DF628EBFF06FAC3F3D3F91C30EBB34052BE1A08F5EDA4B9
08977197950A282B84E21D43C64BE3AE4BCE22C70E7D392DE09D89B7F23351AD
6AD37225C12BA79EC9951F5DA1E505DB26200190ADE0E549305B7530CB86EFD2
A896F13A97E51754F70B609CB4511CEFC38BA579C071E9510A49982389980DC5
336D6C4A2DB100DFEC4055C7AA9C55880F94FBEA9EB280BEF66CB8E1E38A359D
E5AFB12B540CD599085ADDA7FC2C72E7C873015773FFEECA2C596B75BC39A3EB
3C43FA2E53C0D7993042F3D652BCC483E48B7F6C94C3FF6D38E276086A6AE67A
E5A571B9C72E0D7824E0BC2ADF51A393B9E334649F786EC1923C854382B89627
1B9E701AE5A6C42E672B2C6A33C8BBCA8F69B9061E787D6B92183F20CF4C3903
FF5417427B84798C82BE28D2C81624E3920CA61EC9EADB364B5A6E50E49A1A72
A9A090A1FCD84814B8B2708AD787D2B5015DA1305874F58C5EB62F843685FCB6
465FCA80176CAB2B2FE65E0A270BCE1E3DB97564BEDFAE5CA44395A8DF4505C0
3E103CC3B914359B2870DA6CD30382EAE8949131CFE31E9E75C3E47A3834BB32
CF183D4A8B9001710D0A11390C9DAD116196568591D38C2AF4ADD852F31494EF
573462759A35415900360882739789D6B89ACEFA251C5ED90ED704DD7C3C80CA
9F6CDED69537D201D520C99E69EEAD5D3C0EB84C166660B3C190166D93EDFE6D
15BCB6DC5CDCA825E48D33845CC2FB15291AAB823F25CF8BB0A1EAED8BEC524D
D9CA016027141FAC9D35B64FB9C224552F29EF6B32497254E319090E698FD8A5
15491CDFE1B988C79A0E3B9D01E12FF084E9FA86CCAE02A3EE6F2917B61A2CC1
64B8CAF309D1AB48A34227A7729DFF99CB6EC282E3FAEDD2673779AA7E4C1789
D93FDC37FE95F087C5F88F53D30A2DA9C913BF205FC6BDD060A40184F4AAEB3C
D080D63B89CA3DEFF310D09EF0A83F3914BD5B7932980ECE139EF0313C20B4C8
576EE0FE3F28FAF4D3CE7CD0890BC824A85B8EF4636BDF1EF1BB519F93D36540
ED09FAF93FD71992CA2CE2E83F5355162ECEB32AD218092F45D5A61A44E67135
EF0453589CECDC6962D0E8DA7E7567603BAF50B2C8F1CA65EA5320984E7D69AC
9A7D3D7F92565D79E8C9DD2D92CCA7DE9CD058545E9F98AA47904D70E1897099
3C4C852B3BA131DDD348433C336BDF5FBDFB62120DDEAEB3255E3207B0C84A0A
1ECF9EC869DB9BFA3693B03FCB27C5A5D3CDD62630DEDE91B4DD5B9784BF0BDD
FC6EEC3FA7ACA9E15FAE47CDD9B7FCD2BF0EFA10716F08C0AF25FF67CB6F9598
C607D2FCA452417D2C69DC808A9441A66492394C3450BD30632AE739EAD654BA
4343459CA36B6D5B2C12C39495952F2EF93D82C73E33236785A79609E260C4E0
CF3A3C950DE71DDC3939D42DB1CB1CA917CEAD56979A70F8F3B207C805319FA7
3C000AE2B21D711A6D78C7BFB901334DC06F59EAB6D94B507734C27971F8458D
D00193645AB92FB8FE163D5C51AE4F40BDB4F2C51691E76EE0636F071F37AAA9
BA78BD12459CA499210EB0CE2F8BD317387797C33F5933AE7A6264DA06B4A6A6
1188326147A16B205D1F965872DED7D8EDB3294FAD2FCDF0D423329E9CCF879D
4E0B966D509F45527F7609DD09694D286F6FF7535EF8971B7DFBAF608A19D442
C133207EB1152ABBD11C455D0977F66A9B73E51381D1CA4B66E87C0C7175A63D
80C699A052F00C41DAEF42E7A40E07B1B14107AB0787E24E17C1462960E3C54C
AE73BE4924464FB177EC62F116B2822842541543EFF7ABDDEE197D6BD8F8D4E6
59175D8C5957550B70BE775AD52FFF6E7C00DA7CDC16E1DF7446BB5D8FD82647
3E9F87D5EA365C82A2D991321ECB14A9E3AEADC5A56665DF7072D6DAE402BCB6
14D92B17F9E063E4E9D8D239C91F5C7C0BCD2FBD936C9D4A0B57659420343B59
B395BBD1AB5B6003F653699D57E7581F9813CC98D4F072FB78899D6DECC42D34
F2787EDEA64058B46C4BFAA2BB96E9BE5CACE8D91E4C080ADFC0FA0D4A29C6B8
54FEA9E11DBCF53D9CA40A21AE5076451EDAB3593E56B6D453DC8EAB8C78B588
34D4C4F36861B5649BC1E9F3091E704BDA7613ED45C911DFECA74EEA05165191
825F95A947CAF382FBAF01F3B8B041ACCDF39718D7DC5BA6CA12BB20EEE96439
BF2E2628AA3BD2C91998E6247A690FCB0CC95F286F427345CC4F1115BA3A6E54
4743355F2CC991CBDFF5725902C1F5A6DEFDC8638A26EA456C33C27773D6214F
66536CD2E44FD253531732D5A8C44B336B1BB47B0477350EB8CF74889B93402E
2356A9CAAFCA562315D8E0B3F42F08932CB87BA2499A875AFA08D11DA73B38AF
F46D03B7F639A8D7BF88CF07FFF4E91716DCCE6E2CCAB60A64D5E40EFD8B336A
1BFCC4CB04F49DE1FBDE7AA5B2092A6EDBD913D161A3271AB6411622D0E14416
37F81E0102F5B0F2F9A2B27819E4BACD7C50E29D6291AE5B0973C657761545A6
741729620EF2BF1046B3913399C10982EE5F4142CF461EA31042E432CC79A1A1
39C607D22E45A6DEC008CB4BF6007CDE9DD5802B49A62C8E02A6D448B64177CC
887AD71D171B99E7ABE2085B37D90B3BD8513995D9A57F53184DA474F6DB5E49
B73E04CC214EA5398DF7D7541F94E623E8687B511640457A48A68E9D9D6584CD
15B57CC044D8091C771D175F2EEDD411099BC8F7B4317DC503BB5E405AEEB526
5E6E1B1F2705275D274E012A98F66075CEB90AFC648B964DDC0E9C4AE7B24CE1
80B051022E5781A533A21DCFB97893847D685137EAD85BA708A7E118C72FA839
A9E460B5D17365A0AF1F53A98319FB64A5819B087F554BC056C4BE44113A5404
BEF759F890C1CA5E7AE156F4F8106FDB4F8DFCCC640976983EADB30976344048
2A86D7B2AF4A01CA736B98D52ACE392AD4BECE7E61C710B08B66F01857CA460B
B8376E257113E10F6DEDF14CE2A4E6A99ECBCD302C36CADB713D849EAE9EB598
F29DC98531D793B79F83091F9B136809E006F34E423D528CC4309AFFB3EEB47B
9A9DE4D5B25CE953345C326BCBE2B4912641780637783084D3D12693F8135483
CBB0AC4EE0B5610D7CEB7DF205830BDB9BB404DC1B28FB0824CC187B26C19A91
DA0025EC739BF3993700101D042DED86D67F5FB87912CFC51AA7DF53F2162D62
6314A2CE13810D0B8D81F45771391A236422CFA0F35F7A0CDF14ACB2724AA57B
7C2C28D53029B1146558610E0CFBBF72A85AB9BA308F846228F299F13F68E8F7
D963B2EE9EF7D4C21690632B640BDDAD0556EFA4EFBF035F13377ABB5CBC280B
9E0C12AACB153C93351E5BA95A7D149010E204950A59C7FC6581D9703468C1E9
EFAE37E7E6ACB892B3F8D1248D9A4A72F642FECC5E0B25C15EEB921EDDE84D12
0E524FE6133C4921FF4921242392C12FBE69744D53739F7E849C1B96C4020AB2
1FF10DEA608F111749E2FBD8DBCB17F353DCB3075B4F4B8186963EFE95A76A10
85AA5BB6DB4095291974221829A8E436680F4860E01C3843BE5BB3101D0869C0
EFCE08D187BC04F58C7A450A59093680A0F09E8E3F12DF5223E7EAFEFA01978F
D8354753A68022CC92C71F2CA732DADAA8A466D4AAE5999B0DC077715671F518
E6277741F44AE798EE50DF44CCF71FCF8BC71F76374005FEBC4883C6EDA854B0
88C0C2B476709AA809ECE41AE786DB1A32B3FBBCC14921673578D3514C8CA842
E1FF90BE33F7B93ADF6BFB8B1AFBBD080783BEF056A6BFAEF676F7BF9F2DFCC8
01D255A9F0391951210D60D4D4DCA93AA858B38C0D7B8FD740D5FC6F277C2A68
54CC2DE1F40B6347201FCA2A0A91822708D820CE645C3E4E5A09FE25721AB33A
97871ED448F38FC5A349D81F402B34461D840D5768BFC6849439AB6115104F78
B87115B1DAE12542EA898F86ACE247709817850B067F537E6137196101D46DD2
D842EA03EF4501E34074E8458E638ACC4EB349A7430AB035BEF2DD4CE00554F9
18F9FE32A55AC1E7E50D64AAFDA278D77A7149C59DC5B1E3064A4B281A54C9CE
A5EA94ABEAE4C6D5674C208ABC72563976487136AF2E21F835BEFD232D7F0D13
1D19932367F51D5379934DA7F1635AC51EE5CEBFA63D4D32F018DEF13624EE62
31DAE68A08DBE3B4FDAAFC75291C8C6CC7A657E3C7453C7D1461A36E88E633D5
408253B673AD87A9FB2D0F56DF1305916D14D5DD62051E27BCE09CEE9A1F14AF
1D7164BA5FB6E6EC8D38750F7E28BE330909F303ECDEE692E347DE13C8C2F82E
29C8BE6EFD76546F362A12A1C2DC12389EA95ACB4DCBE95620F0C193EAD91B33
BAAC5801AE827B9AB3FCE5D11D1D7854F8FA8A31670119CC0CA98628F801838B
AAC7EF90AC5466BE69CE3E3CD9951A5EB9AC08014285422F6DA6F6E221BB30F8
0042A11F2E4B765BB0D142AD52F4D85785EA71B2E1CE20728B9E9306CE93268D
99B822A5AB5232EC7E26EE1160850AD3905864A01357F22722B6A54D4EBE58CE
480EAD9FBF068EE965AC4B5FD2FA8CCB91ECFC6E90B9C49268CA0B0FDAD23ADC
D5A74B41149BB08454054C451AD0DA4CCF8B60F2EBD061AA03A011D548B6B481
FAB00AF9225BB5463F27FD67333FB51F8664536267E95CFAA0BE3BC1B8F889CB
587A3A4FA2B45864F07E11372C9507A625C0030EF7030A0B4D931BCC48F6DD51
A4D1F63FDC4B59C1CB18E6242E9F4B4B8AD9755B870FE60D640181FB7EB8120C
C56F51DC8C47FCC6318C2145EDCBEFA7BC4253315BA67FD2B3D4AF6A9F3F229C
AB75B592EADE15B1FB5FDBA1C0F786BD21A51506B7A2E42C2D086BA6F84D1B3D
AC7531545F0B01346831FF36A52CAC1E390F99AEDC265B44B0FC9C581BBA6BE4
48B723811EBCAEA5FEFAEA7E5B987F2C7B3E9A65D2D14A7B74F099401C57E367
385352D0776D2A908F7A5A2E4D4160946C5591397877025C8C387CA413EFED56
8B142E8341E349DB4DBA422A4FEE56A573972A0C66590175158E48850A9F7F38
4B95726787B8F969FDBC97491CC81CABC976CD00A27D1DFCA7CF467A956C1C6C
839817AEF8794B6151FAE9261119DD5DB787DC9D3B420FD325ED6599FACADE0C
320D54C2E0D296537E22C1783670A9D9BECAEC63853EC2F05A990260DC189D63
7CCC0BDDF2CF7585071ABAC14630666737041194D0777EA4292AE60BD7F7100E
DB568C90F0D899EA006CA423CFFD6EC70A5D3D8AC43C747DBAD3B02219E47D8D
DE030631F4678C357A58ECC52782B31B50CFD44EC33F41585E51B27E3997D33F
461BEF897220AEC80007F13C5A1EE3A0430CA899047DF944831F8B010A7DE74A
BFD26001472DC00CDC9F17CC435F61ADAD4E9AE062ED477FC621FDDF9242C449
1BB3F77FDD1519A251B663A693D84B42BF0962F537757F38CE5C5D56B98AB10A
3B70C8AE8D52DCAFCEC22E7B09D3C4EFDA1841C74CA975E4F8294F7BDC796500
0ABE197ED3737A65F7BAE601C91DB3983EAE11DA3EA18ABBBA3650DC361C2E77
EF9F97618B0C337A906FF39926D2B0B7883ABBA650816C4C6B34EEA836994EEA
AFEDDE56E0099D0E09EB88EB093544B9BF4871200746A0409C475FC4232A38D8
F3105B0FF44E4F132378DD12D9E796412FD0F9478322215E9F59E69396C35AC4
097C4995B60BF4D8B3AFD0A002B3A6E4FA114131410D5658999B86DFDD3005F3
AED1FA8F077AD1F27EA249221585703F20FB70E37A26C6C3F2E101693C94612B
65BF89F37AA3C10A40EE8E49915F1A1B95D2193D8003DECEF9D76FDAA33B1AA9
CEDCB21C2A3B05747FB3ABDBD904B66EEC60CED2867442F5FE445587EB8C6D14
87A6B1B4871A8371A7ECA6A159EAB295B167CC35ADEB8512FD0C237421773BE8
A081FB687F9C5D676F2944DE6E6B639C37E8E49BD4A6F0903E0C31EAFC4C7ED2
C3C67E71D8BE2B8D5784E8A6F19A9A8929DF9833440E160945274682F435DFAC
575048CC768BB8F13AA21C6CD3EBCE191B0F1897F45E676D2D16E9493A2C65B3
955A0D735BED02CFE724C126201F22E6C4227A7CF26E18FDFB88113C18723810
11C5EEFE9C6BACB80267B90D964A872F269533F946B6A67E84F1CF999ED6C2E5
BE8FD65BDE4536ED154D2CB750F3C6528EB5255BC74FB7C65E9E71CAAF5A17D5
D92CBB0D9068D8415756DE98745DD26CFAC130A8B1EAAD62C1D10BEF7FE76C30
D091F8E5B51F2F173CF22F1C6BF11901192654D6F0F0F027501DD70E83A7DED6
D352B5ABB1BAD84153579480782CE3F4E12BD87E6DFD69F0DA9D618623824FC6
ACB7A131816DC8DE560E09E0209F44DEA514419220E228C863DEC8DFF37AFD60
49B05E5D9FFF74A11F50F7C413DE5545028E4427B00164D21F818EE71DD60FB3
5E1EE9408194A71927714024C565597C73306708F959B06BDBE8372C45287902
819664827970D3B144F68F479CC5FFD999C15E5391E9A46E0C417CBC693FB58B
8576BB5E703DC7A806C05E16C10A6167947A18B9EAAF809F5C2B0DD073B53FD1
8CEC1979EAAEBADF9EC6250B2EE63584DE58D938FBE9341E28333FA2F25A1707
ACDB2097EACA42937505FB2600407219FCE6E862138B038F365B127EB6BFFDEC
074341237E140B3AB8C4852927C395FCC4E661B01D46E0784B65F81E83881867
5BEB15FB2E38493FB11CB7F9F4960766F6BCC68BBD656311A028C95791902556
9E4E6FFB5B183EACED8C7FBD82FAC01F1A052E2320B24894B59BD92F6BCB468C
F16303544E9825DED527FD7321CB404E68ACB5E496BF4A8369BFAD16ED470A47
D0B77CFF492BE2829E8885F4367AC757BF41547F68D3E0727AE4C6DCF1F3424D
CC00E62552BA5AEA974750C48490769B8070FEA638BE945B39B10D315F3477DF
923368CDFC0080FA95F6EFAF33DBC31F68AE9F7BC26F2758852266B3E2C1A953
9DB91F9AEFE903FB86550B0DDF878F44E75B22866EE7E0ACBAFEB5A5A5437C81
7E70E57B42ECF745D1FCF921049F99B840F337BE2894153C3683B88A3B378AB3
01C27DDB098E5C606A2A29BA1C0E65B19AAC6E95CDCB77EFE41CAF724A7E10BB
A296B20AC3CEC4B2DCBF966A0FC8B6EB7C4354B6E4834C8D27B08B3CD512D203
4CD743F13DC9E2697F84410C7DA061CC0B88E8199B66B6427E2CEB089A9B21D9
9C9DFFDA5020175033F57CA9B89DC9BADDADF0761109A98AF806357C6CEDC365
3C26BD3A5D982F67CF409FBB11F771F716F1E54EA931FC3827F9A65A0C957699
88FE0B327FF61DD8DE27DF94222A0B06F7C77639781444445DB2D67E2B3FDC97
6F14F9B0AC570EAF33F372A022CB2AD465B4F593485E00061D5A75B4E2F93105
BC75FA13707925F388D380074C925FE1A1FA2AECC2D3899C2B219197520F21B8
F0A3954410282BFC5B5A81B938CC103CC4A33ED92B78DDA91C00B39E1E6A715C
58E1E3B32B8466200C077AC733C9F567F47967C6067994AB44BA4862BC1DA5A2
2D15A28079BD221ABBF0AFA7C46F29320F2EC3427FFC7AF00443C5C54C7E5806
9F532B4503E3C6900F66C18B9108C714B2D311A5AB8D85864B99B8DDAAA9C72C
2E8744CA7964F6D4B97B9FFA34717C71DAA7E638AB2C35AE365B377596DB8AC1
4D347B8711B6ED931E008107EA6606AA755125558CDD2BFC682B0389DE9D8FB9
128C3360480410F2C0BFD532D72415E2DC1ACA9A671A5A9A43C8282AEE7E7831
38224AFE5FFFD63308C0E97B45E8618E68AF62C76088FBBF472AE7803E819659
54CBE99C38188C823E002ABC509706C0C5BC71EBE9F15D9FD50E8F422AAF21E9
E13DEB5CC8FFCCB6089B21455F1B2061C05BFDBE741E0481A4880D716CCA91CC
8EF298A33E730EAFF79701EBE78548609E4C27B73A2347E9BF06B29672874F24
03F49C75AA10968C7EE9D32E36FFCFFBC40335FFA2CC5CEC764C2E32B595AFF7
0FE8CDD54F78240E915FA5FF64F80E2BA747F4B6FD3C5126BEA25CF54C2ED125
752877A471A403B042E5249672E60E941CF134D055E11A3A71585D4D61C3412C
AC5686E0D63AA9492B06A212B7F455F755D18BEE2ECDB6CE361F0627E66BEE9A
5F54B3D7EDF7E7941CB36858D9A93E031E2BDF84404916FAFFFF0A49421D8BB8
AE488CADE0014B2520EDC3DECD2A81ED6659259E17F22E4F250B1A0B0A438771
468D33E51EA2828283B3D6E5B2BE2FF3AD21E8B8E19AE9C9D5C760C065174E89
D37FDCDF171CB08317C948D8B66E6548DA8C9FE7C74A63BFE8BC3DC3F14BFF75
2CDAC0AC18CA00726E08FC59E08948E5BD7D713F741F3575EEAFC6CC1B7C19E1
6CD77B51D51006F7EAE655F63121FAC3C012829FA69B8F215DF2AB80D72BE8F9
5F0F03F825E2DAADDDA9C314D5971098F406A8C961C6A6350843A895BF29A799
7B95388DED8D8EDBA77964B4A1A6BF888FD0466C54C475D54823C32758B51592
F0474B49C626A80EDF331E4284910B2EF94ACAC0ABF7C30FAE5EB364A0C91225
F1EE926B41EC32EBAB92D0219DA9ED4D2536A36CC8C713E2DDF6B320D263C777
14E5F401C22D62DB20AE15E56CB26BBCADCDE1E372DA5C4CB934AD7C14BA8D04
99C779E2BE123CBF915E41C478C59292BA04114E7B61387593E13616E504D1CC
B06A6DCDCBA93C8120B35DE82E1E72CCFBD8094D28411B3D1352E37EEC0E03B7
7E34C326C1AF0B6E1A13388F36C7667B0692F900A685C209BF2F6FC2F826015E
C533F8C26A9B0902C72AEB90798DCD613E553EF773BA4DF72BFED5957ACE8CC2
E4BC45306FA13F8D3AE63866F0DA8DD755196E8DC9452571A81D21902CF5B14D
FD1E99A6DED000AE599942411CCB599C9C1A9635EEE5440FB7A1F1F7C0E80BFA
A6DB36C4622184B54732C9F903601BA1DF9441FAB794223E900D39A9EAC732D2
4C6EE537FBE7183711D90857439FD1868773C5C90A53652742635DEDF0087027
A7827032BD3CE027E9113391A22169CB9884F1B70C02A7091B12924D417238D1
3C0B2A05823F2622598BBFFE3E1721B69BD0943BC93868431C1BDAB0995F73B4
8245DA84C8CEB6733BDFAADD734A558594466D81C0CCEBBC97E66348E79D046E
2B8B6FD5C570E38601C2C8131AA148128C0DB6C6C9305B192C519C994629F81D
68F4425C561761FD437AC7B1F071E65B7D3AD034A6E5F32DE88D4B40EE9F67D4
3149874727786B7E2AEBBF3021B1B0D63B5FDB1D9E4FB79CA12A9CDCD90457EE
F4A650B862A19E78046CD628C2548BFFCB939B375E7BDCAF6E40B5BB42D6208C
B0D2FC40E22205C8F61EE206565B47DAAE88336FB1409AA3E3611233E5155F96
8ED95772B03D757AFDA44394C083E66DF6632444DD8EAA03DE4C5F09AC3A853D
BCCA4BF4599D8CDF3FE3A9870B11AB382D6E71A2A9DF7E454764603A993F0319
59D57AB189B365B525A4E0BE7578B7A68258D4F8894209500A9C2DB9F73688ED
09BD90973E2FA14CABD4B45630DA1E0BC862BCFB8C5399C9A0ABD20C793CDE31
9FE397F58139513CF1224C5513DA52D2CE4FCD39E244F778E90684AA5119B241
76C17437F78CCA9375BFF982E1A068710D63F81241B688AD5FA9C490CBAB3F6B
BC1966DF66E85F139B38E9ABEC0C8EA987A443E91E55C9991DE8780888B767E2
F026BD0D76135170A3ED442FF93E3487C79AE20F45BD8B62C026EB6DF395AB1E
187D5522F986EFD2D992452C35E96E4C7940A9EA237E30F1AF136FE325E542E9
34F846C5CE58ABE3190A9052F93E7A1A3F12D4B05F7F0FDD75A170572C5DFCC8
9CE3A41794EB04078A63F636A26FB66F5D09DCFE4870D42E61CC44B2DFC63AD0
76BF296344AF8D949E30BB6E96850C36FB9946EA458D9F77D2C68AD9B5580338
B6D226A4DD5EA25BDE175984BEF670B952CA3F64EB9F5D3B7E17595AF117F9B5
4A53564ACCC79484B70352FD2649F9D66A5C4B27F9FD6CF17B2CF6CDBCA048B4
E67F1FD8365BB9658331E3A9B63E19AFA76DE3D21F59A816E69420082B102E5C
A36698D8B78A6671AF6320F0AC288BCD211DEE8C6258B9FBA074A502FA73A574
42682D90E3B5A1E534F8CDA79C26BC130DCBC48CE74D4359CD47A0006057F280
6F6E28682E3C06CD30724897D3B9E2C43DB03841311DE2E5AD136B69734765B5
D84FA58A96AF4ADB3298E706EDA4089FB5B107B706B2AD637F7FDC650E944286
AD81E985B736ED0960C8718E049AC4076FD4605D29BF3906A142F88B5D6924DF
4AF24A233719B02CC4419F73993622283CB6B3EB2A3A25F30D11369B7CF9836C
8C95B7A72C958FA25D65A12FD83FB0980A06B2E3F29FD78185990F528BEBAE8B
73A916395EED917B8377787628C3BADD2EE20443E015606B9E401C128ECA90A6
D1C3BC3829B7F30C414BDC74664318A2308B8469666B10E6DD3CFF596F2CB584
0AE3C4552418412C65C5AE90F80E884223D1824CD8226715F65C6EDCEB65522D
1C2BF2621218190A9FD7ECE327FEC9998AD5C6914100802FE89B271C536E6A02
64CCB93AEF33DD53D8203E530BEBF5FB5FBB65C45C111A5F737DBDB965A0D8BC
E0BD03E7D067F04DF2C7BE3784D3BC3D184025CD267D317B3A4D255C1B50EDC0
004440F490EAFBA6B9392EE60A0F144D066D5AD3022B9C4F292D19E23CD0C6CB
98D0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap3-pspic1.dvi)
@start /Fa 134[77 121[{}1 172.188 /CMSY10 rf /Fb 139[39
39 39 2[39 39 1[39 2[39 39 39 1[39 39 39 39 39 25[39
7[39 1[39 8[39 39 5[39 39 2[39 39 40[{}23 74.7198 /CMTT9
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1099 546 a
 tx@Dict begin tx@NodeDict begin {10.05 5.05 111.5488 55.7744 2.71246
} false /N@T-0 16 {InitRnode } NewNode end  end
 1099 546 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.05
neg 107.7488 10.05 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fb(?-)40 b(descend\(anne,donna\))639 924
y
 tx@Dict begin tx@NodeDict begin {10.05 5.05 102.0989 51.04945 2.71246
} false /N@T-0-0 16 {InitRnode } NewNode end  end
 639 924 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.05
neg 98.2989 10.05 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fb(?-)f(child\(anne,donna\))1063 901 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1063 901 a 1050
1301 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 3.08331 1.54166 2.71246 }
false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 1050 1301 a 1063 1279 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end   grestore
end
 1063 1279 a 1063 1279
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 4.6089 def
/r 4.6089 def /h 11.6903 def /d 6.74524 def LPutCoor end PutBegin 
end
 1063 1279 a 1025 1301 a Fa(y)1063 1279 y
 tx@Dict begin PutEnd  end
 1063 1279
a 1605 924 a
 tx@Dict begin tx@NodeDict begin {10.05 16.05 109.97838 54.98918 2.71246
} false /N@T-0-1 16 {InitRnode } NewNode end  end
 1605 924 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.05
neg 106.17838 10.05 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fb(?-)g(child\(anne,)p 2188 924 24 4 v 31
w(G43\),)1754 1015 y(descend\()p 2071 1015 V 30 w(G43,donna\))2062
901 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 2062 901 a 1540 1301 a
 tx@Dict begin tx@NodeDict begin {10.05 5.8 125.72363 62.86182 2.71246
} false /N@T-0-1-0 16 {InitRnode } NewNode end  end
 1540 1301 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.8
neg 121.92363 10.05 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)h(descend\(bridget,donna\))2062
1279 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 2062 1279 a 2062 1279 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 32.41312
def /r 32.41312 def /h 2.78752 def /d 4.71246 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 2062 1279 a 1797 1301
24 4 v 1821 1301 a Fb(G43)g(=)f(bridget)2062 1279 y
 tx@Dict begin PutEnd  end
 2062
1279 a 1021 1679 a
 tx@Dict begin tx@NodeDict begin {10.05 5.8 116.27374 58.13687 2.71246
} false /N@T-0-1-0-0 16 {InitRnode } NewNode end  end
 1021 1679 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.8
neg 112.47374 10.05 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fb(?-)h(child\(bridget,donna\))1503 1657
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1503 1657 a 1490 2057 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 3.08331 1.54166 2.71246 }
false /N@T-0-1-0-0-0 16 {InitRnode } NewNode end  end
 1490 2057 a 1503 2035 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0-0 /N@T-0-1-0-0-0 InitNC { NCLine  } if end 
 grestore end
 1503
2035 a 1503 2035 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 4.6089 def
/r 4.6089 def /h 11.6903 def /d 6.74524 def LPutCoor end PutBegin 
end
 1503 2035 a 1465 2057 a Fa(y)1503
2035 y
 tx@Dict begin PutEnd  end
 1503 2035 a 2104 1679 a
 tx@Dict begin tx@NodeDict begin {10.05 16.05 124.20476 62.10237 2.71246
} false /N@T-0-1-0-1 16 {InitRnode } NewNode end  end
 2104 1679 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 16.05
neg 120.40475 10.05 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)f(child\(bridget,)p 2804
1679 24 4 v 32 w(G44\),)2253 1771 y(descend\()p 2570
1771 V 30 w(G44,donna\))2620 1657 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0 /N@T-0-1-0-1 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 2620 1657 a 2078
2057 a
 tx@Dict begin tx@NodeDict begin {10.05 5.05 130.44858 65.22429 2.71246
} false /N@T-0-1-0-1-0 16 {InitRnode } NewNode end  end
 2078 2057 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.05
neg 126.64857 10.05 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fb(?-)g(descend\(caroline,donna\))2620 2035 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0-1 /N@T-0-1-0-1-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 2620 2035
a 2620 2035 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 34.77559
def /r 34.77559 def /h 2.78752 def /d 2.71246 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 2620 2035 a 2336 2057 24 4 v 2359 2057
a Fb(G44)h(=)g(caroline)2620 2035 y
 tx@Dict begin PutEnd  end
 2620 2035 a 2117
2435 a
 tx@Dict begin tx@NodeDict begin {10.05 5.05 120.99869 60.49934 2.71246
} false /N@T-0-1-0-1-0-0 16 {InitRnode } NewNode end  end
 2117 2435 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.05
neg 117.19868 10.05 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fb(?-)g(child\(caroline,donna\))2620 2413 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0-1-0 /N@T-0-1-0-1-0-0 InitNC { NCLine  } if end
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 2620 2413
a 2588 2813 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 2.71246 } false /N@T-0-1-0-1-0-0-0
16 {InitRnode } NewNode end  end
 2588 2813 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 3.8 3.8 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial 2620 2791 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0-1-0-0 /N@T-0-1-0-1-0-0-0 InitNC { NCLine  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap
stroke  grestore  grestore end
 2620 2791 a 0 TeXcolorgray 0
TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 900 3807 a(It)53 b(should)f(be)g(ob)o(vious)f(from)h(this)
i(e)o(xample)d(that)i(no)f(matter)g(ho)n(w)h(man)o(y)806
3906 y(generations)37 b(of)j(children)e(we)i(add,)f(we)h(will)h(al)o(w)
o(ays)f(be)g(able)f(to)h(w)o(ork)f(out)g(the)806 4006
y(descendant)h(relation.)50 b(That)42 b(is,)i(the)e(recursi)n(v)o(e)f
(de\002nition)h(is)h(both)f(general)f(and)806 4105 y(compact:)53
b(it)46 b(contains)f Ft(all)g Fw(the)g(information)e(in)j(the)f
(non-recursi)n(v)o(e)d(rules,)k(and)806 4205 y(much)39
b(more)g(besides.)45 b(The)40 b(non-recursi)n(v)o(e)d(rules)j(only)g
(de\002ned)f(the)h(descendant)806 4305 y(concept)33 b(up)h(to)g(some)h
(\002x)o(ed)e(number)g(of)h(generations:)41 b(we)35 b(w)o(ould)f(need)g
(to)g(write)806 4404 y(do)n(wn)48 b(in\002nitely)h(man)o(y)g
(non-recursi)n(v)o(e)d(rules)k(if)g(we)g(w)o(anted)f(to)h(capture)f
(this)806 4504 y(concept)38 b(fully)-5 b(,)38 b(and)h(of)h(course)e
(that')-5 b(s)40 b(impossible.)45 b(But,)40 b(in)g(ef)n(fect,)f(that')
-5 b(s)40 b(what)806 4604 y(the)j(recursi)n(v)o(e)g(rule)h(does)f(for)h
(us:)52 b(it)45 b(b)n(undles)e(up)g(the)h(information)e(needed)g(to)806
4703 y(cope)d(with)i(arbitrary)e(numbers)g(of)h(generations)f(into)h
(just)h(three)f(lines)h(of)f(code.)900 4803 y(Recursi)n(v)o(e)34
b(rules)i(are)f(really)g(important.)42 b(The)o(y)34 b(enable)g(to)i
(pack)e(an)i(enormous)806 4902 y(amount)42 b(of)i(information)e(into)h
(a)i(compact)e(form)g(and)g(to)i(de\002ne)e(predicates)g(in)806
5002 y(a)h(natural)f(w)o(ay)-5 b(.)55 b(Most)45 b(of)f(the)g(w)o(ork)f
(you)g(will)i(do)f(as)h(a)f(Prolog)g(programmer)806 5102
y(will)d(in)m(v)n(olv)o(e)f(writing)g(recursi)n(v)o(e)f(rules.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 55 67
TeXDict begin 55 66 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(55)p
0 TeXcolorgray 357 1051 a Fv(Example)41 b(3:)46 b(Successor)357
1174 y Fw(In)59 b(the)h(pre)n(vious)e(chapter)g(we)i(remark)o(ed)e
(that)i(b)n(uilding)e(structure)h(through)357 1273 y(uni\002cation)48
b(is)i(a)g(k)o(e)o(y)f(idea)h(in)f(Prolog)g(programming.)68
b(No)n(w)49 b(that)h(we)g(kno)n(w)357 1373 y(about)40
b(recursion,)f(we)i(can)g(gi)n(v)o(e)f(more)g(interesting)g
(illustrations)h(of)g(this.)451 1473 y(No)n(w)o(adays,)68
b(when)63 b(human)g(beings)g(write)g(numerals,)68 b(the)o(y)63
b(usually)g(use)357 1573 y Ft(decimal)d Fw(notation)f(\(0,)65
b(1,)h(2,)f(3,)g(4,)h(5,)f(6,)g(7,)h(8,)f(9,)h(10,)e(11,)h(12,)g(and)
357 1672 y(so)c(on\))e(b)n(ut)i(as)g(you)f(probably)e(kno)n(w)-5
b(,)64 b(there)c(are)g(man)o(y)f(other)h(notations.)357
1772 y(F)o(or)49 b(e)o(xample,)g(because)g(computer)e(hardw)o(are)h(is)
i(generally)e(based)h(on)g(digital)357 1871 y(circuits,)42
b(computers)e(usually)i(use)g Ft(binary)g Fw(notation)f(to)h(represent)
f(numerals)g(\(0,)357 1971 y(1,)53 b(10,)h(11,)f(100,)g(101,)g(110,)f
(111,)h(1000,)g(and)d(so)i(on\),)h(for)e(the)g(0)h(can)f(be)357
2071 y(implemented)42 b(as)k(a)e(switch)h(being)f(of)n(f,)g(the)h(1)f
(as)i(a)f(switch)g(being)e(on.)56 b(Other)357 2170 y(cultures)f(use)g
(dif)n(ferent)f(systems.)90 b(F)o(or)55 b(e)o(xample,)j(the)d(ancient)g
(Babylonians)357 2270 y(used)42 b(a)h(base)g(60)g(system,)g(while)g
(the)g(ancient)f(Romans)g(used)h(a)g(rather)f(ad-hoc)357
2370 y(system)e(\(I,)g(II,)g(III,)f(IV)-11 b(,)41 b(V)-11
b(,)41 b(VI,)f(VII,)g(VIII,)f(IX,)h(X\).)g(This)h(last)g(e)o(xample)e
(sho)n(ws)357 2469 y(that)50 b(notational)f(issues)i(can)f(be)g
(important.)71 b(If)50 b(you)g(don')o(t)e(belie)n(v)o(e)h(this,)k(try)
357 2569 y(\002guring)38 b(out)i(a)h(systematic)f(w)o(ay)h(of)f(doing)f
(long-di)n(vision)e(in)k(Roman)e(notation.)357 2668 y(As)j(you')o(ll)f
(disco)o(v)o(er)m(,)e(it')-5 b(s)43 b(a)f(frustrating)e(task.)48
b(Apparently)39 b(the)j(Romans)f(had)g(a)357 2768 y(group)i(of)i
(professionals)f(\(analogs)g(of)h(modern)f(accountants\))f(who)i
(specialised)357 2868 y(in)c(this.)451 2968 y(W)-7 b(ell,)40
b(here')-5 b(s)39 b(yet)g(another)e(w)o(ay)i(of)g(writing)f(numerals,)g
(which)g(is)i(sometimes)357 3067 y(used)h(in)h(mathematical)e(logic.)47
b(It)42 b(mak)o(es)f(use)h(of)f(just)h(four)f(symbols:)46
b(0,)c Ft(succ)p Fw(,)357 3167 y(and)i(the)g(left)h(and)f(right)g
(parentheses.)55 b(This)45 b(style)g(of)f(numeral)f(is)j(de\002ned)d
(by)357 3267 y(the)e(follo)n(wing)e(inducti)n(v)o(e)g(de\002nition:)p
0 TeXcolorgray 460 3434 a(1.)p 0 TeXcolorgray 41 w(0)i(is)h(a)g
(numeral.)p 0 TeXcolorgray 460 3602 a(2.)p 0 TeXcolorgray
41 w(If)f Ft(X)k Fw(is)d(a)f(numeral,)f(then)g(so)h(is)h
Ft(succ\(X\))p Fw(.)451 3770 y(As)47 b(is)f(probably)e(clear)m(,)i
Ft(succ)g Fw(can)f(be)h(read)f(as)h(short)g(for)f Ft(successor)p
Fw(.)60 b(That)357 3869 y(is,)40 b Ft(succ\(X\))f Fw(represents)g(the)g
(number)f(obtained)g(by)i(adding)e(one)h(to)h(the)f(number)357
3969 y(represented)h(by)h Ft(X)p Fw(.)h(So)h(this)f(is)h(a)f(v)o(ery)f
(simple)h(notation:)47 b(it)c(simply)e(says)i(that)357
4069 y(0)j(is)h(a)g(numeral,)f(and)g(that)g(all)h(other)e(numerals)h
(are)g(b)n(uilt)g(by)g(stacking)g Ft(succ)357 4168 y
Fw(symbols)35 b(in)i(front.)43 b(\(In)35 b(f)o(act,)i(it')-5
b(s)38 b(used)e(in)g(mathematical)f(logic)h(because)f(of)h(this)357
4268 y(simplicity)-5 b(.)44 b(Although)37 b(it)i(w)o(ouldn')o(t)e(be)i
(pleasant)f(to)h(do)f(household)f(accounts)h(in)357 4368
y(this)j(notation,)f(it)h(is)h(a)g(v)o(ery)d(easy)i(notation)f(to)h
(pro)o(v)o(e)e(things)i Ft(about)p Fw(.\))451 4468 y(No)n(w)-5
b(,)40 b(by)h(this)g(stage)h(it)f(should)f(be)h(clear)g(that)g(we)g
(can)g(turn)f(this)i(de\002nition)357 4567 y(into)e(a)i(Prolog)e
(program.)j(The)e(follo)n(wing)e(kno)n(wledge)g(base)i(does)g(this:)522
4735 y Fs(numeral\(0\).)522 4934 y(numeral\(succ\(X\)\))35
b(:-)41 b(numeral\(X\).)357 5102 y Fw(So)g(if)g(we)g(pose)g(queries)f
(lik)o(e)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 56 68
TeXDict begin 56 67 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(56)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(numeral\(succ\(suc)o(c\()o(suc)o(c\()o
(0\)\))o(\)\))o(.)806 1223 y Fw(we)h(get)g(the)g(answer)f(yes.)900
1324 y(But)j(we)f(can)g(do)g(some)g(more)g(interesting)f(things.)49
b(Consider)42 b(what)g(happens)806 1424 y(when)e(we)h(pose)g(the)g
(follo)n(wing)e(query:)971 1596 y Fs(numeral\(X\).)806
1767 y Fw(That)d(is,)j(we')l(re)d(saying)h(\223Ok,)g(sho)n(w)g(me)g
(some)g(numerals\224.)43 b(Then)37 b(we)g(can)g(ha)n(v)o(e)806
1867 y(the)j(follo)n(wing)g(dialogue)f(with)i(Prolog:)971
2039 y Fs(X)g(=)g(0)g(;)971 2238 y(X)g(=)g(succ\(0\))e(;)971
2437 y(X)i(=)g(succ\(succ\(0\)\))36 b(;)971 2637 y(X)41
b(=)g(succ\(succ\(succ\(0)o(\)\)\))35 b(;)971 2836 y(X)41
b(=)g(succ\(succ\(succ\(s)o(ucc)o(\(0)o(\)\)\))o(\))35
b(;)971 3035 y(X)41 b(=)g(succ\(succ\(succ\(s)o(ucc)o(\(s)o(ucc)o(\(0)o
(\)\))o(\)\)\))35 b(;)971 3234 y(X)41 b(=)g(succ\(succ\(succ\(s)o(ucc)o
(\(s)o(ucc)o(\(s)o(uc)o(c\(0)o(\)\))o(\)\)\))o(\))35
b(;)971 3434 y(X)41 b(=)g(succ\(succ\(succ\(s)o(ucc)o(\(s)o(ucc)o(\(s)o
(uc)o(c\(s)o(uc)o(c\(0)o(\)\))o(\)\)\))o(\)\))35 b(;)971
3633 y(X)41 b(=)g(succ\(succ\(succ\(s)o(ucc)o(\(s)o(ucc)o(\(s)o(uc)o
(c\(s)o(uc)o(c\(s)o(uc)o(c\(0)o(\)\))o(\)\))o(\)\)\))o(\))971
3733 y(yes)900 3904 y Fw(Y)-8 b(es,)41 b(Prolog)e(is)i(counting:)j(b)n
(ut)c(what')-5 b(s)41 b(really)e(important)g(is)i Ft(how)f
Fw(it')-5 b(s)42 b(doing)806 4004 y(this.)94 b(Quite)57
b(simply)-5 b(,)60 b(it')-5 b(s)58 b(backtracking)c(through)h(the)i
(recursi)n(v)o(e)f(de\002nition,)806 4104 y(and)47 b(actually)g
Ft(b)n(uilding)f Fw(numerals)g(using)h(uni\002cation.)65
b(This)48 b(is)g(an)g(instructi)n(v)o(e)806 4203 y(e)o(xample,)38
b(and)g(it)i(is)h(important)c(that)j(you)e(understand)g(it.)45
b(The)39 b(best)h(w)o(ay)f(to)h(do)806 4303 y(so)h(is)h(to)f(sit)h(do)n
(wn)e(and)g(try)h(it)h(out,)e(with)h Fs(trace)e Fw(turned)h(on.)900
4404 y(Building)h(and)h(binding.)47 b(Recursion,)41 b(uni\002cation,)g
(and)g(proof)f(search.)49 b(These)806 4504 y(are)63 b(ideas)h(that)f
(lie)h(at)g(the)g(heart)f(of)g(Prolog)f(programming.)110
b(Whene)n(v)o(er)806 4604 y(we)50 b(ha)n(v)o(e)f(to)g(generate)g(or)g
(analyse)g(recursi)n(v)o(ely)f(structured)g(objects)i(\(such)f(as)806
4703 y(these)i(numerals\))f(the)i(interplay)e(of)i(these)f(ideas)h(mak)
o(es)g(Prolog)e(a)i(po)n(werful)806 4803 y(tool.)94 b(F)o(or)57
b(e)o(xample,)i(in)f(the)f(ne)o(xt)f(chapter)h(we)g(shall)h(introduce)d
(lists,)63 b(an)806 4902 y(e)o(xtremely)37 b(important)g(recursi)n(v)o
(e)h(data)h(structure,)f(and)h(we)g(will)h(see)f(that)h(Prolog)806
5002 y(is)48 b(a)g(natural)e(list)j(processing)d(language.)64
b(Man)o(y)46 b(applications)g(\(computational)806 5102
y(linguistics)40 b(is)h(a)g(prime)f(e)o(xample\))f(mak)o(e)h(hea)n(vy)f
(use)i(of)f(recursi)n(v)o(ely)f(structured)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 57 69
TeXDict begin 57 68 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(57)p
0 TeXcolorgray 357 1051 a(objects,)58 b(such)d(as)g(trees)h(and)e
(feature)g(structures.)87 b(So)56 b(it')-5 b(s)56 b(not)e(particularly)
357 1151 y(surprising)39 b(that)i(Prolog)f(has)h(pro)o(v)o(ed)e(useful)
h(in)i(such)e(applications.)357 1310 y Fv(Example)h(4:)46
b(Addition)357 1434 y Fw(As)f(a)h(\002nal)f(e)o(xample,)f(let')-5
b(s)45 b(see)h(whether)e(we)h(can)f(use)h(the)g(representation)e(of)357
1534 y(numerals)51 b(that)h(we)g(introduced)e(in)i(the)g(pre)n(vious)e
(section)i(for)f(doing)g(simple)357 1633 y(arithmetic.)68
b(Let')-5 b(s)49 b(try)f(to)h(de\002ne)f(addition.)67
b(That)49 b(is,)i(we)e(w)o(ant)f(to)h(de\002ne)f(a)357
1733 y(predicate)37 b Fs(add/3)h Fw(which)g(when)g(gi)n(v)o(en)g(tw)o
(o)h(numerals)f(as)i(the)f(\002rst)g(and)g(second)357
1833 y(ar)o(gument)d(returns)h(the)i(result)f(of)g(adding)f(them)h(up)g
(as)h(its)h(third)e(ar)o(gument.)k(F)o(or)357 1932 y(e)o(xample:)522
2104 y Fs(?-)f(add\(succ\(succ\(0\))o(\),)o(su)o(cc\()o(su)o(cc\()o
(0\))o(\),)813 2203 y(succ\(succ\(succ\()o(suc)o(c\()o(0\)\))o(\)\))o
(\).)522 2303 y(yes)522 2403 y(?-)g(add\(succ\(succ\(0\))o(\),)o(su)o
(cc\()o(0\))o(,Y\))o(.)522 2502 y(Y)g(=)g(succ\(succ\(succ\(0\))o(\)\))
451 2674 y Fw(There)f(are)h(tw)o(o)g(things)g(which)f(are)h(important)f
(to)h(notice:)p 0 TeXcolorgray 460 2845 a(1.)p 0 TeXcolorgray
41 w(Whene)n(v)o(er)c(the)h(\002rst)h(ar)o(gument)d(is)j
Fs(0)o Fw(,)g(the)g(third)e(ar)o(gument)f(has)i(to)h(be)f(the)564
2945 y(same)j(as)h(the)f(second)f(ar)o(gument:)730 3118
y Fs(?-)g(add\(0,succ\(succ\(0)o(\)\))o(,Y\))o(.)730
3217 y(Y)h(=)g(succ\(succ\(0\)\))730 3317 y(?-)f(add\(0,0,Y\).)730
3417 y(Y)h(=)g(0)564 3590 y Fw(This)g(is)h(the)f(case)h(that)f(we)g(w)o
(ant)g(to)g(use)g(for)g(the)g(base)g(clause.)p 0 TeXcolorgray
460 3763 a(2.)p 0 TeXcolorgray 41 w(Assume)58 b(that)f(we)h(w)o(ant)g
(to)f(add)g(the)h(tw)o(o)f(numerals)g Fs(X)g Fw(and)g
Fs(Y)h Fw(\(for)564 3862 y(e)o(xample)45 b Fs(succ\(succ\(succ\(0)o
(\)\)\))40 b Fw(and)46 b Fs(succ\(succ\(0\)\))-6 b Fw(\))47
b(and)e(that)i Fs(X)564 3962 y Fw(is)i(not)f Fs(0)p Fw(.)68
b(No)n(w)-5 b(,)49 b(if)f Fs(X1)g Fw(is)h(the)f(numeral)f(that)h(has)h
(one)e Fs(succ)g Fw(functor)564 4062 y(less)i(than)f
Fs(X)g Fw(\(that)f(is,)k Fs(succ\(succ\(0\)\))43 b Fw(in)48
b(our)f(e)o(xample\))f(and)h(if)h(we)564 4161 y(kno)n(w)f(the)g(result)
h(\226)g(let')-5 b(s)48 b(call)g(it)g Fs(Z)g Fw(\226)g(of)f(adding)f
Fs(X1)h Fw(and)g Fs(Y)h Fw(\(namely)564 4261 y Fs(succ\(succ\(succ\(su)
o(cc)o(\(0\))o(\)\))o(\))-6 b Fw(\),)53 b(then)e(it)h(is)g(v)o(ery)e
(easy)h(to)g(compute)564 4361 y(the)35 b(result)f(of)g(adding)f
Fs(X)i Fw(and)f Fs(Y)o Fw(:)44 b(we)34 b(just)h(ha)n(v)o(e)f(to)h(add)f
(one)f Fs(succ)o Fw(-functor)564 4460 y(to)41 b Fs(Z)p
Fw(.)46 b(This)41 b(is)h(what)f(we)g(w)o(ant)g(to)h(e)o(xpress)e(with)h
(the)g(recursi)n(v)o(e)e(clause.)451 4632 y(Here)50 b(is)h(the)f
(predicate)f(de\002nition)f(that)i(e)o(xpresses)g(e)o(xactly)f(what)h
(we)g(just)357 4731 y(said:)522 4902 y Fs(add\(0,Y,Y\).)522
5002 y(add\(succ\(X\),Y,su)o(cc\()o(Z\))o(\))35 b(:-)854
5102 y(add\(X,Y,Z\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 58 70
TeXDict begin 58 69 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(58)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(So)g(what)h(happens,)d(if)j(we)f(gi)n(v)o(e)g
(Prolog)f(this)h(predicate)f(de\002nition)g(and)h(then)806
1151 y(ask:)971 1305 y Fs(?-)h(add\(succ\(succ\(s)o(ucc)o(\(0)o(\)\))o
(\),)35 b(succ\(succ\(0\)\),)h(R\).)806 1460 y Fw(Let')-5
b(s)41 b(go)g(step)h(by)f(step)h(through)d(the)i(w)o(ay)h(Prolog)e
(processes)h(this)h(query)-5 b(.)45 b(The)806 1560 y(trace)40
b(and)h(search)f(tree)h(for)g(the)g(query)e(are)i(gi)n(v)o(en)f(belo)n
(w)-5 b(.)900 1659 y(The)39 b(\002rst)h(ar)o(gument)e(is)i(not)f
Fs(0)p Fw(,)h(which)f(means)g(that)h(only)e(the)i(second)e(clause)806
1759 y(for)59 b Fs(add/3)f Fw(can)i(be)g(used.)102 b(This)60
b(leads)g(to)g(a)h(recursi)n(v)o(e)d(call)j(of)e Fs(add/3)n
Fw(.)806 1859 y(The)52 b(outermost)g Fs(succ)h Fw(functor)e(is)j
(stripped)f(of)n(f)f(the)i(\002rst)g(ar)o(gument)c(of)j(the)806
1958 y(original)36 b(query)-5 b(,)37 b(and)g(the)i(result)f(becomes)f
(the)h(\002rst)h(ar)o(gument)c(of)j(the)g(recursi)n(v)o(e)806
2058 y(query)-5 b(.)72 b(The)51 b(second)e(ar)o(gument)g(is)i(passed)g
(on)f(unchanged)e(to)i(the)h(recursi)n(v)o(e)806 2157
y(query)-5 b(,)45 b(and)h(the)g(third)f(ar)o(gument)f(of)i(the)g
(recursi)n(v)o(e)f(query)g(is)i(a)f(v)n(ariable,)g(the)806
2257 y(internal)57 b(v)n(ariable)h Fs(_G648)f Fw(in)i(the)g(trace)f(gi)
n(v)o(en)g(belo)n(w)-5 b(.)98 b(Note)58 b(that)h Fs(_G648)806
2357 y Fw(is)51 b(not)f(instantiated)g(yet.)73 b(Ho)n(we)n(v)o(er)49
b(it)i(shares)g(v)n(alues)f(with)g Fs(R)h Fw(\(the)f(v)n(ariable)806
2456 y(that)i(we)h(used)g(as)g(the)f(third)g(ar)o(gument)f(in)h(the)h
(original)f(query\))e(because)i Fs(R)806 2556 y Fw(w)o(as)46
b(instantiated)g(to)g Fs(succ\(_G648\))c Fw(when)j(the)h(query)e(w)o
(as)j(uni\002ed)e(with)h(the)806 2656 y(head)f(of)h(the)g(second)f
(clause.)60 b(But)47 b(that)f(means)g(that)g Fs(R)g Fw(is)h(not)f(a)g
(completely)806 2755 y(uninstantiated)f(v)n(ariable)h(an)o(ymore.)62
b(It)48 b(is)g(no)n(w)e(a)i(comple)o(x)d(term,)j(that)g(has)f(a)806
2855 y(\(uninstantiated\))38 b(v)n(ariable)i(as)i(its)g(ar)o(gument.)
900 2954 y(The)53 b(ne)o(xt)f(tw)o(o)i(steps)f(are)g(essentially)g(the)
h(same.)82 b(W)m(ith)53 b(e)n(v)o(ery)f(step)h(the)806
3054 y(\002rst)48 b(ar)o(gument)e(becomes)h(one)h(layer)g(of)g
Fs(succ)f Fw(smaller;)52 b(both)47 b(the)h(trace)g(and)806
3154 y(the)55 b(search)g(tree)g(gi)n(v)o(en)f(belo)n(w)g(sho)n(w)h
(this)h(nicely)-5 b(.)88 b(At)56 b(the)f(same)g(time,)k(a)806
3253 y Fs(succ)h Fw(functor)g(is)i(added)e(to)i Fs(R)g
Fw(at)g(e)n(v)o(ery)e(step,)66 b(b)n(ut)c(al)o(w)o(ays)g(lea)n(ving)e
(the)806 3353 y(innermost)e(v)n(ariable)h(uninstantiated.)102
b(After)59 b(the)h(\002rst)h(recursi)n(v)o(e)e(call)h
Fs(R)h Fw(is)806 3453 y Fs(succ\(_G648\))-5 b Fw(.)45
b(After)37 b(the)f(second)g(recursi)n(v)o(e)g(call,)i
Fs(_G648)d Fw(is)j(instantiated)e(with)806 3552 y Fs(succ\(_G650\))-5
b Fw(,)38 b(so)g(that)f Fs(R)h Fw(is)g Fs(succ\(succ\(_G650\))-7
b Fw(.)45 b(After)37 b(the)g(third)g(recursi)n(v)o(e)806
3652 y(call,)47 b Fs(_G650)e Fw(is)i(instantiated)e(with)h
Fs(succ\(_G652\))c Fw(and)k Fs(R)g Fw(therefore)e(becomes)806
3751 y Fs(succ\(succ\(succ\()o(_G)o(652)o(\)\))o(\))-6
b Fw(.)75 b(The)50 b(search)h(tree)f(sho)n(ws)h(this)g(step)g(by)f
(step)806 3851 y(instantiation.)900 3951 y(At)63 b(this)h(stage)f(all)g
Fs(succ)f Fw(functors)f(ha)n(v)o(e)i(been)f(stripped)g(of)n(f)g(the)h
(\002rst)806 4050 y(ar)o(gument)52 b(and)i(we)h(can)f(apply)g(the)h
(base)f(clause.)87 b(The)54 b(third)g(ar)o(gument)f(is)806
4150 y(equated)59 b(with)j(the)f(second)f(ar)o(gument,)j(so)f(the)f
(`hole')e(\(the)i(uninstantiated)806 4250 y(v)n(ariable\))39
b(in)i(the)g(comple)o(x)e(term)i Fs(R)g Fw(is)h(\002nally)f(\002lled,)g
(and)f(we)h(are)g(through.)900 4349 y(Here')-5 b(s)41
b(the)g(complete)f(trace)h(of)g(our)f(query:)971 4504
y Fs(Call:)f(\(6\))i(add\(succ\(succ\(s)o(ucc)o(\(0)o(\)\))o(\),)35
b(succ\(succ\(0\)\),)h(R\))971 4703 y(Call:)j(\(7\))i
(add\(succ\(succ\(0)o(\)\),)35 b(succ\(succ\(0\)\),)g(_G648\))971
4902 y(Call:)k(\(8\))i(add\(succ\(0\),)36 b(succ\(succ\(0\)\),)g
(_G650\))971 5102 y(Call:)j(\(9\))i(add\(0,)e(succ\(succ\(0\)\),)c
(_G652\))p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 59 71
TeXDict begin 59 70 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(59)p
0 TeXcolorgray 522 1151 a Fs(Exit:)39 b(\(9\))i(add\(0,)e
(succ\(succ\(0\)\),)d(succ\(succ\(0\)\)\))522 1350 y(Exit:)j(\(8\))i
(add\(succ\(0\),)36 b(succ\(succ\(0\)\),)g(succ\(succ\(succ\(0)o
(\)\)\))o(\))522 1549 y(Exit:)j(\(7\))i(add\(succ\(succ\(0\))o(\),)35
b(succ\(succ\(0\)\),)1850 1649 y(succ\(succ\(succ\(su)o(cc\()o(0\))o
(\)\))o(\)\))522 1848 y(Exit:)k(\(6\))i(add\(succ\(succ\(su)o(cc)o(\(0)
o(\)\)\))o(,)35 b(succ\(succ\(0\)\),)1601 1948 y(succ\(succ\(succ\(su)o
(cc)o(\(su)o(cc)o(\(0\))o(\)\))o(\)\)\))451 2114 y Fw(And)41
b(here')-5 b(s)40 b(the)h(search)g(tree:)p 0 TeXcolorgray
0 TeXcolorgray 664 4174 a @beginspecial 151 @llx 426
@lly 389 @urx 662 @ury 2380 @rwi @setspecial
%%BeginDocument: chap3-pspic2.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap3-pspic2.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 151 426 389 662
%%DocumentFonts: CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap3-pspic2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 115 /s put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F9779E5FC0575729CE67A777CC63C4C9E2FD541287A3A
42A90C674BE17D468F96194BAB0E7440A2520AAF712BF6F3C628A3AFABC5D019
38F311D72D8FAD83EFCBF754613E1D550CA19DF51DCCFFA894081463075E72EF
CDD42B814A8C332C88E30895D3EBDA4889229DEB6DF494296DB56AFD9448C8BD
CB5CEA07346F415D469B638EB9DBDC3423CF739AC5383637D50F4A7EE6C700B8
0BBDA44D03DB8D7AA14D48B578ADC22A95ACC3B6EBA104BAECE43AB290570765
EF1EBB21117F839B5547D9A091D57D0063E4DDD7B9015E4C8A4887F8A2A2055C
D35D520B406AC8E5E7E0AEF7B6F411F9E07C8CBFE56410CAD4DB0D452EE6690A
891BC66591872CFCE56CCE15822811A2C256FA2298F060EFE767E57C092E3314
A3058F4102DC43A42E48875BB61F8E7641F58AC11080C471FE2405773EFBE569
3AAD1B25349EC43DA3811A83F1E546C0CB164FBCC2880B31E08031DB686DD167
A1899D248BAB6592FF9BBFF2EB908D91B24511AC525E15EA2EB389640E740980
D0A97B4D2CB1B019FCCE636A4316A5E4B5922BCA1C8E64DD5C8B4575441CF0A5
5C90DF7BEB2428FC644737B57D1A3933176B6D2F9FA0FC88C3C4689FDF77FE18
328346A07DAAEE490C76CD606A0AB338C9FB9AA802F3002A29CE268FE9D75A7F
C59B07FF4CAD8780C18A0974DA54103C9474575498D6DD4D2E1FB4E7A6CE89EA
7C92E036C703AD5C787C37A4469D30D92CBBEDE059D026A5A2D9B65246D93E36
A725FBE43FE0FC2C82A5A8D5FE0B3283DF389591474F63B0EDE363CB4F546E6F
4902CC3833BF30149B32052EF34038121B1CC7211F164A664AB44CFB0D9610A1
1AEF0B7DAB0D37224E72DAA5D75BA253E1D40B4705A4725AC38C777884B8BD70
16B83FC3997DFEA159A40DE56AB52B767B6412A342CCF58A2AA32DB331522B98
CDC9902ED8220E60BF304F643C6EB7212A420EEE69CD6499151666E4B4E6D510
9FDE9B405E176E64A3873D8F5031FC38C8B9B63730D36F2E5369C49ED911D3F6
48F072ABAE851808FA65D21C484552FBEDA0E01B1AB3830224ED036030CA48F7
07B6333A96AD20CBD67AFCC28AC760007A333E41E6D0E62CDA7F4B100C6EB4ED
01DFD581E9F3F68DC6F44D503C233895B9C8592F93197D34D001A98B96186235
9B888850EFD3DCCFD8F22867C4F83666B587586FAE57AEB962FA833312E41D04
80BED9988C9AA37FA41D64EC3F8FB502D82F0005A4D1AC14330AE1494AFE21A1
960C1BA1ABAD7E396F1FCBC05A0C6DC542FB532DA36B397FE525B66055E56D4A
8FB3ECB4BE8FB8D21D943D332FEB6CCBF43EE9C02CB6F255587300FD433C3B4D
9FF03B487C130D8C59F8E6BC0A3D6A21AA60543F3470BC7869EE4429EA78920D
62845D12F9A5A74A7F2AD8A58072B9E6D6A900BA44046812884F2FEFBBD39715
F7C180DD664B7470201E0B68633EB54DE3215CD1B5C109305ECAD2DCC519D9AA
B1AD3626DAD8A6F7825E1765B03210F3BF96D6BF08F38611A67040608203A5C7
1894C0E2CA89BB581FF57DDBFF7865063A2AFC57C1BEFB78D744C9ABFCD095A1
2C405F561BD9FBC456D9232F950C9406E797B8EFDEE18692A44EB4C25C7281D9
E81B0A41EBD0CC6D71A2E4B5528296D8827B8E9CCD5D566003B04D0603504C04
951290F43BA455DEF4FABA1EBAFD875ABAE3E6DAD76ED0C90D89E0E13A38CEEC
7C981EF8797A4577D6C20414EBBDBD53041B7ED0D12F094EBC11C13C19D150BB
7D284C5CD367191C87F338415EFA2C253ADBB4907E86BDD41AC562AEDADBE077
87173E7763061E078562E913AA55147A388E68FFBD008DC12A46205EC3BA815C
37D3308B9E50727B422A720A944B0AFAD2716BA61F704CAA3FD3A30D35C693B9
AD261C3CF603FCB87651205D6CF2E5C6BB5C98826F55898CADE887047A1128E0
AB55B303CBEAB2D34923A19B1743CE4AF53AABF652325D3526D7C8058A7D015F
A8F051E84BACC9B93C575C363FA80F02C3678DF44F20E718545C2F6F7E7EA452
6FBC40F2D259576C2B7F6138C7D17CD5D1BBC93A8D6377B101B79E0DDC70334F
F6D7B446F67BF70AEBF35A2AE55700E50701DC92EF20C4D9286EF4126427E421
FE0E68B5C73BA804FCB3587BB015563E839E043E143F8B5790851BCA5FE5C577
A0D532EA03C79EE46CDDBDCB40E9821BCDD7F7B517C71B7F516E328F8121312D
08BD3B0BDBB4E091440DFD5FE881F9994498397C57DA922FCB32DC0AF1C328EF
0A8305E3E3CD0D52CD20AAC23DBD644FF78D0079D7105ACA1CA13A2C7813CDAD
47BBF75D3C57189F95EDA0024FD7103DA52EEC1DB18580EAE9046107D468B229
A3C570B4B8585E0EEA45D0579586611539FB9A933E0F576045BE609A32CE5C9A
11ED08C130FD43AD3C5597BDF2EA7F64E305BDEC19F9939FD7C9DC53F5CD599B
80BA9A68E1CBED88B01BBAC50B43BE7FA27F7193C41B9517A7FD9A569CC75D2E
BAB9C79A1D4C8FC76DE80188858F97AE24D0C2DE433FCCEB866D2156E23C0D26
048E67DA6E7FD8ABB7542AD7AD53D33F1F5C32869117F9F08D4547E14D0ED597
8BD9BBE67B3FE35ECDC454411C1C007EE3CFFB45DC275872F79AAB2261983674
5464985FCE9537F6623CC87F24F00A6F9ED4CC0DD7C6DEE839140A8F1ACBF7FC
E6AFD89A82CBBC05676E3ED5427FEA0FE299A9CF178BE5F6213C1D22AB8C5F24
1460CBCB7FDA8DD921A764973EB09241F881EC2DCCEBDB39E8830850812B462E
2E63CE45DF736187DCE874214055AD32C77887F1F1880C392EAD485040155573
C64D6916EAC694E6D5EB4C055D8D1347DFAECEF8B23F449B30C908EA0C151BE5
55DB52BB990C0650819780246AE0D37921F7518EBCB9AA07CB2C4EDAF990BEF8
D9D4A2E9B368868CC303EE0654CFAAED3C30CECE4F632BFD0877649C17DAD4E6
F1A1029918886887164CFBEEFA4ED458C89AEF77F728EE7692D56E22479F484A
7449641BE1E782E94A4553FB868A414B3090D3C561EE950E70E820D0B94A6F0E
D6E8C752E59392D5DF247D89BD7F24C544F2C9D52E7D529A297C434C6A1F77C6
D6B6244D401A349E40396EED7783C16ABECA7C20AB9BE2A59BFCC8611F427FB1
6BFFBB482AFF6FC631DFF0E2850647BE19FA8A289F1084D7FCAAEFD940BE51C7
4F96D677A2BE7B0EF26E85B3870065C593A2C5F3440CC5304C19851E7C4D1BA8
A4F39D03DA71783AEA4D5B15C74D999F52B8EC07009754646BE58F1D7A9A67D9
D2FC046BEBE55CA1205D3418696E2399B5B1D1E18F2E4667FEB37CFB997F1D99
845E7E7D64AF15993F9768290A90A5FC5EAC0F8D15F3B8F622C4E3CE5C2A5103
EC5364565684485A80971216C3ED50CB91915FA672012D4F29494771ABF1231D
905AD19060CE0B56C31AADB4CFFE8320F06300F7328D99D8BA7CC83AA86D23DE
FA55B214CC169AA86625AB1139B63E6A399BEFBAD8D6C054FB19BB8E33462974
6C9D1FDD7C73B732BEDB0F5A6815436529FDDD85578195009BC3D9396B247052
2A8AB9B0572A103E9F0F130B2A8FE2175F8697879860F75FB1FB5439FFE73BD3
FC87599542F219917887B6A33572AB7BD315409566956A2A69016AD45A89C8C1
371005AE32ED27B7FF744969721EBE5F1191EE0C338DFDCE3C5CC21C3D7E88C3
B2E08A259404B2ADAB5B98639743EA3BF1AA8B0C13100F82C4C1085A56F3B7C1
3AB3B794E3BF277343F86DCCAC75052DCF0C548047BF4E81445338CF03FD5DE3
BC87250628D687B448A281AC375797625CEC795319FACD802F9200C5FF5DE33A
5EA4B8FAAD7F86556D7A49C6E655178FCE67A54C7E1A64B71EE05CE20EF049FE
391E15E39E6EFF768A965550CCFCFC0AFFF68761A7F2F3DEC565314EAF1BAF84
37EBA0F04BB00ED0A67292DC35ECF04A26A8669AE4442F62D08894F8263A8455
7E0CF33E7D5ABB95DD404F27D22B888E9F51769B158034BC2E2919D050402F00
F4246133B5A83C45716052067B313FF96CD42386C234A9FE0AB27A075CC2D239
83945C0ECA9D6DACAD5C0D5ACE3FA1EC2684610EF6ED62EC198B49E24C651237
4A51EC5E51762EE2C40EB7F0C6BC2C12A3C1EF1BD947C18011DB6B9C566521BB
B9531E5CC4F574350C9EC45F1972543FC57CA900B028B9FEF09C60A5E05FB080
4C45CD76C7C66297068CE0E608A8F00269F930DB2E02A6FFC9A0D88EF0DE5514
527C4DA9384E0B80BECA5A97E6723BA9C6EA0FA07F850D8B17B84AF3240571E9
03A30A78E1BDBF02494684A5C1F5ED5177CA02E3B7758CE2E06E3E561F9272BA
6CDC7DEEFD42B48A48BCE314E18D9EE65D657E1959738BE1AB03DAA85B3285BA
C8FDBEAFB9AE8C04B9F93935F61D9132FEA5E3BD4E157426B8C6027EB31A9851
826D337D9922B386AC261E36926358EA08E313DA89D336134CE330C6021517FC
C9B4FEC4A66A8B9B7BCB8C4A75C58CC13E26B3A402E70CF16DB088EE3697A80A
2F70AA4C4AAA632F009AA011672BEDB540B401170B652F81F97C4E52B63FAEA9
122D165AC280BD77AA986BD1F4BF5F464ED9CB2BDCB2FF190C521826A09DD156
47E7122107722379307E5681F5642281F31F965DFCD091350B7A4E01917A6F54
BEBCC03587318BFF4CBDC456E819AE6E4340D594D1F044FE71F480EC6C8278D9
D289AE309CB55F8666257274BF5DC0C514A6678D58D098297C762624FA36CE4C
9E7296FFF2E46EFA9D0D9441670BE0DAB6844B7056C1047F2C7F1E9097A14047
7D151D8B45CCCF0B2012999DD0ECF422510730E82986EA1C27AE716C081DCDF2
66FC56FBB79B67EE7F5104E0FD56506521227674339CB087A3D23985BED5563E
044173CA0AB57C5DFB722BA704BFADB36FCDFF0084EB826FA5700D3EDC4F258D
CAAA6D59F3EB10D4334E583490AF7EE1532F1C647CA5E943940970E39ACC2D63
B42268DB497502159475A48D61D291910AFE01D027FBADDEABC4C501196E4AFF
FDBA9BD9EA22D41A5E9D84580BED13D1C89433A08D545B2BC94B0F479E173CE1
DAA0269F8A88FE37015889E1E097F6AAC2D3440187C8FEFA7CD76B0A894D78EB
21C35C86A316ADB0A2BBF700400997056A9BDE1AC7D3E6814BB6AC5CBA444C4C
456FF2B6198BD3FD585265076BE1D4CE579B749D38C91538BF52FB85036F4DFD
4CC5F8638E4CD0F74F1361F447F65A595FFEA3632153D5D8F24519C58FBF1886
CC245EEEA5DAFF02758FB7A1E1A786FD1AE000CC6E06C40C47415C05FFD4D376
5C0F05E35A90663CB2A50C86B1BE75560A8F04033632C214BF90224632AC14EB
234B92C4FA0503397F42133B3CE915FC428744CFA69E0697FA15542CFC0BD2F1
BC29E6A09BF6AA02A105393AC94C933FDA7C298DF313FDB0FB45907BE753A86D
DAF3F89CC96D53405921AB5B3C8A312FF6EA1DC0C0AA54228F0471FC37789179
0D91B1D79D6020366448D9CDECA2951080C175BFE312F9237C8927B268646498
A125B19B597A69AFAA1C7AE680DD7F6B3AA5C3C0982BEDEE82623E2F47BDC0EB
EEF150D024540FDFC58CB6FDAE418AFA7B5249202B91DC4C8C21960D743715A9
21111F5D3D3F0F3492A2312FC12270DE4153C856827887083D309B48B5D33718
45AC309265A17B7A246C62114639DCFD609C5DFDFD6087260BE7851BBF2779EA
23EC09FD7F5708021C0A7ED6066A3D024265E0EE75EE12F2944A72FCC250A077
72EF42DBF81788541771B638B58A3427709E6CA94A5E30A2051FD192C3B6EB16
3287720ADEF9442336AC449B715A03292F85C2B97EA1DC740786EBD1F55C20E9
661DD569EB220B1EA4C987BCF921C497EC0871B880DA4FFD7E0E5FA705899C39
AA778A6EF18453C6DD13AB387BAD94B834080D8FF68BA548617167F0C8D22985
640D44FFF2492C2B49D33E041CA99F24836E7CDD75B26A6D1D595BB8AB0D5EF6
7DA768C287E5E2432CC3EA677474
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap3-pspic2.dvi)
@start /Fa 138[44 1[44 14[44 44 1[44 14[44 10[44 7[44
1[44 4[44 1[44 44 44 1[44 1[44 2[44 44 2[44 44 40[{}19
83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
639 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 243.84795 121.92397
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 639 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 240.04794 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fa(?-)43 b(add\(succ\(succ\(s)o(ucc)o(\(0)o(\)\))o(\),)37
b(succ\(succ\(0\)\),)h(R\))689 1021 y
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 231.87804 115.93901
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 689 1021 a 32 w
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 228.07803 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)k(add\(succ\(succ\(0\)\))o
(,)37 b(succ\(succ\(0\)\),)p 2338 1021 27 4 v 70 w(G648\))1652
995 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1652 995 a 1652 995 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 42.43965
def /r 42.43965 def /h 7.73059 def /d 7.64716 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1652 995 a 1331 1021 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 81.07932 10.74445 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fa(R)43 b(=)g(succ\()1725 1021
y
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 24.77977 12.38988 3.05556
} false /N@A1 16 {InitRnode } NewNode end  end
 1725 1021 a 1730 1021 27 4 v 29 w Fa(G648)o(\))1652
995 y
 tx@Dict begin PutEnd  end
 1652 995 a 820 1493 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 200.37831 100.18915
3.01385 } false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 820 1493 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 196.57831 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)g(add\(succ\(0\),)c(succ\(succ\(0\)\),)p
2208 1493 27 4 v 69 w(G650\))1652 1468 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1652 1468 a
1652 1468 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 52.20456
def /r 52.20456 def /h 7.73059 def /d 7.64716 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1652 1468 a 1250 1493 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 100.60913 10.74445 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end


@endspecial 1250 1493 a
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 24.77977 12.38988 3.05556
} false /N@A2 16 {InitRnode } NewNode end  end
 1250 1493 a 1255 1493 27 4 v
31 w Fa(G648)j(=)h(succ\()1806 1493 y
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 24.77977 12.38988 3.05556
} false /N@B1 16 {InitRnode } NewNode end  end
 1806 1493 a 1811
1493 27 4 v 29 w Fa(G650)o(\))1652 1468 y
 tx@Dict begin PutEnd  end
 1652 1468 a
950 1965 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 168.87859 84.43929
3.01385 } false /N@T-0-0-0-0 16 {InitRnode } NewNode end  end
 950 1965 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 165.07858 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)g(add\(0,)e(succ\(succ\(0\)\),)p 2077
1965 27 4 v 69 w(G652\))1652 1940 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1652 1940 a 1652
1940 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 52.20456
def /r 52.20456 def /h 7.73059 def /d 7.64716 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1652 1940 a 1250 1965 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 100.60913 10.74445 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end


@endspecial 1250 1965 a
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 24.77977 12.38988 3.05556
} false /N@B2 16 {InitRnode } NewNode end  end
 1250 1965 a 1255 1965 27 4 v
31 w Fa(G650)h(=)h(succ\()1806 1965 y
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 24.77977 12.38988 3.05556
} false /N@C1 16 {InitRnode } NewNode end  end
 1806 1965 a 1811
1965 27 4 v 29 w Fa(G652)o(\))1652 1940 y
 tx@Dict begin PutEnd  end
 1652 1940 a
1620 2438 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 3.01385 } false /N@T-0-0-0-0-0
16 {InitRnode } NewNode end  end
 1620 2438 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 3.8 3.8 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial 1652 2413 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1652 2413 a 1652 2413 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 58.18951
def /r 58.18951 def /h 7.73059 def /d 7.64716 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1652
2413 a 1200 2438 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 112.57904 10.74445 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial
1200 2438 a
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 24.77977 12.38988 3.05556
} false /N@C2 16 {InitRnode } NewNode end  end
 1200 2438 a 1205 2438 27 4 v 31 w Fa(G652)f(=)h
(succ\(succ\(0\)\))1652 2413 y
 tx@Dict begin PutEnd  end
 1652 2413 a 2691 523 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5
2.   1. .setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 3.0 3.0 0 0 /N@A1 /N@A2 InitNC { /AngleA -90.  def
/AngleB 90.  def 0.67  0.67  NCCurve  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  1.0 -2 -1 add  DotLine  grestore  grestore end

2691 523 a 2691 523 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5
2.   1. .setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 3.0 3.0 0 0 /N@B1 /N@B2 InitNC { /AngleA -90.  def
/AngleB 90.  def 0.67  0.67  NCCurve  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  1.0 -2 -1 add  DotLine  grestore  grestore end
 2691 523 a 2691 523 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5
2.   1. .setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 3.0 3.0 0 0 /N@C1 /N@C2 InitNC { /AngleA -90.  def
/AngleB 90.  def 0.67  0.67  NCCurve  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  1.0 -2 -1 add  DotLine  grestore  grestore end
 2691 523
a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 357 4374 a Fk(2)99 b(Rule)42 b(Ordering,)g(Goal)e
(Ordering,)i(and)g(T)-9 b(ermination)357 4504 y Fw(Prolog)58
b(w)o(as)j(the)f(\002rst)g(reasonably)e(successful)h(attempt)h(to)g
(create)f(a)h(logic)357 4604 y(programming)40 b(language.)54
b(Underlying)42 b(logic)h(programming)e(is)k(a)g(simple)f(\(and)357
4703 y(seducti)n(v)o(e\))55 b(vision:)76 b(the)57 b(task)g(of)f(the)g
(programmer)e(is)j(simply)f(to)h Ft(describe)357 4803
y Fw(problems.)43 b(The)38 b(programmer)e(should)i(write)g(do)n(wn)g
(\(in)h(the)f(language)f(of)h(logic\))357 4902 y(a)47
b(declarati)n(v)o(e)f(speci\002cation)h(\(that)g(is:)59
b(a)48 b(kno)n(wledge)d(base\),)j(which)f(describes)357
5002 y(the)56 b(situation)f(of)h(interest.)90 b(The)55
b(programmer)e(shouldn')o(t)h(ha)n(v)o(e)h(to)h(tell)h(the)357
5102 y(computer)47 b Ft(what)k Fw(to)f(do.)71 b(T)-7
b(o)50 b(get)f(information,)g(he)h(or)f(she)h(simply)f(asks)h(the)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 60 72
TeXDict begin 60 71 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(60)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(questions.)k(It')-5 b(s)41
b(up)e(to)h(the)g(logic)f(programming)e(system)j(to)g(\002gure)f(out)g
(ho)n(w)g(to)806 1151 y(get)h(the)h(answer)-5 b(.)900
1250 y(W)e(ell,)55 b(that')-5 b(s)51 b(the)g(idea,)j(and)c(it)i(should)
e(be)h(clear)g(that)g(Prolog)g(has)g(tak)o(en)806 1350
y(some)43 b(important)f(steps)j(in)e(this)i(direction.)53
b(But)44 b(Prolog)f(is)h Ft(not)p Fw(,)g(repeat)f Ft(not)p
Fw(,)h(a)806 1449 y(full)38 b(logic)h(programming)c(language.)43
b(If)c(you)f(only)f(think)h(about)g(the)h(declarati)n(v)o(e)806
1549 y(meaning)47 b(of)h(a)h(Prolog)f(program,)g(you)g(are)h(in)f(for)h
(a)g(v)o(ery)e(tough)h(time.)69 b(As)806 1649 y(we)47
b(learned)e(in)i(the)g(pre)n(vious)e(chapter)m(,)i(Prolog)f(has)h(a)g
(v)o(ery)f(speci\002c)h(w)o(ay)g(of)806 1748 y(w)o(orking)54
b(out)h(the)h(answers)f(to)h(queries:)75 b(it)56 b(searches)f(the)h
(kno)n(wledge)d(base)806 1848 y(from)40 b(top)g(to)i(bottom,)d(clauses)
j(from)e(left)h(to)g(right,)g(and)f(uses)i(backtracking)c(to)806
1948 y(reco)o(v)o(er)45 b(from)i(bad)g(choices.)66 b(These)47
b(procedural)e(aspects)j(ha)n(v)o(e)f(an)h(important)806
2047 y(in\003uence)c(on)i(what)g(actually)g(happens)e(when)i(you)f(mak)
o(e)g(a)i(query)-5 b(.)59 b(W)-7 b(e)47 b(ha)n(v)o(e)806
2147 y(already)42 b(seen)h(a)g(dramatic)g(e)o(xample)e(of)i(a)h
(mismatch)e(between)h(the)g(procedural)806 2246 y(and)58
b(declarati)n(v)o(e)f(meaning)g(of)i(a)g(kno)n(wledge)e(base)i
(\(remember)d(the)j Fs(p:-)40 b(p)806 2346 y Fw(program?\),)52
b(and)g(as)h(we)g(shall)g(no)n(w)f(see,)k(it)d(is)g(easy)g(to)g
(de\002ne)f(kno)n(wledge)806 2446 y(bases)58 b(which)f(\(read)h
(logically\))e(describe)i(the)g(same)g(situations,)k(b)n(ut)c(which)806
2545 y(beha)n(v)o(e)39 b(v)o(ery)h(dif)n(ferently)-5
b(.)43 b(Let')-5 b(s)42 b(consider)e(the)h(matter)-5
b(.)900 2645 y(Recall)42 b(our)e(earlier)g(descendant)g(program)f
(\(let')-5 b(s)41 b(call)g(it)h Fs(descend1.pl)l Fw(\):)971
2811 y Fs(child\(anne,bridg)o(et)o(\).)971 2910 y(child\(bridget,ca)o
(ro)o(lin)o(e\))o(.)971 3010 y(child\(caroline,d)o(on)o(na\))o(.)971
3110 y(child\(donna,emil)o(y\))o(.)971 3309 y(descend\(X,Y\))36
b(:-)41 b(child\(X,Y\).)971 3508 y(descend\(X,Y\))36
b(:-)41 b(child\(X,Z\),)1677 3608 y(descend\(Z,Y\).)900
3774 y Fw(W)-7 b(e')o(ll)42 b(mak)o(e)f(one)f(change)g(to)h(it,)g(and)g
(call)g(the)g(result)g Fs(descend2.pl)-5 b Fw(:)971 3940
y Fs(child\(anne,bridg)o(et)o(\).)971 4039 y(child\(bridget,ca)o(ro)o
(lin)o(e\))o(.)971 4139 y(child\(caroline,d)o(on)o(na\))o(.)971
4238 y(child\(donna,emil)o(y\))o(.)971 4438 y(descend\(X,Y\))36
b(:-)41 b(child\(X,Z\),)1677 4537 y(descend\(Z,Y\).)971
4737 y(descend\(X,Y\))36 b(:-)41 b(child\(X,Y\).)900
4902 y Fw(All)36 b(we)g(ha)n(v)o(e)f(done)f(is)i(change)f(the)g(rule)g
(order)-5 b(.)43 b(So)36 b(if)g(we)f(read)g(the)h(program)806
5002 y(as)k(a)f(purely)f(logical)h(de\002nition,)f(nothing)g(has)h
(changed.)44 b(But)39 b(does)h(the)f(change)806 5102
y(gi)n(v)o(e)51 b(rise)i(to)g(procedural)c(dif)n(ferences?)79
b(Y)-8 b(es,)55 b(b)n(ut)e(nothing)d(signi\002cant.)80
b(F)o(or)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 61 73
TeXDict begin 61 72 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(61)p
0 TeXcolorgray 357 1051 a(e)o(xample,)46 b(if)h(you)e(w)o(ork)h
(through)e(the)j(e)o(xamples)e(you)h(will)h(see)g(that)f(the)h(\002rst)
357 1151 y(solution)40 b(that)h Fs(descend1.pl)c Fw(\002nds)k(is)522
1307 y Fs(X)g(=)g(anne)522 1406 y(Y)g(=)g(bridget)357
1562 y Fw(whereas)f(the)h(\002rst)h(solution)e(that)h
Fs(descend2.pl)c Fw(\002nds)k(is)522 1718 y Fs(X)g(=)g(anne)522
1818 y(Y)g(=)g(emily)357 1974 y Fw(But)56 b(\(as)g(you)e(should)h
(check\))f(both)h(programs)f(generate)g(e)o(xactly)h(the)h(same)357
2073 y(answers,)j(the)o(y)54 b(merely)h(\002nd)g(them)h(in)f(a)h(dif)n
(ferent)e(order)-5 b(.)89 b(And)55 b(this)h(is)g(a)357
2173 y(general)42 b(point.)54 b(Roughly)43 b(speaking)f(\(we')o(ll)i
(add)g(a)g(ca)n(v)o(eat)g(later)g(on\))f(changing)357
2273 y(the)38 b(order)f(of)h(rules)g(in)g(a)h(Prolog)e(program)f(does)i
(not)f(change)g(\(up)g(to)i(the)f(order)357 2372 y(in)j(which)f
(solutions)h(are)f(found\))f(the)i(program')-5 b(s)39
b(beha)n(viour)-5 b(.)451 2472 y(So)51 b(let')-5 b(s)51
b(mo)o(v)o(e)e(on.)73 b(W)-7 b(e')o(ll)51 b(mak)o(e)f(one)g(small)h
(change)d(to)j Fs(descend2.pl)-5 b Fw(,)357 2572 y(and)40
b(call)h(the)g(result)g Fs(descend3.pl)l Fw(:)522 2728
y Fs(child\(anne,bridg)o(et\))o(.)522 2827 y(child\(bridget,ca)o(rol)o
(in)o(e\).)522 2927 y(child\(caroline,d)o(onn)o(a\))o(.)522
3027 y(child\(donna,emil)o(y\).)522 3226 y(descend\(X,Y\))c(:-)j
(descend\(Z,Y\),)1228 3325 y(child\(X,Z\).)522 3525 y(descend\(X,Y\))d
(:-)j(child\(X,Y\).)451 3681 y Fw(Note)f(the)f(dif)n(ference.)43
b(Here)38 b(we')l(v)o(e)g(changed)f(the)h(goal)g(order)g
Ft(within)g Fw(a)h(rule,)357 3780 y(not)54 b(the)h(rule)f(order)-5
b(.)87 b(No)n(w)-5 b(,)58 b(once)c(again,)j(if)e(we)g(read)f(the)h
(program)e(as)i(a)357 3880 y(purely)43 b(logical)h(de\002nition,)h
(nothing)e(has)i(changed;)g(it)g(means)g(the)f(same)h(thing)357
3980 y(as)c(the)g(pre)n(vious)d(tw)o(o)j(v)o(ersions.)k(But)c(this)g
(time)g(the)f(program')-5 b(s)39 b(beha)n(viour)f(has)357
4079 y(changed)h(dramatically)-5 b(.)44 b(F)o(or)c(e)o(xample,)g(if)h
(you)f(pose)h(the)g(query)522 4235 y Fs(descend\(anne,emi)o(ly\))o(.)
357 4391 y Fw(you)59 b(will)j(get)e(an)h(error)e(message)i(\(\223out)f
(of)g(local)h(stack\224,)k(or)60 b(something)357 4491
y(similar\).)65 b(Prolog)46 b(is)i(looping.)64 b(Why?)g(W)-7
b(ell,)51 b(in)c(order)f(to)i(satisfy)g(the)f(query)357
4590 y Fs(descend\(anne,em)o(ily)o(\))c Fw(Prolog)48
b(uses)h(the)f(\002rst)i(rule.)68 b(This)49 b(means)f(that)h(its)357
4690 y(ne)o(xt)40 b(goal)g(will)i(be)f(to)g(satisfy)g(the)g(query)522
4846 y Fs(descend\(W1,emily)o(\))357 5002 y Fw(for)46
b(some)i(ne)n(w)f(v)n(ariable)f Fs(W1)o Fw(.)66 b(But)48
b(to)f(satisfy)h(this)g(ne)n(w)f(goal,)h(Prolog)f(again)357
5102 y(has)37 b(to)g(use)h(the)f(\002rst)h(rule,)f(and)g(this)h(means)f
(that)g(its)h(ne)o(xt)f(goal)f(is)j(going)c(to)j(be)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 62 74
TeXDict begin 62 73 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(62)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(descend\(W2,emily)o(\))806
1227 y Fw(for)33 b(some)g(ne)n(w)h(v)n(ariable)f Fs(W2)o
Fw(.)44 b(And)33 b(of)g(course,)i(this)f(in)g(turn)f(means)h(that)f
(its)i(ne)o(xt)806 1327 y(goal)h(is)i(going)e(to)i(be)f
Fs(descend\(W3,emily)o(\))32 b Fw(and)k(then)h Fs(descend\(W4,emily\))
-7 b Fw(,)806 1427 y(and)45 b(so)i(on.)61 b(That)46 b(is,)i(the)e(\(at)
g(\002rst)h(glance)f(innocuous\))e(change)g(in)j(the)f(goal)806
1526 y(order)33 b(has)i(resulted)e(in)i(procedural)d(disaster)-5
b(.)44 b(T)-7 b(o)35 b(use)g(the)f(standard)g(terminology)-5
b(,)806 1626 y(we)44 b(ha)n(v)o(e)g(here)g(a)h(classic)h(e)o(xample)d
(of)h(a)h(left)f(recursi)n(v)o(e)f(rule,)i(that)g(is,)h(a)f(rule)806
1725 y(where)d(the)i(leftmost)f(item)g(of)h(the)f(body)f(is)i
(identical)f(\(modulo)f(the)h(choice)g(of)806 1825 y(v)n(ariables\))38
b(with)h(the)h(rule')-5 b(s)39 b(head.)45 b(As)40 b(our)e(e)o(xample)g
(sho)n(ws,)i(such)f(rules)g(easily)806 1925 y(gi)n(v)o(e)k(rise)h(to)h
(non-terminating)40 b(computations.)54 b(Goal)44 b(order)m(,)f(and)h
(in)g(particular)806 2024 y(left)d(recursion,)e(is)j(the)f(root)f(of)h
(all)g(e)n(vil)g(when)f(it)i(comes)f(to)g(non-termination.)900
2127 y(Still,)54 b(as)e(we)g(said)f(earlier)m(,)i(we)e(need)g(to)g(mak)
o(e)g(one)f(small)i(ca)n(v)o(eat)e(about)806 2227 y(rule)42
b(ordering.)49 b(W)-7 b(e)44 b(said)f(earlier)g(that)g(rule)f(ordering)
f(only)h(changes)g(the)h(order)806 2327 y(in)h(which)f(solutions)h(are)
g(found.)53 b(Ho)n(we)n(v)o(er)42 b(this)j(may)e(not)h(be)g(true)g(if)g
(we)h(are)806 2426 y(w)o(orking)40 b(with)i(non-terminating)c
(programs.)46 b(T)-7 b(o)42 b(see)g(this,)h(consider)d(the)i(fourth)806
2526 y(\(and)e(last\))h(v)n(ariant)f(of)h(our)f(descendant)f(program,)g
(namely)h Fs(descend4.pl)-5 b Fw(:)971 2702 y Fs(child\(anne,bridg)o
(et)o(\).)971 2802 y(child\(bridget,ca)o(ro)o(lin)o(e\))o(.)971
2902 y(child\(caroline,d)o(on)o(na\))o(.)971 3001 y(child\(donna,emil)o
(y\))o(.)971 3200 y(descend\(X,Y\))36 b(:-)41 b(child\(X,Y\).)971
3400 y(descend\(X,Y\))36 b(:-)41 b(descend\(Z,Y\),)1677
3499 y(child\(X,Z\).)806 3676 y Fw(This)53 b(program)f(is)i
Fs(descend3.pl)c Fw(with)j(the)h(rule)f(ordering)f(re)n(v)o(ersed.)82
b(No)n(w)806 3775 y(\(once)37 b(again\))h(this)i(program)c(has)k(the)f
(same)g(declarati)n(v)o(e)e(meaning)h(as)h(the)g(other)806
3875 y(v)n(ariants,)f(b)n(ut)h(it)h(is)g(also)f(procedurally)d(dif)n
(ferent)i(from)f(its)k(relati)n(v)o(es.)j(First,)c(and)806
3975 y(most)e(ob)o(viously)-5 b(,)37 b(it)j(is)f(v)o(ery)f(dif)n
(ferent)f(procedurally)g(from)g(both)h Fs(descend1.pl)806
4074 y Fw(and)f Fs(descend2.pl)-5 b Fw(.)45 b(In)37 b(particular)m(,)g
(because)g(it)h(contains)f(a)h(left)g(recursi)n(v)o(e)e(rule,)806
4174 y(this)44 b(ne)n(w)f(program)f(does)h(not)h(terminate)f(on)g(some)
g(input.)54 b(F)o(or)43 b(e)o(xample)f(\(just)806 4274
y(lik)o(e)g Fs(descend3.pl)l Fw(\))g(this)h(ne)n(w)f(program)f(does)h
(not)g(terminate)f(when)h(we)h(pose)806 4373 y(the)d(query)971
4550 y Fs(descend\(anne,emi)o(ly)o(\).)806 4726 y Fw(But)51
b Fs(descend4.pl)c Fw(is)52 b(not)f(procedurally)d(identical)j(to)g
Fs(descend3.pl)-5 b Fw(.)77 b(The)806 4826 y(rule)32
b(ordering)e(re)n(v)o(ersal)i(does)g(mak)o(e)h(a)g(dif)n(ference.)41
b(F)o(or)32 b(e)o(xample,)g Fs(descend3.pl)806 4925 y
Fw(will)41 b(not)g(terminate)f(if)h(we)g(pose)g(the)g(query)971
5102 y Fs(descend\(anne,bri)o(dg)o(et\))o(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 63 75
TeXDict begin 63 74 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(63)p
0 TeXcolorgray 357 1051 a(Ho)n(we)n(v)o(er)42 b Fs(descend4.pl)d
Fw(will)45 b(terminate)d(in)i(this)g(case,)h(for)e(the)g(rule)h(re)n(v)
o(ersal)357 1151 y(enables)38 b(it)h(to)g(apply)e(the)i(non-recursi)n
(v)o(e)c(rule)j(and)g(halt.)45 b(So)39 b(when)f(it)h(comes)g(to)357
1250 y(non-terminating)g(programs,)j(rule)h(ordering)d(changes)i(can)h
(lead)g(to)h(some)e(e)o(xtra)357 1350 y(solutions)j(being)g(found.)58
b(Nonetheless,)46 b(goal)g(ordering,)e(not)i(rule)f(ordering,)g(is)357
1449 y(what)40 b(is)h(truly)f(procedurally)d(signi\002cant.)45
b(T)-7 b(o)41 b(ensure)f(termination,)e(we)j(need)f(to)357
1549 y(pay)g(attention)f(to)i(the)f(order)f(of)h(goals)h(within)f(the)g
(bodies)g(of)g(rules.)45 b(T)m(ink)o(ering)357 1649 y(with)g(rule)g
(orderings)f(does)h(not)g(get)g(to)h(grips)e(with)i(the)f(roots)g(of)g
(termination)357 1748 y(problems)39 b(\227)j(at)f(best)g(it)h(can)f
(yield)f(some)h(e)o(xtra)f(solutions.)451 1848 y(Summing)71
b(up,)81 b(our)71 b(four)h(v)n(ariant)g(descendant)f(programs)g(are)i
(Prolog)357 1948 y(kno)n(wledge)40 b(bases)j(which)g(describe)f(e)o
(xactly)g(the)g(same)h(situations,)g(b)n(ut)g(beha)n(v)o(e)357
2047 y(dif)n(ferently)-5 b(.)111 b(The)64 b(dif)n(ference)d(in)j(beha)n
(viour)e(between)h Fs(descend1.pl)c Fw(and)357 2147 y
Fs(descend2.pl)i Fw(\(which)j(dif)n(fer)g(only)g(in)h(the)g(w)o(ay)g
(rules)g(are)g(ordered\))e(is)357 2246 y(relati)n(v)o(ely)31
b(minor:)40 b(the)o(y)31 b(generate)g(the)h(same)h(solutions,)g(b)n(ut)
f(in)g(a)g(dif)n(ferent)f(order)-5 b(.)357 2346 y(But)36
b Fs(descend3.pl)31 b Fw(and)k Fs(descend4.pl)c Fw(are)k(procedurally)e
(v)o(ery)h(dif)n(ferent)g(from)357 2446 y(their)40 b(tw)o(o)i(cousins,)
e(and)g(this)i(is)g(because)e(the)o(y)g(dif)n(fer)g(from)g(them)h(in)g
(the)g(w)o(ay)357 2545 y(their)52 b(goals)f(are)h(ordered.)78
b(In)51 b(particular)m(,)i(both)f(these)g(v)n(ariants)f(contain)g(left)
357 2645 y(recursi)n(v)o(e)35 b(rules,)i(and)f(in)g(both)g(cases)h
(this)g(leads)g(to)g(non-terminating)c(beha)n(viour)-5
b(.)357 2745 y(The)49 b(change)g(in)h(rule)g(ordering)d(between)i
Fs(descend3.pl)d Fw(and)k Fs(descend4.pl)357 2844 y Fw(merely)j(means)h
(that)g Fs(descend4.pl)c Fw(will)k(terminate)g(in)g(some)g(cases)g
(where)357 2944 y Fs(descend3.pl)37 b Fw(will)k(not.)451
3043 y(What)60 b(are)f(the)h(rami\002cations)e(of)h(our)g(discussion)g
(for)f(the)i(practicalities)357 3143 y(of)50 b(producing)d(w)o(orking)i
(Prolog)h(programs?)72 b(It')-5 b(s)51 b(probably)d(best)j(to)f(say)h
(the)357 3243 y(follo)n(wing.)k(Often)44 b(you)g(can)g(get)h(the)g(o)o
(v)o(erall)e(idea)i(\(the)f(big)g(picture\))g(of)g(ho)n(w)357
3342 y(to)49 b(write)h(the)f(program)f(by)h(thinking)f(declarati)n(v)o
(ely)-5 b(,)49 b(that)g(is,)k(by)c(thinking)f(in)357
3442 y(terms)42 b(of)h(describing)e(the)h(problem)f(accurately)-5
b(.)49 b(This)42 b(is)i(an)e(e)o(xcellent)g(w)o(ay)h(to)357
3542 y(approach)36 b(problems,)g(and)i(certainly)f(the)h(one)f(most)h
(in)h(k)o(eeping)d(with)i(the)g(spirit)357 3641 y(of)48
b(logic)h(programming.)65 b(But)50 b(once)e(you')l(v)o(e)e(done)i
(that,)j(you)c(need)h(to)h(think)357 3741 y(about)i(ho)n(w)h(Prolog)f
(will)i(w)o(ork)f(with)g(kno)n(wledge)e(bases)j(you)e(ha)n(v)o(e)h
(written.)357 3840 y(In)h(particular)m(,)i(to)e(ensure)g(termination,)i
(you)d(need)h(to)h(check)e(that)i(the)f(goal)357 3940
y(orderings)38 b(you)g(ha)n(v)o(e)h(gi)n(v)o(en)g(are)h(sensible.)45
b(The)39 b(basic)h(rule)f(of)h(thumb)e(is)j(ne)n(v)o(er)357
4040 y(to)52 b(write)g(as)g(the)g(leftmost)g(goal)f(of)h(the)g(body)e
(something)g(that)i(is)h(identical)357 4139 y(\(modulo)40
b(v)n(ariable)h(names\))h(with)h(the)f(goal)g(gi)n(v)o(en)f(in)i(the)f
(head.)50 b(Rather)m(,)42 b(place)357 4239 y(such)g(goals)h(\(which)e
(trigger)h(recursi)n(v)o(e)f(calls\))i(as)g(f)o(ar)g(as)g(possible)g
(to)n(w)o(ards)f(the)357 4339 y(right)h(of)g(the)h(tail.)54
b(That)43 b(is,)i(place)f(them)f(after)g(the)h(goals)f(which)g(test)i
(for)e(the)357 4438 y(v)n(arious)d(\(non-recursi)n(v)o(e\))d
(termination)j(conditions.)45 b(Doing)40 b(this)i(gi)n(v)o(es)f(Prolog)
f(a)357 4538 y(sporting)e(chance)h(of)g(\002ghting)g(it')-5
b(s)41 b(w)o(ay)e(through)f(your)g(recursi)n(v)o(e)h(de\002nitions)g
(to)357 4637 y(\002nd)h(solutions.)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 64 76
TeXDict begin 64 75 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(64)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(3)99 b(Exer)n(cises)806
1214 y Fv(Exer)o(cise)40 b(3.1.)95 b Fw(In)41 b(the)g(te)o(xt,)f(we)i
(discussed)e(the)h(predicate)p 0 TeXcolorgray 357 1121
118 4 v 357 1239 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 361 1239 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray -2367 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 471 1239 4 118 v 357 1242 118 4 v 0 TeXcolorgray
971 1361 a Fs(descend\(X,Y\))36 b(:-)41 b(child\(X,Y\).)971
1461 y(descend\(X,Y\))36 b(:-)41 b(child\(X,Z\),)1677
1560 y(descend\(Z,Y\).)806 1708 y Fw(Suppose)e(we)j(reformulated)c
(this)j(predicate)f(as)i(follo)n(ws:)971 1855 y Fs(descend\(X,Y\))36
b(:-)41 b(child\(X,Y\).)971 1955 y(descend\(X,Y\))36
b(:-)41 b(descend\(X,Z\),)1677 2054 y(descend\(Z,Y\).)806
2235 y Fw(W)-7 b(ould)40 b(this)i(be)f(problematic?)806
2368 y Fv(Exer)o(cise)k(3.2.)111 b Fw(Do)46 b(you)g(kno)n(w)f(these)h
(w)o(ooden)f(Russian)h(dolls)h(\(Matryoshka)p 0 TeXcolorgray
357 2275 V 357 2393 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 361 2393 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray -3022 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 471 2393 4 118 v 357 2396 118 4 v 0 TeXcolorgray
806 2467 a Fw(dolls\))e(where)f(the)i(smaller)f(ones)g(are)g(contained)
f(in)i(bigger)e(ones?)59 b(Here)45 b(is)h(a)806 2567
y(schematic)40 b(picture:)900 3626 y @beginspecial 0
@llx 0 @lly 183 @urx 200 @ury 1133 @rwi @setspecial
%%BeginDocument: dolls.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: dolls.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Mon Aug 30 20:15:57 2004
%%For: kris@tora (Kristina Striegnitz)
%%BoundingBox: 0 0 183 200
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 200 moveto 0 0 lineto 183 0 lineto 183 200 lineto closepath clip newpath
-88.7 289.3 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 0
% Arc
15.000 slw
n 2400.0 2118.8 468.8 163.7 16.3 arc
gs col0 s gr

% Polyline
n 1500 2700 m
 1725 4800 l gs col0 s gr 
% Polyline
n 3300 2700 m
 3075 4800 l gs col0 s gr 
% Polyline
n 1500 2700 m
 1950 2250 l gs col0 s gr 
% Polyline
n 2850 2250 m
 3300 2700 l gs col0 s gr 
% Polyline
n 1725 4800 m
 3075 4800 l gs col0 s gr 
% Arc
n 2402.5 2349.8 383.8 163.8 16.2 arc
gs col0 s gr

% Polyline
n 1666 2825 m
 1850 4544 l gs col0 s gr 
% Polyline
n 3139 2825 m
 2955 4544 l gs col0 s gr 
% Polyline
n 1666 2825 m
 2034 2457 l gs col0 s gr 
% Polyline
n 2771 2457 m
 3139 2825 l gs col0 s gr 
% Polyline
n 1850 4544 m
 2955 4544 l gs col0 s gr 
% Arc
n 2400.0 2829.0 231.0 163.9 16.1 arc
gs col0 s gr

% Polyline
n 1957 3115 m
 2068 4148 l gs col0 s gr 
% Polyline
n 2843 3115 m
 2732 4148 l gs col0 s gr 
% Polyline
n 1957 3115 m
 2178 2893 l gs col0 s gr 
% Polyline
n 2622 2893 m
 2843 3115 l gs col0 s gr 
% Polyline
n 2068 4148 m
 2732 4148 l gs col0 s gr 
% Arc
n 2397.0 2563.2 308.2 163.8 16.2 arc
gs col0 s gr

% Polyline
n 1805 2947 m
 1952 4330 l gs col0 s gr 
% Polyline
n 2989 2947 m
 2842 4330 l gs col0 s gr 
% Polyline
n 1805 2947 m
 2101 2649 l gs col0 s gr 
% Polyline
n 2693 2649 m
 2989 2947 l gs col0 s gr 
% Polyline
n 1952 4330 m
 2842 4330 l gs col0 s gr 
% Polyline
gs  clippath
2476 1728 m 2498 1846 l 2780 1793 l 2534 1779 l 2758 1675 l cp
eoclip
n 2502 1785 m
 3375 1620 l gs col0 s gr gr

% arrowhead
n 2758 1675 m 2534 1779 l 2780 1793 l 2758 1675 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
2476 2056 m 2496 2174 l 2779 2127 l 2533 2108 l 2759 2008 l cp
eoclip
n 2501 2113 m
 3375 1965 l gs col0 s gr gr

% arrowhead
n 2759 2008 m 2533 2108 l 2779 2127 l 2759 2008 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
2431 2371 m 2446 2490 l 2731 2453 l 2486 2425 l 2716 2334 l cp
eoclip
n 2454 2429 m
 3360 2310 l gs col0 s gr gr

% arrowhead
n 2716 2334 m 2486 2425 l 2731 2453 l 2716 2334 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
2425 2692 m 2442 2811 l 2726 2772 l 2481 2746 l 2710 2653 l cp
eoclip
n 2449 2750 m
 3360 2625 l gs col0 s gr gr

% arrowhead
n 2710 2653 m 2481 2746 l 2726 2772 l 2710 2653 l  cp gs 0.00 setgray ef gr  col0 s
/Times-Bold ff 270.00 scf sf
3480 1695 m
gs 1 -1 sc (katarina) col0 sh gr
/Times-Bold ff 270.00 scf sf
3495 2055 m
gs 1 -1 sc (olga) col0 sh gr
/Times-Bold ff 270.00 scf sf
3465 2370 m
gs 1 -1 sc (natasha) col0 sh gr
/Times-Bold ff 270.00 scf sf
3480 2715 m
gs 1 -1 sc (irina) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage

%%EndDocument
 @endspecial 100 x(First,)68 b(write)62 b(a)g(kno)n(wledge)e(base)i
(using)f(the)h(predicate)f Fs(directlyIn/2)806 3825 y
Fw(which)56 b(encodes)g(which)h(doll)f(is)i(directly)f(contained)e(in)i
(which)g(other)f(doll.)806 3925 y(Then,)k(de\002ne)c(a)i(recursi)n(v)o
(e)d(predicate)h Fs(in/2)o Fw(,)61 b(that)c(tells)i(us)e(which)g(doll)g
(is)806 4024 y(\(directly)d(or)i(indirectly\))e(contained)h(in)h(which)
f(other)h(dolls.)91 b(F)o(or)55 b(e)o(xample,)806 4124
y(the)75 b(query)g Fs(in\(katarina,nata)o(sh)o(a\))70
b Fw(should)75 b(e)n(v)n(aluate)g(to)h(true,)83 b(while)806
4224 y Fs(in\(olga,)38 b(katarina\))f Fw(should)j(f)o(ail.)806
4357 y Fv(Exer)o(cise)g(3.3.)95 b Fw(W)-7 b(e)42 b(ha)n(v)o(e)f(the)f
(follo)n(wing)g(kno)n(wledge)f(base:)p 0 TeXcolorgray
357 4264 V 357 4381 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 361 4381 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray -2407 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 471 4381 4 118 v 357 4384 118 4 v 0 TeXcolorgray
971 4504 a Fs(directTrain\(saar)o(br)o(uec)o(ke)o(n,d)o(ud)o(we)o(ile)o
(r\))o(.)971 4604 y(directTrain\(forb)o(ac)o(h,s)o(aa)o(rbr)o(ue)o(ck)o
(en\))o(.)971 4703 y(directTrain\(frey)o(mi)o(ng,)o(fo)o(rba)o(ch)o
(\).)971 4803 y(directTrain\(stAv)o(ol)o(d,f)o(re)o(ymi)o(ng)o(\).)971
4902 y(directTrain\(fahl)o(qu)o(emo)o(nt)o(,st)o(Av)o(ol)o(d\).)971
5002 y(directTrain\(metz)o(,f)o(ahl)o(qu)o(emo)o(nt)o(\).)971
5102 y(directTrain\(nanc)o(y,)o(met)o(z\))o(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 65 77
TeXDict begin 65 76 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(65)p
0 TeXcolorgray 451 1051 a(That)40 b(is,)h(this)g(kno)n(wledge)d(base)j
(holds)f(f)o(acts)h(about)e(to)n(wns)h(it)h(is)g(possible)g(to)357
1151 y(tra)n(v)o(el)48 b(between)h(by)f(taking)g(a)i
Ft(dir)m(ect)h Fw(train.)69 b(But)50 b(of)f(course,)h(we)f(can)g(tra)n
(v)o(el)357 1250 y(further)55 b(by)i(chaining)f(together)g(direct)h
(train)g(journe)o(ys.)93 b(Write)57 b(a)h(recursi)n(v)o(e)357
1350 y(predicate)51 b Fs(travelFromTo/2)d Fw(that)53
b(tells)h(us)f(when)f(we)h(can)g(tra)n(v)o(el)g(by)f(train)357
1449 y(between)40 b(tw)o(o)h(to)n(wns.)46 b(F)o(or)40
b(e)o(xample,)f(when)i(gi)n(v)o(en)e(the)i(query)522
1612 y Fs(travelFromTo\(nan)o(cy,)o(sa)o(arb)o(ru)o(ec)o(ken)o(\).)357
1774 y Fw(it)g(should)f(reply)g(yes.)357 1907 y Fv(Exer)o(cise)60
b(3.4.)154 b Fw(De\002ne)61 b(a)g(predicate)f Fs(greater_than/2)55
b Fw(that)61 b(tak)o(es)g(tw)o(o)p 0 TeXcolorgray 3286
1814 118 4 v 3286 1932 4 118 v 0 0 0 0.05 TeXcolorcmyk
0 0 0 0.05 TeXcolorcmyk 3290 1932 112 118 v 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray 359 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 3401 1932 4 118 v 3286 1935 118 4 v 0
TeXcolorgray 357 2007 a Fw(numerals)56 b(in)i(the)f(notation)f(that)i
(we)f(introduced)e(in)j(the)f(te)o(xt)h(\(that)f(is,)62
b(0,)357 2106 y(succ\(0\),)39 b(succ\(succ\(0\)\),)f(and)i(so)g(on\))g
(as)h(ar)o(guments)e(and)g(decides)h(whether)g(the)357
2206 y(\002rst)h(one)g(is)h(greater)e(than)g(the)h(second)f(one.)45
b(F)o(or)c(e)o(xample:)522 2369 y Fs(?-)g(greater_than\(suc)o(c\()o(su)
o(cc\()o(su)o(cc\()o(0\))o(\)\))o(,su)o(cc)o(\(0\))o(\).)522
2468 y(yes)522 2568 y(?-)g(greater_than\(suc)o(c\()o(su)o(cc\()o(0\))o
(\),s)o(uc)o(c\()o(suc)o(c\()o(suc)o(c\()o(0\)\))o(\)\))o(.)522
2667 y(no)357 2863 y Fv(Exer)o(cise)55 b(3.5.)140 b Fw(Binary)55
b(trees)h(are)g(trees)g(where)f(all)h(internal)f(nodes)g(ha)n(v)o(e)p
0 TeXcolorgray 3286 2770 V 3286 2888 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 3290 2888 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 358 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401 2888 4 118
v 3286 2891 118 4 v 0 TeXcolorgray 357 2963 a Fw(e)o(xactly)g(tw)o(o)i
(children.)91 b(The)56 b(smallest)h(binary)e(trees)i(consist)f(of)h
(only)e(one)357 3062 y(leaf)69 b(node.)128 b(W)-7 b(e)71
b(will)e(represent)f(leaf)h(nodes)f(as)i Fs(leaf\(Label\))l
Fw(.)130 b(F)o(or)357 3162 y(instance,)61 b Fs(leaf\(3\))56
b Fw(and)i Fs(leaf\(7\))d Fw(are)j(leaf)g(nodes,)k(and)57
b(therefore)f(small)357 3262 y(binary)k(trees.)106 b(Gi)n(v)o(en)61
b(tw)o(o)g(binary)f(trees)h Fs(B1)g Fw(and)g Fs(B2)g
Fw(we)g(can)g(combine)357 3361 y(them)71 b(into)h(one)f(binary)g(tree)h
(using)f(the)h(functor)e Fs(tree/2)g Fw(as)j(follo)n(ws:)357
3461 y Fs(tree\(B1,B2\))-5 b Fw(.)46 b(So,)40 b(from)f(the)h(lea)n(v)o
(es)g Fs(leaf\(1\))e Fw(and)h Fs(leaf\(2\))f Fw(we)i(can)g(b)n(uild)357
3560 y(the)52 b(binary)f(tree)h Fs(tree\(leaf\(1\),lea)o(f\(2)o(\)\))-7
b Fw(.)80 b(And)52 b(from)f(the)h(binary)f(trees)357
3660 y Fs(tree\(leaf\(1\),le)o(af\()o(2\))o(\))e Fw(and)54
b Fs(leaf\(4\))e Fw(we)i(can)g(b)n(uild)g(the)h(binary)e(tree)357
3760 y Fs(tree\(tree\(leaf\()o(1\),)35 b(leaf\(2\)\),leaf\(4\))o(\))-6
b Fw(.)451 3859 y(No)n(w)h(,)40 b(de\002ne)h(a)g(predicate)f
Fs(swap/2)m Fw(,)i(which)e(produces)f(the)i(mirror)f(image)g(of)357
3959 y(the)h(binary)e(tree)i(that)g(is)h(its)g(\002rst)g(ar)o(gument.)h
(F)o(or)e(e)o(xample:)522 4121 y Fs(?-)g(swap\(tree\(tree\(l)o(ea)o
(f\()o(1\),)35 b(leaf\(2\)\),)j(leaf\(4\)\),T\).)522
4221 y(T)j(=)g(tree\(leaf\(4\),)36 b(tree\(leaf\(2\),)h(leaf\(1\)\)\).)
522 4321 y(yes)357 4574 y Fk(4)99 b(Practical)41 b(Session)357
4703 y Fw(By)i(no)n(w)-5 b(,)43 b(you)f(should)g(feel)h(more)f(at)h
(home)g(with)g(writing)f(and)h(running)e(basic)357 4803
y(Prolog)50 b(programs.)73 b(In)51 b(this)h(practical)e(session)h(we)h
(\002rst)f(suggest)g(tw)o(o)g(series)357 4902 y(of)f(k)o(e)o(yboard)e
(e)o(x)o(ercises)h(which)h(will)h(help)f(you)f(get)i(f)o(amiliar)f
(with)g(recursi)n(v)o(e)357 5002 y(de\002nitions)40 b(in)h(Prolog,)e
(and)h(then)h(gi)n(v)o(e)e(you)h(some)h(programming)c(problems)j(to)357
5102 y(solv)o(e.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 66 78
TeXDict begin 66 77 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(66)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(First)73 b(the)f(k)o(e)o(yboard)d(e)o(x)o
(ercises.)138 b(As)72 b(recursi)n(v)o(e)f(programming)d(is)73
b(so)806 1151 y(fundamental)48 b(to)k(Prolog,)h(it)f(is)g(important)e
(that)h(you)f(ha)n(v)o(e)h(a)h(\002rm)f(grasp)g(of)806
1250 y(what)c(it)i(in)m(v)n(olv)o(es.)64 b(In)48 b(particular)m(,)f(it)
i(is)f(important)e(that)i(you)f(understand)e(the)806
1350 y(process)c(of)g(v)n(ariable)f(instantiation)h(when)g(recursi)n(v)
o(e)f(de\002nitions)g(are)i(used,)f(and)806 1449 y(that)57
b(you)g(understand)f(why)h(the)g(order)g(of)g(goals)h(in)g(rules)g(can)
f(mak)o(e)g(the)806 1549 y(dif)n(ference)38 b(between)j(termination)e
(and)h(non-termination.)j(So:)p 0 TeXcolorgray 909 1721
a(1.)p 0 TeXcolorgray 41 w(Load)84 b Fs(descend1.pl)-5
b Fw(,)96 b(turn)84 b(on)g Fs(trace)n Fw(,)95 b(and)84
b(pose)g(the)h(query)1013 1821 y Fs(descend\(anne,emi)o(ly\))-7
b Fw(.)85 b(Count)53 b(ho)n(w)h(man)o(y)e(steps)j(it)f(tak)o(es)h
(Prolog)1013 1920 y(to)c(w)o(ork)f(out)h(the)g(answer)f(\(that)h(is,)j
(ho)n(w)d(man)o(y)e(times)j(do)e(you)g(ha)n(v)o(e)1013
2020 y(to)e(hit)h(the)f(return)f(k)o(e)o(y\).)66 b(No)n(w)48
b(turn)g Fs(trace)f Fw(of)n(f)g(and)h(pose)g(the)g(query)1013
2120 y Fs(descend\(X,Y\))-5 b Fw(.)46 b(Ho)n(w)41 b(man)o(y)f(answers)h
(are)g(there?)p 0 TeXcolorgray 909 2282 a(2.)p 0 TeXcolorgray
41 w(Load)g Fs(descend2.pl)l Fw(.)49 b(This)42 b(is)h(the)f(v)n(ariant)
f(of)g Fs(descend1.pl)d Fw(with)k(the)1013 2381 y(rule)52
b(order)e(re)n(v)o(ersed.)77 b(Repeat)52 b(the)g(traces)g(you)f(ha)n(v)
o(e)g(carried)g(out)g(for)1013 2481 y Fs(descend1.pl)l
Fw(,)41 b(and)f(compare)g(the)g(results.)p 0 TeXcolorgray
909 2643 a(3.)p 0 TeXcolorgray 41 w(Load)f Fs(descend3.pl)l
Fw(.)46 b(This)40 b(is)h(the)f(v)n(ariant)f(of)h Fs(descend2.pl)c
Fw(in)k(which)1013 2742 y(the)i(goal)f(order)f(within)i(the)f(recursi)n
(v)o(e)f(rule)i(is)g(switched,)g(resulting)e(in)i(a)1013
2842 y(left)36 b(recursi)n(v)o(e)f(rule.)43 b(Because)36
b(of)g(this,)h(e)n(v)o(en)e(for)g(such)h(simple)g(queries)f(as)1013
2942 y Fs(descend\(anne,bri)o(dge)o(t\))-7 b Fw(,)42
b(Prolog)f(will)h(not)f(terminate.)46 b(Step)c(through)1013
3041 y(an)f(e)o(xample,)e(using)i Fs(trace)n Fw(,)g(to)g(con\002rm)f
(this.)p 0 TeXcolorgray 909 3203 a(4.)p 0 TeXcolorgray
41 w(Load)i Fs(descend4.pl)-5 b Fw(.)51 b(This)43 b(is)g(the)g(v)n
(ariant)e(of)h Fs(descend3.pl)d Fw(obtained)1013 3303
y(by)j(switching)g(the)g(rule)h(order)-5 b(.)49 b(So)43
b Fs(descend4.pl)38 b Fw(also)43 b(contains)e(a)i(left)1013
3402 y(recursi)n(v)o(e)48 b(rule,)j(and)e(does)g(not)g(terminate)f(on)h
(all)h(input.)70 b(But)50 b(it)g(does)1013 3502 y(terminate)j(on)g
(some)h(input)f(where)g Fs(descend3.pl)d Fw(does)k(not.)84
b(Which)1013 3602 y(e)o(xtra)40 b(solutions)h(does)f(it)i(\002nd?)900
3774 y(As)49 b(we)g(said)f(in)g(the)h(te)o(xt,)g(goal)f(ordering,)g
(not)f(rule)h(ordering)e(is)j(what)g(is)806 3873 y(truly)h
(procedurally)e(signi\002cant.)76 b(But)51 b(with)h(non-terminating)47
b(programs,)52 b(rule)806 3973 y(ordering)58 b(changes)h(can)i(ha)n(v)o
(e)e(une)o(xpected)f(ef)n(fects.)104 b(Recall)61 b(the)g(successor)806
4073 y(program)38 b(discussed)j(in)g(the)g(te)o(xt)g(\(let')-5
b(s)41 b(call)h(it)g Fs(numeral1.pl)-5 b Fw(\):)971 4230
y Fs(numeral\(0\).)971 4330 y(numeral\(succ\(X\)\))35
b(:-)40 b(numeral\(X\).)806 4488 y Fw(Let')-5 b(s)33
b(sw)o(ap)g(the)g(order)f(of)g(the)h(tw)o(o)g(clauses,)i(and)d(call)i
(the)e(result)h Fs(numeral2.pl)l Fw(:)971 4645 y Fs
(numeral\(succ\(X\)\))i(:-)40 b(numeral\(X\).)971 4745
y(numeral\(0\).)806 4902 y Fw(Clearly)f(the)h(declarati)n(v)o(e,)e(or)i
(logical,)f(content)g(of)h(this)g(program)e(is)j(e)o(xactly)d(the)806
5002 y(same)44 b(as)h(the)f(earlier)g(v)o(ersion.)54
b(But)44 b(what)g(are)g(the)h(procedural)c(dif)n(ferences,)i(if)806
5102 y(an)o(y?)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 67 79
TeXDict begin 67 78 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(67)p
0 TeXcolorgray 0 TeXcolorgray 460 1051 a(1.)p 0 TeXcolorgray
41 w(Create)37 b(a)g(\002le)g(containing)d Fs(numeral2.pl)l
Fw(,)j(load)f(it,)i(and)e(in)m(v)o(estigate)f(what)564
1151 y(happens)42 b(if)i(we)g(pose)f(queries)g(about)f
Ft(speci\002c)h Fw(numerals.)52 b(F)o(or)43 b(e)o(xample,)564
1250 y(suppose)d(we)i(ask:)730 1418 y Fs(numeral\(succ\(su)o(cc\()o(su)
o(cc)o(\(0\))o(\)\))o(\).)564 1586 y Fw(Do)47 b Fs(numeral1.pl)42
b Fw(and)j Fs(numeral2.pl)e Fw(beha)n(v)o(e)i(in)h(the)g(same)h(w)o(ay)
f(on)564 1686 y(such)41 b(input?)p 0 TeXcolorgray 460
1854 a(2.)p 0 TeXcolorgray 41 w(Second,)e(look)g(at)h(what)f(happens)f
(if)i(we)g(try)g(to)f Ft(g)o(ener)o(ate)g Fw(numerals,)g(that)564
1954 y(is,)j(suppose)e(we)h(pose)g(the)g(query)730 2122
y Fs(numeral\(X\).)564 2290 y Fw(Do)g(the)g(programs)e(display)i
(identical)f(beha)n(viour?)451 2475 y(Here)h(are)g(some)g(programs)e
(for)h(you)g(to)h(try)g(your)f(hand)g(at.)p 0 TeXcolorgray
460 2642 a(1.)p 0 TeXcolorgray 41 w(Imagine)h(that)h(the)g(follo)n
(wing)f(kno)n(wledge)f(base)i(describes)g(a)g(maze.)49
b(The)564 2742 y(f)o(acts)j(determine)e(which)h(points)g(are)h
(connected,)f(that)h(is,)j(from)50 b(which)564 2841 y(points)38
b(you)f(can)h(get)g(to)g(which)f(other)g(points)h(in)g(one)f(step.)45
b(Furthermore,)564 2941 y(imagine)i(that)h(all)h(paths)f(are)g(one-w)o
(ay)e(streets,)k(so)f(that)f(you)f(can)h(only)564 3041
y(w)o(alk)38 b(them)f(in)h(one)f(direction.)44 b(So,)38
b(you)f(can)g(get)h(from)f(point)g(1)h(to)f(point)564
3140 y(2,)k(b)n(ut)g(not)g(the)g(other)f(w)o(ay)h(round.)730
3308 y Fs(connected\(1,2\).)730 3408 y(connected\(3,4\).)730
3508 y(connected\(5,6\).)730 3607 y(connected\(7,8\).)730
3707 y(connected\(9,10\))o(.)730 3807 y(connected\(12,13)o(\).)730
3906 y(connected\(13,14)o(\).)730 4006 y(connected\(15,16)o(\).)730
4105 y(connected\(17,18)o(\).)730 4205 y(connected\(19,20)o(\).)730
4305 y(connected\(4,1\).)730 4404 y(connected\(6,3\).)730
4504 y(connected\(4,7\).)730 4604 y(connected\(6,11\))o(.)730
4703 y(connected\(14,9\))o(.)730 4803 y(connected\(11,15)o(\).)730
4902 y(connected\(16,12)o(\).)730 5002 y(connected\(14,17)o(\).)730
5102 y(connected\(16,19)o(\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 68 80
TeXDict begin 68 79 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(68)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 1013 1051 a(Write)k(a)f(predicate)f Fs(path/2)f
Fw(that)i(tells)h(you)e(from)g(which)g(points)g(in)h(the)1013
1151 y(maze)49 b(you)f(can)h(get)g(to)g(which)f(other)g(points)h(when)f
(chaining)g(together)1013 1250 y(connections)37 b(gi)n(v)o(en)g(in)i
(the)g(abo)o(v)o(e)e(kno)n(wledge)g(base.)45 b(Can)39
b(you)f(get)h(from)1013 1350 y(point)53 b(5)g(to)g(point)g(10?)82
b(Which)53 b(other)g(point)f(can)h(you)f(get)i(to)f(when)1013
1449 y(starting)44 b(at)g(point)f(1?)55 b(And)43 b(which)h(points)f
(can)h(be)g(reached)e(from)h(point)1013 1549 y(13?)p
0 TeXcolorgray 909 1709 a(2.)p 0 TeXcolorgray 41 w(W)-7
b(e)42 b(are)f(gi)n(v)o(en)f(the)h(follo)n(wing)e(kno)n(wledge)g(base)i
(of)f(tra)n(v)o(el)h(information:)1178 1870 y Fs(byCar\(auckland,ha)o
(mil)o(to)o(n\))o(.)1178 1969 y(byCar\(hamilton,ra)o(gla)o(n\))o(.)1178
2069 y(byCar\(valmont,saa)o(rbr)o(ue)o(ck)o(en\))o(.)1178
2169 y(byCar\(valmont,met)o(z\).)1178 2368 y(byTrain\(metz,fran)o(kfu)o
(rt)o(\).)1178 2468 y(byTrain\(saarbruec)o(ken)o(,f)o(ra)o(nkf)o(ur)o
(t\).)1178 2567 y(byTrain\(metz,pari)o(s\).)1178 2667
y(byTrain\(saarbruec)o(ken)o(,p)o(ar)o(is\))o(.)1178
2866 y(byPlane\(frankfurt)o(,ba)o(ng)o(ko)o(k\).)1178
2966 y(byPlane\(frankfurt)o(,si)o(ng)o(ap)o(ore)o(\).)1178
3065 y(byPlane\(paris,los)o(Ang)o(el)o(es)o(\).)1178
3165 y(byPlane\(bangkok,a)o(uck)o(la)o(nd)o(\).)1178
3265 y(byPlane\(singapore)o(,au)o(ck)o(la)o(nd\))o(.)1178
3364 y(byPlane\(losAngele)o(s,a)o(uc)o(kl)o(and)o(\).)1013
3525 y Fw(Write)34 b(a)f(predicate)f Fs(travel/2)f Fw(which)i
(determines)f(whether)g(it)i(is)g(possible)1013 3624
y(to)39 b(tra)n(v)o(el)g(from)f(one)h(place)g(to)g(another)f(by)h
(chaining)e(together)h(car)m(,)h(train,)1013 3724 y(and)g(plane)h
(journe)o(ys.)j(F)o(or)d(e)o(xample,)e(your)h(program)f(should)h
(answer)g(yes)1013 3824 y(to)i(the)g(query)f Fs(travel\(valmont,)o(rag)
o(la)o(n\))-6 b Fw(.)p 0 TeXcolorgray 909 3984 a(3.)p
0 TeXcolorgray 41 w(So,)40 b(by)f(using)h Fs(travel/2)d
Fw(to)j(query)e(the)i(abo)o(v)o(e)e(database,)h(you)g(can)h(\002nd)1013
4084 y(out)k(that)g(it)h(is)h(possible)e(to)g(go)g(from)f(V)-9
b(almont)43 b(to)i(Raglan.)55 b(If)44 b(you)g(are)1013
4183 y(planning)g(such)h(a)i(v)n(o)o(yage,)e(that')-5
b(s)46 b(already)f(something)f(useful)h(to)h(kno)n(w)-5
b(,)1013 4283 y(b)n(ut)57 b(you)f(w)o(ould)g(probably)f(prefer)h(to)h
(ha)n(v)o(e)f(the)h(precise)f(route)h(from)1013 4382
y(V)-9 b(almont)46 b(to)h(Raglan.)63 b(Write)48 b(a)f(predicate)f
Fs(travel/3)e Fw(which)j(tells)g(you)1013 4482 y(which)36
b(route)h(to)g(tak)o(e)g(when)f(tra)n(v)o(elling)g(from)f(one)i(place)f
(to)i(another)-5 b(.)43 b(F)o(or)1013 4582 y(e)o(xample,)c(the)i
(program)e(should)h(respond)1178 4742 y Fs(X)i(=)f(go\(valmont,metz)o
(,)1469 4842 y(go\(metz,paris,)1594 4941 y(go\(paris,losAng)o(el)o
(es\))o(\)\))1013 5102 y Fw(to)g(the)g(query)f Fs(travel\(valmont,)o
(los)o(An)o(gel)o(es)o(,X\))-7 b Fw(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 69 81
TeXDict begin 69 80 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(3:)46 b(Recursion)1762 b(69)p
0 TeXcolorgray 0 TeXcolorgray 460 1051 a(4.)p 0 TeXcolorgray
41 w(Extend)47 b(the)i(predicate)e Fs(travel/3)f Fw(so)j(that)f(it)h
(not)f(only)g(tells)h(you)f(the)564 1151 y(route)42 b(to)h(tak)o(e)g
(to)g(get)g(from)e(one)h(place)h(to)g(another)m(,)e(b)n(ut)i(also)g
Ft(how)g Fw(you)564 1250 y(ha)n(v)o(e)h(to)g(tra)n(v)o(el.)54
b(That)43 b(is,)j(the)d(ne)n(w)h(program)e(should)h(let)h(us)g(kno)n(w)
-5 b(,)43 b(for)564 1350 y(each)d(stage)h(of)f(the)h(v)n(o)o(yage,)e
(whether)h(we)g(need)g(to)h(tra)n(v)o(el)f(by)g(car)m(,)g(train,)564
1449 y(or)h(plane.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 70 82
TeXDict begin 70 81 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 71 83
TeXDict begin 71 82 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(4)2530 2603 y Fm(Lists)p 357 2785 2599
24 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
714 4554 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
145.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial 797
3599 a Fl(This)f(chapter)h(has)g(three)h(main)e(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3748
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)28 b(intro)s(duce)g(lists,)k(an)c
(imp)s(o)m(rtant)h(recursive)g(data)1004 3865 y(structure)44
b(often)d(used)i(in)e(Prolog)g(p)m(rogramming.)p 0 TeXcolorgray
887 4047 a(2.)p 0 TeXcolorgray 41 w(T)-8 b(o)46 b(de\014ne)j(the)e
Fg(member/2)j Fl(p)m(redicate,)g(a)d(funda-)1004 4164
y(mental)42 b(Prolog)f(to)s(ol)g(fo)m(r)g(manipulating)h(lists.)p
0 TeXcolorgray 887 4346 a(3.)p 0 TeXcolorgray 41 w(T)-8
b(o)35 b(intro)s(duce)i(the)g(idea)f(of)g(recursing)h(do)m(wn)g(lists.)
p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 72 84
TeXDict begin 72 83 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(72)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Lists)806 1181 y
Fw(As)48 b(its)g(name)e(suggests,)j(a)f(list)g(is)g(just)g(a)g(plain)f
(old)g(list)h(of)f(items.)65 b(Slightly)806 1280 y(more)56
b(precisely)-5 b(,)60 b(it)e(is)g(a)f(\002nite)h(sequence)e(of)h
(elements.)94 b(Here)57 b(are)g(some)806 1380 y(e)o(xamples)39
b(of)i(lists)h(in)f(Prolog:)971 1563 y Fs([mia,)e(vincent,)g(jules,)g
(yolanda])971 1762 y([mia,)g(robber\(honey_bunn)o(y\))o(,)d(X,)k(2,)h
(mia])971 1961 y([])971 2161 y([mia,)e([vincent,)f(jules],)h([butch,)f
(girlfriend\(butch\))o(]])971 2360 y([[],)i(dead\(z\),)e([2,)i([b,)g
(c]],)g([],)h(Z,)f([2,)h([b,)f(c]]])900 2543 y Fw(W)-7
b(e)42 b(can)f(learn)f(some)h(important)e(things)i(from)f(these)h(e)o
(xamples.)p 0 TeXcolorgray 909 2709 a(1.)p 0 TeXcolorgray
41 w(W)-7 b(e)37 b(can)f(specify)f(lists)i(in)f(Prolog)f(by)h
(enclosing)e(the)i(elements)g(of)f(the)h(list)1013 2809
y(in)48 b(square)e(brack)o(ets)h(\(that)g(is,)j(the)e(symbols)e
Fs([)i Fw(and)f Fs(])o Fw(\).)66 b(The)47 b(elements)1013
2909 y(are)41 b(separated)e(by)i(commas.)j(F)o(or)d(e)o(xample,)e(the)h
(\002rst)i(list)g(sho)n(wn)d(abo)o(v)o(e,)1013 3008 y
Fs([mia,)h(vincent,)e(jules,)h(yolanda])l Fw(,)47 b(is)e(a)g(list)h
(with)f(four)f(elements,)1013 3108 y(namely)e Fs(mia)n
Fw(,)i Fs(vincent)m Fw(,)f Fs(jules)n Fw(,)g(and)f Fs(yolanda)m
Fw(.)51 b(The)43 b(length)e(of)h(a)h(list)1013 3208 y(is)f(the)f
(number)e(of)i(elements)g(it)g(has,)g(so)h(our)e(\002rst)i(e)o(xample)d
(is)j(a)g(list)g(of)1013 3307 y(length)e(four)-5 b(.)p
0 TeXcolorgray 909 3474 a(2.)p 0 TeXcolorgray 41 w(From)26
b Fs([mia,robber\(hon)o(ey_)o(bu)o(nny)o(\),)o(X,2)o(,m)o(ia)o(])-6
b Fw(,)29 b(our)d(second)f(e)o(xample,)1013 3573 y(we)40
b(learn)f(that)h(all)g(sorts)g(of)f(Prolog)f(objects)i(can)f(be)g
(elements)g(of)h(a)g(list.)1013 3673 y(The)i(\002rst)g(element)f(of)h
(this)g(list)h(is)g Fs(mia)o Fw(,)f(an)g(atom;)g(the)g(second)f
(element)1013 3772 y(is)e Fs(robber\(honey_bun)o(ny\))-7
b Fw(,)39 b(a)g(comple)o(x)d(term;)j(the)f(third)f(element)h(is)h
Fs(X)o Fw(,)1013 3872 y(a)44 b(v)n(ariable;)g(the)g(fourth)e(element)h
(is)h Fs(2)p Fw(,)h(a)f(number)-5 b(.)52 b(Moreo)o(v)o(er)m(,)41
b(we)j(also)1013 3972 y(learn)h(that)g(the)g(same)g(item)g(may)f(occur)
g(more)g(than)h(once)f(in)h(the)g(same)1013 4071 y(list:)63
b(for)48 b(e)o(xample,)h(the)g(\002fth)g(element)f(of)h(this)g(list)h
(is)g Fs(mia)o Fw(,)h(which)e(is)1013 4171 y(same)41
b(as)h(the)f(\002rst)h(element.)p 0 TeXcolorgray 909
4337 a(3.)p 0 TeXcolorgray 41 w(The)37 b(third)f(e)o(xample)g(sho)n(ws)
h(that)g(there)g(is)h(a)f(special)h(list,)g(the)f(empty)g(list.)1013
4437 y(The)45 b(empty)f(list)i(\(as)f(its)h(name)e(suggests\))h(is)h
(the)f(list)h(that)f(contains)f(no)1013 4537 y(elements.)62
b(What)47 b(is)g(the)g(length)e(of)i(the)f(empty)g(list?)63
b(Zero,)47 b(of)f(course)1013 4636 y(\(for)37 b(the)h(length)f(of)h(a)h
(list)g(is)g(the)f(number)e(of)i(members)f(it)h(contains,)g(and)1013
4736 y(the)j(empty)f(list)i(contains)e(nothing\).)p 0
TeXcolorgray 909 4902 a(4.)p 0 TeXcolorgray 41 w(The)62
b(fourth)e(e)o(xample)h(teaches)h(us)g(something)f(e)o(xtremely)f
(important:)1013 5002 y(lists)46 b(can)e(contain)f(other)h(lists)h(as)g
(elements.)56 b(F)o(or)44 b(e)o(xample,)f(the)h(second)1013
5102 y(element)c(of)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 73 85
TeXDict begin 73 84 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(4:)46 b(Lists)1939 b(73)p 0
TeXcolorgray 730 1051 a Fs([mia,)39 b([vincent,)f(jules],)g
([butch,girlfriend)o(\(bu)o(tc)o(h\)])564 1212 y Fw(is)j
Fs([vincent,jules])-6 b Fw(.)46 b(The)40 b(third)g(is)h
Fs([butch,girlfrie)o(nd\()o(bu)o(tch)o(\)])-7 b Fw(.)564
1342 y(What)39 b(is)g(the)g(length)e(of)h(the)h(fourth)d(list?)46
b(The)38 b(answer)g(is:)46 b(three.)e(If)39 b(you)564
1442 y(thought)44 b(it)i(w)o(as)g(\002)n(v)o(e)g(\(or)e(indeed,)i(an)o
(ything)d(else\))j(you')l(re)d(not)i(thinking)564 1542
y(about)54 b(lists)i(in)f(the)g(right)f(w)o(ay)-5 b(.)87
b(The)55 b(elements)g(of)f(the)h(list)h(are)f(the)564
1641 y(things)36 b(between)f(the)h(outermost)e(square)h(brack)o(ets)g
(separated)g(by)h(commas.)564 1741 y(So)46 b(this)g(list)h(contains)d
Ft(thr)m(ee)i Fw(elements:)55 b(the)45 b(\002rst)i(element)e(is)h
Fs(mia)o Fw(,)h(the)564 1840 y(second)52 b(element)g(is)i
Fs([vincent,)38 b(jules])m Fw(,)56 b(and)d(the)f(third)h(element)f(is)
564 1940 y Fs([butch,)39 b(girlfriend\(butch)o(\)])-7
b Fw(.)p 0 TeXcolorgray 460 2101 a(5.)p 0 TeXcolorgray
41 w(The)45 b(last)h(e)o(xample)d(mix)o(es)i(all)h(these)f(ideas)g
(together)-5 b(.)57 b(W)-7 b(e)46 b(ha)n(v)o(e)f(here)f(a)564
2201 y(list)39 b(which)f(contains)f(the)h(empty)f(list)i(\(in)f(f)o
(act,)h(it)f(contains)g(it)g(twice\),)h(the)564 2300
y(comple)o(x)k(term)h Fs(dead\(z\))m Fw(,)h(tw)o(o)f(copies)g(of)g(the)
g(list)i Fs([2,)40 b([b,)g(c]])o Fw(,)45 b(and)564 2400
y(the)40 b(v)n(ariable)f Fs(Z)p Fw(.)46 b(Note)40 b(that)g(the)g(third)
g(\(and)f(the)h(last\))g(elements)g(are)g(lists)564 2500
y(which)h(themselv)o(es)f(contain)g(lists)i(\(namely)e
Fs([b,)g(c])o Fw(\).)451 2656 y(No)n(w)e(for)f(an)h(important)e(point.)
44 b(An)o(y)37 b(non-empty)e(list)j(can)g(be)g(thought)e(of)h(as)357
2755 y(consisting)44 b(of)g(tw)o(o)h(parts:)53 b(the)45
b(head)f(and)g(the)h(tail.)57 b(The)45 b(head)f(is)h(simply)g(the)357
2855 y(\002rst)38 b(item)g(in)g(the)f(list;)j(the)e(tail)g(is)h(e)n(v)o
(erything)c(else.)45 b(T)-7 b(o)38 b(put)f(it)h(more)f(precisely)-5
b(,)357 2955 y(the)48 b(tail)i(is)g(the)e(list)i(that)f(remains)f(when)
g(we)i(tak)o(e)e(the)h(\002rst)h(element)e(a)o(w)o(ay;)357
3054 y(that)41 b(is,)g Ft(the)g(tail)h(of)f(a)g(list)h(is)g(always)f(a)
g(list)p Fw(.)47 b(F)o(or)40 b(e)o(xample,)f(the)i(head)g(of)854
3225 y Fs([mia,)f(vincent,)e(jules,)h(yolanda])357 3395
y Fw(is)53 b Fs(mia)f Fw(and)g(the)h(tail)g(is)95 b Fs([vincent,)38
b(jules,)h(yolanda])l Fw(.)81 b(Similarly)-5 b(,)55 b(the)357
3494 y(head)40 b(of)522 3650 y Fs([[],)g(dead\(z\),)e([2,)i([b,)h(c]],)
e([],)i(Z,)f([2,)h([b,)f(c]]])357 3807 y Fw(is)45 b Fs([])o
Fw(,)g(and)e(the)h(tail)h(is)g Fs([dead\(z\),)38 b([2,[b,c]],[],Z,)o
([2,)o([b)o(,)d(c]]])o Fw(.)55 b(And)357 3906 y(what)39
b(are)f(the)h(head)g(and)f(the)h(tail)h(of)e(the)h(list)h
Fs([dead\(z\)])l Fw(?)46 b(W)-7 b(ell,)41 b(the)e(head)f(is)357
4006 y(the)45 b(\002rst)h(element)e(of)h(the)g(list,)i(which)e(is)h
Fs(dead\(z\))m Fw(,)h(and)d(the)i(tail)f(is)h(the)g(list)357
4105 y(that)38 b(remains)f(if)i(we)f(tak)o(e)g(the)h(head)e(a)o(w)o(ay)
-5 b(,)38 b(which,)g(in)g(this)h(case,)f(is)h(the)g(empty)357
4205 y(list)j Fs([])o Fw(.)451 4305 y(What)49 b(about)f(the)g(empty)g
(list?)70 b(It)49 b(has)g(neither)f(a)h(head)f(nor)g(a)h(tail.)69
b(That)357 4404 y(is,)45 b(the)f(empty)f(list)i(has)f(no)g(internal)f
(structure;)h(for)g(Prolog,)f Fs([])h Fw(is)g(a)h(special,)357
4504 y(particularly)60 b(simple,)67 b(list.)111 b(As)63
b(we)f(shall)h(learn)f(when)f(we)i(start)f(writing)357
4604 y(recursi)n(v)o(e)47 b(list)i(processing)f(programs,)g(this)h(f)o
(act)g(plays)f(an)g(important)f(role)i(in)357 4703 y(Prolog)40
b(programming.)451 4803 y(Prolog)65 b(has)h(a)g(special)f(b)n(uilt-in)g
(operator)f Fs(|)i Fw(which)f(can)h(be)f(used)h(to)357
4902 y(decompose)42 b(a)i(list)h(into)f(its)h(head)e(and)g(tail.)55
b(It)45 b(is)f(important)f(to)h(get)g(to)g(kno)n(w)357
5002 y(ho)n(w)g(to)h(use)g Fs(|)p Fw(,)h(for)e(it)i(is)g(a)f(k)o(e)o(y)
g(tool)f(for)h(writing)f(Prolog)g(list)i(manipulation)357
5102 y(programs.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 74 86
TeXDict begin 74 85 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(74)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(The)45 b(most)h(ob)o(vious)d(use)j(of)f
Fs(|)h Fw(is)h(to)e(e)o(xtract)g(information)e(from)i(lists.)60
b(W)-7 b(e)806 1151 y(do)44 b(this)i(by)f(using)g Fs(|)g
Fw(together)f(with)i(uni\002cation.)57 b(F)o(or)45 b(e)o(xample,)g(to)g
(get)g(hold)806 1250 y(of)d(the)h(head)f(and)h(tail)g(of)g
Fs([mia,vincent,)38 b(jules,yolanda])g Fw(we)43 b(can)g(pose)806
1350 y(the)d(follo)n(wing)g(query:)971 1532 y Fs(?-)h([Head|Tail])c(=)k
([mia,)e(vincent,)f(jules,)h(yolanda].)971 1732 y(Head)h(=)h(mia)971
1831 y(Tail)f(=)h([vincent,jules,y)o(ol)o(and)o(a])971
1931 y(yes)806 2113 y Fw(That)g(is,)h(the)f(head)g(of)g(the)g(list)h
(has)g(become)e(bound)f(to)j Fs(Head)e Fw(and)h(the)g(tail)h(of)806
2213 y(the)j(list)i(has)f(become)e(bound)g(to)h Fs(Tail)o
Fw(.)60 b(Note)45 b(that)h(there)f(is)i(nothing)c(special)806
2313 y(about)d Fs(Head)h Fw(and)g Fs(Tail)n Fw(,)h(the)o(y)f(are)g
(simply)h(v)n(ariables.)k(W)-7 b(e)43 b(could)e(just)h(as)g(well)806
2412 y(ha)n(v)o(e)e(posed)g(the)h(query:)971 2595 y Fs(?-)g([X|Y])e(=)i
([mia,)f(vincent,)e(jules,)h(yolanda].)971 2794 y(X)i(=)g(mia)971
2894 y(Y)g(=)g([vincent,jules,y)o(ola)o(nd)o(a])971 2993
y(yes)900 3176 y Fw(As)49 b(we)f(mentioned)d(abo)o(v)o(e,)j(only)f
(non-empty)e(lists)k(ha)n(v)o(e)e(heads)h(and)f(tails.)806
3276 y(If)40 b(we)i(try)e(to)h(use)h Fs(|)f Fw(to)g(pull)g
Fs([])f Fw(apart,)g(Prolog)g(will)i(f)o(ail:)971 3458
y Fs(?-)f([X|Y])e(=)i([].)971 3657 y(no)806 3840 y Fw(That)f(is,)i
(Prolog)e(treats)h Fs([])g Fw(as)h(a)f(special)g(list.)47
b(This)41 b(observ)n(ation)e(is)j(e)o(xtremely)806 3940
y(important.)i(W)-7 b(e')o(ll)42 b(see)f(why)f(later)-5
b(.)900 4039 y(Let')g(s)43 b(look)e(at)h(some)g(other)g(e)o(xamples.)48
b(W)-7 b(e)43 b(can)f(e)o(xtract)f(the)h(head)f(and)h(tail)806
4139 y(of)e(the)h(follo)n(wing)e(list)j(just)g(as)g(we)f(sa)o(w)g(abo)o
(v)o(e:)971 4321 y Fs(?-)g([X|Y])e(=)i([[],)f(dead\(z\),)e([2,)i([b,)h
(c]],)f([],)g(Z].)971 4521 y(X)h(=)g([])971 4620 y(Y)g(=)g
([dead\(z\),[2,[b,c)o(]],)o([])o(,_7)o(80)o(0])971 4720
y(Z)g(=)g(_7800)971 4820 y(yes)806 5002 y Fw(That)f(is:)47
b(the)40 b(head)g(of)g(the)h(list)h(is)f(bound)e(to)i
Fs(X)o Fw(,)g(the)g(tail)g(is)h(bound)c(to)j Fs(Y)p Fw(.)46
b(\(W)-7 b(e)806 5102 y(also)41 b(learn)f(that)h(Prolog)f(has)h(bound)e
Fs(Z)j Fw(to)f(the)g(internal)f(v)n(ariable)g Fs(_7800)n
Fw(.\))p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 75 87
TeXDict begin 75 86 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(4:)46 b(Lists)1939 b(75)p 0
TeXcolorgray 451 1051 a(But)48 b(we)g(can)f(do)g(a)h(lot)f(more)g(with)
h Fs(|)o Fw(;)j(it)d(really)f(is)i(a)f(\003e)o(xible)e(tool.)65
b(F)o(or)357 1151 y(e)o(xample,)37 b(suppose)h(we)h(w)o(anted)f(to)g
(kno)n(w)g(what)g(the)h(\002rst)g Ft(two)g Fw(elements)f(of)h(the)357
1250 y(list)49 b(were,)g(and)e(also)i(the)e(remainder)f(of)i(the)g
(list)h(after)f(the)g(second)f(element.)357 1350 y(Then)40
b(we')l(d)g(pose)h(the)g(follo)n(wing)e(query:)522 1539
y Fs(?-)i([X,Y)f(|)h(W])f(=)h([[],)f(dead\(z\),)f([2,)h([b,)g(c]],)g
([],)g(Z].)522 1738 y(X)h(=)g([])522 1838 y(Y)g(=)g(dead\(z\))522
1937 y(W)g(=)g([[2,[b,c]],[],_83)o(27)o(])522 2037 y(Z)g(=)g(_8327)522
2136 y(yes)451 2325 y Fw(That)49 b(is,)j(the)e(head)f(of)g(the)g(list)h
(is)h(bound)c(to)j Fs(X)o Fw(,)i(the)d(second)g(element)g(is)357
2425 y(bound)d(to)h Fs(Y)p Fw(,)j(and)d(the)h(remainder)e(of)h(the)h
(list)h(after)e(the)h(second)f(element)g(is)357 2524
y(bound)42 b(to)j Fs(W)g Fw(\(that)f(is,)i Fs(W)e Fw(is)i(the)e(list)i
(that)e(remains)g(when)g(we)h(tak)o(e)g(a)o(w)o(ay)f(the)357
2624 y(\002rst)j(tw)o(o)f(elements\).)61 b(So)47 b Fs(|)f
Fw(can)g(not)g(only)f(be)h(used)g(to)h(split)g(a)f(list)i(into)e(its)
357 2724 y(head)40 b(and)g(its)i(tail,)g(we)f(can)g(also)g(use)g(it)h
(to)f(split)h(a)f(list)h(at)f(an)o(y)g(point.)k(T)-7
b(o)41 b(the)357 2823 y(left)g(of)f Fs(|)h Fw(we)g(simply)g(indicate)f
(ho)n(w)g(man)o(y)g(elements)g(we)h(w)o(ant)g(to)g(tak)o(e)g(a)o(w)o
(ay)357 2923 y(from)g(the)i(front)f(of)g(the)h(list,)h(and)f(then)f(to)
h(right)f(of)h(the)f Fs(|)h Fw(we)g(will)h(get)f(what)357
3023 y(remains.)451 3124 y(This)50 b(is)g(a)g(good)e(time)i(to)f
(introduce)f(the)h(anon)o(ymous)e(v)n(ariable.)70 b(Suppose)357
3223 y(we)40 b(were)g(interested)f(in)h(getting)f(hold)h(of)f(the)h
(second)f(and)h(fourth)e(elements)i(of)357 3323 y(the)h(list:)522
3494 y Fs([[],)f(dead\(z\),)e([2,)i([b,)h(c]],)e([],)i(Z].)451
3664 y Fw(No)n(w)-5 b(,)40 b(we)i(could)e(\002nd)g(out)h(lik)o(e)g
(this:)522 3835 y Fs(?-)g([X1,X2,X3,X4)36 b(|)41 b(Tail])f(=)1020
3935 y([[],)g(dead\(z\),)e([2,)j([b,)f(c]],)g([],)g(Z].)522
4134 y(X1)h(=)g([])522 4234 y(X2)g(=)g(dead\(z\))522
4333 y(X3)g(=)g([2,[b,c]])522 4433 y(X4)g(=)g([])522
4533 y(Tail)f(=)h([_8910])522 4632 y(Z)g(=)g(_8910)522
4732 y(yes)451 4902 y Fw(Ok,)61 b(we)d(ha)n(v)o(e)f(got)g(the)g
(information)e(we)j(w)o(anted:)79 b(the)57 b(v)n(alues)g(we)h(are)357
5002 y(interested)48 b(in)h(are)g(bound)e(to)i(the)f(v)n(ariables)h
Fs(X2)f Fw(and)g Fs(X4)p Fw(.)70 b(But)49 b(we')l(v)o(e)f(got)g(a)357
5102 y(lot)h(of)h(other)e(information)f(too)i(\(namely)f(the)i(v)n
(alues)f(bound)e(to)j Fs(X1)o Fw(,)i Fs(X3)d Fw(and)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 76 88
TeXDict begin 76 87 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(76)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fs(Tail)n Fw(\).)63 b(And)47
b(perhaps)e(we')l(re)h(not)h(interested)f(in)h(all)g(this)h(other)e
(stuf)n(f.)63 b(If)46 b(so,)806 1151 y(it')-5 b(s)44
b(a)g(bit)f(silly)h(ha)n(ving)e(to)i(e)o(xplicitly)e(introduce)g(v)n
(ariables)g Fs(X1)o Fw(,)j Fs(X3)e Fw(and)g Fs(Tail)806
1250 y Fw(to)g(deal)g(with)h(it.)53 b(And)43 b(in)g(f)o(act,)h(there)f
(is)h(a)g(simpler)f(w)o(ay)g(to)g(obtain)g Ft(only)f
Fw(the)806 1350 y(information)c(we)j(w)o(ant:)46 b(we)c(can)f(pose)f
(the)h(follo)n(wing)f(query)f(instead:)971 1551 y Fs(?-)i([_,X,_,Y|_])c
(=)k([[],)e(dead\(z\),)g([2,)h([b,)g(c]],)g([],)g(Z].)971
1750 y(X)h(=)g(dead\(z\))971 1850 y(Y)g(=)g([])971 1950
y(Z)g(=)g(_9593)971 2049 y(yes)900 2251 y Fw(The)50 b
Fs(_)g Fw(symbol)f(\(that)h(is,)k(underscore\))47 b(is)k(the)g(anon)o
(ymous)c(v)n(ariable.)72 b(W)-7 b(e)806 2350 y(use)40
b(it)g(when)f(we)i(need)e(to)h(use)g(a)g(v)n(ariable,)f(b)n(ut)h(we')l
(re)f(not)g(interested)h(in)g(what)806 2450 y(Prolog)35
b(instantiates)h(the)h(v)n(ariable)e(to.)44 b(As)37 b(you)f(can)g(see)h
(in)f(the)h(abo)o(v)o(e)d(e)o(xample,)806 2549 y(Prolog)48
b(didn')o(t)f(bother)h(telling)h(us)h(what)f Fs(_)g Fw(w)o(as)h(bound)d
(to.)71 b(Moreo)o(v)o(er)m(,)48 b(note)806 2649 y(that)f(each)f
(occurrence)f(of)h Fs(_)i Fw(is)f Ft(independent)q Fw(:)56
b(each)47 b(is)h(bound)d(to)i(something)806 2749 y(dif)n(ferent.)j
(This)44 b(couldn')o(t)d(happen)g(with)j(an)f(ordinary)e(v)n(ariable)h
(of)h(course,)f(b)n(ut)806 2848 y(then)47 b(the)g(anon)o(ymous)e(v)n
(ariable)i(isn')o(t)g(meant)g(to)h(be)g(ordinary)-5 b(.)63
b(It')-5 b(s)49 b(simply)e(a)806 2948 y(w)o(ay)41 b(of)g(telling)g
(Prolog)f(to)h(bind)g(something)f(to)h(a)h(gi)n(v)o(en)e(position,)g
(completely)806 3048 y(independently)d(of)k(an)o(y)f(other)g(bindings.)
900 3152 y(Let')-5 b(s)51 b(look)f(at)i(one)e(last)i(e)o(xample.)74
b(The)50 b(third)g(element)g(of)h(our)f(w)o(orking)806
3251 y(e)o(xample)39 b(is)j(a)g(list)g(\(namely)e Fs([2,)g([b,)g(c]])o
Fw(\).)47 b(Suppose)40 b(we)h(w)o(anted)g(to)g(e)o(xtract)806
3351 y(the)h(tail)h(of)f(this)h(internal)e(list,)j(and)d(that)i(we)f
(are)h(not)f(interested)f(in)i(an)o(y)e(other)806 3451
y(information.)i(Ho)n(w)e(could)f(we)h(do)f(this?)47
b(As)42 b(follo)n(ws:)971 3652 y Fs(?-)f([_,_,[_|X]|_])36
b(=)1220 3752 y([[],)k(dead\(z\),)e([2,)i([b,)h(c]],)e([],)i(Z,)f([2,)h
([b,)f(c]]].)971 3951 y(X)h(=)g([[b,c]])971 4051 y(Z)g(=)g(_10087)971
4150 y(yes)806 4368 y Fk(2)99 b(Member)806 4504 y Fw(It')-5
b(s)42 b(time)f(to)h(look)e(at)i(our)f(\002rst)h(e)o(xample)e(of)i(a)f
(recursi)n(v)o(e)f(Prolog)h(program)e(for)806 4604 y(manipulating)e
(lists.)46 b(One)40 b(of)f(the)h(most)f(basic)h(things)f(we)h(w)o(ould)
f(lik)o(e)h(to)g(kno)n(w)806 4703 y(is)48 b(whether)f(something)f(is)j
(an)f(element)f(of)h(a)g(list)h(or)e(not.)66 b(So)48
b(let')-5 b(s)49 b(write)f(a)806 4803 y(program)42 b(that,)k(when)e(gi)
n(v)o(en)g(as)i(inputs)e(an)h(arbitrary)e(object)i Ft(X)j
Fw(and)d(a)g(list)h Ft(L)p Fw(,)806 4902 y(tells)53 b(us)g(whether)f
(or)g(not)h Ft(X)j Fw(belongs)c(to)h Ft(L)p Fw(.)g(The)f(program)f
(that)i(does)f(this)806 5002 y(is)e(usually)f(called)h(member,)g(and)f
(it)h(is)h(the)f(simplest)g(e)o(xample)e(of)h(a)i(Prolog)806
5102 y(program)38 b(that)j(e)o(xploits)g(the)f(recursi)n(v)o(e)g
(structure)g(of)h(lists.)47 b(Here)41 b(it)g(is:)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 77 89
TeXDict begin 77 88 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(4:)46 b(Lists)1939 b(77)p 0
TeXcolorgray 522 1051 a Fs(member\(X,[X|T]\).)522 1151
y(member\(X,[H|T]\))35 b(:-)41 b(member\(X,T\).)451 1344
y Fw(That')-5 b(s)37 b(all)h(there)f(is)h(to)f(it:)45
b(one)36 b(f)o(act)i(\(namely)e Fs(member\(X,[X|T]\))-7
b Fw(\))38 b(and)e(one)357 1443 y(rule)53 b(\(namely)f
Fs(member\(X,[H|T]\))36 b(:-)k(member\(X,T\))l Fw(\).)84
b(But)55 b(note)e(that)h(the)357 1543 y(rule)41 b(is)i(recursi)n(v)o(e)
e(\(after)g(all,)i(the)f(functor)f Fs(member)f Fw(occurs)h(in)h(both)g
(the)g(rule')-5 b(s)357 1643 y(head)38 b(and)g(body\))f(and)i(it)g(is)h
(this)g(that)f(e)o(xplains)f(why)g(such)g(a)i(short)e(program)f(is)357
1742 y(all)k(that)g(is)h(required.)i(Let')-5 b(s)42 b(tak)o(e)f(a)g
(closer)g(look.)451 1845 y(W)-7 b(e')o(ll)38 b(start)f(by)g(reading)e
(the)i(program)d(declarati)n(v)o(ely)-5 b(.)42 b(And)37
b(read)f(this)h(w)o(ay)-5 b(,)37 b(it)357 1944 y(is)45
b(ob)o(viously)c(sensible.)55 b(The)44 b(\002rst)h(clause)f(\(the)f(f)o
(act\))h(simply)g(says:)52 b(an)44 b(object)357 2044
y Fs(X)39 b Fw(is)h(a)g(member)e(of)g(a)i(list)g(if)g(it)g(is)g(the)f
(head)g(of)f(that)i(list.)46 b(Note)39 b(that)g(we)h(used)357
2144 y(the)d(b)n(uilt-in)f Fs(|)h Fw(operator)f(to)h(state)h(this)f
(\(simple)g(b)n(ut)g(important\))e(principle)h(about)357
2243 y(lists.)451 2345 y(What)g(about)f(the)h(second)f(clause,)h(the)g
(recursi)n(v)o(e)e(rule?)44 b(This)36 b(says:)44 b(an)35
b(object)357 2445 y Fs(X)44 b Fw(is)g(member)f(of)h(a)g(list)h(if)f(it)
g(is)h(a)g(member)d(of)i(the)f(tail)i(of)f(the)f(list.)56
b(Again,)357 2545 y(note)40 b(that)h(we)h(used)e(the)h
Fs(|)g Fw(operator)e(to)j(state)f(this)h(principle.)451
2647 y(No)n(w)-5 b(,)49 b(clearly)e(this)h(de\002nition)f(mak)o(es)g
(good)f(declarati)n(v)o(e)h(sense.)66 b(But)48 b(does)357
2747 y(this)35 b(program)d(actually)i Ft(do)g Fw(what)h(it)g(is)h
(supposed)d(to)h(do?)44 b(That)34 b(is,)i(will)g(it)f(really)357
2846 y(tell)41 b(us)f(whether)f(an)h(object)g Fs(X)g
Fw(belongs)f(to)i(a)f(list)i Fs(L)o Fw(?)k(And)40 b(if)g(so,)h(ho)n(w)f
(e)o(xactly)357 2946 y(does)k(it)h(do)g(this?)57 b(T)-7
b(o)45 b(answer)f(such)h(questions,)f(we)h(need)f(to)h(think)f(about)g
(its)357 3046 y(procedural)38 b(meaning.)44 b(Let')-5
b(s)42 b(w)o(ork)e(our)g(w)o(ay)h(through)e(a)j(fe)n(w)e(e)o(xamples.)
451 3148 y(Suppose)g(we)h(posed)g(the)g(follo)n(wing)e(query:)522
3341 y Fs(?-)i(member\(yolanda,[)o(yo)o(la)o(nda)o(,t)o(rud)o(y,)o(vi)o
(nce)o(nt)o(,ju)o(le)o(s]\))o(.)357 3535 y Fw(Prolog)61
b(will)h(immediately)f(answer)g(yes.)109 b(Why?)f(Because)62
b(it)g(can)g(unify)357 3634 y Fs(yolanda)38 b Fw(with)j(both)g
(occurrences)e(of)h Fs(X)h Fw(in)g(the)g(\002rst)h(clause)f(\(the)g(f)o
(act\))g(in)g(the)357 3734 y(de\002nition)f(of)g Fs(member/2)m
Fw(,)h(so)g(it)h(succeeds)f(immediately)-5 b(.)451 3836
y(Ne)o(xt)41 b(consider)f(the)h(follo)n(wing)e(query:)522
4029 y Fs(?-)i(member\(vincent,[)o(yo)o(la)o(nda)o(,t)o(rud)o(y,)o(vi)o
(nce)o(nt)o(,ju)o(le)o(s]\))o(.)357 4223 y Fw(No)n(w)c(the)g(\002rst)h
(rule)f(w)o(on')o(t)f(help)h(\()p Fs(vincent)d Fw(and)j
Fs(yolanda)e Fw(are)i(distinct)g(atoms\))357 4322 y(so)56
b(Prolog)e(goes)h(to)h(the)f(second)g(clause,)k(the)c(recursi)n(v)o(e)g
(rule.)89 b(This)55 b(gi)n(v)o(es)357 4422 y(Prolog)40
b(a)h(ne)n(w)g(goal:)k(it)d(no)n(w)e(has)i(to)f(see)g(if)522
4615 y Fs(member\(vincent,[)o(tru)o(dy)o(,vi)o(nc)o(en)o(t,j)o(ul)o
(es])o(\).)357 4809 y Fw(Once)49 b(again)f(the)i(\002rst)g(clause)g(w)o
(on')o(t)e(help,)j(so)f(Prolog)e(goes)h(\(again\))f(to)i(the)357
4908 y(recursi)n(v)o(e)39 b(rule.)45 b(This)d(gi)n(v)o(es)e(it)i(a)f
(ne)n(w)g(goal,)f(namely)522 5102 y Fs(member\(vincent,[)o(vin)o(ce)o
(nt,)o(ju)o(le)o(s]\))o(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 78 90
TeXDict begin 78 89 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(78)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(This)h(time,)g(the)f(\002rst)i(clause)f(does)
g(help,)f(and)g(the)h(query)f(succeeds.)900 1151 y(So)51
b(f)o(ar)g(so)h(good,)g(b)n(ut)f(we)g(need)g(to)g(ask)g(an)g(important)
f(question.)75 b(What)806 1250 y(happens)43 b(when)i(we)h(pose)f(a)g
(query)f(that)i Ft(fails)p Fw(?)59 b(F)o(or)45 b(e)o(xample,)g(what)g
(happens)806 1350 y(if)c(we)g(pose)g(the)g(query)971
1529 y Fs(member\(zed,[yola)o(nd)o(a,t)o(ru)o(dy,)o(vi)o(nc)o(ent)o(,j)
o(ule)o(s])o(\).)900 1708 y Fw(No)n(w)-5 b(,)55 b(this)d(should)g(ob)o
(viously)e(f)o(ail)j(\(after)f(all,)j Fs(zed)d Fw(is)h(not)g(on)f(the)g
(list\).)806 1808 y(So)f(ho)n(w)f(does)g(Prolog)g(handle)g(this?)76
b(In)50 b(particular)m(,)i(ho)n(w)e(can)h(we)g(be)g(sure)806
1907 y(that)46 b(Prolog)f(really)h(will)h Ft(stop)p Fw(,)g(and)f(say)g
Ft(no)p Fw(,)h(instead)f(going)f(into)h(an)h(endless)806
2007 y(recursi)n(v)o(e)39 b(loop?)900 2107 y(Let')-5
b(s)51 b(think)f(this)h(through)d(systematically)-5 b(.)73
b(Once)50 b(again,)i(the)e(\002rst)h(clause)806 2206
y(cannot)35 b(help,)i(so)g(Prolog)f(uses)h(the)g(recursi)n(v)o(e)e
(rule,)i(which)f(gi)n(v)o(es)g(it)h(a)g(ne)n(w)g(goal)971
2385 y Fs(member\(zed,[trud)o(y,)o(vin)o(ce)o(nt,)o(ju)o(le)o(s]\))o(.)
806 2564 y Fw(Again,)44 b(the)g(\002rst)h(clause)g(doesn')o(t)d(help,)j
(so)g(Prolog)e(reuses)i(the)f(recursi)n(v)o(e)f(rule)806
2664 y(and)d(tries)h(to)g(sho)n(w)g(that)971 2843 y Fs
(member\(zed,[vinc)o(en)o(t,j)o(ul)o(es])o(\).)806 3022
y Fw(Similarly)-5 b(,)49 b(the)f(\002rst)i(rule)e(doesn')o(t)f(help,)j
(so)f(Prolog)e(reuses)i(the)f(second)g(rule)806 3122
y(yet)40 b(again)g(and)h(tries)g(the)g(goal)971 3285
y Fs(member\(zed,[jule)o(s])o(\).)806 3448 y Fw(Again)55
b(the)i(\002rst)g(clause)f(doesn')o(t)f(help,)60 b(so)d(Prolog)e(uses)i
(the)g(second)e(rule,)806 3548 y(which)40 b(gi)n(v)o(es)g(it)i(the)f
(goal)971 3727 y Fs(member\(zed,[]\))806 3906 y Fw(And)e
Ft(this)i Fw(is)g(where)f(things)g(get)g(interesting.)k(Ob)o(viously)39
b(the)h(\002rst)h(clause)f(can')o(t)806 4006 y(help)45
b(here.)62 b(But)46 b(note:)57 b Ft(the)46 b(r)m(ecur)o(sive)h(rule)g
(can')n(t)e(do)h(anything)e(mor)m(e)i(either)p Fw(.)806
4105 y(Why)g(not?)64 b(Simple:)58 b(the)47 b(recursi)n(v)o(e)f(rule)h
(relies)g(on)g(splitting)g(the)g(list)h(into)f(a)806
4205 y(head)e(and)h(a)h(tail,)i(b)n(ut)d(as)i(we)f(ha)n(v)o(e)f
(already)f(seen,)j(the)e(empty)g(list)i Ft(can')n(t)f
Fw(be)806 4305 y(split)41 b(up)g(in)g(this)g(w)o(ay)-5
b(.)46 b(So)41 b(the)g(recursi)n(v)o(e)f(rule)g(cannot)g(be)h(applied)f
(either)m(,)g(and)806 4404 y(Prolog)g(stops)i(searching)f(for)g(more)g
(solutions)g(and)g(announces)f(no.)48 b(That)41 b(is,)i(it)806
4504 y(tells)c(us)f(that)h Fs(zed)e Fw(does)h(not)g(belong)f(to)i(the)f
(list,)i(which)d(is)j(just)f(what)f(it)h(ought)806 4604
y(to)i(do.)900 4703 y(W)-7 b(e)59 b(could)d(summarise)h(the)g
Fs(member/2)d Fw(predicate)j(as)h(follo)n(ws.)94 b(It)58
b(is)g(a)806 4803 y(recursi)n(v)o(e)36 b(predicate,)i(which)g
(systematically)g(searches)g(do)n(wn)f(the)i(length)e(of)h(the)806
4902 y(list)48 b(for)e(the)h(required)e(item.)64 b(It)47
b(does)g(this)g(by)g(stepwise)h(breaking)d(do)n(wn)g(the)806
5002 y(list)f(into)f(smaller)g(lists,)i(and)d(looking)g(at)h(the)h
(\002rst)f(item)h(of)f(each)g(smaller)g(list.)806 5102
y(This)f(mechanism)e(that)j(dri)n(v)o(es)e(this)h(search)g(is)h
(recursion,)e(and)g(the)h(reason)f(that)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 79 91
TeXDict begin 79 90 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(4:)46 b(Lists)1939 b(79)p 0
TeXcolorgray 357 1051 a(this)46 b(recursion)d(is)k(safe)e(\(that)g(is,)
j(the)d(reason)g(it)h(does)f(not)g(go)g(on)g(fore)n(v)o(er\))e(is)357
1151 y(that)38 b(at)g(the)g(end)g(of)f(the)h(line)h(Prolog)e(has)h(to)g
(ask)g(a)h(question)e(about)g(the)h(empty)357 1250 y(list.)51
b(The)42 b(empty)g(list)h Ft(cannot)g Fw(be)f(brok)o(en)f(do)n(wn)g
(into)h(smaller)h(parts,)f(and)g(this)357 1350 y(allo)n(ws)f(a)g(w)o
(ay)g(out)g(of)g(the)g(recursion.)451 1459 y(W)-7 b(ell,)40
b(we')l(v)o(e)e(no)n(w)g(seen)h(why)f Fs(member/2)e Fw(w)o(orks,)j(b)n
(ut)f(in)h(f)o(act)g(it')-5 b(s)40 b(f)o(ar)f(more)357
1558 y(useful)54 b(than)h(the)g(pre)n(vious)f(e)o(xample)g(might)g
(suggest.)89 b(Up)55 b(till)h(no)n(w)f(we')l(v)o(e)357
1658 y(only)47 b(been)g(using)g(it)i(to)f(answer)f(yes/no)g(questions.)
66 b(But)48 b(we)g(can)g(also)g(pose)357 1758 y(questions)43
b(containing)f(v)n(ariables.)54 b(F)o(or)44 b(e)o(xample,)f(we)h(can)g
(ha)n(v)o(e)f(the)h(follo)n(wing)357 1857 y(dialog)c(with)h(Prolog:)522
2078 y Fs(member\(X,[yoland)o(a,t)o(ru)o(dy,)o(vi)o(nc)o(ent)o(,j)o
(ule)o(s])o(\).)522 2277 y(X)g(=)g(yolanda)e(;)522 2476
y(X)i(=)g(trudy)f(;)522 2676 y(X)h(=)g(vincent)e(;)522
2875 y(X)i(=)g(jules)f(;)522 3074 y(no)451 3294 y Fw(That)k(is,)i
(Prolog)d(has)i(told)f(us)g(what)g(e)n(v)o(ery)f(member)g(of)h(a)h
(list)g(is.)56 b(This)45 b(is)357 3394 y(an)39 b(e)o(xtremely)e(common)
g(use)j(of)f Fs(member/2)l Fw(.)46 b(In)39 b(ef)n(fect,)f(by)h(using)g
(the)g(v)n(ariable)357 3494 y(we)44 b(are)g(saying)f(to)h(Prolog:)51
b(\223Quick!)i(Gi)n(v)o(e)44 b(me)g(some)g(element)f(of)g(the)h
(list!\224.)357 3593 y(In)g(man)o(y)g(applications)f(we)i(need)f(to)h
(be)f(able)h(to)g(e)o(xtract)f(members)f(of)i(a)g(list,)357
3693 y(and)40 b(this)i(is)f(the)g(w)o(ay)g(it)h(is)g(typically)e(done.)
451 3802 y(One)45 b(\002nal)f(remark.)56 b(The)44 b(w)o(ay)h(we)g
(de\002ned)e Fs(member/2)f Fw(abo)o(v)o(e)h(is)j(certainly)357
3902 y(correct,)39 b(b)n(ut)i(in)g(one)g(respect)f(it)i(is)g(a)f
(little)h(messy)-5 b(.)451 4011 y(Think)40 b(about)g(it.)47
b(The)41 b(\002rst)g(clause)h(is)g(there)e(to)h(deal)g(with)g(the)h
(head)e(of)h(the)357 4110 y(list.)47 b(But)41 b(although)e(the)i(tail)h
(is)g(irrele)n(v)n(ant)e(to)h(the)g(\002rst)h(clause,)e(we)i(named)e
(the)357 4210 y(tail)48 b(using)f(the)h(v)n(ariable)f
Fs(T)p Fw(.)67 b(Similarly)-5 b(,)48 b(the)g(recursi)n(v)o(e)e(rule)i
(is)g(there)g(to)g(deal)357 4310 y(with)g(the)g(tail)g(of)g(the)g
(list.)68 b(But)49 b(although)d(the)i(head)f(is)i(irrele)n(v)n(ant)d
(here,)j(we)357 4409 y(named)g(it)j(using)e(the)h(v)n(ariable)e
Fs(H)p Fw(.)75 b(These)51 b(unnecessary)e(v)n(ariable)g(names)i(are)357
4509 y(distracting:)45 b(it')-5 b(s)42 b(better)e(to)h(write)g
(predicates)f(in)g(a)i(w)o(ay)e(that)h(focuses)g(attention)357
4608 y(on)h(what)g(is)i(really)e(important)e(in)j(each)f(clause,)h(and)
f(the)g(anon)o(ymous)e(v)n(ariable)357 4708 y(gi)n(v)o(es)d(us)i(a)g
(nice)f(w)o(ay)g(of)g(doing)f(this.)45 b(That)38 b(is,)h(we)g(can)f(re)
n(write)g Fs(member/2)d Fw(as)357 4808 y(follo)n(ws:)522
5002 y Fs(member\(X,[X|_]\).)522 5102 y(member\(X,[_|T]\))g(:-)41
b(member\(X,T\).)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 80 92
TeXDict begin 80 91 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(80)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(This)k(v)o(ersion)e(is)j(e)o(xactly)d(the)i
(same,)g(both)f(declarati)n(v)o(ely)f(and)h(procedurally)-5
b(.)806 1151 y(But)44 b(it')-5 b(s)44 b(just)h(that)e(little)i(bit)f
(clearer:)50 b(when)43 b(you)g(read)g(it,)i(you)e(are)g(forced)f(to)806
1250 y(concentrate)d(on)h(what)h(is)h(essential.)806
1442 y Fk(3)99 b(Recursing)42 b(do)o(wn)g(Lists)806 1572
y Fw(The)i Fs(member/2)e Fw(predicate)i(w)o(orks)h(by)f(recursi)n(v)o
(ely)f(w)o(orking)g(its)j(w)o(ay)f(do)n(wn)f(a)806 1672
y(list,)j(doing)d(something)g(to)h(the)h(head,)f(and)g(then)g(recursi)n
(v)o(ely)f(doing)g(the)h(same)806 1772 y(thing)c(to)h(the)g(tail.)49
b(Recursing)42 b(do)n(wn)f(a)h(list)h(\(or)f(indeed,)e(se)n(v)o(eral)i
(lists\))h(in)f(this)806 1871 y(w)o(ay)53 b(is)h(e)o(xtremely)d(common)
g(in)i(Prolog;)58 b(so)c(common,)g(in)f(f)o(act,)j(that)d(it)h(is)806
1971 y(important)41 b(that)i(you)f(really)h(master)g(the)g(technique.)
50 b(So)43 b(let')-5 b(s)44 b(look)e(at)i(another)806
2070 y(e)o(xample.)900 2170 y(When)52 b(w)o(orking)e(with)i(lists,)k
(we)c(often)f(w)o(ant)i(to)f(compare)e(one)h(list)i(with)806
2270 y(another)m(,)i(or)e(to)h(cop)o(y)g(bits)g(of)g(one)f(list)i(into)
f(another)m(,)h(or)f(to)g(translate)f(the)806 2370 y(contents)61
b(of)h(one)f(list)i(into)f(another)m(,)j(or)d(something)f(similar)-5
b(.)109 b(Here')-5 b(s)63 b(an)806 2469 y(e)o(xample.)53
b(Let')-5 b(s)44 b(suppose)f(we)h(need)f(a)i(predicate)d
Fs(a2b/2)h Fw(that)h(tak)o(es)g(tw)o(o)g(lists)806 2569
y(as)d(ar)o(guments,)d(and)i(succeeds)g(if)h(the)f(\002rst)i(ar)o
(gument)c(is)j(a)g(list)h(of)e Fs(a)o Fw(s,)i(and)d(the)806
2669 y(second)c(ar)o(gument)g(is)j(a)f(list)h(of)f Fs(b)o
Fw(s)h(of)e(e)o(xactly)g(the)h(same)g(length.)44 b(F)o(or)36
b(e)o(xample,)806 2768 y(if)41 b(we)g(pose)g(the)g(follo)n(wing)e
(query)971 2935 y Fs(a2b\([a,a,a,a],[b)o(,b)o(,b,)o(b])o(\).)806
3102 y Fw(we)i(w)o(ant)g(Prolog)f(to)h(say)g(yes.)46
b(On)41 b(the)g(other)f(hand,)g(if)h(we)g(pose)g(the)g(query)971
3270 y Fs(a2b\([a,a,a,a],[b)o(,b)o(,b])o(\).)806 3437
y Fw(or)f(the)h(query)971 3604 y Fs(a2b\([a,c,a,a],[b)o(,b)o(,5,)o(4])o
(\).)806 3771 y Fw(we)g(w)o(ant)g(Prolog)f(to)h(say)g(no.)900
3871 y(When)h(f)o(aced)f(with)h(such)g(tasks,)h(often)e(the)h(best)g(w)
o(ay)g(to)h(set)f(about)f(solving)806 3970 y(them)54
b(is)h(to)f(start)h(by)f(thinking)f(about)h(the)g(simplest)h(possible)f
(case.)86 b(No)n(w)-5 b(,)806 4070 y(when)46 b(w)o(orking)f(with)i
(lists,)i(thinking)d(about)g(the)g(simplest)i(case)f(often)f(means)806
4170 y(thinking)i(about)g(the)i(empty)f(list,)k(and)c(it)i(certainly)d
(means)i(this)g(here.)72 b(After)806 4269 y(all:)54 b(what)45
b(is)h(the)e(shortest)h(possible)g(list)h(of)e Fs(a)p
Fw(s?)58 b(It')-5 b(s)46 b(the)f(empty)f(list.)58 b(Why?)806
4369 y(Because)43 b(it)h(contains)f(no)g Fs(a)p Fw(s)h(at)g(all.)54
b(And)43 b(what)h(is)g(the)g(shortest)f(possible)g(list)806
4469 y(of)j Fs(b)p Fw(s?)65 b(Again,)47 b(the)g(empty)f(list:)60
b(no)46 b Fs(b)p Fw(s)i(whatsoe)n(v)o(er)d(in)i(that.)64
b(So)47 b(the)g(most)806 4568 y(basic)41 b(information)d(our)i
(de\002nition)g(needs)h(to)g(contain)f(is)971 4735 y
Fs(a2b\([],[]\).)806 4902 y Fw(This)54 b(records)f(the)h(ob)o(vious)e
(f)o(act)i(that)g(the)g(empty)f(list)i(contains)f(e)o(xactly)f(as)806
5002 y(man)o(y)48 b Fs(a)p Fw(s)i(as)h Fs(b)o Fw(s.)73
b(But)51 b(although)c(ob)o(vious,)j(this)h(f)o(act)f(turns)f(out)g(to)h
(play)g(an)806 5102 y(important)39 b(role)i(in)g(our)f(program,)e(as)k
(we)f(shall)h(see.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 81 93
TeXDict begin 81 92 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(4:)46 b(Lists)1939 b(81)p 0
TeXcolorgray 451 1051 a(So)57 b(f)o(ar)f(so)h(good:)76
b(b)n(ut)56 b(ho)n(w)g(do)g(we)h(proceed?)90 b(Here')-5
b(s)57 b(the)f(idea:)77 b(for)357 1151 y(longer)44 b(lists,)k
Ft(think)d(r)m(ecur)o(sively)p Fw(.)60 b(So:)55 b(when)45
b(should)f Fs(a2b/2)g Fw(decide)h(that)g(tw)o(o)357 1250
y(non-empty)h(lists)k(are)e(a)h(list)h(of)e Fs(a)p Fw(s)h(and)f(a)h
(list)h(of)e Fs(b)p Fw(s)h(of)f(e)o(xactly)g(the)h(same)357
1350 y(length?)44 b(Simple:)h(when)39 b(the)g(head)g(of)g(the)g
(\002rst)h(list)h(is)f(an)g Fs(a)o Fw(,)g(and)f(the)g(head)g(of)357
1449 y(the)i(second)g(list)h(is)g(a)g Fs(b)p Fw(,)g(and)e
Fs(a2b/2)g Fw(decides)h(that)h(the)f(tw)o(o)h(tails)g(are)f(lists)i(of)
357 1549 y Fs(a)o Fw(s)49 b(and)f Fs(b)o Fw(s)h(of)f(e)o(xactly)f(the)h
(same)g(length!)66 b(This)48 b(immediately)f(gi)n(v)o(es)g(us)i(the)357
1649 y(follo)n(wing)39 b(rule:)522 1809 y Fs(a2b\([a|Ta],[b|Tb)o(]\))c
(:-)41 b(a2b\(Ta,Tb\).)357 1969 y Fw(This)h(says:)48
b(the)42 b Fs(a2b/2)e Fw(predicate)h(should)f(succeed)i(if)g(its)h
(\002rst)f(ar)o(gument)e(is)i(a)357 2068 y(list)i(with)e(head)g
Fs(a)p Fw(,)h(its)h(second)e(ar)o(gument)e(is)k(a)f(list)h(with)f(head)
f Fs(b)p Fw(,)h(and)f Fs(a2b/2)357 2168 y Fw(succeeds)e(on)h(the)g(tw)o
(o)g(tails.)451 2267 y(No)n(w)-5 b(,)39 b(this)g(de\002nition)f(mak)o
(e)g(good)g(sense)h(declarati)n(v)o(ely)-5 b(.)43 b(It)c(is)h(a)f
(simple)g(and)357 2367 y(natural)44 b(recursi)n(v)o(e)g(predicate,)i
(the)f(base)h(clause)f(dealing)g(with)h(the)f(empty)g(list,)357
2467 y(the)40 b(recursi)n(v)o(e)e(clause)j(dealing)e(with)h(non-empty)e
(lists.)46 b(But)41 b(ho)n(w)f(does)f(it)i(w)o(ork)357
2566 y(in)47 b(practice?)65 b(That)47 b(is,)j(what)d(is)i(its)f
(procedural)d(meaning?)64 b(F)o(or)47 b(e)o(xample,)g(if)357
2666 y(we)41 b(pose)g(the)g(query)522 2826 y Fs(a2b\([a,a,a],[b,b)o
(,b])o(\).)357 2986 y Fw(Prolog)k(will)j(say)f(yes,)h(which)e(is)i
(what)f(we)g(w)o(ant)g(\227)g(b)n(ut)g Ft(why)g Fw(e)o(xactly)f(does)
357 3085 y(this)41 b(happen?)451 3185 y(Let')-5 b(s)45
b(w)o(ork)e(the)i(e)o(xample)d(through.)53 b(In)44 b(this)h(query)-5
b(,)43 b(neither)g(list)i(is)g(empty)-5 b(,)357 3285
y(so)38 b(the)g(f)o(act)g(does)g(not)f(help.)44 b(Thus)38
b(Prolog)f(goes)h(on)f(to)h(try)g(the)g(recursi)n(v)o(e)e(rule.)357
3384 y(No)n(w)-5 b(,)42 b(the)g(query)g(does)g(match)g(the)h(rule)f
(\(after)g(all,)h(the)g(head)e(of)i(the)f(\002rst)i(list)357
3484 y(is)g Fs(a)g Fw(and)g(the)f(head)h(of)f(the)h(second)f(is)i
Fs(b)o Fw(\))f(so)g(Prolog)f(no)n(w)h(has)g(a)g(ne)n(w)f(goal,)357
3584 y(namely)522 3744 y Fs(a2b\([a,a],[b,b]\))o(.)357
3903 y Fw(Once)f(again,)f(the)h(f)o(act)h(does)f(not)g(help)f(with)i
(this,)g(b)n(ut)f(the)g(recursi)n(v)o(e)f(rule)h(can)357
4003 y(be)f(used)f(again,)g(leading)g(to)h(the)g(follo)n(wing)e(goal:)
522 4163 y Fs(a2b\([a],[b]\).)357 4323 y Fw(Y)-8 b(et)41
b(again)e(the)i(f)o(act)g(does)g(not)f(help,)g(b)n(ut)h(the)g(recursi)n
(v)o(e)e(rule)i(does,)f(so)h(we)h(get)357 4423 y(the)f(follo)n(wing)e
(goal:)522 4583 y Fs(a2b\([],[]\).)357 4743 y Fw(At)c(last)g(we)g(can)g
(use)g(the)f(f)o(act:)43 b(this)36 b(tells)f(us)g(that,)h(yes,)g(we)f
(really)f(do)g(ha)n(v)o(e)g(tw)o(o)357 4842 y(lists)47
b(here)f(that)g(contain)f(e)o(xactly)g(the)h(same)h(number)d(of)i
Fs(a)p Fw(s)h(and)e Fs(b)p Fw(s)i(\(namely)-5 b(,)357
4942 y(none)40 b(at)h(all\).)46 b(And)40 b(because)h(this)g(goal)g
(succeeds,)f(this)h(means)g(that)g(the)g(goal)522 5102
y Fs(a2b\([a],[b]\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 82 94
TeXDict begin 82 93 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(82)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(succeeds)g(too.)45 b(This)d(in)f(turn)f
(means)h(that)g(the)g(goal)971 1209 y Fs(a2b\([a,a],[b,b]\))o(.)806
1368 y Fw(succeeds,)f(and)g(thus)h(that)g(the)g(original)f(goal)971
1526 y Fs(a2b\([a,a,a],[b,b)o(,b)o(]\).)806 1684 y Fw(is)h
(satis\002ed.)900 1784 y(W)-7 b(e)43 b(could)e(summarise)g(this)i
(process)e(as)i(follo)n(ws.)48 b(Prolog)40 b(started)i(with)g(tw)o(o)
806 1883 y(lists.)j(It)36 b(peeled)f(the)h(head)f(of)n(f)g(each)g(of)h
(them,)g(and)f(check)o(ed)g(that)h(the)o(y)f(were)h(an)806
1983 y Fs(a)h Fw(and)g(a)h Fs(b)o Fw(,)h(respecti)n(v)o(ely)-5
b(,)36 b(as)i(required.)k(It)c(then)f(recursi)n(v)o(ely)f(analysed)g
(the)i(tails)806 2083 y(of)i(both)g(lists.)47 b(That)41
b(is,)h(it)f(w)o(ork)o(ed)f(its)i(w)o(ay)f(do)n(wn)f(both)g(tails)i
(simultaneously)-5 b(,)806 2182 y(checking)35 b(that)h(at)i(each)e
(stage)h(the)g(tails)h(were)e(headed)g(by)g(an)h Fs(a)g
Fw(and)f(a)i Fs(b)o Fw(.)45 b(Why)806 2282 y(did)h(the)i(process)f
(stop?)65 b(Because)47 b(at)h(each)f(recursi)n(v)o(e)f(step)h(we)h(had)
f(to)g(w)o(ork)806 2382 y(with)41 b(shorter)g(lists)h(\(namely)e(the)i
(tails)g(of)f(the)h(lists)g(e)o(xamined)e(at)i(the)f(pre)n(vious)806
2481 y(step\))46 b(and)g(e)n(v)o(entually)e(we)j(ended)f(up)g(with)g
(empty)g(lists.)63 b(At)47 b(this)g(point,)g(our)806
2581 y(rather)37 b(tri)n(vial)i(looking)e(f)o(act)i(w)o(as)g(able)g(to)
f(play)g(a)i(vital)e(role:)45 b(it)39 b(said)g(yes.)45
b(This)806 2680 y(halted)40 b(the)h(recursion,)e(and)h(ensured)g(that)h
(the)g(original)f(query)g(succeeded.)900 2780 y(It')-5
b(s)47 b(is)h(also)f(important)e(to)i(think)f(about)g(what)h(happens)e
(with)i(queries)f(that)806 2880 y Ft(fail)p Fw(.)g(F)o(or)40
b(e)o(xample,)f(if)j(we)f(pose)g(the)g(query)971 3038
y Fs(a2b\([a,a,a,a],[b)o(,b)o(,b])o(\).)806 3196 y Fw(Prolog)55
b(will)i(correctly)e(say)i(no.)91 b(Why?)h(because)56
b(after)g(carrying)e(out)i(the)806 3296 y(peel-of)n(f-the-head-and)o
(-re)o(cur)o(si)n(v)o(ely)o(-e)o(x)o(amin)o(e-th)o(e-tail)f(process)61
b(three)g(times,)66 b(it)806 3396 y(will)41 b(be)g(left)g(with)g(the)g
(query)971 3554 y Fs(a2b\([a],[]\).)806 3712 y Fw(But)g(this)g(goal)g
(cannot)f(be)h(satis\002ed.)46 b(And)41 b(if)g(we)g(pose)g(the)g(query)
971 3871 y Fs(a2b\([a,c,a,a],[b)o(,b)o(,5,)o(4])o(\).)806
4029 y Fw(after)68 b(carrying)f(out)h(the)h(peel-of)n(f-the-head-and)o
(-re)o(cur)o(si)n(v)o(ely)o(-e)o(x)o(amin)o(e-th)o(e-tail)806
4129 y(process)40 b(once,)g(Prolog)g(will)i(ha)n(v)o(e)e(the)h(goal)971
4287 y Fs(a2b\([c,a,a],[b,5)o(,4)o(]\).)806 4445 y Fw(and)f(again,)g
(this)h(cannot)f(be)h(satis\002ed.)900 4545 y(W)-7 b(ell,)71
b(that')-5 b(s)65 b(ho)n(w)f Fs(a2b/2)e Fw(w)o(orks)i(in)h(simple)f
(cases,)70 b(b)n(ut)65 b(we)f(ha)n(v)o(en')o(t)806 4645
y(e)o(xhausted)43 b(its)j(possibilities)f(yet.)59 b(As)46
b(al)o(w)o(ays)f(with)g(Prolog,)g(it')-5 b(s)46 b(a)g(good)e(idea)806
4744 y(to)f(in)m(v)o(estigate)f(what)i(happens)e(when)h(v)n(ariables)g
(as)h(used)f(as)h(input.)53 b(And)43 b(with)806 4844
y Fs(a2b/2)h Fw(something)g(interesting)g(happens:)54
b(it)47 b(acts)f(as)g(a)g(translator)m(,)f(translating)806
4943 y(lists)d(of)f Fs(a)o Fw(s)h(to)f(lists)h(of)f Fs(b)p
Fw(s,)g(and)g(vice)f(v)o(ersa.)46 b(F)o(or)40 b(e)o(xample)g(the)h
(query)971 5102 y Fs(a2b\([a,a,a,a],X\))o(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 83 95
TeXDict begin 83 94 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(4:)46 b(Lists)1939 b(83)p 0
TeXcolorgray 357 1051 a(yields)41 b(the)g(response)522
1215 y Fs(X)g(=)g([b,b,b,b].)357 1379 y Fw(That)h(is,)i(the)e(list)i
(of)e Fs(a)p Fw(s)h(has)g(been)f(translated)g(to)g(a)h(list)h(of)e
Fs(b)p Fw(s.)51 b(Similarly)-5 b(,)42 b(by)357 1478 y(using)37
b(a)i(v)n(ariable)e(in)i(the)f(\002rst)h(ar)o(gument)d(position,)i(we)h
(can)f(use)g(it)h(to)g(translate)357 1578 y(lists)j(of)f
Fs(b)o Fw(s)h(to)f(lists)i(of)d Fs(a)p Fw(s:)522 1742
y Fs(a2b\(X,[b,b,b,b]\))o(.)522 1941 y(X)h(=)g([a,a,a,a])451
2105 y Fw(And)g(of)f(course,)g(we)i(can)e(use)i(v)n(ariables)e(in)h
(both)f(ar)o(gument)e(positions:)522 2269 y Fs(a2b\(X,Y\).)357
2433 y Fw(Can)j(you)f(w)o(ork)g(out)h(what)g(happens)e(in)i(this)h
(case?)451 2533 y(T)-7 b(o)39 b(sum)g(up:)44 b Fs(a2b/2)38
b Fw(is)h(an)g(e)o(xtremely)e(simple)i(e)o(xample)e(of)i(a)g(program)e
(that)357 2632 y(w)o(orks)h(by)f(recursing)g(its)i(w)o(ay)f(do)n(wn)f
(a)i(pair)f(of)g(lists.)46 b(But)39 b(don')o(t)d(be)i(fooled)f(by)357
2732 y(its)48 b(simplicity:)59 b(the)47 b(kind)f(of)i(programming)43
b(it)49 b(illustrates)e(is)i(fundamental)c(to)357 2832
y(Prolog.)i(Both)42 b(its)h(declarati)n(v)o(e)d(form)h(\(a)h(base)g
(clause)g(dealing)f(with)h(the)g(empty)357 2931 y(list,)j(a)f(recursi)n
(v)o(e)e(clause)h(dealing)g(with)g(non-empty)e(lists\))k(and)e(the)g
(procedural)357 3031 y(idea)36 b(it)i(trades)f(on)f(\(do)g(something)g
(to)h(the)g(heads,)g(and)f(then)g(recursi)n(v)o(ely)f(do)i(the)357
3131 y(same)e(thing)f(to)h(the)g(tails\))g(come)f(up)h(again)f(and)g
(again)g(in)h(Prolog)e(programming.)357 3230 y(In)39
b(f)o(act,)g(in)h(the)f(course)g(of)g(your)f(Prolog)h(career)m(,)f
(you')o(ll)g(\002nd)i(that)f(you')o(ll)g(write)357 3330
y(what)47 b(is)h(essentially)f(the)h Fs(a2b/2)e Fw(predicate,)h(or)g(a)
h(more)e(comple)o(x)g(v)n(ariant)g(of)357 3429 y(it,)41
b(man)o(y)f(times)h(o)o(v)o(er)f(in)h(man)o(y)f(dif)n(ferent)f(guises.)
357 3620 y Fk(4)99 b(Exer)n(cises)357 3783 y Fv(Exer)o(cise)40
b(4.1.)95 b Fw(Ho)n(w)41 b(does)g(Prolog)f(respond)f(to)i(the)g(follo)n
(wing)e(queries?)p 0 TeXcolorgray 3286 3690 118 4 v 3286
3808 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
3290 3808 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
546 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401
3808 4 118 v 3286 3811 118 4 v 0 TeXcolorgray 0 TeXcolorgray
460 3947 a Fw(1.)p 0 TeXcolorgray 41 w Fs([a,b,c,d])f(=)j([a,[b,c,d]].)
p 0 TeXcolorgray 460 4112 a Fw(2.)p 0 TeXcolorgray 41
w Fs([a,b,c,d])d(=)j([a|[b,c,d]].)p 0 TeXcolorgray 460
4277 a Fw(3.)p 0 TeXcolorgray 41 w Fs([a,b,c,d])d(=)j([a,b,[c,d]].)p
0 TeXcolorgray 460 4442 a Fw(4.)p 0 TeXcolorgray 41 w
Fs([a,b,c,d])d(=)j([a,b|[c,d]].)p 0 TeXcolorgray 460
4607 a Fw(5.)p 0 TeXcolorgray 41 w Fs([a,b,c,d])d(=)j([a,b,c,[d]].)p
0 TeXcolorgray 460 4772 a Fw(6.)p 0 TeXcolorgray 41 w
Fs([a,b,c,d])d(=)j([a,b,c|[d]].)p 0 TeXcolorgray 460
4937 a Fw(7.)p 0 TeXcolorgray 41 w Fs([a,b,c,d])d(=)j([a,b,c,d,[]].)p
0 TeXcolorgray 460 5102 a Fw(8.)p 0 TeXcolorgray 41 w
Fs([a,b,c,d])d(=)j([a,b,c,d|[]].)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 84 96
TeXDict begin 84 95 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(84)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 909 1051 a(9.)p 0 TeXcolorgray
41 w Fs([])h(=)g(_.)p 0 TeXcolorgray 868 1209 a Fw(10.)p
0 TeXcolorgray 40 w Fs([])g(=)g([_].)p 0 TeXcolorgray
868 1367 a Fw(11.)p 0 TeXcolorgray 40 w Fs([])g(=)g([_|[]].)806
1550 y Fv(Exer)o(cise)g(4.2.)97 b Fw(Which)42 b(of)f(the)h(follo)n
(wing)e(are)i(syntactically)e(correct)h(lists?)50 b(If)p
0 TeXcolorgray 357 1458 118 4 v 357 1575 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 1575 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -3020 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 1575 4 118
v 357 1578 118 4 v 0 TeXcolorgray 806 1650 a Fw(the)40
b(representation)f(is)j(correct,)e(ho)n(w)g(man)o(y)g(elements)h(does)f
(the)h(list)h(ha)n(v)o(e?)p 0 TeXcolorgray 909 1813 a(1.)p
0 TeXcolorgray 41 w Fs([1|[2,3,4]])p 0 TeXcolorgray 909
1971 a Fw(2.)p 0 TeXcolorgray 41 w Fs([1,2,3|[]])p 0
TeXcolorgray 909 2129 a Fw(3.)p 0 TeXcolorgray 41 w Fs([1|2,3,4])p
0 TeXcolorgray 909 2287 a Fw(4.)p 0 TeXcolorgray 41 w
Fs([1|[2|[3|[4]]]])p 0 TeXcolorgray 909 2445 a Fw(5.)p
0 TeXcolorgray 41 w Fs([1,2,3,4|[]])p 0 TeXcolorgray
909 2603 a Fw(6.)p 0 TeXcolorgray 41 w Fs([[]|[]])p 0
TeXcolorgray 909 2762 a Fw(7.)p 0 TeXcolorgray 41 w Fs([[1,2]|4])p
0 TeXcolorgray 909 2920 a Fw(8.)p 0 TeXcolorgray 41 w
Fs([[1,2],[3,4]|[5,)o(6,7)o(]])806 3116 y Fv(Exer)o(cise)58
b(4.3.)249 b Fw(Write)59 b(a)g(predicate)f Fs(second\(X,List\))c
Fw(which)k(checks)p 0 TeXcolorgray 357 3023 V 357 3141
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
361 3141 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
-3020 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
471 3141 4 118 v 357 3144 118 4 v 0 TeXcolorgray 806
3215 a Fw(whether)39 b Fs(X)j Fw(is)f(the)g(second)f(element)h(of)f
Fs(List)o Fw(.)806 3348 y Fv(Exer)o(cise)g(4.4.)141 b
Fw(Write)41 b(a)g(predicate)e Fs(swap12\(List1,Lis)o(t2\))34
b Fw(which)40 b(checks)p 0 TeXcolorgray 357 3255 V 357
3373 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
361 3373 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
-3020 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
471 3373 4 118 v 357 3376 118 4 v 0 TeXcolorgray 806
3448 a Fw(whether)h Fs(List1)h Fw(is)i(identical)e(to)h
Fs(List2)n Fw(,)h(e)o(xcept)e(that)h(the)g(\002rst)h(tw)o(o)f(elements)
806 3547 y(are)d(e)o(xchanged.)806 3680 y Fv(Exer)o(cise)61
b(4.5.)157 b Fw(Suppose)61 b(we)h(are)g(gi)n(v)o(en)e(a)i(kno)n(wledge)
e(base)i(with)f(the)p 0 TeXcolorgray 357 3587 V 357 3705
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
361 3705 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
-3019 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
471 3705 4 118 v 357 3708 118 4 v 0 TeXcolorgray 806
3780 a Fw(follo)n(wing)39 b(f)o(acts:)971 3943 y Fs(tran\(eins,one\).)
971 4042 y(tran\(zwei,two\).)971 4142 y(tran\(drei,three\))o(.)971
4242 y(tran\(vier,four\).)971 4341 y(tran\(fuenf,five\))o(.)971
4441 y(tran\(sechs,six\).)971 4540 y(tran\(sieben,seve)o(n\))o(.)971
4640 y(tran\(acht,eight\))o(.)971 4740 y(tran\(neun,nine\).)900
4902 y Fw(Write)46 b(a)g(predicate)f Fs(listtran\(G,E\))c
Fw(which)k(translates)g(a)h(list)h(of)f(German)806 5002
y(number)e(w)o(ords)i(to)h(the)g(corresponding)c(list)k(of)f(English)g
(number)f(w)o(ords.)62 b(F)o(or)806 5102 y(e)o(xample:)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 85 97
TeXDict begin 85 96 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(4:)46 b(Lists)1939 b(85)p 0
TeXcolorgray 522 1051 a Fs(listtran\([eins,n)o(eun)o(,z)o(wei)o(],)o
(X\))o(.)357 1189 y Fw(should)40 b(gi)n(v)o(e:)522 1328
y Fs(X)h(=)g([one,nine,two].)451 1466 y Fw(Y)-9 b(our)44
b(program)f(should)h(also)h(w)o(ork)g(in)g(the)g(other)f(direction.)57
b(F)o(or)44 b(e)o(xample,)357 1566 y(if)d(you)f(gi)n(v)o(e)g(it)i(the)f
(query)522 1704 y Fs(listtran\(X,[one,)o(sev)o(en)o(,si)o(x,)o(tw)o
(o]\))o(.)357 1843 y Fw(it)g(should)f(return:)522 1981
y Fs(X)h(=)g([eins,sieben,sech)o(s,)o(zwe)o(i])o(.)451
2119 y Fw(\(Hint:)50 b(to)43 b(answer)f(this)h(question,)f(\002rst)i
(ask)f(yourself)e(\223Ho)n(w)i(do)f(I)h(translate)357
2219 y(the)f Ft(empty)g Fw(list)h(of)f(number)e(w)o(ords?\224.)49
b(That')-5 b(s)42 b(the)g(base)g(case.)50 b(F)o(or)41
b(non-empty)357 2319 y(lists,)49 b(\002rst)f(translate)f(the)g(head)f
(of)h(the)g(list,)i(then)e(use)g(recursion)f(to)h(translate)357
2418 y(the)41 b(tail.\))357 2551 y Fv(Exer)o(cise)46
b(4.6.)112 b Fw(Write)47 b(a)g(predicate)f Fs(twice\(In,Out\))c
Fw(whose)k(left)h(ar)o(gument)p 0 TeXcolorgray 3286 2458
118 4 v 3286 2576 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 3290 2576 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 356 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0
TeXcolorgray 3401 2576 4 118 v 3286 2579 118 4 v 0 TeXcolorgray
357 2651 a Fw(is)42 b(a)f(list,)h(and)e(whose)h(right)f(ar)o(gument)f
(is)i(a)h(list)g(consisting)e(of)h(e)n(v)o(ery)e(element)357
2750 y(in)i(the)g(left)g(list)h(written)f(twice.)46 b(F)o(or)40
b(e)o(xample,)g(the)h(query)522 2889 y Fs(twice\([a,4,buggl)o(e],)o
(X\))o(.)357 3027 y Fw(should)f(return)522 3166 y Fs(X)h(=)g
([a,a,4,4,buggle,b)o(ug)o(gle)o(]\))o(.)357 3304 y Fw(And)f(the)h
(query)522 3442 y Fs(twice\([1,2,1,1],)o(X\).)357 3581
y Fw(should)f(return)522 3719 y Fs(X)h(=)g([1,1,2,2,1,1,1,1])o(.)451
3858 y Fw(\(Hint:)k(to)38 b(answer)g(this)g(question,)g(\002rst)h(ask)f
(yourself)f(\223What)h(should)f(happen)357 3957 y(when)45
b(the)h(\002rst)h(ar)o(gument)d(is)j(the)f Ft(empty)g
Fw(list?\224.)62 b(That')-5 b(s)46 b(the)g(base)g(case.)62
b(F)o(or)357 4057 y(non-empty)36 b(lists,)41 b(think)e(about)g(what)g
(you)g(should)f(do)h(with)h(the)g(head,)e(and)h(use)357
4157 y(recursion)g(to)i(handle)f(the)h(tail.\))357 4289
y Fv(Exer)o(cise)f(4.7.)95 b Fw(Dra)o(w)41 b(the)g(search)f(trees)i
(for)e(the)h(follo)n(wing)e(three)i(queries:)p 0 TeXcolorgray
3286 4196 V 3286 4314 4 118 v 0 0 0 0.05 TeXcolorcmyk
0 0 0 0.05 TeXcolorcmyk 3290 4314 112 118 v 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray 462 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 3401 4314 4 118 v 3286 4317 118 4 v 0
TeXcolorgray 522 4438 a Fs(?-)g(member\(a,[c,b,a,)o(y])o(\).)522
4637 y(?-)g(member\(x,[a,b,c])o(\).)522 4836 y(?-)g(member\(X,[a,b,c])o
(\).)357 5084 y Fw(\(Search)f(trees)h(were)g(introduced)d(in)k(Chapter)
e(2.\))p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 86 98
TeXDict begin 86 97 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(86)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(5)99 b(Practical)41 b(Session)806
1182 y Fw(The)g(purpose)f(of)i(Practical)g(Session)g(4)g(is)h(to)f
(help)f(you)g(get)h(f)o(amiliar)f(with)h(the)806 1281
y(idea)48 b(of)f(recursing)g(do)n(wn)g(lists.)69 b(W)-7
b(e)49 b(\002rst)g(suggest)e(some)h(traces)h(for)e(you)g(to)806
1381 y(carry)40 b(out,)g(and)g(then)h(some)g(programming)c(e)o(x)o
(ercises.)900 1482 y(First,)44 b(systematically)f(carry)f(out)h(a)h
(number)d(of)i(traces)g(on)g Fs(a2b/2)f Fw(to)h(mak)o(e)806
1581 y(sure)d(you)g(fully)h(understand)e(ho)n(w)h(it)i(w)o(orks.)j(In)c
(particular:)p 0 TeXcolorgray 909 1768 a(1.)p 0 TeXcolorgray
41 w(T)m(race)50 b(some)g(e)o(xamples,)i(not)e(in)m(v)n(olving)e(v)n
(ariables,)k(that)e(succeed.)74 b(F)o(or)1013 1867 y(e)o(xample,)47
b(trace)g(the)g(query)f Fs(a2b\([a,a,a,a],[b,)o(b,)o(b,)o(b]\))41
b Fw(and)47 b(relate)1013 1967 y(the)41 b(output)f(to)h(the)g
(discussion)f(in)h(the)g(te)o(xt.)p 0 TeXcolorgray 909
2137 a(2.)p 0 TeXcolorgray 41 w(T)m(race)57 b(some)g(simple)g(e)o
(xamples)f(that)h(f)o(ail.)94 b(T)m(ry)57 b(e)o(xamples)f(in)m(v)n
(olving)1013 2237 y(lists)72 b(of)f(dif)n(ferent)e(lengths)h(\(such)h
(as)g Fs(a2b\([a,a,a,a],[b,)o(b,b)o(]\))-7 b Fw(\))1013
2336 y(and)59 b(e)o(xamples)f(in)m(v)n(olving)f(symbols)i(other)f(than)
h Fs(a)h Fw(and)f Fs(b)g Fw(\(such)g(as)1013 2436 y Fs
(a2b\([a,c,a,a],[b)o(,b,)o(5,)o(4]\))-7 b Fw(\).)p 0
TeXcolorgray 909 2606 a(3.)p 0 TeXcolorgray 41 w(T)m(race)42
b(some)g(e)o(xamples)e(in)m(v)n(olving)g(v)n(ariables.)48
b(F)o(or)42 b(e)o(xample,)f(try)g(tracing)1013 2706 y
Fs(a2b\([a,a,a,a],X\))35 b Fw(and)40 b Fs(a2b\(X,[b,b,b,b]\))-6
b Fw(.)p 0 TeXcolorgray 909 2876 a(4.)p 0 TeXcolorgray
41 w(Mak)o(e)44 b(sure)h(you)e(understand)g(what)h(happens)f(when)h
(both)g(ar)o(guments)e(in)1013 2975 y(the)52 b(query)e(are)i(v)n
(ariables.)78 b(F)o(or)51 b(e)o(xample,)i(carry)e(out)h(a)g(trace)g(on)
f(the)1013 3075 y(query)40 b Fs(a2b\(X,Y\))l Fw(.)p 0
TeXcolorgray 909 3245 a(5.)p 0 TeXcolorgray 41 w(Carry)55
b(out)h(a)g(series)g(of)g(similar)g(traces)g(in)m(v)n(olving)d
Fs(member/2)m Fw(.)91 b(That)1013 3345 y(is,)59 b(carry)54
b(out)h(traces)g(in)m(v)n(olving)e(simple)i(queries)f(that)h(succeed)f
(\(such)1013 3444 y(as)71 b Fs(member\(a,[1,2,a,)o(b])o(\))-6
b Fw(\),)77 b(simple)70 b(queries)f(that)h(f)o(ail)g(\(such)g(as)1013
3544 y Fs(member\(z,[1,2,a,)o(b]\))-7 b Fw(\),)78 b(and)71
b(queries)f(in)m(v)n(olving)e(v)n(ariables)i(\(such)1013
3643 y(as)61 b Fs(member\(X,[1,2,a)o(,b])o(\))-6 b Fw(\).)102
b(In)60 b(all)g(cases,)65 b(mak)o(e)60 b(sure)f(that)h(you)1013
3743 y(understand)39 b(why)h(the)h(recursion)e(halts.)900
3930 y(Ha)n(ving)h(done)g(this,)h(try)g(the)g(follo)n(wing.)p
0 TeXcolorgray 909 4116 a(1.)p 0 TeXcolorgray 41 w(Write)59
b(a)f(3-place)f(predicate)f Fs(combine1)g Fw(which)h(tak)o(es)h(three)g
(lists)h(as)1013 4216 y(ar)o(guments)36 b(and)h(combines)g(the)h
(elements)g(of)f(the)h(\002rst)h(tw)o(o)f(lists)i(into)d(the)1013
4316 y(third)j(as)i(follo)n(ws:)1178 4486 y Fs(?-)f(combine1\([a,b,c])o
(,[1)o(,2)o(,3])o(,X)o(\).)1178 4685 y(X)h(=)f([a,1,b,2,c,3])1178
4884 y(?-)g(combine1\([f,b,yi)o(p,y)o(up)o(],[)o(gl)o(u,g)o(la)o(,g)o
(li,)o(gl)o(o],)o(Re)o(su)o(lt\))o(.)1178 5083 y(Result)e(=)j
([f,glu,b,gla,yi)o(p,g)o(li)o(,y)o(up,)o(gl)o(o])p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 87 99
TeXDict begin 87 98 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(4:)46 b(Lists)1939 b(87)p 0
TeXcolorgray 0 TeXcolorgray 460 1051 a(2.)p 0 TeXcolorgray
41 w(No)n(w)50 b(write)g(a)g(3-place)f(predicate)g Fs(combine2)e
Fw(which)j(tak)o(es)g(three)f(lists)564 1151 y(as)42
b(ar)o(guments)d(and)h(combines)g(the)h(elements)f(of)h(the)g(\002rst)g
(tw)o(o)h(lists)g(into)564 1250 y(the)f(third)g(as)g(follo)n(ws:)730
1416 y Fs(?-)f(combine2\([a,b,c],)o([1)o(,2,)o(3])o(,X\))o(.)730
1615 y(X)h(=)g([[a,1],[b,2],[c,)o(3])o(])730 1815 y(?-)f
(combine2\([f,b,yip)o(,y)o(up])o(,[)o(glu)o(,g)o(la)o(,gl)o(i,)o(glo)o
(],)o(Re)o(sul)o(t\))o(.)730 2014 y(Result)f(=)i([[f,glu],[b,gla])o(,[)
o(yi)o(p,g)o(li)o(],[)o(yu)o(p,)o(glo)o(]])p 0 TeXcolorgray
460 2180 a Fw(3.)p 0 TeXcolorgray 41 w(Finally)-5 b(,)39
b(write)h(a)h(3-place)d(predicate)h Fs(combine3)e Fw(which)i(tak)o(es)h
(three)f(lists)564 2280 y(as)j(ar)o(guments)d(and)h(combines)g(the)h
(elements)f(of)h(the)g(\002rst)g(tw)o(o)h(lists)g(into)564
2379 y(the)f(third)g(as)g(follo)n(ws:)730 2545 y Fs(?-)f
(combine3\([a,b,c],)o([1)o(,2,)o(3])o(,X\))o(.)730 2745
y(X)h(=)g([j\(a,1\),j\(b,2\),j)o(\(c)o(,3\))o(])730 2944
y(?-)f(combine3\([f,b,yip)o(,y)o(up])o(,[)o(glu)o(,g)o(la)o(,gl)o(i,)o
(glo)o(],)o(R\))o(.)730 3143 y(R)h(=)g([j\(f,glu\),j\(b,gl)o(a\))o
(,j\()o(yi)o(p,)o(gli)o(\),)o(j\(y)o(up)o(,g)o(lo\))o(])451
3326 y Fw(All)j(three)e(programs)g(are)h(pretty)f(much)g(the)h(same)g
(as)h Fs(a2b/2)e Fw(\(though)e(the)o(y)357 3425 y(manipulate)59
b(three)h(lists,)66 b(not)60 b(tw)o(o\).)104 b(That)60
b(is,)66 b(all)61 b(three)f(can)h(be)f(written)357 3525
y(by)52 b(recursing)g(do)n(wn)f(the)i(lists,)k(doing)52
b(something)g(to)h(the)g(heads,)i(and)d(then)357 3625
y(recursi)n(v)o(ely)d(doing)g(the)i(same)g(thing)g(to)g(the)g(tails.)76
b(Indeed,)52 b(once)e(you)g(ha)n(v)o(e)357 3724 y(written)38
b Fs(combine1)l Fw(,)h(you)f(just)g(need)g(to)g(change)f(what)h(you)f
(do)h(to)h(the)f(heads)g(to)357 3824 y(get)j Fs(combine2)d
Fw(and)i Fs(combine3)m Fw(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 88 100
TeXDict begin 88 99 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 89 101
TeXDict begin 89 100 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(5)1992 2603 y Fm(Arithmetic)p 357 2785
2599 24 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
714 4450 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
120.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial 797
3703 a Fl(This)f(chapter)h(has)g(t)m(w)m(o)g(main)g(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3852
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)70 b(intro)s(duce)h(Prolog's)f
(built-in)g(abilities)h(fo)m(r)1004 3968 y(p)s(erfo)m(rming)42
b(a)m(rithmetic.)p 0 TeXcolorgray 887 4151 a(2.)p 0 TeXcolorgray
41 w(T)-8 b(o)77 b(apply)h(them)h(to)f(simple)h(list)g(p)m(ro)s
(cessing)1004 4267 y(p)m(roblems,)43 b(using)f(accumulato)m(rs.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 90 102
TeXDict begin 90 101 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(90)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Arithmetic)42 b(in)g(Pr)n(olog)806
1181 y Fw(Prolog)57 b(pro)o(vides)f(a)j(number)d(of)i(basic)h
(arithmetic)e(tools)h(for)g(manipulating)806 1281 y(inte)o(gers)36
b(\(that)i(is,)h(numbers)d(of)i(the)f(form)g(...-3,)g(-2,)h(-1,)g(0,)g
(1,)g(2,)g(3,)h(4...\).)k(Most)806 1380 y(Prolog)h(implementation)f
(also)j(pro)o(vide)d(tools)j(for)e(handling)g(real)h(numbers)f(\(or)806
1480 y(\003oating)39 b(point)h(numbers\))f(such)h(as)h(1.53)e(or)h
Ff(6)p Fj(:)p Ff(35)17 b Fh(\002)g Ff(10)2598 1450 y
Fe(5)2635 1480 y Fw(,)40 b(b)n(ut)h(we')l(re)f(not)g(going)806
1580 y(to)51 b(discuss)g(these,)i(for)d(the)o(y)h(are)f(not)h
(particularly)e(useful)h(for)h(the)g(symbolic)806 1679
y(processing)g(tasks)i(discussed)g(in)f(this)i(book.)79
b(Inte)o(gers,)54 b(on)e(the)h(other)f(hand,)806 1779
y(are)43 b(useful)g(in)g(connection)f(with)h(symbolic)g(tasks)h(\(we)f
(use)h(them)f(to)g(state)h(the)806 1879 y(length)50 b(of)i(lists,)j
(for)c(e)o(xample\))f(so)i(it)h(is)g(important)d(to)i(understand)d(ho)n
(w)i(to)806 1978 y(w)o(ork)41 b(with)h(them.)48 b(W)-7
b(e')o(ll)43 b(start)g(by)e(looking)g(at)h(ho)n(w)g(Prolog)e(handles)i
(the)g(four)806 2078 y(basic)f(operations)e(of)i(addition,)e
(multiplication,)g(subtraction,)g(and)i(di)n(vision.)p
0 TeXcolorgray 0 TeXcolorgray 974 2260 a(Arithmetic)f(e)o(xamples)941
b(Prolog)40 b(Notation)974 2359 y Ff(6)17 b(+)h(2)23
b(=)g(8)1319 b Fs(8)41 b(is)g(6+2.)974 2459 y Ff(6)17
b Fh(\003)h Ff(2)23 b(=)g(12)1300 b Fs(12)41 b(is)f(6*2.)974
2559 y Ff(6)17 b Fh(\000)h Ff(2)23 b(=)g(4)1319 b Fs(4)41
b(is)g(6-2.)974 2658 y Ff(6)17 b Fh(\000)h Ff(8)23 b(=)g
Fh(\000)p Ff(2)1254 b Fs(-2)41 b(is)f(6-8.)974 2758 y
Ff(6)17 b Fh(\004)h Ff(2)23 b(=)g(3)1319 b Fs(3)41 b(is)g(6/2.)974
2857 y Ff(7)17 b Fh(\004)h Ff(2)23 b(=)g(3)1319 b Fs(3)41
b(is)g(7/2.)974 2957 y Fw(1)g(is)g(the)g(remainder)e(when)i(7)g(is)h
(di)n(vided)d(by)i(2)99 b Fs(1)41 b(is)g(mod\(7,2\).)806
3137 y Fw(Note)48 b(that)h(as)g(we)g(are)g(w)o(orking)e(with)i(inte)o
(gers,)h(di)n(vision)d(gi)n(v)o(es)i(us)g(back)f(an)806
3237 y(inte)o(ger)39 b(answer)-5 b(.)46 b(Thus)41 b Ff(7)18
b Fh(\004)g Ff(2)41 b Fw(gi)n(v)o(es)f(3)h(as)h(an)f(answer)m(,)f(lea)n
(ving)g(remainder)f(1.)900 3337 y(Posing)i(the)g(follo)n(wing)e
(queries)h(yields)h(the)g(follo)n(wing)e(responses:)971
3522 y Fs(?-)i(8)g(is)f(6+2.)971 3622 y(yes)971 3821
y(?-)h(12)f(is)h(6*2.)971 3921 y(yes)971 4120 y(?-)g(-2)f(is)h(6-8.)971
4219 y(yes)971 4419 y(?-)g(3)g(is)f(6/2.)971 4518 y(yes)971
4718 y(?-)h(1)g(is)f(mod\(7,2\).)971 4817 y(yes)900 5002
y Fw(More)34 b(importantly)-5 b(,)33 b(we)h(can)g(w)o(ork)g(out)g(the)g
(answers)g(to)h(arithmetic)e(questions)806 5102 y(by)40
b(using)g(v)n(ariables.)45 b(F)o(or)c(e)o(xample:)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 91 103
TeXDict begin 91 102 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(5:)46 b(Arithmetic)1739 b(91)p
0 TeXcolorgray 522 1051 a Fs(?-)41 b(X)g(is)g(6+2.)522
1250 y(X)g(=)g(8)522 1449 y(?-)g(X)g(is)g(6*2.)522 1649
y(X)g(=)g(12)522 1848 y(?-)g(R)g(is)g(mod\(7,2\).)522
2047 y(R)g(=)g(1)451 2234 y Fw(Moreo)o(v)o(er)m(,)33
b(we)i(can)g(use)g(arithmetic)f(operations)f(when)h(we)i(de\002ne)e
(predicates.)357 2334 y(Here')-5 b(s)40 b(a)g(simple)f(e)o(xample.)44
b(Let')-5 b(s)41 b(de\002ne)e(a)h(predicate)f Fs(add_3_and_doubl)o(e/2)
357 2434 y Fw(whose)33 b(ar)o(guments)e(are)i(both)g(inte)o(gers.)42
b(This)33 b(predicate)f(tak)o(es)i(its)g(\002rst)g(ar)o(gument,)357
2533 y(adds)42 b(three)h(to)g(it,)h(doubles)e(the)h(result,)g(and)f
(returns)g(the)h(number)f(obtained)f(as)357 2633 y(the)g(second)f(ar)o
(gument.)j(W)-7 b(e)42 b(de\002ne)f(this)g(predicate)f(as)h(follo)n
(ws:)522 2803 y Fs(add_3_and_double)o(\(X,)o(Y\))35 b(:-)41
b(Y)g(is)f(\(X+3\)*2.)357 2972 y Fw(And)g(indeed,)g(this)h(w)o(orks:)
522 3142 y Fs(?-)g(add_3_and_double)o(\(1)o(,X)o(\).)522
3341 y(X)g(=)g(8)522 3540 y(?-)g(add_3_and_double)o(\(2)o(,X)o(\).)522
3739 y(X)g(=)g(10)451 3909 y Fw(One)52 b(other)g(thing.)79
b(Prolog)52 b(understands)e(the)j(usual)f(con)m(v)o(entions)e(we)i(use)
357 4009 y(for)38 b(disambiguating)f(arithmetical)h(e)o(xpressions.)44
b(F)o(or)39 b(e)o(xample,)f(when)g(we)i(write)357 4108
y Ff(3)18 b(+)h(2)f Fh(\002)h Ff(4)44 b Fw(we)g(mean)f
Ff(3)19 b(+)f(\(2)h Fh(\002)g Ff(4\))44 b Fw(and)f(not)h
Ff(\(3)19 b(+)f(2\))h Fh(\002)g Ff(4)p Fw(,)44 b(and)g(Prolog)e(kno)n
(ws)357 4208 y(this)f(con)m(v)o(ention:)522 4377 y Fs(?-)g(X)g(is)g
(3+2*4.)522 4577 y(X)g(=)g(11)357 4771 y Fk(2)99 b(A)42
b(Closer)f(Look)357 4902 y Fw(That')-5 b(s)47 b(the)g(basics,)i(b)n(ut)
e(we)h(need)e(to)h(kno)n(w)g(more.)63 b(The)47 b(most)g(important)f(to)
357 5002 y(grasp)e(is)j(this:)55 b(+,)46 b(*,)h(-,)f
Fh(\004)f Fw(and)g Fs(mod)g Fw(do)g Ft(not)h Fw(carry)f(out)f(an)o(y)h
(arithmetic.)58 b(In)357 5102 y(f)o(act,)g(e)o(xpressions)c(such)h(as)g
Fs(3+2)o Fw(,)k Fs(3-2)54 b Fw(and)h Fs(3*2)f Fw(are)h(simply)g(terms.)
88 b(The)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 92 104
TeXDict begin 92 103 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(92)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(functors)j(of)i(these)g(terms)h(are)f
Fs(+)o Fw(,)i Fs(-)e Fw(and)g Fs(*)g Fw(respecti)n(v)o(ely)-5
b(,)44 b(and)g(the)i(ar)o(guments)806 1151 y(are)k Fs(3)g
Fw(and)g Fs(2)o Fw(.)74 b(Apart)50 b(from)f(the)i(f)o(act)f(that)g(the)
h(functors)e(go)g(between)h(their)806 1250 y(ar)o(guments)38
b(\(instead)i(of)h(in)f(front)g(of)g(them\))g(these)h(are)g(ordinary)d
(Prolog)i(terms,)806 1350 y(and)50 b(unless)i(we)f(do)g(something)f
(special,)k(Prolog)c(will)i(not)f(actually)f(do)h(an)o(y)806
1449 y(arithmetic.)44 b(In)d(particular)m(,)e(if)i(we)h(pose)e(the)h
(query)971 1624 y Fs(?-)g(X)g(=)g(3+2)806 1799 y Fw(we)g(don')o(t)e
(get)i(back)f(the)h(answer)g Fs(X=5)o Fw(.)46 b(Instead)40
b(we)i(get)e(back)971 1974 y Fs(X)h(=)g(3+2)971 2073
y(yes)806 2248 y Fw(That)46 b(is,)j(Prolog)c(has)i(simply)f(uni\002ed)g
(the)h(v)n(ariable)f Fs(X)g Fw(to)h(the)g(comple)o(x)e(term)806
2348 y Fs(3+2)n Fw(.)57 b(It)45 b(has)f Ft(not)i Fw(carried)d(out)i(an)
o(y)e(arithmetic.)56 b(It)44 b(has)h(simply)f(done)f(what)i(it)806
2447 y(usually)40 b(does)h(when)f Fs(=/2)g Fw(is)i(used:)k(performed)38
b(uni\002cation.)900 2550 y(Similarly)-5 b(,)40 b(if)h(we)h(pose)e(the)
h(query)971 2725 y Fs(?-)g(3+2*5)e(=)i(X)806 2899 y Fw(we)g(get)g(the)g
(response)971 3074 y Fs(X)g(=)g(3+2*5)971 3174 y(yes)806
3349 y Fw(Again,)55 b(Prolog)d(has)i(simply)f(bound)e(the)j(v)n
(ariable)e Fs(X)h Fw(to)h(the)f(comple)o(x)f(term)806
3448 y Fs(3+2*5)m Fw(.)47 b(It)41 b(did)g(not)f(e)n(v)n(aluate)g(this)i
(e)o(xpression)d(to)i(13.)900 3551 y(T)-7 b(o)38 b(force)g(Prolog)f(to)
i(actually)e(e)n(v)n(aluate)h(arithmetic)f(e)o(xpressions)g(we)i(ha)n
(v)o(e)e(to)806 3650 y(use)971 3825 y Fs(is)806 4000
y Fw(just)k(as)g(we)g(did)f(in)h(our)f(earlier)g(e)o(xamples.)45
b(In)40 b(f)o(act,)h Fs(is)f Fw(does)g(something)g(v)o(ery)806
4100 y(special:)66 b(it)53 b(sends)e(a)h(signal)f(to)g(Prolog)g(that)g
(says)h(\223He)o(y!)76 b(Don')o(t)51 b(treat)g(this)806
4199 y(e)o(xpression)37 b(as)i(an)f(ordinary)f(comple)o(x)g(term!)44
b(Call)c(up)e(your)f(b)n(uilt-in)h(arithmetic)806 4299
y(capabilities)i(and)h(carry)f(out)g(the)h(calculations!\224)900
4401 y(In)59 b(short,)k Fs(is)c Fw(forces)f(Prolog)h(to)g(act)g(in)h
(an)f(unusual)f(w)o(ay)-5 b(.)100 b(Normally)806 4501
y(Prolog)39 b(is)j(quite)e(happ)o(y)f(just)j(unifying)c(v)n(ariables)i
(to)h(structures:)k(that')-5 b(s)41 b(its)h(job,)806
4601 y(after)j(all.)60 b(Arithmetic)45 b(is)h(something)f(e)o(xtra)f
(that)i(has)g(been)f(bolted)g(on)g(to)g(the)806 4700
y(basic)d(Prolog)g(engine)g(because)g(it)h(is)g(useful.)51
b(Unsurprisingly)-5 b(,)40 b(there)i(are)h(some)806 4800
y(restrictions)d(on)g(this)i(e)o(xtra)e(ability)-5 b(,)40
b(and)h(we)g(need)f(to)h(kno)n(w)f(what)h(the)o(y)f(are.)900
4902 y(F)o(or)f(a)i(start,)f(the)g(arithmetic)e(e)o(xpressions)h(to)h
(be)f(e)n(v)n(aluated)g(must)h(be)f(on)g(the)806 5002
y(right)45 b(hand)g(side)i(of)f Fs(is)o Fw(.)63 b(In)46
b(our)f(earlier)h(e)o(xamples)f(we)i(carefully)e(posed)g(the)806
5102 y(query)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 93 105
TeXDict begin 93 104 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(5:)46 b(Arithmetic)1739 b(93)p
0 TeXcolorgray 522 1051 a Fs(?-)41 b(X)g(is)g(6+2.)522
1250 y(X)g(=)g(8)357 1416 y Fw(which)f(is)i(the)f(right)f(w)o(ay)h(to)g
(do)g(it.)46 b(If)41 b(instead)g(we)g(had)g(ask)o(ed)522
1582 y Fs(6+2)f(is)h(X.)357 1748 y Fw(we)71 b(w)o(ould)g(ha)n(v)o(e)f
(got)h(a)h(message)f(saying)g Fs(instantiation_e)o(rro)o(r)-6
b Fw(,)79 b(or)357 1848 y(something)39 b(similar)-5 b(.)451
1947 y(Moreo)o(v)o(er)m(,)50 b(although)f(we)j(are)e(free)h(to)g(use)g
(v)n(ariables)f(on)h(the)f(right)h(hand)357 2047 y(side)h(of)f
Fs(is)o Fw(,)k(when)c(we)h(actually)g(carry)e(out)i(e)n(v)n(aluation,)g
(the)g(v)n(ariable)f(must)357 2147 y(already)g(ha)n(v)o(e)h(been)g
(instantiated)g(to)h(a)g(v)n(ariable-free)e(arithmetic)h(e)o
(xpression.)357 2246 y(If)j(the)g(v)n(ariable)g(is)h(uninstantiated,)h
(or)f(if)f(it)h(is)h(instantiated)e(to)g(something)357
2346 y(other)42 b(than)g(an)h(inte)o(ger)m(,)f(we)h(will)h(get)f(some)f
(sort)h(of)g Fs(instantiation_er)o(ror)357 2445 y Fw(message.)i(This)40
b(is)h(because)e(arithmetic)g(isn')o(t)h(performed)d(using)j(Prolog')-5
b(s)39 b(usual)357 2545 y(uni\002cation)i(and)h(kno)n(wledge)f(base)i
(search)f(mechanisms:)48 b(it')-5 b(s)44 b(done)e(by)g(calling)357
2645 y(up)51 b(a)h(special)g(black)f(box)g(which)h(kno)n(ws)f(about)g
(inte)o(ger)f(arithmetic.)78 b(If)51 b(we)357 2744 y(hand)40
b(the)h(black)f(box)g(the)h(wrong)f(kind)g(of)g(data,)h(it')-5
b(s)42 b(going)e(to)h(complain.)451 2844 y(Here')-5 b(s)41
b(an)g(e)o(xample.)k(Recall)c(our)f(\223add)h(3)g(and)f(double)g
(it\224)h(predicate.)522 3010 y Fs(add_3_and_double)o(\(X,)o(Y\))35
b(:-)41 b(Y)g(is)f(\(X+3\)*2.)357 3176 y Fw(When)34 b(we)i(described)d
(this)i(predicate,)g(we)g(carefully)f(said)h(that)g(it)g(added)f(3)h
(to)g(its)357 3276 y(\002rst)41 b(ar)o(gument,)e(doubled)f(the)j
(result,)g(and)f(returned)f(the)i(answer)g(in)g(its)h(second)357
3375 y(ar)o(gument.)60 b(F)o(or)47 b(e)o(xample,)f Fs
(add_3_and_double\()o(3,)o(X\))41 b Fw(returns)46 b Fs(X)41
b(=)g(12)o Fw(.)64 b(W)-7 b(e)357 3475 y(didn')o(t)47
b(say)i(an)o(ything)e(about)h(using)g(this)i(predicate)d(in)i(the)g(re)
n(v)o(erse)f(direction.)357 3574 y(F)o(or)40 b(e)o(xample,)g(we)h
(might)f(hope)g(that)h(posing)f(the)h(query)522 3740
y Fs(?-)g(add_3_and_double)o(\(X)o(,1)o(2\).)357 3906
y Fw(w)o(ould)58 b(return)g(the)h(answer)f Fs(X=3)o Fw(.)100
b(But)60 b(it)f(doesn')o(t.)98 b(Instead)58 b(we)i(get)f(the)357
4006 y Fs(instantiation_e)o(rro)o(r)38 b Fw(message.)54
b(Why?)f(W)-7 b(ell,)46 b(when)d(we)h(pose)f(the)h(query)357
4106 y(this)36 b(w)o(ay)g(round,)f(we)h(are)g(asking)g(Prolog)e(to)j(e)
n(v)n(aluate)d Fs(12)41 b(is)g(\(X+3\)*2)m Fw(,)c(which)357
4205 y(it)k Ft(can')n(t)g Fw(do)g(as)h Fs(X)f Fw(is)h(not)e
(instantiated.)451 4305 y(T)-7 b(w)o(o)51 b(\002nal)g(remarks.)73
b(As)51 b(we')l(v)o(e)f(already)f(mentioned,)i(for)f(Prolog)f
Fs(3)41 b(+)h(2)357 4405 y Fw(is)50 b(just)g(a)g(term.)72
b(In)49 b(f)o(act,)j(for)d(Prolog,)h(it)h(really)e Ft(is)i
Fw(the)e(term)h Ft(+\(3,2\))p Fw(.)70 b(The)357 4504
y(e)o(xpression)46 b Fs(3)c(+)f(2)48 b Fw(is)h(just)g(a)g(user)n
(-friendly)d(notation)h(that')-5 b(s)49 b(nicer)f(for)g(us)h(to)357
4604 y(use.)d(This)41 b(means)f(that,)h(if)g(you)f(w)o(ant)i(to,)e(you)
g(can)h(gi)n(v)o(e)f(Prolog)g(queries)h(lik)o(e)522 4770
y Fs(X)g(is)g(+\(3,2\))357 4936 y Fw(and)f(Prolog)g(will)i(correctly)d
(reply)522 5102 y Fs(X)i(=)g(5)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 94 106
TeXDict begin 94 105 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(94)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(Actually)-5 b(,)39 b(you)h(can)h(e)n(v)o(en)f
(gi)n(v)o(en)g(Prolog)g(the)h(query)971 1217 y Fs(?-)g
(is\(X,+\(3,2\)\))806 1383 y Fw(and)f(Prolog)g(will)i(respond)971
1549 y Fs(X)f(=)g(5)806 1715 y Fw(This)48 b(is)i(because,)g(for)e
(Prolog,)h(the)g(e)o(xpression)e Fs(X)41 b(is)g(+\(3,2\))47
b Fw(really)h(is)h(the)806 1815 y(term)c Fs(is\(X,+\(3,2\)\))-5
b Fw(.)62 b(The)46 b(e)o(xpression)e Fs(X)d(is)g(+\(3,2\))j
Fw(is)j(just)g(user)n(-friendly)806 1914 y(notation.)42
b(Underneath,)35 b(as)j(al)o(w)o(ays,)f(Prolog)f(is)h(just)g(w)o
(orking)e(a)o(w)o(ay)h(with)h(terms.)900 2014 y(Summing)49
b(up,)k(arithmetic)c(in)i(Prolog)f(is)h(easy)g(to)g(use.)75
b(Pretty)50 b(much)g(all)806 2114 y(you)40 b(ha)n(v)o(e)h(to)g
(remember)e(is)k(to)e(use)h Fs(is)f Fw(to)g(force)f(e)n(v)n(aluation,)g
(that)h(stuf)n(f)g(to)h(be)806 2213 y(e)n(v)n(aluated)36
b(must)i(go)f(to)h(the)g(right)g(of)f Fs(is)o Fw(,)i(and)f(to)g(tak)o
(e)g(care)f(that)h(an)o(y)f(v)n(ariables)806 2313 y(are)55
b(correctly)g(instantiated.)90 b(But)56 b(there)f(is)i(a)g(deeper)d
(point)h(that)h(is)h(w)o(orth)806 2412 y(re\003ecting)51
b(on:)68 b(bolting)51 b(on)h(the)h(e)o(xtra)e(capability)h(to)g(do)g
(arithmetic)g(in)g(this)806 2512 y(w)o(ay)40 b(has)g(further)f(widened)
g(the)h(gap)g(between)f(the)h(procedural)e(and)i(declarati)n(v)o(e)806
2612 y(meanings)f(of)i(Prolog)f(programs.)806 2803 y
Fk(3)99 b(Arithmetic)42 b(and)g(Lists)806 2932 y Fw(Probably)d(the)j
(most)f(important)f(use)i(of)f(arithmetic)g(in)g(this)h(book)e(is)i(to)
g(tell)g(us)806 3032 y(useful)i(f)o(acts)h(about)f(data-structures,)g
(such)h(as)g(lists.)59 b(F)o(or)45 b(e)o(xample,)f(it)i(can)f(be)806
3131 y(useful)e(to)h(kno)n(w)f(ho)n(w)g(long)g(a)h(list)h(is.)55
b(W)-7 b(e')o(ll)45 b(gi)n(v)o(e)e(some)h(e)o(xamples)e(of)i(using)806
3231 y(lists)e(together)d(with)j(arithmetic)e(capabilities.)900
3331 y(Ho)n(w)h(long)f(is)i(a)f(list?)47 b(Here')-5 b(s)41
b(a)h(recursi)n(v)o(e)d(de\002nition.)p 0 TeXcolorgray
909 3497 a(1.)p 0 TeXcolorgray 41 w(The)i(empty)f(list)i(has)f(length)f
(zero.)p 0 TeXcolorgray 909 3663 a(2.)p 0 TeXcolorgray
41 w(A)e(non-empty)d(list)k(has)f(length)f(1)h(+)g Ft(len)p
Fw(\(T\),)f(where)g Ft(len)p Fw(\(T\))g(is)i(the)e(length)1013
3762 y(of)k(its)h(tail.)900 3928 y(This)54 b(de\002nition)e(is)i
(practically)e(a)i(Prolog)e(program)g(already)-5 b(.)81
b(Here')-5 b(s)53 b(the)806 4028 y(code)40 b(we)h(need:)971
4194 y Fs(len\([],0\).)971 4294 y(len\([_|T],N\))36 b(:-)41
b(len\(T,X\),)d(N)j(is)g(X+1.)900 4460 y Fw(This)g(predicate)f(w)o
(orks)g(in)i(the)f(e)o(xpected)e(w)o(ay)-5 b(.)45 b(F)o(or)c(e)o
(xample:)971 4626 y Fs(?-)g(len\([a,b,c,d,e,)o([a,)o(b])o(,g)o(],X)o
(\).)971 4825 y(X)g(=)g(7)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 95 107
TeXDict begin 95 106 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(5:)46 b(Arithmetic)1739 b(95)p
0 TeXcolorgray 451 1051 a(No)n(w)-5 b(,)63 b(this)c(is)h(quite)f(a)g
(good)f(program:)80 b(it')-5 b(s)60 b(easy)f(to)g(understand)e(and)357
1151 y(ef)n(\002cient.)71 b(But)51 b(there)e(is)i(another)d(method)g
(of)i(\002nding)e(the)i(length)f(of)h(a)g(list.)357 1250
y(W)-7 b(e')o(ll)56 b(no)n(w)f(look)f(at)i(this)f(alternati)n(v)o(e,)j
(because)c(it)i(introduces)e(the)h(idea)g(of)357 1350
y(accumulators.)80 b(If)53 b(you')l(re)f(used)h(to)g(other)f
(programming)e(languages,)55 b(you')l(re)357 1449 y(probably)36
b(used)j(to)g(the)g(idea)g(of)g(using)f(v)n(ariables)h(to)g(hold)f
(intermediate)g(results.)357 1549 y(An)j(accumulator)e(is)i(the)g
(Prolog)f(analog)g(of)h(this)g(idea.)451 1651 y(Here')-5
b(s)36 b(ho)n(w)f(to)g(use)h(an)f(accumulator)f(to)h(calculate)h(the)f
(length)g(of)g(a)h(list.)45 b(W)-7 b(e)357 1750 y(shall)41
b(de\002ne)f(a)i(predicate)e Fs(accLen)m Fw(/3)h(which)g(tak)o(es)g
(the)g(follo)n(wing)e(ar)o(guments.)522 1922 y Fs(accLen\(List,Acc,)o
(Len)o(gt)o(h\))357 2095 y Fw(Here)j Fs(List)f Fw(is)i(the)f(list)h
(whose)f(length)f(we)i(w)o(ant)f(to)g(\002nd,)g(and)f
Fs(Length)g Fw(is)i(its)357 2194 y(length)h(\(an)h(inte)o(ger\).)58
b(What)46 b(about)e Fs(Acc)o Fw(?)60 b(This)46 b(is)g(the)g
(accumulator)d(we)j(will)357 2294 y(use)h(to)f(k)o(eep)h(track)f(of)g
(intermediate)f(v)n(alues)i(for)f(length)f(\(so)i(it)g(will)h(also)f
(be)357 2393 y(an)g(inte)o(ger\).)62 b(Here')-5 b(s)47
b(what)g(we)g(do.)63 b(When)47 b(we)h(call)f(this)g(predicate,)g(we)h
(are)357 2493 y(going)43 b(to)h(gi)n(v)o(e)f Fs(Acc)h
Fw(an)g(initial)h(v)n(alue)e(of)h Fs(0)p Fw(.)56 b(W)-7
b(e)45 b(then)f(recursi)n(v)o(ely)e(w)o(ork)h(our)357
2593 y(w)o(ay)e(do)n(wn)f(the)i(list,)g(adding)e Fs(1)i
Fw(to)f Fs(Acc)g Fw(each)g(time)g(we)h(\002nd)f(a)h(head)f(element,)357
2692 y(until)h(we)h(reach)f(the)h(empty)f(list.)52 b(When)43
b(we)g(reach)f(the)h(empty)f(list,)i Fs(Acc)e Fw(will)357
2792 y(contain)e(the)h(length)f(of)g(the)h(list.)47 b(Here')-5
b(s)41 b(the)g(code:)522 2964 y Fs(accLen\([_|T],A,L)o(\))36
b(:-)82 b(Anew)40 b(is)g(A+1,)g(accLen\(T,Anew,L\))o(.)522
3064 y(accLen\([],A,A\).)451 3236 y Fw(The)34 b(base)g(case)g(of)f(the)
h(de\002nition,)g(uni\002es)g(the)g(second)f(and)g(third)g(ar)o
(guments.)357 3336 y(Why?)45 b(Because)c(this)h(tri)n(vial)f
(uni\002cation)e(is)j(a)g(nice)e(w)o(ay)h(of)g(making)f(sure)h(that)357
3435 y(the)48 b(result,)i(that)f(is,)i(the)d(length)f(of)h(the)h(list,)
i(is)e(returned.)66 b(When)49 b(we)f(reach)357 3535 y(the)g(end)g(of)g
(the)h(list,)i(the)e(accumulator)d(\(the)i(second)g(v)n(ariable\))f
(contains)h(the)357 3634 y(length)43 b(of)h(the)g(list.)56
b(So)44 b(we)g(gi)n(v)o(e)f(this)i(v)n(alue)e(\(via)h(uni\002cation\))e
(to)j(the)f(length)357 3734 y(v)n(ariable)h(\(the)h(third)g(v)n
(ariable\).)60 b(Here')-5 b(s)47 b(an)f(e)o(xample)f(trace.)62
b(Y)-9 b(ou)46 b(can)g(clearly)357 3834 y(see)39 b(ho)n(w)f(the)h
(length)f(v)n(ariable)f(gets)j(its)f(v)n(alue)f(at)i(the)e(bottom)g(of)
g(the)h(recursion)357 3933 y(and)h(passes)i(it)f(upw)o(ards)f(as)i
(Prolog)e(is)i(coming)d(out)i(of)g(the)g(recursion.)522
4105 y Fs(?-)g(accLen\([a,b,c],0)o(,L)o(\).)647 4205
y(Call:)e(\(6\))h(accLen\([a,)e(b,)i(c],)h(0,)f(_G449\))f(?)647
4305 y(Call:)g(\(7\))h(_G518)g(is)g(0+1)h(?)647 4404
y(Exit:)e(\(7\))h(1)h(is)g(0+1)f(?)647 4504 y(Call:)f(\(7\))h
(accLen\([b,)e(c],)i(1,)h(_G449\))e(?)647 4604 y(Call:)g(\(8\))h(_G521)
g(is)g(1+1)h(?)647 4703 y(Exit:)e(\(8\))h(2)h(is)g(1+1)f(?)647
4803 y(Call:)f(\(8\))h(accLen\([c],)d(2,)k(_G449\))e(?)647
4902 y(Call:)g(\(9\))h(_G524)g(is)g(2+1)h(?)647 5002
y(Exit:)e(\(9\))h(3)h(is)g(2+1)f(?)647 5102 y(Call:)f(\(9\))h
(accLen\([],)e(3,)i(_G449\))f(?)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 96 108
TeXDict begin 96 107 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(96)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 1095 1051 a Fs(Exit:)g(\(9\))g(accLen\([],)d(3,)k(3\))g
(?)1095 1151 y(Exit:)f(\(8\))g(accLen\([c],)d(2,)k(3\))f(?)1095
1250 y(Exit:)g(\(7\))g(accLen\([b,)d(c],)k(1,)f(3\))h(?)1095
1350 y(Exit:)f(\(6\))g(accLen\([a,)d(b,)k(c],)f(0,)h(3\))g(?)900
1508 y Fw(As)46 b(a)g(\002nal)f(step,)i(we')o(ll)e(de\002ne)g(a)h
(predicate)e(which)g(calls)i Fs(accLen)e Fw(for)g(us,)806
1607 y(and)c(gi)n(v)o(es)g(it)i(the)f(initial)g(v)n(alue)g(of)f(0:)971
1765 y Fs(leng\(List,Length)o(\))35 b(:-)41 b(accLen\(List,0,Le)o(ngt)o
(h\))o(.)806 1923 y Fw(So)g(no)n(w)f(we)h(can)g(pose)g(queries)f(lik)o
(e)h(this:)971 2081 y Fs(?-)g(leng\([a,b,c,d,e)o(,[a)o(,b)o(],)o(g],)o
(X\))o(.)900 2239 y Fw(Accumulators)j(are)h(e)o(xtremely)e(common)h(in)
h(Prolog)f(programs.)57 b(\(W)-7 b(e')o(ll)46 b(see)806
2339 y(another)h(accumulator)f(based)i(program)e(in)j(this)g(chapter)m
(,)g(and)e(some)i(more)e(in)806 2439 y(later)h(chapters.\))69
b(But)49 b(why)f(is)i(this?)70 b(In)48 b(what)h(w)o(ay)g(is)h
Fs(accLen)d Fw(better)h(than)806 2538 y Fs(len)n Fw(?)d(After)37
b(all,)i(it)e(looks)g(more)f(dif)n(\002cult.)44 b(The)37
b(answer)g(is)h(that)f Fs(accLen)f Fw(is)i(tail)806 2638
y(recursi)n(v)o(e)g(while)i Fs(len)f Fw(is)i(not.)k(In)39
b(tail)i(recursi)n(v)o(e)d(programs,)g(the)i(result)g(is)h(fully)806
2737 y(calculated)32 b(once)h(we)g(reached)f(the)i(bottom)e(of)h(the)g
(recursion)f(and)h(just)h(has)f(to)h(be)806 2837 y(passed)42
b(up.)50 b(In)43 b(recursi)n(v)o(e)e(programs)g(which)h(are)g(not)h
(tail)g(recursi)n(v)o(e,)e(there)i(are)806 2937 y(goals)35
b(at)g(other)g(le)n(v)o(els)g(of)g(recursion)f(which)h(ha)n(v)o(e)f(to)
i(w)o(ait)g(for)e(the)i(answer)f(from)806 3036 y(a)44
b(lo)n(wer)g(le)n(v)o(el)g(of)g(recursion)f(before)g(the)o(y)h(can)g
(be)g(e)n(v)n(aluated.)55 b(T)-7 b(o)45 b(understand)806
3136 y(this,)63 b(compare)57 b(the)h(traces)h(for)f(the)g(queries)g
Fs(accLen\([a,b,c],0)o(,L\))52 b Fw(\(see)806 3236 y(abo)o(v)o(e\))j
(and)h Fs(len\([a,b,c],0,L\))51 b Fw(\(gi)n(v)o(en)k(belo)n(w\).)93
b(In)57 b(the)g(\002rst)h(case)f(the)806 3335 y(result)d(is)i(b)n(uilt)
f(while)f(going)g(into)g(the)h(recursion)e(\227)i(once)f(the)h(bottom)f
(is)806 3435 y(reached)38 b(at)j Fs(accLen\([],3,_G44)o(9\))-7
b Fw(,)41 b(the)f(result)g(is)h(there)e(and)h(only)f(has)h(to)h(be)806
3534 y(passed)46 b(up.)62 b(In)46 b(the)h(second)f(case)g(the)h(result)
g(is)g(b)n(uilt)g(while)f(coming)g(out)g(of)806 3634
y(the)j(recursion;)j(the)d(result)h(of)f Fs(len\([b,c],)37
b(_G481\))n Fw(,)51 b(for)e(instance,)i(is)f(only)806
3734 y(computed)e(after)i(the)h(recursi)n(v)o(e)e(call)i(of)f
Fs(len)g Fw(has)h(been)f(completed)f(and)g(the)806 3833
y(result)f(of)f Fs(len\([c],_G489\))c Fw(is)49 b(kno)n(wn.)65
b(In)48 b(short,)h(tail)g(recursi)n(v)o(e)d(programs)806
3933 y(ha)n(v)o(e)40 b(less)i(bookk)o(eeping)37 b(o)o(v)o(erhead,)i
(and)h(this)h(mak)o(es)g(them)g(more)f(ef)n(\002cient.)971
4105 y Fs(?-)h(len\([a,b,c],L\).)1095 4205 y(Call:)f(\(6\))g(len\([a,)f
(b,)h(c],)h(_G418\))e(?)1095 4305 y(Call:)h(\(7\))g(len\([b,)f(c],)h
(_G481\))f(?)1095 4404 y(Call:)h(\(8\))g(len\([c],)e(_G486\))h(?)1095
4504 y(Call:)h(\(9\))g(len\([],)f(_G489\))g(?)1095 4604
y(Exit:)h(\(9\))g(len\([],)f(0\))h(?)1095 4703 y(Call:)g(\(9\))g(_G486)
g(is)g(0+1)h(?)1095 4803 y(Exit:)f(\(9\))g(1)h(is)g(0+1)f(?)1095
4902 y(Exit:)g(\(8\))g(len\([c],)e(1\))j(?)1095 5002
y(Call:)f(\(8\))g(_G481)g(is)g(1+1)h(?)1095 5102 y(Exit:)f(\(8\))g(2)h
(is)g(1+1)f(?)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 97 109
TeXDict begin 97 108 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(5:)46 b(Arithmetic)1739 b(97)p
0 TeXcolorgray 647 1051 a Fs(Exit:)39 b(\(7\))h(len\([b,)f(c],)h(2\))h
(?)647 1151 y(Call:)e(\(7\))h(_G418)g(is)g(2+1)h(?)647
1250 y(Exit:)e(\(7\))h(3)h(is)g(2+1)f(?)647 1350 y(Exit:)f(\(6\))h
(len\([a,)f(b,)i(c],)f(3\))h(?)357 1526 y Fk(4)99 b(Comparing)42
b(Integers)357 1655 y Fw(Some)51 b(Prolog)g(arithmetic)g(predicates)g
(actually)h(do)f(carry)g(out)h(arithmetic)f(all)357 1755
y(by)i(themselv)o(es)f(\(that)h(is,)58 b(without)52 b(the)i(assistance)
g(of)f Fs(is)o Fw(\).)83 b(These)53 b(are)h(the)357 1855
y(operators)39 b(that)i(compare)f(inte)o(gers.)p 0 TeXcolorgray
0 TeXcolorgray 973 2010 a(Arithmetic)g(e)o(xamples)98
b(Prolog)40 b(Notation)973 2110 y Fj(x)23 b(<)g(y)614
b Fs(X)41 b(<)g(Y.)973 2209 y Fj(x)23 b Fh(\024)g Fj(y)614
b Fs(X)41 b(=<)g(Y.)973 2309 y Fj(x)23 b Ff(=)g Fj(y)614
b Fs(X)41 b(=:=)f(Y.)973 2409 y Fj(x)23 b Fh(6)p Ff(=)g
Fj(y)614 b Fs(X)41 b(=\\=)f(Y.)973 2508 y Fj(x)23 b Fh(\025)g
Fj(y)614 b Fs(X)41 b(>=)g(Y)973 2608 y Fj(x)23 b(>)g(y)614
b Fs(X)41 b(>)g(Y)451 2763 y Fw(These)g(operators)e(ha)n(v)o(e)i(the)g
(ob)o(vious)e(meaning:)522 2910 y Fs(?-)i(2)g(<)g(4.)522
3010 y(yes)522 3209 y(?-)g(2)g(=<)g(4.)522 3308 y(yes)522
3508 y(?-)g(4)g(=<)g(4.)522 3607 y(yes)522 3807 y(?-)g(4=:=4.)522
3906 y(yes)522 4105 y(?-)g(4=\\=5.)522 4205 y(yes)522
4404 y(?-)g(4=\\=4.)522 4504 y(no)522 4703 y(?-)g(4)g(>=)g(4.)522
4803 y(yes)522 5002 y(?-)g(4)g(>)g(2.)522 5102 y(yes)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 98 110
TeXDict begin 98 109 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(98)1829 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(Moreo)o(v)o(er)m(,)c(the)o(y)i(force)f(both)h
(their)g(right)g(hand)g(and)g(left)g(hand)g(ar)o(guments)e(to)806
1151 y(be)k(e)n(v)n(aluated:)971 1326 y Fs(?-)h(2)g(<)g(4+1.)971
1426 y(yes)971 1625 y(?-)g(2+1)f(<)h(4.)971 1725 y(yes)971
1924 y(?-)g(2+1)f(<)h(3+2.)971 2024 y(yes)900 2199 y
Fw(Note)g(that)g Fs(=:=)f Fw(is)i(dif)n(ferent)d(from)h
Fs(=)p Fw(,)h(as)h(the)f(follo)n(wing)e(e)o(xamples)h(sho)n(w:)971
2375 y Fs(?-)h(4=4.)971 2474 y(yes)971 2674 y(?-)g(2+2)f(=4.)971
2773 y(no)971 2973 y(?-)h(2+2)f(=:=)g(4.)971 3072 y(yes)806
3248 y Fw(That)55 b(is,)60 b Fs(=)55 b Fw(tries)i(to)e(unify)g(its)h
(ar)o(guments;)61 b(it)c(does)e Ft(not)i Fw(force)d(arithmetic)806
3347 y(e)n(v)n(aluation.)43 b(That')-5 b(s)42 b Fs(=:=)n
Fw(')-5 b(s)42 b(job)m(.)900 3450 y(Whene)n(v)o(er)54
b(we)i(use)h(these)f(operators,)h(we)g(ha)n(v)o(e)e(to)h(tak)o(e)g
(care)f(that)h(an)o(y)806 3550 y(v)n(ariables)41 b(are)h(instantiated.)
48 b(F)o(or)42 b(e)o(xample,)e(all)j(the)f(follo)n(wing)e(queries)h
(lead)h(to)806 3649 y(instantiation)e(errors.)971 3825
y Fs(?-)h(X)g(<)g(3.)971 4024 y(?-)g(3)g(<)g(Y.)971 4224
y(?-)g(X)g(=:=)f(X.)806 4399 y Fw(Moreo)o(v)o(er)m(,)d(v)n(ariables)j
(ha)n(v)o(e)h(to)g(be)g(instantiated)f(to)h Ft(inte)m(g)o(er)o(s)p
Fw(.)46 b(The)41 b(query)971 4575 y Fs(?-)g(X)g(=)g(3,)f(X)i(<)f(4.)806
4750 y Fw(succeeds.)k(But)c(the)g(query)971 4926 y Fs(?-)g(X)g(=)g(b,)f
(X)i(<)f(4.)806 5102 y Fw(f)o(ails.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 99 111
TeXDict begin 99 110 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(5:)46 b(Arithmetic)1739 b(99)p
0 TeXcolorgray 451 1051 a(Ok,)56 b(let')-5 b(s)54 b(no)n(w)e(look)g(at)
h(an)g(e)o(xample)f(which)g(puts)h(Prolog')-5 b(s)52
b(abilities)i(to)357 1151 y(compare)e(numbers)g(to)i(w)o(ork.)84
b(W)-7 b(e')l(re)54 b(going)e(to)i(de\002ne)f(a)i(predicate)d(which)357
1250 y(tak)o(es)40 b(a)g(non-empty)c(list)41 b(of)e(non-ne)o(gati)n(v)o
(e)d(inte)o(gers)j(as)h(its)h(\002rst)f(ar)o(gument,)d(and)357
1350 y(returns)d(the)i(maximum)e(inte)o(ger)h(in)g(the)h(list)h(as)f
(its)h(last)f(ar)o(gument.)42 b(Again,)35 b(we')o(ll)357
1449 y(use)i(an)g(accumulator)-5 b(.)42 b(As)c(we)f(w)o(ork)f(our)h(w)o
(ay)g(do)n(wn)e(the)i(list,)i(the)e(accumulator)357 1549
y(will)42 b(k)o(eep)g(track)f(of)h(the)g(highest)f(inte)o(ger)g(found)f
(so)j(f)o(ar)-5 b(.)49 b(If)42 b(we)g(\002nd)g(a)g(higher)357
1649 y(v)n(alue,)c(the)h(accumulator)f(will)i(be)f(updated)e(to)j(this)
f(ne)n(w)g(v)n(alue.)45 b(When)39 b(we)g(call)357 1748
y(the)i(program,)d(we)k(set)f(the)g(accumulator)e(to)i(an)g(initial)g
(v)n(alue)g(of)f(0.)451 1848 y(Here')-5 b(s)41 b(the)g(code.)k(Note)c
(that)g(there)g(are)g Ft(two)g Fw(recursi)n(v)o(e)f(clauses:)522
1985 y Fs(accMax\([H|T],A,M)o(ax\))35 b(:-)647 2085 y(H)41
b(>)g(A,)647 2185 y(accMax\(T,H,Max\))o(.)522 2384 y(accMax\([H|T],A,M)
o(ax\))35 b(:-)647 2484 y(H)41 b(=<)f(A,)647 2583 y(accMax\(T,A,Max\))o
(.)522 2782 y(accMax\([],A,A\).)357 2920 y Fw(The)48
b(\002rst)i(clause)f(tests)h(if)f(the)g(head)f(of)h(the)g(list)h(is)f
(lar)o(ger)f(than)g(the)h(lar)o(gest)357 3020 y(v)n(alue)44
b(found)f(so)i(f)o(ar)-5 b(.)57 b(If)45 b(it)g(is,)i(we)e(set)g(the)g
(accumulator)e(to)i(this)g(ne)n(w)g(v)n(alue,)357 3119
y(and)38 b(then)f(recursi)n(v)o(ely)g(w)o(ork)h(through)e(the)i(tail)i
(of)e(the)g(list.)46 b(The)38 b(second)g(clause)357 3219
y(applies)56 b(when)f(the)i(head)e(is)i(less)h(than)d(or)h(equal)g(to)g
(the)h(accumulator;)62 b(in)357 3318 y(this)44 b(case)g(we)h(recursi)n
(v)o(ely)d(w)o(ork)h(through)f(the)i(tail)g(of)g(the)g(list)h(using)e
(the)h(old)357 3418 y(accumulator)d(v)n(alue.)53 b(Finally)-5
b(,)44 b(the)f(base)h(clause)f(uni\002es)h(the)g(second)e(and)h(third)
357 3518 y(ar)o(guments;)d(it)j(gi)n(v)o(es)f(the)g(highest)f(v)n(alue)
h(we)g(found)f(while)h(going)f(through)f(the)357 3617
y(list)i(to)f(the)g(last)h(ar)o(gument.)451 3717 y(Here')-5
b(s)41 b(an)g(e)o(xample)f(query:)522 3854 y Fs(?-)h(accMax\([1,0,5,4])
o(,0)o(,M)o(ax\))o(.)357 3992 y Fw(Here)g(the)f(\002rst)i(clause)f(of)g
Fs(accMax)e Fw(applies,)h(resulting)g(in)h(the)g(follo)n(wing)f(goal:)
522 4129 y Fs(?-)h(accMax\([0,5,4],1)o(,M)o(ax)o(\).)357
4267 y Fw(Note)k(the)h(v)n(alue)f(of)h(the)g(accumulator)e(has)i
(changed)e(to)i(1.)60 b(No)n(w)46 b(the)g(second)357
4366 y(clause)c(of)g Fs(accMax)f Fw(applies,)h(as)i(0)e(\(the)h(ne)o
(xt)e(element)h(of)g(the)h(list\))g(is)h(smaller)357
4466 y(than)e(1,)i(the)f(v)n(alue)g(of)f(the)i(accumulator)-5
b(.)50 b(This)44 b(process)e(is)i(repeated)e(until)h(we)357
4566 y(reach)d(the)h(empty)f(list:)522 4703 y Fs(?-)h
(accMax\([5,4],1,M)o(ax)o(\).)522 4902 y(?-)g(accMax\([4],5,Max)o(\).)
522 5102 y(?-)g(accMax\([],5,Max\))o(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 100 112
TeXDict begin 100 111 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(100)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(No)n(w)45 b(the)h(third)f(clause)h(applies,)h
(unifying)d(the)h(v)n(ariable)g Fs(Max)g Fw(with)h(the)g(v)n(alue)806
1151 y(of)40 b(the)h(accumulator:)971 1317 y Fs(Max)f(=)h(5.)971
1416 y(yes)900 1582 y Fw(Again,)j(it')-5 b(s)46 b(nice)e(to)h(de\002ne)
f(a)h(predicate)f(which)g(calls)h(this,)h(and)e(initialises)806
1682 y(the)38 b(accumulator)-5 b(.)44 b(But)39 b(w)o(ait:)46
b(what)38 b(should)g(we)h(initialise)h(the)f(accumulator)d(to?)806
1781 y(If)43 b(you)f(say)h(0,)h(this)g(means)e(you)h(are)g(assuming)f
(that)h(all)h(the)f(numbers)f(in)h(the)806 1881 y(list)54
b(are)f(positi)n(v)o(e.)82 b(But)54 b(suppose)f(we)g(gi)n(v)o(e)g(a)h
(list)g(of)f(ne)o(gati)n(v)o(e)e(inte)o(gers)i(as)806
1981 y(input.)44 b(Then)d(we)g(w)o(ould)f(ha)n(v)o(e)971
2147 y Fs(?-)h(accMax\([-11,-2,)o(-7,)o(-4)o(,-)o(12])o(,0)o(,Ma)o(x\))
o(.)971 2346 y(Max)f(=)h(0)971 2446 y(yes)806 2612 y
Fw(This)46 b(is)i Ft(not)g Fw(what)f(we)g(w)o(ant:)58
b(the)47 b(biggest)f(number)f(on)h(the)h(list)h(is)g(-2.)63
b(Our)806 2711 y(use)46 b(of)f(0)i(as)f(the)g(initial)h(v)n(alue)e(of)h
(the)g(accumulator)e(has)i(ruined)e(e)n(v)o(erything,)806
2811 y(because)c(it')-5 b(s)42 b(bigger)d(than)i(an)o(y)f(number)f(on)i
(the)g(list.)900 2911 y(There')-5 b(s)36 b(an)h(easy)g(w)o(ay)f(around)
f(this:)44 b(since)37 b(our)f(input)g(list)i(will)f(al)o(w)o(ays)g(be)g
(a)806 3010 y(non-empty)j(list)k(of)f(inte)o(gers,)g(simply)g
(initialise)h(the)f(accumulator)e(to)j(the)f(head)806
3110 y(of)e(the)g(list.)49 b(That)42 b(w)o(ay)f(we)h(guarantee)e(that)i
(the)g(accumulator)d(is)k(initialised)e(to)806 3209 y(a)g(number)e(on)i
(the)g(list.)46 b(The)41 b(follo)n(wing)e(predicate)h(does)h(this)g
(for)f(us:)971 3376 y Fs(max\(List,Max\))c(:-)1178 3475
y(List)k(=)h([H|_],)1178 3575 y(accMax\(List,H,Max)o(\).)806
3741 y Fw(So)g(we)g(can)g(simply)f(say:)971 3907 y Fs
(max\([1,2,46,53,0)o(],)o(X\).)971 4106 y(X)h(=)g(53)971
4206 y(yes)806 4372 y Fw(And)f(furthermore)e(we)j(ha)n(v)o(e:)971
4538 y Fs(max\([-11,-2,-7,-)o(4,)o(-12)o(],)o(X\).)971
4737 y(X)g(=)g(-2)971 4837 y(yes)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 101 113
TeXDict begin 101 112 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(5:)46 b(Arithmetic)1698 b(101)p
0 TeXcolorgray 357 1051 a Fk(5)99 b(Exer)n(cises)357
1214 y Fv(Exer)o(cise)40 b(5.1.)95 b Fw(Ho)n(w)41 b(does)g(Prolog)f
(respond)f(to)i(the)g(follo)n(wing)e(queries?)p 0 TeXcolorgray
3286 1121 118 4 v 3286 1239 4 118 v 0 0 0 0.05 TeXcolorcmyk
0 0 0 0.05 TeXcolorcmyk 3290 1239 112 118 v 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray 546 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 3401 1239 4 118 v 3286 1242 118 4 v 0
TeXcolorgray 0 TeXcolorgray 460 1380 a Fw(1.)p 0 TeXcolorgray
41 w Fs(X)i(=)g(3*4.)p 0 TeXcolorgray 460 1546 a Fw(2.)p
0 TeXcolorgray 41 w Fs(X)g(is)g(3*4.)p 0 TeXcolorgray
460 1712 a Fw(3.)p 0 TeXcolorgray 41 w Fs(4)g(is)g(X.)p
0 TeXcolorgray 460 1878 a Fw(4.)p 0 TeXcolorgray 41 w
Fs(X)g(=)g(Y.)p 0 TeXcolorgray 460 2044 a Fw(5.)p 0 TeXcolorgray
41 w Fs(3)g(is)g(1+2.)p 0 TeXcolorgray 460 2210 a Fw(6.)p
0 TeXcolorgray 41 w Fs(3)g(is)g(+\(1,2\).)p 0 TeXcolorgray
460 2376 a Fw(7.)p 0 TeXcolorgray 41 w Fs(3)g(is)g(X+2.)p
0 TeXcolorgray 460 2542 a Fw(8.)p 0 TeXcolorgray 41 w
Fs(X)g(is)g(1+2.)p 0 TeXcolorgray 460 2708 a Fw(9.)p
0 TeXcolorgray 41 w Fs(1+2)g(is)f(1+2.)p 0 TeXcolorgray
419 2874 a Fw(10.)p 0 TeXcolorgray 40 w Fs(is\(X,+\(1,2\)\).)p
0 TeXcolorgray 419 3040 a Fw(11.)p 0 TeXcolorgray 40
w Fs(3+2)h(=)g(+\(3,2\).)p 0 TeXcolorgray 419 3206 a
Fw(12.)p 0 TeXcolorgray 40 w Fs(*\(7,5\))e(=)i(7*5.)p
0 TeXcolorgray 419 3372 a Fw(13.)p 0 TeXcolorgray 40
w Fs(*\(7,+\(3,2\)\))c(=)k(7*\(3+2\).)p 0 TeXcolorgray
419 3538 a Fw(14.)p 0 TeXcolorgray 40 w Fs(*\(7,\(3+2\)\))d(=)j
(7*\(3+2\).)p 0 TeXcolorgray 419 3704 a Fw(15.)p 0 TeXcolorgray
40 w Fs(7*3+2)f(=)h(*\(7,+\(3,2\)\).)p 0 TeXcolorgray
419 3870 a Fw(16.)p 0 TeXcolorgray 40 w Fs(*\(7,\(3+2\)\))d(=)j
(7*\(+\(3,2\)\).)357 4070 y Fv(Exer)o(cise)f(5.2.)p 0
TeXcolorgray 3286 3977 V 3286 4094 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 3290 4094 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 2492 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401 4094 4 118
v 3286 4097 118 4 v 0 TeXcolorgray 0 TeXcolorgray 460
4236 a Fw(1.)p 0 TeXcolorgray 41 w(De\002ne)53 b(a)g(2-place)f
(predicate)g Fs(increment)e Fw(that)j(holds)f(only)g(when)h(its)564
4335 y(second)48 b(ar)o(gument)e(is)j(an)g(inte)o(ger)e(one)h(lar)o
(ger)f(than)h(its)h(\002rst)g(ar)o(gument.)564 4435 y(F)o(or)43
b(e)o(xample,)e Fs(increment\(4,5\))d Fw(should)k(hold,)g(b)n(ut)h
Fs(increment\(4,6\))564 4534 y Fw(should)d(not.)p 0 TeXcolorgray
460 4701 a(2.)p 0 TeXcolorgray 41 w(De\002ne)58 b(a)h(3-place)e
(predicate)g Fs(sum)g Fw(that)h(holds)g(only)f(when)g(its)i(third)564
4800 y(ar)o(gument)52 b(is)j(the)g(sum)f(of)g(the)g(\002rst)h(tw)o(o)g
(ar)o(guments.)83 b(F)o(or)54 b(e)o(xample,)564 4900
y Fs(sum\(4,5,9\))38 b Fw(should)i(hold,)f(b)n(ut)i Fs(sum\(4,6,12\))c
Fw(should)j(not.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 102 114
TeXDict begin 102 113 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(102)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fv(Exer)o(cise)34 b(5.3.)93
b Fw(Write)36 b(a)f(predicate)f Fs(addone/2)e Fw(whose)j(\002rst)g(ar)o
(gument)e(is)j(a)f(list)p 0 TeXcolorgray 357 971 118
4 v 357 1089 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 361 1089 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 385 1064 a Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 471 1089 4 118 v 357 1092 118 4 v 0 TeXcolorgray
806 1151 a Fw(of)44 b(inte)o(gers,)g(and)g(whose)g(second)g(ar)o
(gument)e(is)k(the)e(list)i(of)e(inte)o(gers)g(obtained)806
1250 y(by)c(adding)g(1)h(to)g(each)f(inte)o(ger)g(in)h(the)g(\002rst)h
(list.)47 b(F)o(or)40 b(e)o(xample,)g(the)g(query)971
1418 y Fs(?-)h(addone\([1,2,7,2)o(],X)o(\).)806 1586
y Fw(should)e(gi)n(v)o(e)971 1754 y Fs(X)i(=)g([2,3,8,3].)806
2015 y Fk(6)99 b(Practical)41 b(Session)806 2146 y Fw(The)53
b(purpose)f(of)i(Practical)g(Session)g(5)g(is)h(to)f(help)f(you)g(get)h
(f)o(amiliar)f(with)806 2245 y(Prolog')-5 b(s)39 b(arithmetic)h
(capabilities,)g(and)f(to)i(gi)n(v)o(e)e(you)h(some)g(further)f
(practice)g(in)806 2345 y(list)50 b(manipulation.)68
b(T)-7 b(o)49 b(this)h(end,)h(we)e(suggest)g(the)g(follo)n(wing)f
(programming)806 2444 y(e)o(x)o(ercises:)p 0 TeXcolorgray
909 2630 a(1.)p 0 TeXcolorgray 41 w(In)62 b(the)h(te)o(xt)f(we)h
(discussed)f(the)h(3-place)e(predicate)g Fs(accMax)g
Fw(which)1013 2729 y(returned)39 b(the)h(maximum)f(of)i(a)f(list)i(of)e
(inte)o(gers.)45 b(By)c(changing)e(the)h(code)1013 2829
y(slightly)-5 b(,)52 b(turn)e(this)h(into)g(a)g(3-place)e(predicate)h
Fs(accMin)e Fw(which)i(returns)1013 2929 y(the)41 b Ft(minimum)g
Fw(of)f(a)i(list)g(of)e(inte)o(gers.)p 0 TeXcolorgray
909 3097 a(2.)p 0 TeXcolorgray 41 w(In)49 b(mathematics,)i(an)f
(n-dimensional)d(v)o(ector)h(is)j(a)f(list)g(of)g(numbers)e(of)1013
3197 y(length)e(n.)64 b(F)o(or)46 b(e)o(xample,)h Fs([2,5,12])d
Fw(is)k(a)f(3-dimensional)d(v)o(ector)m(,)j(and)1013
3297 y Fs([45,27,3,-4,6])53 b Fw(is)60 b(a)e(5-dimensional)e(v)o(ector)
-5 b(.)98 b(One)58 b(of)g(the)g(basic)1013 3396 y(operations)51
b(on)h(v)o(ectors)f(is)i Ft(scalar)g(multiplication)p
Fw(.)78 b(In)52 b(this)h(operation,)1013 3496 y(e)n(v)o(ery)h(element)h
(of)h(a)g(v)o(ector)e(is)j(multiplied)d(by)h(some)h(number)-5
b(.)88 b(F)o(or)1013 3595 y(e)o(xample,)47 b(if)g(we)g(scalar)g
(multiply)e(the)i(3-dimensional)d(v)o(ector)i Fs([2,7,4])1013
3695 y Fw(by)41 b Fs(3)g Fw(the)g(result)g(is)h(the)e(3-dimensional)f
(v)o(ector)h Fs([6,21,12])l Fw(.)1013 3829 y(Write)59
b(a)g(3-place)e(predicate)g Fs(scalarMult)e Fw(whose)j(\002rst)i(ar)o
(gument)c(is)1013 3929 y(an)63 b(inte)o(ger)m(,)k(whose)62
b(second)g(ar)o(gument)f(is)j(a)f(list)h(of)f(inte)o(gers,)k(and)1013
4028 y(whose)38 b(third)f(ar)o(gument)f(is)j(the)f(result)g(of)g
(scalar)g(multiplying)e(the)i(second)1013 4128 y(ar)o(gument)h(by)h
(the)h(\002rst.)47 b(F)o(or)40 b(e)o(xample,)f(the)i(query)1178
4297 y Fs(?-)g(scalarMult\(3,[2,)o(7,4)o(],)o(Res)o(ul)o(t\).)1013
4465 y Fw(should)f(yield)1178 4634 y Fs(Result)f(=)j([6,21,12])p
0 TeXcolorgray 909 4803 a Fw(3.)p 0 TeXcolorgray 41 w(Another)e
(fundamental)f(operation)g(on)i(v)o(ectors)g(is)h(the)f
Ft(dot)g(pr)l(oduct)p Fw(.)46 b(This)1013 4902 y(operation)41
b(combines)h(tw)o(o)h(v)o(ectors)f(of)h(the)g(same)g(dimension)e(and)i
(yields)1013 5002 y(a)53 b(number)e(as)j(a)f(result.)81
b(The)53 b(operation)d(is)k(carried)e(out)g(as)i(follo)n(ws:)1013
5102 y(the)44 b(corresponding)d(elements)j(of)g(the)g(tw)o(o)g(v)o
(ectors)f(are)h(multiplied,)g(and)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 103 115
TeXDict begin 103 114 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(5:)46 b(Arithmetic)1698 b(103)p
0 TeXcolorgray 564 1051 a(the)46 b(results)h(added.)60
b(F)o(or)46 b(e)o(xample,)f(the)i(dot)e(product)g(of)g
Fs([2,5,6])f Fw(and)564 1151 y Fs([3,4,1])k Fw(is)j Fs(6+20+6)n
Fw(,)h(that)e(is,)j Fs(32)p Fw(.)73 b(Write)51 b(a)f(3-place)f
(predicate)g Fs(dot)564 1250 y Fw(whose)43 b(\002rst)h(ar)o(gument)d
(is)j(a)f(list)i(of)d(inte)o(gers,)h(whose)g(second)f(ar)o(gument)564
1350 y(is)52 b(a)e(list)i(of)e(inte)o(gers)g(of)g(the)g(same)h(length)e
(as)i(the)g(\002rst,)i(and)d(whose)564 1449 y(third)f(ar)o(gument)d(is)
k(the)f(dot)g(product)e(of)h(the)h(\002rst)h(ar)o(gument)d(with)i(the)
564 1549 y(second.)c(F)o(or)c(e)o(xample,)e(the)i(query)730
1715 y Fs(?-)f(dot\([2,5,6],[3,4,)o(1])o(,Re)o(su)o(lt\))o(.)564
1881 y Fw(should)g(yield)730 2047 y Fs(Result)f(=)i(32)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 104 116
TeXDict begin 104 115 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 105 117
TeXDict begin 105 116 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(6)2011 2603 y Fm(Mor)l(e)f(Lists)p
357 2785 2599 24 v 0 TeXcolorgray 0.95 TeXcolorgray 0
TeXcolorgray 714 4554 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
145.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial
797 3599 a Fl(This)g(chapter)h(has)g(t)m(w)m(o)g(main)g(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3748
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)36 b(de\014ne)h Fg(append/3)p
Fl(,)j(a)c(p)m(redicate)i(fo)m(r)f(concate-)1004 3865
y(nating)50 b(t)m(w)m(o)i(lists,)h(and)d(illustrate)i(what)e(can)h(b)s
(e)1004 3981 y(done)42 b(with)g(it.)p 0 TeXcolorgray
887 4164 a(2.)p 0 TeXcolorgray 41 w(T)-8 b(o)55 b(discuss)j(t)m(w)m(o)f
(w)m(a)m(ys)f(of)g(reversing)h(a)e(list:)82 b(a)1004
4280 y(naive)51 b(metho)s(d)h(using)h Fg(append/3)p Fl(,)k(and)51
b(a)g(mo)m(re)1004 4396 y(e\016cient)43 b(metho)s(d)f(using)g
(accumulato)m(rs.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 106 118
TeXDict begin 106 117 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(106)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(A)n(ppend)806 1186
y Fw(W)-7 b(e)47 b(shall)f(de\002ne)f(an)h(important)e(predicate)h
Fs(append/3)e Fw(whose)j(ar)o(guments)e(are)806 1286
y(all)k(lists.)70 b(V)-5 b(ie)n(wed)48 b(declarati)n(v)o(ely)-5
b(,)48 b Fs(append\(L1,L2,L3)o(\))43 b Fw(will)49 b(hold)f(when)f(the)
806 1385 y(list)61 b Fs(L3)g Fw(is)h(the)f(result)f(of)h(concatenating)
d(the)j(lists)h Fs(L1)f Fw(and)f Fs(L2)h Fw(together)806
1485 y(\(concatenating)32 b(means)j(joining)g(the)g(lists)i(together)m
(,)e(end)g(to)g(end\).)43 b(F)o(or)35 b(e)o(xample,)806
1585 y(if)41 b(we)g(pose)g(the)g(query)971 1763 y Fs(?-)g
(append\([a,b,c],)o([1,)o(2,)o(3])o(,[a)o(,b)o(,c,)o(1,)o(2,)o(3]\))o
(.)806 1942 y Fw(or)f(the)h(query)971 2121 y Fs(?-)g(append\([a,[foo,)o
(gib)o(bl)o(e])o(,c])o(,[)o(1,2)o(,[)o([])o(,b])o(],)1386
2221 y([a,[foo,gibble],)o(c,1)o(,2)o(,[)o([],)o(b])o(\).)806
2399 y Fw(we)g(will)h(get)e(the)h(response)f(yes.)46
b(On)41 b(the)g(other)f(hand,)g(if)h(we)h(pose)e(the)h(query)971
2578 y Fs(?-)g(append\([a,b,c],)o([1,)o(2,)o(3])o(,[a)o(,b)o(,c,)o(1,)o
(2])o(\).)806 2757 y Fw(or)f(the)h(query)971 2936 y Fs(?-)g
(append\([a,b,c],)o([1,)o(2,)o(3])o(,[1)o(,2)o(,3,)o(a,)o(b,)o(c]\))o
(.)806 3114 y Fw(we)g(will)h(get)e(the)h(answer)g(no.)900
3218 y(From)h(a)g(procedural)e(perspecti)n(v)o(e,)h(the)h(most)g(ob)o
(vious)f(use)h(of)g Fs(append/3)e Fw(is)806 3318 y(to)51
b(concatenate)e(tw)o(o)i(lists)i(together)-5 b(.)74 b(W)-7
b(e)53 b(can)d(do)h(this)g(simply)g(by)g(using)f(a)806
3418 y(v)n(ariable)39 b(as)j(the)f(third)f(ar)o(gument:)k(the)d(query)
971 3596 y Fs(?-)g(append\([a,b,c],)o([1,)o(2,)o(3])o(,L3)o(\).)806
3775 y Fw(yields)f(the)h(response)971 3954 y Fs(L3)g(=)g([a,b,c,1,2,3])
971 4054 y(yes)900 4232 y Fw(But)50 b(\(as)f(we)h(shall)g(soon)e(see\))
i(we)f(can)g(also)h(use)f Fs(append/3)e Fw(to)i(split)h(up)806
4332 y(a)45 b(list.)60 b(In)45 b(f)o(act,)i Fs(append/3)c
Fw(is)j(a)g(real)f(w)o(orkhorse.)57 b(There')-5 b(s)45
b(lots)h(we)g(can)f(do)806 4432 y(with)39 b(it,)i(and)e(studying)f(it)i
(is)h(a)f(good)e(w)o(ay)i(to)g(gain)f(a)h(better)f(understanding)e(of)
806 4531 y(list)42 b(processing)d(in)i(Prolog.)806 4696
y Fv(De\002ning)g(append)806 4823 y Fw(Here')-5 b(s)41
b(ho)n(w)f Fs(append/3)e Fw(is)k(de\002ned:)971 5002
y Fs(append\([],L,L\).)971 5102 y(append\([H|T],L2,)o([H)o(|L3)o(]\))35
b(:-)41 b(append\(T,L2,L3\))o(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 107 119
TeXDict begin 107 118 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(6:)46 b(More)40 b(Lists)1677
b(107)p 0 TeXcolorgray 451 1051 a(This)66 b(is)g(a)f(recursi)n(v)o(e)f
(de\002nition.)117 b(The)65 b(base)g(case)h(simply)f(says)h(that)357
1151 y(appending)48 b(the)j(empty)f(list)i(to)f(an)o(y)f(list)j
(whatsoe)n(v)o(er)c(yields)i(that)g(same)g(list,)357
1250 y(which)40 b(is)i(ob)o(viously)d(true.)451 1350
y(But)34 b(what)f(about)f(the)i(recursi)n(v)o(e)d(step?)44
b(This)33 b(says)h(that)f(when)g(we)g(concatenate)357
1449 y(a)44 b(non-empty)e(list)j Fs([H|T])d Fw(with)j(a)f(list)h
Fs(L2)p Fw(,)g(we)f(end)g(up)f(with)i(the)f(list)h(whose)357
1549 y(head)h(is)i Fs(H)f Fw(and)g(whose)f(tail)i(is)g(the)f(result)g
(of)g(concatenating)d Fs(T)k Fw(with)f Fs(L2)o Fw(.)64
b(It)357 1649 y(may)40 b(be)h(useful)f(to)i(think)e(about)g(this)h
(de\002nition)f(pictorially:)p 0 TeXcolorgray 0 TeXcolorgray
564 1840 a(Input:)45 b([)c(H)h Fh(j)p 1044 1760 232 4
v 1044 1865 4 106 v 111 w Fw(T)p 1273 1865 V 1044 1868
232 4 v 152 w(])g(+)p 1475 1759 274 4 v 1475 1865 4 107
v 111 w(L2)p 1745 1865 V 1475 1868 274 4 v 564 2080 a(Result:)47
b([)41 b(H)h Fh(j)p 1080 1998 V 1080 2106 4 108 v 109
w Fw(L3)p 1349 2106 V 1080 2109 274 4 v 1080 2144 a Fd(|)p
1117 2144 62 10 v 62 w({z)p 1253 2144 V 62 w(})p 1063
2187 108 4 v 1063 2293 4 106 v 1091 2268 a Fw(T)p 1167
2293 V 1063 2296 108 4 v 28 w Fe(+)p 1221 2186 149 4
v 1221 2293 4 107 v 28 w Fw(L2)p 1366 2293 V 1221 2296
149 4 v 1411 2080 a(])451 2450 y(But)71 b(what)f(is)h(the)g(procedural)
c(meaning)i(of)h(this)h(de\002nition?)132 b(What)357
2549 y(actually)52 b(goes)h(on)g(when)f(we)i(use)f Fs(append/3)d
Fw(to)k(glue)e(tw)o(o)i(lists)g(together?)357 2649 y(Let')-5
b(s)53 b(tak)o(e)f(a)h(detailed)f(look)f(at)i(what)f(happens)f(when)h
(we)h(pose)f(the)g(query)357 2749 y Fs(?-)40 b(append\([a,b,c],[1)o
(,2,)o(3])o(,X)o(\))-6 b Fw(.)451 2848 y(When)48 b(we)h(pose)g(this)g
(query)-5 b(,)48 b(Prolog)f(will)i(match)f(it)i(to)e(the)h(head)e(of)i
(the)357 2948 y(recursi)n(v)o(e)k(rule,)k(generating)c(a)i(ne)n(w)f
(internal)g(v)n(ariable)g(\(say)g Fs(_G518)n Fw(\))h(in)g(the)357
3048 y(process.)50 b(If)43 b(we)g(carried)f(out)g(a)h(trace)g(of)f
(what)h(happens)e(ne)o(xt,)i(we)g(w)o(ould)f(get)357
3147 y(something)d(lik)o(e)i(the)g(follo)n(wing:)522
3327 y Fs(append\([a,)c(b,)k(c],)f([1,)h(2,)f(3],)h(_G518\))522
3427 y(append\([b,)c(c],)k([1,)f(2,)h(3],)f(_G587\))522
3527 y(append\([c],)d([1,)j(2,)h(3],)f(_G590\))522 3626
y(append\([],)d([1,)k(2,)f(3],)h(_G593\))522 3726 y(append\([],)c([1,)k
(2,)f(3],)h([1,)f(2,)h(3]\))522 3826 y(append\([c],)c([1,)j(2,)h(3],)f
([c,)g(1,)h(2,)g(3]\))522 3925 y(append\([b,)c(c],)k([1,)f(2,)h(3],)f
([b,)g(c,)h(1,)g(2,)f(3]\))522 4025 y(append\([a,)d(b,)k(c],)f([1,)h
(2,)f(3],)h([a,)f(b,)h(c,)f(1,)h(2,)g(3]\))522 4224 y(X)g(=)g([a,)g(b,)
f(c,)h(1,)g(2,)f(3])522 4324 y(yes)451 4504 y Fw(The)j(basic)g(pattern)
f(should)g(be)g(clear:)50 b(in)43 b(the)g(\002rst)h(four)e(lines)h(we)g
(see)h(that)357 4604 y(Prolog)h(recurses)g(its)i(w)o(ay)f(do)n(wn)f
(the)h(list)i(in)e(its)h(\002rst)g(ar)o(gument)c(until)j(it)h(can)357
4703 y(apply)d(the)i(base)g(case)g(of)f(the)h(recursi)n(v)o(e)e
(de\002nition.)58 b(Then,)46 b(as)g(the)g(ne)o(xt)f(four)357
4803 y(lines)e(sho)n(w)-5 b(,)42 b(it)i(then)e(stepwise)i(`\002lls)f
(in')g(the)g(result.)51 b(Ho)n(w)43 b(is)h(this)f(`\002lling)g(in')357
4902 y(process)48 b(carried)h(out?)70 b(By)49 b(successi)n(v)o(ely)g
(instantiating)f(the)h(v)n(ariables)f Fs(_G593)n Fw(,)357
5002 y Fs(_G590)n Fw(,)66 b Fs(_G587)n Fw(,)g(and)60
b Fs(_G518)n Fw(.)106 b(But)62 b(while)f(it')-5 b(s)62
b(important)d(to)i(grasp)f(this)357 5102 y(basic)53 b(pattern,)i(it)f
(doesn')o(t)d(tell)j(us)g(all)f(we)h(need)e(to)h(kno)n(w)f(about)h(the)
g(w)o(ay)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 108 120
TeXDict begin 108 119 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(108)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fs(append/3)46 b Fw(w)o(orks,)k(so)g(let')-5
b(s)50 b(dig)e(deeper)-5 b(.)70 b(Here)48 b(is)i(the)f(search)g(tree)g
(for)f(the)806 1151 y(query)e Fs(append\([a,b,c],[1)o(,2)o(,3])o(,X)o
(\))-6 b Fw(.)68 b(W)-7 b(e')o(ll)49 b(w)o(ork)e(carefully)g(through)f
(all)806 1250 y(the)h(steps,)j(making)c(a)i(careful)f(note)g(of)g(what)
h(our)e(goals)i(are,)h(and)e(what)g(the)806 1350 y(v)n(ariables)40
b(are)h(instantiated)f(to.)p 0 TeXcolorgray 0 TeXcolorgray
1405 3895 a @beginspecial 151 @llx 373 @lly 319 @urx
662 @ury 1680 @rwi @setspecial
%%BeginDocument: chap6-pspic1.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap6-pspic1.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 151 373 319 662
%%DocumentFonts: CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap6-pspic1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 110 /n put
dup 112 /p put
dup 124 /bar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F977EFEFBE4B0AC369070B3652B7542ED968F2FFE533C
CC1D8B7C35A5E29CBF897D9C8EF5A14FAB67FB0F77D9BC7ECA7FEA2B7A35DAE9
DF290446920B4C534715BEEF4819E438491C9DAB191FED40312E6AD740B0E8DC
830511BACBF4195AFB170B0879363CB5A6EFD84CBABDDA3912B02A6B2B3B7C1E
A96FA4236B559CF53D112DFDDD7FF4E0450EC05D7CE5569AB4015AB7EE48E8C9
A9FF38FAB1DB04D7E857CB98BD6EB89942D636B8C192807D64F545448A59934D
385554B18368BBBE292FF30EBAF2055448995FEC91991A3409A41862A7B5C4BF
78895E49CCE46E8B49868E4AFE86C1E9D67EC799D95C02AEB54BEBC6818380E3
36A5D98A87895DAD7D74B8182D3D94CE6F9C2BD7551C1BCFAD22483FC85B30EB
708B4A821D6CAB6C9DF1DEAE198AA02414C2FF6258B684E97FCE2918FA31A85B
77148E2679E993D8D861AB13943E2688FD5EDBE81938D9CD9E638FBB64D486B9
3E1000D004D6FED5623FA34164958DC18A7622A931DA293B0ED3D8564975D17D
8E0A1227998D4B94FCA8042756F97FAE2AEA2111F06336C394A67EB4705D5E99
A4AF238549AD57AE2B5647CB5CD00E3CFF8D9A3B7F74FB963C289909141BE875
666DDEA8F80480D57C1365CF9E6F9AC190EB007A8D4EE1C5DB70F431FB376E09
CEAEBDA2D68FADA6022350060AEFFF5EBFBDB9235761589F84D291DF298C3DA6
0FE3CB7207E56E71C10EB8400C3750001FDB7D4810086B2F93321EC741474033
48EDD6DF15BABA7623A13E93D93B163D0804DFD960E0718A7EC0D09DFB5692C2
1BFBB52A2C14CF9AB9BEE58EBE61914102AD4E5AC0DEF18BEF1136AFBE1D4BC5
C1902A3A3C1935CE66C4007EDE6965BA42DDE73ACE68F8192664DADA740DC6D6
B04101F8F792BADD4D5D79D0EB4ED8A280D190F4C953978D66697176AEB41DBC
85B9F5C5D0AA1EF139BE26FD7B9F79EC9496DDFEF6AADD4B7DDA455CAE1DFE14
EA1E8E06FCB1AB2A96C6B7127D5EB33C05ED3013A69E65112D9385C4DE7A2668
C28A6FBB8167F5E846A61C3C1B31A3481802F8135B794198CF6AF4596330893F
BCD82411ADD78C3B0BE5AE092F9BA8FC746F3950498062A1A9FF13AB3310A21B
5BA1CBEE181912E3FBB59147EA84B992D45A2680BA4821082BC00CAC4A574D12
8DAA1F9CAE5C9A90B7E21FB1441A82533E6DDEE2553F049824D9D5180ED4B318
725209078F0156CAA7D0AE47378D4F65BB3538EAD5C8185DB53BB4C87D232A61
1777FC31911D8F460B25BE458F23AEA0E4E4D6B61333D518596420C87D291D12
CC46E496E97C50334C156FDD2F9219C86854E96B7BC509D78A4D5A13A5294A43
A57869D21A83C2C94DAC759299964B982FC858089BAED969370631951C63F5EA
03E10F28A51822A85F52582848C432424122267300925376BE304012384CFCBA
0E0C73FF2F9658531A3C51777801BB46D6F315033E0FA4E0A4EF691E21A7F78F
C5455C976C40C6E24D239FCFE9CAA763CD150D467A099B0AB9BDB8192271B478
CE0B38151243D996CA581B0D478FDD306B66B9355ED940CE8A0320A915574EF7
CAF66EEB8648FA85E658D412828B699DAF3686869493FF0CDB936AF62034CC18
2CC9D87093551D5E4A2652C19C8D31C937E7AC2E2ECD5BDDF48851E1F9A867E2
CA04218D0D92C0372072250EFA014EB019295F104EFA71C12BF448D26405037F
07C0E0FA63FFDFF8E16261EEB568621BE4A684E9BFE6B7063F202C6A48C963BA
A3F052E8F9DFC8C9093A07D46B3102148B03F0B16A470ABE82A0D7E42CC17EC4
297D7C67D824D69A724D442FC4F11DD771EFB1ED519E2252A8110547FD775354
9D96CA4FABA813FDA935FA86C092E2DF9B35F469AF1FA36140B8DA142FD05AA4
4E8034AB75C30DEC81B8C3E7898553FFCF7C0D7862FBBAA3043BD6D5775CC359
2F541CA963B239C132D1D6FD41345C5F23910DAD561047EC22A936598B5E50FC
8DDC8DEB238A2554A3364BAABC92DF6C742EB6F09D7A24CB8B98798B3E2B25EB
91A9F824E99C3E4547012977D6FCF2FE162CD1B7B15ADC328CC3AC493DE8C2F0
22EBFA14A2976D8E33FE7CC1A15DC14530341A1CFFEA243FEBAC6BD4F64C8242
D76A759A08D6C227C3182E3AD32BB1121234BAF241E1D76E122547B3B8A766ED
6280BC3F197B1EFBB7A925A45B592DAF079DC8A0EE400701483306E100985C54
53BABAF65D8B6226E17AB30166E357B53B1A52B9BBA14549EE2D71D79905998C
DF211D94E056CC797F1B403C93C75495A4C6E728D678ED7BDEBD554D24485AA4
CD412520D44094F84776A38AE6A4D9E78E54D2667ADE9C4C6BFDCE0552FA7C65
37AA96747B0309939C6C14C7162F08A31CCCE0D1A86794AE6D52B2188ED5EF4C
D59C3D8242E0D9BEB4326AD40EC3EAD552FE31D2ED668D5297EA07199BBC5781
A92B9A2747FFC0EEBAB50951FCDB848885AAC301FC3B6B0E7B894B2DF048EE35
73521ABBA11B6F8A27DF1B2F50B62A98C6E8CCBDE72ED65EC4465A82B18CA9E9
8DB5C488F8FA1658ED7CEE4E1D5A2DF1D819CD4EC679BCC01060FE75057EC103
73298D902872D7A7CAE23496EAA8D3070EA6494D943B3A603ACF8B131C072989
4980DE12626DD24ACC3490C4A3C4E6BE9637FC8B2F63D04F99B523AB39D3ECAD
54897A327A34017A50E6442E0D32170952836D5B57CFE9BE4C581F4256981BF4
C540B2F4E92C0CA1254F82F0008EC43CAD7D0769FAC7540E35E2DC1AB94528E5
60F529B5A02264DE3F93492AB1E822318AC3D3B39509E1E3DC7EC4C097A87465
FE67D671EB66EAD2A590DB978A39EA5C91CB8AE0F30B6ACD6133DE0BBC224377
0592D268142F558C3EECB5AB3536E357C729750315FCD222F9DD2CF90AB0897F
7DC26A7E1A547E4A59EC220404829CDCF3B060AB958A00F518CB66F2C38977BD
0C8711A07D0DEDCDCB84BE4D1E5C36BFE0CE2C1A64E1CFAD9C2494D4534F9959
30D70788BDA8D557C57D3E46FCA08DDA08270EC3BF414DEBE761731ABA8CCF42
B2F4C3CB8F95FC69C5246A016492FEB9CB8B188916A55DA8D903F3D84223A95F
0105149F68F59D21FF4905C0F7154510CA0290CFD8B3EFFAE599C554AB574129
201B5AB6413766DDE50E614E94C140E7ABFB60D3084325C8D121621FF1239D30
41F62F8140B4D70BEC6681BAFF52EA21521058ECA20C10585D0810F8649D8AF2
339A41FCE112601A02E27E1EEA2D00A9DDA873ABCECD0756643E41760578D853
83AC0240A310D3DD8D9211944CA10C547B3E95B9AED7FEB88BD2DEB5C862E444
B3CBD91334892C3265CC17FA869E85E038356E753A53512954A72D59D0948876
23037CABAA55553F5E818BEE0602586586246EF925B09BE97284DAD2F742C622
1D92C6412D134E593721E6ADD60D0A23E2EBADDCF5D690D7ACF5A6FE634DFAC0
E680E3E590DE0A696DFB611C6BC2A3D3BE1A711502ABD98DD428623A83CF6BEF
2012540D480C42DDD486D0F6286303786DB058AD549C080CF1A0B27E10FD8D2A
3783DC73AF47614D49512300B3EEE947128EF5DECB67FCD200135441862C8EC9
EDCF022E14AE991FDC38E50B2ED3DC7C4E2D275678DCCBA75F628C9903A0FAE3
8DAC35EA96859429FE3AF702F06E545B165636F755A7DC2C8B648727447EAF2B
BE8284D1167DFCBDEF99D48B8833F69F67C8620A520B97D3E8EC84E02D099AB3
2145022D1A323420421FF9069312BD5858527131E5980C2A25B62F48A6BDA43F
DED664998C941BD21CBE635CF9B2CD02C9013F7EA391C892922E785289111D49
314ADD3AF3019A8A940C5A285CFFB36D465DD5BFC7EC9199B89383544223EC38
FD89FC5FD5DBED8AA55400E5852237E780158A5F0BBCBFA5F7D3F11D8FC60640
903EA3E197C70DFBCC8E5D3E8FFB469387C71C2BAF1337E4F64D4B14E12E0B61
EC72B4665454BDC46B306EEE1D12336E28B0DCD35B0EA0878AAEB37FF1CDF2B8
6C01E7151D63200633F668999124858E8C2551ABB78D3659CE343B366B378BEE
73B80A40ECE446AFD7410852A191AE65B2D3554E0F87543454AFF6078D793A62
4CD5D09F1660D89BD2942686A1EEEDCD40C28F30500B71EAD468AA23E973A412
61BE99361A16E6DC149AA832EC87AFA68A918EF0FEB00E6F97FBB28EEA242F81
3903433601C83E32F6879F419CA6CA9D5EC688C03CABDD60864447A481A5FC36
B0FD133779F0B6F6B8C423436528E901116A94FD517EFD17D4DCA1F5770830B9
830D18037C7D3643E493A74A19FC9FDD715BEF87E82332A6731CBA7DA437C968
B403AE45B9B2693EBA53A0A64F3358FA114FADCE0AE8D566F93D7477CD2E880C
22AE39E3B5F905F258BF38FEC656D5AE6A580CE86642D95E4D5E8DE928B841D4
7808242D037A84B2699ABF188A2F9D013874D919CD3661D1113C2BD78B76BCF5
906EBEFFCC1CC100ACDA3C489EF7198BD28BA57120A468BF1103A9A6CBECAE61
9BE4037EFC11F6C4DDF34A7745D24E134A92F5BCA9E0D8794F5D6FED61B8B603
3C42FA84F6BF7C27A728E2D5BD47D40AF454EC9BB7FC77F035B91007B41B14DA
2C7225D74932A5FDDD58D257E30893E99C626B7E6E67427C445A167A3675ADE2
206D6CDC5040547684B5120EB4604EE3BF0633993F4F0AA184CDB33CAF46D298
E0D30C1F86C39C895D2EEC999EE8E36E6EB4226A4908FC091F40CDCCB0D5E4DB
B09E31991780FFC6BA5FFFA46DC4E379A865F2F47F0065A2DEF3C78F1E6CDE4A
C4C08A2286FEFC6B5243E351712A0B4458B2BF1BBAB5FDDC297390E6661A072A
E2E830C6C148FE5D01B480C1075EB62F0BF2ABC51E3FDCB83BF5C2B8E1A7570F
FAC00758021DC226E58611C9A00C411F6685F02B8720F21AB8A7E2A5615BBE4D
BE83DB35E946C52098D510F9E5BA635C1D0641FAC402DB047AAD8A8D54773B02
6620FE2647C4AC2955B78D91DA48F846A72336F598051AA475EEE486A280D45C
C2D5E5305ED9AF3C414501F228E6D86DC06E6328627218BF1654DF139FEC9539
E333105F1D2425BB9501FD50165474EB5E2752F9CC57C97FAA1608DF358397D3
8C366AD06FF848996418BD64C3FD1C401020ABEB2F62AC155C6B13DDD0EF4B74
E810057723A44381E11D728411287EF4BFB86259078997D4FDF7C9193416FDD2
4D56D718886879E482F7B3CCE9EBAFCFE0DCADB33AC9E9F398EED43BC21636A3
8A23FC26D786CDCD6C7D710FF45AEB39D19AA2D808AA4AC80C298229BAA26A15
D34A2D97670BE80458AC2883903098CB6E65A93F8A17E8037C659482F5B6F353
6AC2E5868EEFABBA85B69D95E968552D1E43D4B392AA5699748442F7127D67B2
265B340CF8B5D9B0D7AF4F7424528003F5A88126A699492D5CD2737D978C102F
9505C2B98BCAF38A12F7D79ABAB4C19EBAD42C92E1FC270E2BB4A8AA530ADFC2
9949E52A057EE5FE0522D3274B00ED3E26E68B370D258D9B59DB6655BC5BF0EE
1683228FE25E8F87DBFC252BB89BEA6F760D27BB9B98762AD2A19A67801897AF
40CD34DF5C797934F440A45EE2C49B4F8CA21A70971FEBCD04BEDC734FCB08C7
9760FAEAEF339AA3BB63F3AC73955D0BB806A069CD49EB4131D9796D5E457900
01A8B03D553EE9EB860C3F6ECB5E8BF2CF8888F78260F1A0ED24DD47CFEEE54B
0C2E4771B8E0A7410D4B57499DFA6350EC80414FDFB4B38648088E4505F2E0F0
178890AAF6EAC537C0DC6D952211C45E0C093F8390783E26DF4FECB54BBE8AD9
1ADEB117569ECC2D31E864486842B6FCA4853374D08AB128A60DC2C0057BA36C
BEA62B6C0E367012ED7871D8DF60271DDE7A635F98221D6BF3435909E2DACA81
9808A5E051F7209C76DC0BC0A1D9000DF738D21753029EC189CDE1681D4F7D73
11B0FDAE204829F6277AA474271907B891EF6E337EC78D262E544F528447E97A
F2EC29329470D5526E394A0743D50432F10589F0FF9F1DC9B5FDF24BE180073B
22BEF59B73C50663512576CB3E7F9F516EF1DBC633B5D2E061EBB6CF32BB59DB
BA16C7F4FA9840AD93354F0F3845A97FC2FEAEEFD4B12870EE452F2FC19BB335
2177BD8111438D8F41D4E0BF50D2F399704E03EA626D06292F17EDB5FEA13D4D
D917B9A70788883237FC04E24C582927E6F41D38F3796B0486A62FF9B21A3677
A4A5B6F0064916766B5BAED632E0C57701E2DC150D98BF409D312DE34AA78E21
F089F23613DEFAB3C633D996BD843CB202C436622E549D5BE5517DF9F9F1C9D3
7BA43D4AD3A3BBC8C02A574A8A81D058802451BF22E912CA63EA627CBA1DF0CA
3F9CEFC0733D7EEF4A149404ECAF46906227FCA5CB491310F6749F3C4F7F46C5
4E386148B76BFB40523FB6E2FC313B73F612E1C1F59E30743654D8AA8D9DFFC6
74F6C57272595E7DCA7843DC0CE96E5933494BF6A3B4D20C1C8CE9314ED07151
ACCC0A5371B24098EAC91FEC295D794FC6F7BFA8B2EA8A512D22D9D3F541EF48
0C4EC67E2A90DA82AECBAE34C1B40889F9786228F556AAD7C171D7A8C1AE8697
9A1E8095127619863517424113CA137068FD817FFD63FEBDEB11A19FEA22707F
161D68FFB5435F04B1EAC6FB2E72C656953B0EC9A21FCF10A97BAABA0026F2FA
28663CFB743940F954FA6AAD89F38D1B10BE8BA7BEF609D3481D5692884D8E9F
27098D124FAF8DCF4AA46BA9F33D0B98DBBEE36CB9599510C81DE7B4E80318F9
60A246226BAFFB8E1BE160482A5BE00B7BFE021A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap6-pspic1.dvi)
@start /Fa 131[44 11[44 1[44 8[44 44 44 44 44 3[44 1[44
19[44 7[44 1[44 3[44 44 44 1[44 1[44 44 44 44 2[44 44
2[44 44 40[{}25 83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
639 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 174.12854 87.06427
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 639 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 170.32854 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fa(?-)43 b(append\([a,b,c],)o([1,)o(2,)o(3])o(,)p 1815
548 27 4 v 25 w(G518\))683 1021 y
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 163.62863 81.81432
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 683 1021 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 159.82863 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)g(append\([b,c],[1,2)o(,3)o(],)p
1771 1021 27 4 v 25 w(G587\))1362 995 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1362 995 a 1362
995 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 56.9055 def
/r 56.9055 def /h 3.37502 def /d 4.40273 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1362 995 a 895 1026 27 4 v 921 1026 a Fa(G518)f(=)h([a|)p
1363 1026 V 30 w(G587])1362 995 y
 tx@Dict begin PutEnd  end
 1362 995 a 726 1493
a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 153.12872 76.56436
3.01385 } false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 726 1493 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 149.32872 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fa(?-)g(append\([c],[1,2,)o(3])o(,)p 1728 1493 27 4 v
25 w(G590\))1362 1468 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1362 1468 a 1362 1468 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 56.9055 def
/r 56.9055 def /h 9.6528 def /d 10.68051 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1362
1468 a 895 1445 27 4 v 921 1445 a Fa(G587)f(=)h([b|)p
1363 1445 V 30 w(G590])p 890 1545 V 916 1545 a(G518)f(=)h([a,b|)p
1446 1545 V 29 w(G590])1362 1468 y
 tx@Dict begin PutEnd  end
 1362 1468 a 748 2107
a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 147.87877 73.93938
3.01385 } false /N@T-0-0-0-0 16 {InitRnode } NewNode end  end
 748 2107 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 144.07877 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fa(?-)g(append\([],[1,2,)o(3],)p 1706 2107 27 4 v 24
w(G593\))1362 2082 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1362 2082 a 1362 2082 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 56.9055 def
/r 56.9055 def /h 15.6528 def /d 16.68051 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1362 2082
a 895 2010 27 4 v 921 2010 a Fa(G590)f(=)h([c|)p 1363
2010 V 30 w(G593])p 890 2109 V 916 2109 a(G587)f(=)h([b,c|)p
1446 2109 V 29 w(G593])p 890 2209 V 916 2209 a(G518)f(=)h([a,b,c|)p
1534 2209 V 28 w(G593])1362 2082 y
 tx@Dict begin PutEnd  end
 1362 2082 a 1330 2721
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 3.01385 } false /N@T-0-0-0-0-0
16 {InitRnode } NewNode end  end
 1330 2721 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 3.8 3.8 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
1362 2696 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1362 2696 a 1362 2696 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 56.9055 def
/r 56.9055 def /h 21.6528 def /d 22.68051 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1362 2696 a 895 2574
27 4 v 921 2574 a Fa(G593)f(=)h([1,2,3])p 890 2674 V
916 2674 a(G590)f(=)h([c,1,2,3])p 890 2773 V 916 2773
a(G587)f(=)h([b,c,1,2,3])p 890 2873 V 916 2873 a(G518)f(=)h
([a,b,c,1,2,3])1362 2696 y
 tx@Dict begin PutEnd  end
 1362 2696 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 909 4104 a(1.)p 0 TeXcolorgray
41 w(Goal)29 b(1:)40 b Fs(append\([a,b,c],[1)o(,2,)o(3])o(,_)o(G51)o
(8\))-7 b Fw(.)43 b(Prolog)28 b(matches)h(this)g(to)1013
4203 y(the)i(head)f(of)g(the)h(recursi)n(v)o(e)f(rule)g(\(that)h(is,)i
Fs(append\([H|T],L2,)o([H|)o(L3)o(]\))-6 b Fw(\).)1013
4303 y(Thus)48 b Fs(_G518)f Fw(is)j(uni\002ed)d(to)i
Fs([a|L3])m Fw(,)i(and)d(Prolog)f(has)i(the)g(ne)n(w)f(goal)1013
4402 y Fs(append\([b,c],[1,)o(2,3)o(],)o(L3\))-7 b Fw(.)65
b(It)47 b(generates)g(a)g(ne)n(w)g(v)n(ariable)f Fs(_G587)1013
4502 y Fw(for)40 b Fs(L3)p Fw(,)h(thus)g(we)g(ha)n(v)o(e)f(that)h
Fs(_G518)f(=)h([a|_G587])l Fw(.)p 0 TeXcolorgray 909
4703 a(2.)p 0 TeXcolorgray 41 w(Goal)j(2:)53 b Fs(append\([b,c],[1,2)o
(,3)o(],)o(_G5)o(87)o(\))-6 b Fw(.)56 b(Prolog)44 b(matches)g(this)g
(to)1013 4803 y(the)j(head)f(of)g(the)h(recursi)n(v)o(e)e(rule,)j(thus)
f Fs(_G587)e Fw(is)j(uni\002ed)e(to)h Fs([b|L3])m Fw(,)1013
4902 y(and)66 b(Prolog)g(has)h(the)g(ne)n(w)f(goal)h
Fs(append\([c],[1,2)o(,3])o(,L)o(3\))-6 b Fw(.)123 b(It)1013
5002 y(generates)50 b(the)i(internal)e(v)n(ariable)g
Fs(_G590)g Fw(for)h Fs(L3)o Fw(,)j(thus)d(we)h(ha)n(v)o(e)e(that)1013
5102 y Fs(_G587)40 b(=)h([b|_G590])l Fw(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 109 121
TeXDict begin 109 120 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(6:)46 b(More)40 b(Lists)1677
b(109)p 0 TeXcolorgray 0 TeXcolorgray 460 1051 a(3.)p
0 TeXcolorgray 41 w(Goal)56 b(3:)76 b Fs(append\([c],[1,2)o(,3])o(,_)o
(G59)o(0)-6 b Fw(\).)90 b(Prolog)55 b(matches)g(this)i(to)564
1151 y(the)47 b(head)f(of)h(the)f(recursi)n(v)o(e)g(rule,)h(thus)g
Fs(_G590)e Fw(is)j(uni\002ed)e(to)h Fs([c|L3])m Fw(,)564
1250 y(and)71 b(Prolog)g(has)h(the)f(ne)n(w)h(goal)f
Fs(append\([],[1,2,3)o(],)o(L3\))-7 b Fw(.)138 b(It)564
1350 y(generates)51 b(the)g(internal)f(v)n(ariable)g
Fs(_G593)g Fw(for)h Fs(L3)o Fw(,)j(thus)d(we)h(ha)n(v)o(e)f(that)564
1449 y Fs(_G590)40 b(=)h([c|_G593])l Fw(.)p 0 TeXcolorgray
460 1611 a(4.)p 0 TeXcolorgray 41 w(Goal)g(4:)k Fs(append\([],[1,2,3])o
(,_G)o(59)o(3)-6 b Fw(\).)46 b(At)41 b(last:)46 b(Prolog)40
b(can)g(use)h(the)564 1711 y(base)d(clause)g(\(that)g(is,)h
Fs(append\([],L,L\))-5 b Fw(\).)44 b(And)38 b(in)g(the)g(four)f
(successi)n(v)o(e)564 1811 y(matching)53 b(steps,)59
b(Prolog)53 b(will)i(obtain)f(answers)g(to)h(Goal)g(4,)i(Goal)e(3,)564
1910 y(Goal)41 b(2,)g(and)f(Goal)h(1.)46 b(Here')-5 b(s)41
b(ho)n(w)-5 b(.)p 0 TeXcolorgray 460 2072 a(5.)p 0 TeXcolorgray
41 w(Answer)28 b(to)f(Goal)h(4:)39 b Fs(append\([],[1,2,3])o(,[)o(1,)o
(2,3)o(]\))-7 b Fw(.)42 b(This)28 b(is)g(because)564
2172 y(when)45 b(we)h(match)f(Goal)g(4)h(\(that)f(is,)i
Fs(append\([],[1,2,3])o(,_G)o(59)o(3\))40 b Fw(to)564
2272 y(the)h(base)g(clause,)g Fs(_G593)e Fw(is)j(uni\002ed)e(to)i
Fs([1,2,3])m Fw(.)p 0 TeXcolorgray 460 2434 a(6.)p 0
TeXcolorgray 41 w(Answer)59 b(to)g(Goal)f(3:)82 b Fs(append\([c],[1,2,)
o(3])o(,[c)o(,1)o(,2)o(,3])o(\))-6 b Fw(.)99 b(Why?)564
2533 y(Because)44 b(Goal)f(3)h(is)g Fs(append\([c],[1,2,3)o(],)o(_G5)o
(90)o(]\))-7 b Fw(,)45 b(and)e Fs(_G590)f Fw(is)564 2633
y(the)i(list)h Fs([c|_G593])l Fw(,)g(and)f(we)g(ha)n(v)o(e)f(just)i
(uni\002ed)e Fs(_G593)f Fw(to)i Fs([1,2,3])m Fw(.)564
2732 y(So)d Fs(_G590)f Fw(is)i(uni\002ed)e(to)h Fs([c,1,2,3])l
Fw(.)p 0 TeXcolorgray 460 2894 a(7.)p 0 TeXcolorgray
41 w(Answer)33 b(to)f(Goal)h(2:)41 b Fs(append\([b,c],[1,2)o(,3])o(,[)o
(b,c)o(,1)o(,2)o(,3])o(\))-6 b Fw(.)43 b(Why?)564 2994
y(Because)j(Goal)f(2)h(is)g Fs(append\([b,c],[1,)o(2,3)o(],)o(_G5)o(87)
o(]\))-7 b Fw(,)47 b(and)e Fs(_G587)564 3094 y Fw(is)71
b(the)g(list)g Fs([b|_G590])l Fw(,)78 b(and)70 b(we)h(ha)n(v)o(e)e
(just)i(uni\002ed)f Fs(_G590)f Fw(to)564 3193 y Fs([c,1,2,3])m
Fw(.)46 b(So)41 b Fs(_G587)e Fw(is)j(uni\002ed)e(to)i
Fs([b,c,1,2,3])-5 b Fw(.)p 0 TeXcolorgray 460 3355 a(8.)p
0 TeXcolorgray 41 w(Answer)66 b(to)g(Goal)g(1:)96 b Fs
(append\([a,b,c],[)o(1,)o(2,3)o(],)o([b)o(,c,)o(1,)o(2,3)o(]\))-7
b Fw(.)564 3455 y(Why?)96 b(Because)58 b(Goal)f(2)h(is)h
Fs(append\([a,b,c],[)o(1,)o(2,)o(3],)o(_G)o(518)o(]\))-7
b Fw(,)564 3555 y(and)39 b Fs(_G518)f Fw(is)j(the)f(list)g
Fs([a|_G587])m Fw(,)g(and)f(we)h(ha)n(v)o(e)f(just)h(uni\002ed)f
Fs(_G587)564 3654 y Fw(to)i Fs([b,c,1,2,3])l Fw(.)46
b(So)41 b Fs(_G518)f Fw(is)i(uni\002ed)e(to)h Fs([a,b,c,1,2,3])-6
b Fw(.)p 0 TeXcolorgray 460 3816 a(9.)p 0 TeXcolorgray
41 w(Thus)48 b(Prolog)f(no)n(w)g(kno)n(ws)h(ho)n(w)f(to)h(instantiate)g
Fs(X)p Fw(,)i(the)e(original)f(query)564 3916 y(v)n(ariable.)62
b(It)47 b(tells)h(us)f(that)g Fs(X)41 b(=)g([a,b,c,1,2,3])-6
b Fw(,)49 b(which)d(is)i(what)e(we)564 4015 y(w)o(ant.)451
4188 y(W)-7 b(ork)69 b(through)e(this)j(e)o(xample)e(carefully)-5
b(,)74 b(and)68 b(mak)o(e)h(sure)g(you)f(fully)357 4288
y(understand)38 b(the)j(pattern)g(of)f(v)n(ariable)g(instantiations,)g
(namely:)522 4446 y Fs(_G518)f(=)j([a|_G587])771 4545
y(=)f([a|[b|_G590]])771 4645 y(=)g([a|[b|[c|_G593]]])357
4803 y Fw(This)56 b(type)h(of)f(pattern)g(lies)h(at)g(the)g(heart)f(of)
g(the)h(w)o(ay)f Fs(append/3)e Fw(w)o(orks.)357 4902
y(Moreo)o(v)o(er)m(,)42 b(it)k(illustrates)f(a)g(more)f(general)g
(theme:)53 b(the)45 b(use)g(of)f(uni\002cation)g(to)357
5002 y(b)n(uild)g(structure.)55 b(In)44 b(a)h(nutshell,)g(the)f
(recursi)n(v)o(e)f(calls)j(to)e Fs(append/3)e Fw(b)n(uild)i(up)357
5102 y(this)35 b(nested)g(pattern)f(of)g(v)n(ariables)g(which)h(code)f
(up)g(the)h(required)e(answer)-5 b(.)44 b(When)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 110 122
TeXDict begin 110 121 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(110)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(Prolog)48 b(\002nally)h(instantiates)h(the)g
(innermost)e(v)n(ariable)g Fs(_G593)g Fw(to)i Fs([1,)40
b(2,)h(3])o Fw(,)806 1151 y(the)j(answer)g(crystallises)h(out,)g(lik)o
(e)g(a)g(sno)n(w\003ak)o(e)f(forming)e(around)h(a)i(grain)f(of)806
1250 y(dust.)h(But)d(it)f(is)h(uni\002cation,)e(not)g(magic,)g(that)h
(produces)f(the)h(result.)806 1416 y Fv(Using)g(append)806
1544 y Fw(No)n(w)48 b(that)h(we)g(understand)d(ho)n(w)j
Fs(append/3)d Fw(w)o(orks,)k(let')-5 b(s)49 b(see)h(ho)n(w)e(we)h(can)
806 1643 y(put)40 b(it)i(to)f(w)o(ork.)900 1748 y(One)64
b(important)f(use)h(of)g Fs(append/3)d Fw(is)66 b(to)e(split)h(up)e(a)i
(list)g(into)f(tw)o(o)806 1847 y(consecuti)n(v)o(e)39
b(lists.)47 b(F)o(or)40 b(e)o(xample:)971 2028 y Fs(?-)h
(append\(X,Y,[a,b)o(,c,)o(d])o(\).)971 2227 y(X)g(=)g([])971
2327 y(Y)g(=)g([a,b,c,d])d(;)971 2526 y(X)j(=)g([a])971
2625 y(Y)g(=)g([b,c,d])e(;)971 2825 y(X)i(=)g([a,b])971
2924 y(Y)g(=)g([c,d])f(;)971 3124 y(X)h(=)g([a,b,c])971
3223 y(Y)g(=)g([d])f(;)971 3422 y(X)h(=)g([a,b,c,d])971
3522 y(Y)g(=)g([])g(;)971 3721 y(no)900 3901 y Fw(That)52
b(is,)j(we)d(gi)n(v)o(e)g(the)g(list)h(we)f(w)o(ant)g(to)g(split)h(up)e
(\(here)p Fs([a,b,c,d])-5 b Fw(\))52 b(to)806 4001 y
Fs(append/3)39 b Fw(as)k(the)f(third)g(ar)o(gument,)e(and)h(we)i(use)f
(v)n(ariables)g(for)f(the)h(\002rst)h(tw)o(o)806 4101
y(ar)o(guments.)f(Prolog)35 b(then)h(searches)g(for)g(w)o(ays)h(of)f
(instantiating)f(the)i(v)n(ariables)e(to)806 4200 y(tw)o(o)g(lists)i
(that)f(concatenate)e(to)h(gi)n(v)o(e)g(the)h(third)f(ar)o(gument,)f
(thus)h(splitting)g(up)g(the)806 4300 y(list)48 b(in)f(tw)o(o.)63
b(Moreo)o(v)o(er)m(,)46 b(as)h(this)h(e)o(xample)d(sho)n(ws,)j(by)f
(backtracking,)f(Prolog)806 4400 y(can)35 b(\002nd)g(all)h(possible)g
(w)o(ays)g(of)f(splitting)g(up)h(a)g(list)g(into)g(tw)o(o)g(consecuti)n
(v)o(e)d(lists.)900 4504 y(This)50 b(ability)f(means)h(it)g(is)h(easy)f
(to)g(de\002ne)f(some)g(useful)g(predicates)g(with)806
4604 y Fs(append/3)l Fw(.)106 b(Let')-5 b(s)62 b(consider)e(some)h(e)o
(xamples.)104 b(First,)67 b(we)61 b(can)g(de\002ne)f(a)806
4703 y(program)55 b(which)h(\002nds)i(pre\002x)o(es)e(of)h(lists.)96
b(F)o(or)57 b(e)o(xample,)j(the)d(pre\002x)o(es)g(of)806
4803 y Fs([a,b,c,d])46 b Fw(are)k Fs([])o Fw(,)i Fs([a])o
Fw(,)g Fs([a,b])n Fw(,)g Fs([a,b,c])m Fw(,)h(and)c Fs([a,b,c,d])l
Fw(.)72 b(W)m(ith)50 b(the)806 4902 y(help)45 b(of)i
Fs(append/3)c Fw(it)k(is)h(straightforw)o(ard)c(to)i(de\002ne)g(a)h
(program)d Fs(prefix/2)m Fw(,)806 5002 y(whose)d(ar)o(guments)f(are)i
(both)f(lists,)i(such)f(that)g Fs(prefix\(P,L\))c Fw(will)43
b(hold)e(when)806 5102 y Fs(P)g Fw(is)g(a)h(pre\002x)e(of)h
Fs(L)o Fw(.)47 b(Here')-5 b(s)41 b(ho)n(w:)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 111 123
TeXDict begin 111 122 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(6:)46 b(More)40 b(Lists)1677
b(111)p 0 TeXcolorgray 522 1051 a Fs(prefix\(P,L\):-)36
b(append\(P,_,L\).)451 1211 y Fw(This)51 b(says)g(that)f(list)i
Fs(P)f Fw(is)g(a)g(pre\002x)f(of)g(list)h Fs(L)g Fw(when)f(there)g(is)h
(some)g(list)357 1311 y(such)43 b(that)g Fs(L)g Fw(is)h(the)f(result)g
(of)g(concatenating)e Fs(P)i Fw(with)g(that)g(list.)53
b(\(W)-7 b(e)44 b(use)g(the)357 1411 y(anon)o(ymous)37
b(v)n(ariable)i(since)h(we)g(don')o(t)e(care)i(what)g(that)g(other)f
(list)i(is:)46 b(we)41 b(only)357 1510 y(care)47 b(that)g(there)g(is)h
(some)f(such)g(list)i(or)e(other)-5 b(.\))64 b(This)47
b(predicate)f(successfully)357 1610 y(\002nds)41 b(pre\002x)o(es)f(of)g
(lists,)j(and)d(moreo)o(v)o(er)m(,)e(via)j(backtracking,)d(\002nds)j
(them)f(all:)522 1770 y Fs(?-)h(prefix\(X,[a,b,c,)o(d])o(\).)522
1969 y(X)g(=)g([])g(;)522 2169 y(X)g(=)g([a])g(;)522
2368 y(X)g(=)g([a,b])f(;)522 2567 y(X)h(=)g([a,b,c])e(;)522
2766 y(X)i(=)g([a,b,c,d])d(;)522 2966 y(no)451 3126 y
Fw(In)49 b(a)h(similar)f(f)o(ashion,)i(we)e(can)g(de\002ne)g(a)h
(program)d(which)i(\002nds)g(suf)n(\002x)o(es)357 3226
y(of)d(lists.)65 b(F)o(or)46 b(e)o(xample,)h(the)g(suf)n(\002x)o(es)f
(of)h Fs([a,b,c,d])c Fw(are)k Fs([])o Fw(,)i Fs([d])o
Fw(,)f Fs([c,d])n Fw(,)357 3325 y Fs([b,c,d])m Fw(,)73
b(and)66 b Fs([a,b,c,d])m Fw(.)123 b(Again,)72 b(using)66
b Fs(append/3)e Fw(it)j(is)h(easy)f(to)357 3425 y(de\002ne)43
b Fs(suffix/2)m Fw(,)i(a)g(predicate)e(whose)g(ar)o(guments)f(are)i
(both)g(lists,)i(such)e(that)357 3525 y Fs(suffix\(S,L\))37
b Fw(will)k(hold)f(when)h Fs(S)g Fw(is)h(a)f(suf)n(\002x)g(of)f
Fs(L)p Fw(:)522 3685 y Fs(suffix\(S,L\):-)c(append\(_,S,L\).)357
3845 y Fw(That)44 b(is,)h(list)h Fs(S)e Fw(is)h(a)g(suf)n(\002x)f(of)g
(list)h Fs(L)f Fw(if)h(there)f(is)h(some)f(list)h(such)f(that)g
Fs(L)h Fw(is)357 3945 y(the)h(result)h(of)f(concatenating)e(that)j
(list)g(with)g Fs(S)o Fw(.)63 b(This)47 b(predicate)e(successfully)357
4045 y(\002nds)c(suf)n(\002x)o(es)f(of)h(lists,)h(and)e(moreo)o(v)o(er)
m(,)e(via)j(backtracking,)d(\002nds)j(them)f(all:)522
4205 y Fs(?-)h(suffix\(X,[a,b,c,)o(d])o(\).)522 4404
y(X)g(=)g([a,b,c,d])d(;)522 4604 y(X)j(=)g([b,c,d])e(;)522
4803 y(X)i(=)g([c,d])f(;)522 5002 y(X)h(=)g([d])g(;)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 112 124
TeXDict begin 112 123 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(112)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(X)h(=)g([])g(;)971 1250
y(no)900 1418 y Fw(Mak)o(e)g(sure)g(you)f(understand)e(why)i(the)h
(results)h(come)e(out)h(in)g(this)g(order)-5 b(.)900
1620 y(And)52 b(no)n(w)g(it')-5 b(s)53 b(v)o(ery)e(easy)i(to)f
(de\002ne)g(a)h(program)d(that)i(\002nds)h(sublists)g(of)806
1719 y(lists.)65 b(The)47 b(sublists)h(of)f Fs([a,b,c,d])d
Fw(are)j Fs([])o Fw(,)i Fs([a])o Fw(,)g Fs([b])o Fw(,)g
Fs([c])n Fw(,)g Fs([d])o Fw(,)g Fs([a,b])n Fw(,)806 1819
y Fs([b,c])m Fw(,)57 b Fs([c,d])n Fw(,)f Fs([a,b,c])m
Fw(,)h Fs([b,c,d])m Fw(,)f(and)d Fs([a,b,c,d])l Fw(.)83
b(A)53 b(little)h(thought)806 1919 y(re)n(v)o(eals)40
b(that)g(the)h(sublists)g(of)g(a)g(list)h(L)e(are)h(simply)f(the)h
Ft(pr)m(e\002xes)f(of)h(suf)o(\002xes)f(of)806 2018 y
Fw(L.)h(Think)e(about)h(it)i(pictorially:)p 0 TeXcolorgray
0 TeXcolorgray 1013 2215 a(T)-7 b(ak)o(e)41 b(suf)n(\002x:)p
1470 2133 1283 4 v 1470 2316 4 184 v 74 w Fj(a;)14 b(b;)g(c;)g(d;)g(e;)
g(f)t(;)g(g)s(;)g(h;)g(i;)g(j;)g(k)s(;)g(l)r(;)g(m;)g(n;)g(o;)g(p)2043
2266 y Fd(|)p 2080 2266 267 10 v 267 w({z)p 2421 2266
V 267 w(})p 2749 2316 4 184 v 1470 2319 1283 4 v 1013
2485 a Fw(T)-7 b(ak)o(e)41 b(pre\002x:)p 2020 2402 740
4 v 2020 2585 4 184 v 617 w Fj(h;)14 b(i;)g(j;)g(k)s(;)g(l)2048
2536 y Fd(|)p 2085 2536 91 10 v 91 w({z)p 2250 2536 V
91 w(})2378 2485 y Fj(;)g(m;)g(n;)g(o;)g(p)p 2756 2585
4 184 v 2020 2588 740 4 v 1013 2754 a Fw(Result:)p 2027
2671 388 4 v 2027 2795 4 124 v 807 w Fj(h;)g(i;)g(j;)g(k)s(;)g(l)p
2411 2795 V 2027 2798 388 4 v 900 2948 a Fw(As)43 b(we)f(already)f(ha)n
(v)o(e)h(de\002ned)f(the)h(predicates)f(for)g(producing)e(suf)n(\002x)o
(es)j(and)806 3048 y(pre\002x)o(es)e(of)g(lists,)i(we)g(simply)e
(de\002ne)h(a)g(sublist)g(as:)971 3215 y Fs(sublist\(SubL,L\):)o(-)35
b(suffix\(S,L\),)i(prefix\(SubL,S\).)806 3383 y Fw(That)k(is,)h
Fs(SubL)e Fw(is)i(a)g(sublist)f(of)g Fs(L)h Fw(if)f(there)g(is)h(some)f
(suf)n(\002x)g Fs(S)h Fw(of)f Fs(L)g Fw(of)g(which)806
3483 y Fs(SubL)g Fw(is)j(a)g(pre\002x.)51 b(This)43 b(program)e(doesn')
o(t)h Ft(e)n(xplicitly)h Fw(use)g Fs(append/3)m Fw(,)h(b)n(ut)f(of)806
3582 y(course,)h(under)f(the)i(surf)o(ace,)g(that')-5
b(s)45 b(what')-5 b(s)45 b(doing)e(the)i(w)o(ork)f(for)g(us,)i(as)f
(both)806 3682 y Fs(prefix/2)38 b Fw(and)i Fs(suffix/2)e
Fw(are)j(de\002ned)f(using)h Fs(append/3)l Fw(.)806 3875
y Fk(2)99 b(Re)o(v)o(ersing)41 b(a)g(List)806 4005 y
Fw(The)j Fs(append/3)d Fw(predicate)j(is)h(useful,)f(and)g(it)h(is)h
(important)d(to)h(kno)n(w)f(ho)n(w)h(to)806 4104 y(put)k(it)h(to)g(w)o
(ork.)69 b(But)49 b(it)g(is)h(just)f(as)h(important)d(to)i(kno)n(w)f
(that)g(it)i(can)e(be)h(a)806 4204 y(source)37 b(of)h(inef)n(\002cienc)
o(y)-5 b(,)36 b(and)i(that)g(you)f(probably)f(don')o(t)h(w)o(ant)h(to)g
(use)h(it)g(all)f(the)806 4304 y(time.)900 4404 y(Why)48
b(is)h Fs(append/3)c Fw(a)j(source)g(of)g(inef)n(\002cienc)o(y?)65
b(If)48 b(you)f(think)g(about)g(the)806 4503 y(w)o(ay)38
b(it)h(w)o(orks,)f(you')o(ll)g(notice)g(a)g(weakness:)45
b Fs(append/3)35 b Fw(doesn')o(t)i(join)h(tw)o(o)h(lists)806
4603 y(in)48 b(one)f(simple)i(action.)66 b(Rather)m(,)50
b(it)f(needs)e(to)i(w)o(ork)e(its)i(w)o(ay)f(do)n(wn)g(its)h(\002rst)
806 4703 y(ar)o(gument)44 b(until)j(it)h(\002nds)f(the)h(end)e(of)h
(the)g(list,)j(and)d(only)f(then)h(can)g(it)g(carry)806
4802 y(out)40 b(the)h(concatenation.)900 4902 y(No)n(w)-5
b(,)50 b(often)e(this)i(causes)f(no)f(problems.)69 b(F)o(or)48
b(e)o(xample,)h(if)h(we)f(ha)n(v)o(e)f(tw)o(o)806 5002
y(lists)g(and)f(we)g(just)h(w)o(ant)f(to)h(concatenate)d(them,)j(it')-5
b(s)49 b(probably)c(not)h(too)h(bad.)806 5102 y(Sure,)c(Prolog)f(will)i
(need)f(to)g(w)o(ork)g(do)n(wn)f(the)h(length)g(of)g(the)g(\002rst)h
(list,)h(b)n(ut)e(if)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 113 125
TeXDict begin 113 124 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(6:)46 b(More)40 b(Lists)1677
b(113)p 0 TeXcolorgray 357 1051 a(the)42 b(list)h(is)g(not)f(too)g
(long,)f(that')-5 b(s)43 b(probably)c(not)j(too)g(high)f(a)i(price)e
(to)i(pay)e(for)357 1151 y(the)g(ease)g(of)g(w)o(orking)e(with)i
Fs(append/3)m Fw(.)451 1250 y(But)d(matters)g(may)f(be)g(v)o(ery)f(dif)
n(ferent)g(if)i(the)f(\002rst)h(tw)o(o)g(ar)o(guments)e(are)h(gi)n(v)o
(en)357 1350 y(as)g(v)n(ariables.)43 b(As)38 b(we')l(v)o(e)d(just)i
(seen,)h(it)f(can)f(be)h(v)o(ery)e(useful)h(to)h(gi)n(v)o(e)e
Fs(append/3)357 1449 y Fw(v)n(ariables)41 b(in)g(its)i(\002rst)g(tw)o
(o)f(ar)o(guments,)d(for)i(this)i(lets)f(Prolog)f(search)g(for)g(w)o
(ays)357 1549 y(of)h(splitting)g(up)f(the)h(lists.)51
b(But)43 b(there)f(is)h(a)f(price)g(to)g(pay:)48 b(a)43
b(lot)f(of)g(searching)357 1649 y(is)g(going)d(on,)h(and)h(this)g(can)g
(lead)g(to)g(v)o(ery)f(inef)n(\002cient)g(programs.)451
1748 y(T)-7 b(o)49 b(illustrate)f(this,)j(we)e(shall)g(e)o(xamine)e
(the)h(problem)f(of)h(re)n(v)o(ersing)f(a)i(list.)357
1848 y(That)k(is,)58 b(we)c(will)g(e)o(xamine)f(the)h(problem)e(of)h
(de\002ning)f(a)j(predicate)d(which)357 1948 y(tak)o(es)45
b(a)h(list)h(\(say)e Fs([a,b,c,d])l Fw(\))h(as)g(input)f(and)f(returns)
h(a)h(list)g(containing)e(the)357 2047 y(same)d(elements)f(in)i(the)f
(re)n(v)o(erse)e(order)h(\(here)g Fs([d,c,b,a])l Fw(\).)451
2147 y(No)n(w)-5 b(,)53 b(a)e(re)n(v)o(erse)e(predicate)h(is)h(a)g
(useful)g(predicate)e(to)i(ha)n(v)o(e)f(around.)73 b(As)357
2246 y(you)45 b(will)i(ha)n(v)o(e)f(realised)g(by)g(no)n(w)-5
b(,)46 b(lists)i(in)e(Prolog)g(are)g(f)o(ar)g(easier)h(to)f(access)357
2346 y(from)37 b(the)h(front)f(than)h(from)f(the)h(back.)44
b(F)o(or)38 b(e)o(xample,)f(to)h(pull)g(out)f(the)i(head)e(of)357
2446 y(a)46 b(list)g Fs(L)p Fw(,)h(all)f(we)g(ha)n(v)o(e)f(to)h(do)f
(is)i(perform)c(the)j(uni\002cation)e Fs([H|_])c(=)h(L)p
Fw(;)48 b(this)357 2545 y(results)i(in)h Fs(H)g Fw(being)e
(instantiated)h(to)h(the)f(head)g(of)g Fs(L)p Fw(.)74
b(But)51 b(pulling)f(out)g(the)357 2645 y(last)45 b(element)g(of)f(an)h
(arbitrary)e(list)j(is)g(harder:)52 b(we)45 b(can')o(t)f(do)g(it)i
(simply)e(using)357 2745 y(uni\002cation.)70 b(On)50
b(the)g(other)f(hand,)h(if)g(we)g(had)f(a)i(predicate)d(which)h(re)n(v)
o(ersed)357 2844 y(lists,)42 b(we)f(could)e(\002rst)j(re)n(v)o(erse)d
(the)i(input)f(list,)h(and)f(then)h(pull)f(out)g(the)h(head)f(of)357
2944 y(the)k(re)n(v)o(ersed)e(list,)j(as)g(this)g(w)o(ould)e(gi)n(v)o
(e)g(us)h(the)g(last)h(element)e(of)h(the)g(original)357
3043 y(list.)i(So)40 b(a)g(re)n(v)o(erse)e(predicate)g(could)h(be)g(a)h
(useful)f(tool.)45 b(Ho)n(we)n(v)o(er)m(,)38 b(as)i(we)g(may)357
3143 y(ha)n(v)o(e)45 b(to)i(re)n(v)o(erse)e(lar)o(ge)h(lists,)i(we)f(w)
o(ould)f(lik)o(e)g(this)h(tool)f(to)h(be)f(ef)n(\002cient.)61
b(So)357 3243 y(we)41 b(need)f(to)h(think)g(about)f(the)h(problem)e
(carefully)-5 b(.)451 3342 y(And)43 b(that')-5 b(s)45
b(what)e(we')l(re)g(going)g(to)g(do)h(no)n(w)-5 b(.)52
b(W)-7 b(e)45 b(will)g(de\002ne)e(tw)o(o)h(re)n(v)o(erse)357
3442 y(predicates:)g(a)39 b(nai)n(v)o(e)g(one,)f(de\002ned)g(with)i
(the)f(help)f(of)h Fs(append/3)m Fw(,)g(and)g(a)h(more)357
3542 y(ef)n(\002cient)g(\(and)g(indeed,)g(more)g(natural\))g(one)g
(de\002ned)g(using)g(accumulators.)357 3696 y Fv(Nai)o(v)o(e)g(r)o(e)o
(v)o(erse)h(using)g(append)357 3819 y Fw(Here')-5 b(s)41
b(a)g(recursi)n(v)o(e)f(de\002nition)g(of)g(what)h(is)h(in)m(v)n(olv)o
(ed)d(in)i(re)n(v)o(ersing)e(a)i(list:)p 0 TeXcolorgray
460 3993 a(1.)p 0 TeXcolorgray 41 w(If)g(we)g(re)n(v)o(erse)f(the)h
(empty)f(list,)i(we)f(obtain)f(the)h(empty)f(list.)p
0 TeXcolorgray 460 4155 a(2.)p 0 TeXcolorgray 41 w(If)h(we)h(re)n(v)o
(erse)e(the)h(list)h Fs([H|T])n Fw(,)f(we)h(end)e(up)h(with)g(the)g
(list)i(obtained)c(by)564 4255 y(re)n(v)o(ersing)g Fs(T)i
Fw(and)g(concatenating)d(with)k Fs([H])n Fw(.)357 4429
y(T)-7 b(o)42 b(see)g(that)h(the)f(recursi)n(v)o(e)e(clause)i(is)h
(correct,)e(consider)g(the)h(list)h Fs([a,b,c,d])l Fw(.)357
4529 y(If)c(we)g(re)n(v)o(erse)f(the)h(tail)h(of)f(this)g(list)i(we)e
(obtain)f Fs([d,c,b])m Fw(.)46 b(Concatenating)37 b(this)357
4629 y(with)k Fs([a])f Fw(yields)h Fs([d,c,b,a])l Fw(,)g(which)g(is)h
(the)f(re)n(v)o(erse)f(of)g Fs([a,b,c,d])m Fw(.)451 4728
y(W)m(ith)h(the)f(help)g(of)h Fs(append/3)c Fw(it)k(is)h(easy)e(to)h
(turn)f(this)h(recursi)n(v)o(e)e(de\002nition)357 4828
y(into)h(Prolog:)522 5002 y Fs(naiverev\([],[]\).)522
5102 y(naiverev\([H|T],R)o(\):-)35 b(naiverev\(T,RevT)o(\),)g
(append\(RevT,[H],R)o(\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 114 126
TeXDict begin 114 125 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(114)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(No)n(w)-5 b(,)39 b(this)g(de\002nition)f(is)i
(correct,)f(b)n(ut)g(it)g(does)g(an)g(a)o(wful)g(lot)g(of)g(w)o(ork.)44
b(It)c(is)806 1151 y Ft(very)i Fw(instructi)n(v)o(e)g(to)g(look)g(at)h
(a)g(trace)f(of)h(this)g(program.)48 b(This)42 b(sho)n(ws)h(that)f(the)
806 1250 y(program)e(is)k(spending)d(a)i(lot)g(of)g(time)g(carrying)e
(out)h(appends.)50 b(This)43 b(shouldn')o(t)806 1350
y(be)j(too)g(surprising:)57 b(after)m(,)47 b(all,)h(we)f(are)g(calling)
f Fs(append/3)e Fw(recursi)n(v)o(ely)-5 b(.)61 b(The)806
1449 y(result)43 b(is)i(v)o(ery)e(inef)n(\002cient)g(\(if)g(you)g(run)g
(a)i(trace,)f(you)f(will)h(\002nd)g(that)g(it)g(tak)o(es)806
1549 y(about)e(90)i(steps)g(to)g(re)n(v)o(erse)e(an)i(eight)f(element)g
(list\))i(and)e(hard)g(to)h(understand)806 1649 y(\(the)34
b(predicate)g(spends)h(most)g(of)g(its)i(time)e(in)g(the)g(recursi)n(v)
o(e)f(calls)i(to)f Fs(append/3)m Fw(,)806 1748 y(making)k(it)j(v)o(ery)
e(hard)g(to)h(see)g(what)g(is)h(going)e(on\).)900 1848
y(Not)h(nice.)46 b(But)41 b(as)h(we)f(shall)g(no)n(w)g(see,)g(there)g
Ft(is)g Fw(a)h(better)e(w)o(ay)-5 b(.)806 2001 y Fv(Re)o(v)o(erse)40
b(using)i(an)f(accumulator)806 2123 y Fw(The)f(better)h(w)o(ay)g(is)h
(to)f(use)g(an)g(accumulator)-5 b(.)44 b(The)d(underlying)d(idea)j(is)h
(simple)806 2223 y(and)i(natural.)57 b(Our)45 b(accumulator)d(will)k
(be)f(a)h(list,)g(and)f(when)f(we)i(start)f(it)h(will)806
2323 y(be)i(empty)-5 b(.)68 b(Suppose)48 b(we)h(w)o(ant)g(to)g(re)n(v)o
(erse)e Fs([a,b,c,d])m Fw(.)69 b(At)50 b(the)e(start,)j(our)806
2422 y(accumulator)39 b(will)j(be)g Fs([])o Fw(.)48 b(So)42
b(we)g(simply)f(tak)o(e)h(the)f(head)g(of)g(the)h(list)h(we)f(are)806
2522 y(trying)k(to)h(re)n(v)o(erse)f(and)g(add)h(it)h(as)g(the)f(head)f
(of)h(the)g(accumulator)-5 b(.)63 b(W)-7 b(e)48 b(then)806
2622 y(carry)36 b(on)g(processing)g(the)h(tail,)h(thus)f(we)g(are)g(f)o
(aced)f(with)h(the)g(task)h(of)e(re)n(v)o(ersing)806
2721 y Fs([b,c,d])m Fw(,)46 b(and)e(our)g(accumulator)f(is)j
Fs([a])o Fw(.)58 b(Again)44 b(we)h(tak)o(e)g(the)g(head)f(of)g(the)806
2821 y(list)f(we)g(are)g(trying)e(to)i(re)n(v)o(erse)f(and)g(add)g(it)h
(as)h(the)f(head)f(of)g(the)h(accumulator)806 2920 y(\(thus)53
b(our)h(ne)n(w)f(accumulator)g(is)i Fs([b,a])n Fw(\))f(and)f(carry)h
(on)f(trying)g(to)i(re)n(v)o(erse)806 3020 y Fs([c,d])m
Fw(.)80 b(Again)52 b(we)g(use)h(the)f(same)g(idea,)j(so)d(we)h(get)f(a)
h(ne)n(w)f(accumulator)806 3120 y Fs([c,b,a])m Fw(,)44
b(and)f(try)h(to)g(re)n(v)o(erse)e Fs([d])o Fw(.)54 b(Needless)44
b(to)g(say)-5 b(,)44 b(the)g(ne)o(xt)f(step)h(yields)806
3219 y(an)k(accumulator)f Fs([d,c,b,a])e Fw(and)j(the)h(ne)n(w)f(goal)g
(of)g(trying)g(to)h(re)n(v)o(erse)e Fs([])o Fw(.)806
3319 y(This)58 b(is)g(where)g(the)f(process)h(stops:)80
b Ft(and)57 b(our)h(accumulator)e(contains)g(the)806
3419 y(r)m(e)o(ver)o(sed)47 b(list)i(we)f(want)p Fw(.)66
b(T)-7 b(o)48 b(summarise:)58 b(the)48 b(idea)f(is)i(simply)e(to)g(w)o
(ork)g(our)806 3518 y(w)o(ay)40 b(through)e(the)i(list)h(we)g(w)o(ant)f
(to)h(re)n(v)o(erse,)e(and)h(push)f(each)h(element)g(in)g(turn)806
3618 y(onto)g(the)h(head)f(of)h(the)f(accumulator)m(,)f(lik)o(e)i
(this:)971 3765 y Fs(List:)e([a,b,c,d])80 b(Accumulator:)36
b([])971 3864 y(List:)j([b,c,d])163 b(Accumulator:)37
b([a])971 3964 y(List:)i([c,d])247 b(Accumulator:)37
b([b,a])971 4064 y(List:)i([d])331 b(Accumulator:)37
b([c,b,a])971 4163 y(List:)i([])373 b(Accumulator:)37
b([d,c,b,a])806 4310 y Fw(This)43 b(will)g(be)g(ef)n(\002cient)f
(because)h(we)g(simply)f(blast)i(our)e(w)o(ay)h(through)e(the)h(list)
806 4410 y(once:)53 b(we)45 b(don')o(t)f(ha)n(v)o(e)g(to)h(w)o(aste)h
(time)f(carrying)e(out)i(concatenation)e(or)h(other)806
4509 y(irrele)n(v)n(ant)39 b(w)o(ork.)900 4609 y(It')-5
b(s)39 b(also)f(easy)h(to)f(put)g(this)h(idea)f(in)g(Prolog.)44
b(Here')-5 b(s)39 b(the)f(accumulator)e(code:)971 4756
y Fs(accRev\([H|T],A,R)o(\):)o(-)g(accRev\(T,[H|A],)o(R\))o(.)971
4855 y(accRev\([],A,A\).)806 5002 y Fw(This)54 b(is)h(classic)f
(accumulator)e(code:)72 b(it)54 b(follo)n(ws)g(the)g(same)g(pattern)f
(as)h(the)806 5102 y(arithmetic)41 b(e)o(xamples)g(we)h(e)o(xamined)e
(in)i(the)h(pre)n(vious)d(chapter)-5 b(.)48 b(The)42
b(recursi)n(v)o(e)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 115 127
TeXDict begin 115 126 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(6:)46 b(More)40 b(Lists)1677
b(115)p 0 TeXcolorgray 357 1051 a(clause)50 b(is)i(responsible)d(for)h
(chopping)e(of)n(f)i(the)g(head)g(of)g(the)h(input)e(list,)54
b(and)357 1151 y(pushing)43 b(it)j(onto)e(the)h(accumulator)-5
b(.)56 b(The)44 b(base)h(case)h(halts)f(the)g(program,)e(and)357
1250 y(copies)d(the)h(accumulator)e(to)i(the)g(\002nal)g(ar)o(gument.)
451 1350 y(As)61 b(is)g(usual)f(with)g(accumulator)e(code,)63
b(it')-5 b(s)61 b(a)g(good)d(idea)i(to)g(write)g(a)357
1450 y(predicate)41 b(which)h(carries)h(out)f(the)h(required)e
(initialisation)i(of)f(the)h(accumulator)357 1549 y(for)d(us:)522
1717 y Fs(rev\(L,R\):-)d(accRev\(L,[],R\).)451 1884 y
Fw(Again,)65 b(it)d(is)g(instructi)n(v)o(e)e(to)h(run)g(some)g(traces)g
(on)g(this)g(program)e(and)357 1983 y(compare)41 b(it)j(with)g
Fs(naiverev/2)l Fw(.)53 b(The)43 b(accumulator)e(based)i(v)o(ersion)f
(is)j Ft(clearly)357 2083 y Fw(better)-5 b(.)49 b(F)o(or)42
b(e)o(xample,)f(it)i(tak)o(es)f(about)f(20)h(steps)h(to)f(re)n(v)o
(erse)f(an)h(eight)g(element)357 2183 y(list,)j(as)g(opposed)d(to)j(90)
e(for)h(the)g(nai)n(v)o(e)f(v)o(ersion.)53 b(Moreo)o(v)o(er)m(,)42
b(the)i(trace)g(is)h(f)o(ar)357 2282 y(easier)h(to)g(follo)n(w)-5
b(.)61 b(The)46 b(idea)g(underlying)d(the)k(accumulator)d(based)i(v)o
(ersion)f(is)357 2382 y(simpler)40 b(and)h(more)f(natural)g(than)g(the)
h(recursi)n(v)o(e)f(calls)h(to)h Fs(append/3)l Fw(.)451
2482 y(Summing)35 b(up,)i Fs(append/3)d Fw(is)k(a)f(useful)g(program,)e
(and)h(you)g(certainly)g(should)357 2582 y(not)i(be)g(scared)g(of)g
(using)f(it.)46 b(Ho)n(we)n(v)o(er)m(,)36 b(you)i(also)g(need)g(to)g
(be)h(a)o(w)o(are)e(that)i(it)g(is)357 2681 y(a)i(source)g(of)f(inef)n
(\002cienc)o(y)-5 b(,)39 b(so)i(when)g(you)f(use)h(it,)h(ask)f
(yourself)f(whether)g(there)357 2781 y(is)46 b(a)h(better)e(w)o(ay)-5
b(.)60 b(And)45 b(often)g(there)g(is.)61 b(The)45 b(use)h(of)g
(accumulators)e(is)j(often)357 2880 y(better)m(,)41 b(and)h(\(as)h(the)
f Fs(rev/2)f Fw(e)o(xample)g(sho)n(w\))g(accumulators)g(can)h(be)g(a)h
(natural)357 2980 y(w)o(ay)e(of)f(handling)f(list)j(processing)e
(tasks.)357 3172 y Fk(3)99 b(Exer)n(cises)357 3336 y
Fv(Exer)o(cise)69 b(6.1.)182 b Fw(Let')-5 b(s)70 b(call)g(a)g(list)h
Ft(doubled)f Fw(if)g(it)h(is)g(made)e(of)g(tw)o(o)p 0
TeXcolorgray 3286 3243 118 4 v 3286 3360 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 3290 3360 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 359 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401 3360 4 118
v 3286 3363 118 4 v 0 TeXcolorgray 357 3435 a Fw(consecuti)n(v)o(e)42
b(blocks)h(of)h(elements)g(that)g(are)g(e)o(xactly)f(the)h(same.)55
b(F)o(or)43 b(e)o(xample,)357 3535 y Fs([a,b,c,a,b,c])57
b Fw(is)64 b(doubled)c(\(it')-5 b(s)63 b(made)f(up)g(of)g
Fs([a,b,c])e Fw(follo)n(wed)h(by)357 3634 y Fs([a,b,c])m
Fw(\))51 b(and)f(so)i(is)g Fs([foo,gubble,foo,)o(gu)o(bbl)o(e])-7
b Fw(.)77 b(On)51 b(the)g(other)f(hand,)357 3734 y Fs([foo,gubble,foo)o
(])42 b Fw(is)49 b(not)e(doubled.)63 b(Write)48 b(a)g(predicate)e
Fs(doubled\(List\))357 3834 y Fw(which)40 b(succeeds)h(when)f
Fs(List)g Fw(is)i(a)f(doubled)e(list.)357 3967 y Fv(Exer)o(cise)44
b(6.2.)106 b Fw(A)45 b(palindrome)d(is)k(a)f(w)o(ord)f(or)g(phrase)g
(that)h(spells)g(the)g(same)p 0 TeXcolorgray 3286 3874
V 3286 3992 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 3290 3992 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 358 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0
TeXcolorgray 3401 3992 4 118 v 3286 3995 118 4 v 0 TeXcolorgray
357 4066 a Fw(forw)o(ards)d(and)h(backw)o(ards.)53 b(F)o(or)43
b(e)o(xample,)g(`rotator',)g(`e)n(v)o(e',)g(and)g(`nurses)g(run')357
4166 y(are)36 b(all)h(palindromes.)43 b(Write)37 b(a)g(predicate)e
Fs(palindrome\(List\))-7 b Fw(,)38 b(which)e(checks)357
4266 y(whether)k Fs(List)f Fw(is)j(a)g(palindrome.)h(F)o(or)e(e)o
(xample,)e(to)i(the)g(queries)522 4433 y Fs(?-)g(palindrome\([r,o,)o
(t,)o(a,)o(t,o)o(,r)o(]\).)357 4600 y Fw(and)522 4767
y Fs(?-)g(palindrome\([n,u,)o(r,)o(s,)o(e,s)o(,r)o(,u,)o(n])o(\).)357
4935 y Fw(Prolog)f(should)g(respond)f(yes,)i(b)n(ut)g(to)g(the)g(query)
522 5102 y Fs(?-)g(palindrome\([n,o,)o(t,)o(h,)o(i,s)o(]\))o(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 116 128
TeXDict begin 116 127 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(116)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(it)h(should)f(respond)f(no.)806
1184 y Fv(Exer)o(cise)48 b(6.3.)191 b Fw(Write)49 b(a)h(predicate)e
Fs(toptail\(InList,O)o(ut)o(Lis)o(t\))43 b Fw(which)p
0 TeXcolorgray 357 1091 118 4 v 357 1209 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 1209 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -3020 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 1209 4 118
v 357 1212 118 4 v 0 TeXcolorgray 806 1283 a Fw(says)38
b(no)g(if)h Fs(InList)d Fw(is)j(a)g(list)h(containing)c(fe)n(wer)i
(than)g(2)g(elements,)g(and)g(which)806 1383 y(deletes)44
b(the)g(\002rst)h(and)f(the)g(last)i(elements)e(of)g
Fs(InList)e Fw(and)i(returns)f(the)h(result)806 1483
y(as)f Fs(OutList)m Fw(,)h(when)f Fs(InList)e Fw(is)j(a)g(list)g
(containing)d(at)j(least)g(2)f(elements.)52 b(F)o(or)806
1582 y(e)o(xample:)1137 1739 y Fs(toptail\([a],T\).)1137
1838 y(no)1137 2038 y(toptail\([a,b],T\))o(.)1137 2137
y(T=[])1137 2336 y(toptail\([a,b,c],)o(T\))o(.)1137 2436
y(T=[b])900 2593 y Fw(\(Hint:)46 b(here')-5 b(s)41 b(where)f
Fs(append/3)e Fw(comes)j(in)g(useful.\))806 2725 y Fv(Exer)o(cise)48
b(6.4.)190 b Fw(Write)49 b(a)h(predicate)e Fs(last\(List,X\))c
Fw(which)49 b(is)h(true)e(only)p 0 TeXcolorgray 357 2632
V 357 2750 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 361 2750 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray -3020 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 471 2750 4 118 v 357 2753 118 4 v 0 TeXcolorgray
806 2825 a Fw(when)40 b Fs(List)f Fw(is)j(a)f(list)h(that)e(contains)g
(at)i(least)f(one)f(element)g(and)g Fs(X)h Fw(is)h(the)f(last)806
2925 y(element)f(of)h(that)g(list.)46 b(Do)41 b(this)h(in)f(tw)o(o)g
(dif)n(ferent)e(w)o(ays:)p 0 TeXcolorgray 909 3081 a(1.)p
0 TeXcolorgray 41 w(De\002ne)i Fs(last/2)e Fw(using)h(the)h(predicate)f
Fs(rev/2)g Fw(discussed)g(in)h(the)g(te)o(xt.)p 0 TeXcolorgray
909 3242 a(2.)p 0 TeXcolorgray 41 w(De\002ne)g Fs(last/2)e
Fw(using)h(recursion.)806 3432 y Fv(Exer)o(cise)g(6.5.)141
b Fw(Write)41 b(a)g(predicate)e Fs(swapfl\(List1,Lis)o(t2\))34
b Fw(which)40 b(checks)p 0 TeXcolorgray 357 3339 V 357
3457 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
361 3457 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
-3020 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
471 3457 4 118 v 357 3460 118 4 v 0 TeXcolorgray 806
3532 a Fw(whether)58 b Fs(List1)g Fw(is)i(identical)e(to)i
Fs(List2)n Fw(,)k(e)o(xcept)58 b(that)i(the)f(\002rst)h(and)f(last)806
3631 y(elements)45 b(are)g(e)o(xchanged.)56 b(Here')-5
b(s)46 b(where)f Fs(append/3)d Fw(could)j(come)f(in)i(useful)806
3731 y(again,)60 b(b)n(ut)d(it)h(is)g(also)g(possible)f(to)h(write)f(a)
h(recursi)n(v)o(e)e(de\002nition)g(without)806 3831 y(appealing)39
b(to)i Fs(append/3)d Fw(\(or)i(an)o(y)h(other\))e(predicates.)806
3963 y Fv(Exer)o(cise)47 b(6.6.)181 b Fw(Here)48 b(is)g(an)g(e)o(x)o
(ercise)e(for)h(those)h(of)f(you)g(who)g(lik)o(e)h(logic)p
0 TeXcolorgray 357 3870 V 357 3988 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 3988 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -3020 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 3988 4 118
v 357 3991 118 4 v 0 TeXcolorgray 806 4063 a Fw(puzzles.)900
4163 y(There)58 b(is)j(a)e(street)h(with)f(three)g(neighbouring)d
(houses)i(that)i(all)f(ha)n(v)o(e)g(a)806 4262 y(dif)n(ferent)j(colour)
m(,)67 b(namely)c(red,)69 b(blue,)f(and)63 b(green.)113
b(People)64 b(of)f(dif)n(ferent)806 4362 y(nationalities)36
b(li)n(v)o(e)h(in)h(the)f(dif)n(ferent)f(houses)h(and)f(the)o(y)h(all)h
(ha)n(v)o(e)e(a)i(dif)n(ferent)e(pet.)806 4462 y(Here)k(are)h(some)g
(more)f(f)o(acts)i(about)e(them:)p 0 TeXcolorgray 930
4618 a Fh(\017)p 0 TeXcolorgray 41 w Fw(The)h(Englishman)e(li)n(v)o(es)
i(in)g(the)g(red)f(house.)p 0 TeXcolorgray 930 4779 a
Fh(\017)p 0 TeXcolorgray 41 w Fw(The)h(jaguar)f(is)i(the)f(pet)f(of)h
(the)g(Spanish)g(f)o(amily)-5 b(.)p 0 TeXcolorgray 930
4940 a Fh(\017)p 0 TeXcolorgray 41 w Fw(The)41 b(Japanese)f(li)n(v)o
(es)h(to)g(the)g(right)g(of)f(the)h(snail)h(k)o(eeper)-5
b(.)p 0 TeXcolorgray 930 5102 a Fh(\017)p 0 TeXcolorgray
41 w Fw(The)41 b(snail)g(k)o(eeper)f(li)n(v)o(es)h(to)g(the)g(left)g
(of)g(the)g(blue)f(house.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 117 129
TeXDict begin 117 128 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(6:)46 b(More)40 b(Lists)1677
b(117)p 0 TeXcolorgray 357 1051 a(Who)38 b(k)o(eeps)g(the)h(zebra?)44
b(Don')o(t)37 b(w)o(ork)h(it)h(out)f(for)g(yourself:)43
b(de\002ne)38 b(a)h(predicate)357 1151 y Fs(zebra/1)f
Fw(that)j(tells)h(you)e(the)h(nationality)f(of)h(the)g(o)n(wner)e(of)i
(the)g(zebra!)451 1250 y(\(Hint:)52 b(Think)43 b(of)h(a)g
(representation)e(for)i(the)g(houses)f(and)h(the)g(street.)55
b(Code)357 1350 y(the)41 b(four)f(constraints)h(in)h(Prolog.)k(Y)-9
b(ou)40 b(may)h(\002nd)g Fs(member/2)e Fw(and)i Fs(sublist/2)357
1449 y Fw(useful.\))357 1637 y Fk(4)99 b(Practical)41
b(Session)357 1766 y Fw(The)i(purpose)g(of)g(Practical)h(Session)g(6)g
(is)h(to)f(help)g(you)f(get)h(more)f(e)o(xperience)357
1866 y(with)50 b(list)h(manipulation.)70 b(W)-7 b(e)51
b(\002rst)g(suggest)e(some)h(traces)g(for)g(you)f(to)h(carry)357
1966 y(out,)40 b(and)g(then)h(some)g(programming)c(e)o(x)o(ercises.)451
2065 y(The)49 b(follo)n(wing)e(traces)j(will)f(help)g(you)f(get)h(to)h
(grips)e(with)h(the)h(predicates)357 2165 y(discussed)40
b(in)i(the)e(te)o(xt:)p 0 TeXcolorgray 460 2329 a(1.)p
0 TeXcolorgray 41 w(Carry)70 b(out)g(traces)h(of)f Fs(append/3)d
Fw(with)k(the)f(\002rst)h(tw)o(o)g(ar)o(guments)564 2428
y(instantiated,)54 b(and)d(the)h(third)f(ar)o(gument)e(uninstantiated.)
77 b(F)o(or)51 b(e)o(xample,)564 2528 y Fs(append\([a,b,c],[[)o(],)o
([2,)o(3])o(,b)o(],X)o(\))45 b Fw(Mak)o(e)50 b(sure)g(the)g(basic)h
(pattern)564 2628 y(is)42 b(clear)-5 b(.)p 0 TeXcolorgray
460 2786 a(2.)p 0 TeXcolorgray 41 w(Ne)o(xt,)32 b(carry)e(out)f(traces)
i(on)f Fs(append/3)d Fw(as)k(used)f(to)h(split)g(up)f(a)g(list,)k(that)
c(is,)564 2886 y(with)f(the)g(\002rst)h(tw)o(o)f(ar)o(guments)e(gi)n(v)
o(en)h(as)i(v)n(ariables,)g(and)e(the)h(last)h(ar)o(gument)564
2985 y(instantiated.)45 b(F)o(or)c(e)o(xample,)e Fs(append\(L,R,[foo,w)
o(ee)o(,b)o(lup)o(]\))o(.)p 0 TeXcolorgray 460 3144 a
Fw(3.)p 0 TeXcolorgray 41 w(Carry)51 b(out)g(some)g(traces)h(on)f
Fs(prefix/2)d Fw(and)j Fs(suffix/2)m Fw(.)77 b(Why)51
b(does)564 3244 y Fs(prefix/2)38 b Fw(\002nd)j(shorter)f(lists)j
(\002rst,)e(and)f Fs(suffix/2)f Fw(longer)g(lists)k(\002rst?)p
0 TeXcolorgray 460 3402 a(4.)p 0 TeXcolorgray 41 w(Carry)d(out)g(some)g
(traces)h(on)f Fs(sublist/2)l Fw(.)46 b(As)41 b(we)g(said)g(in)f(the)h
(te)o(xt,)f(via)564 3502 y(backtracking)50 b(this)j(predicate)e
(generates)g(all)i(possible)f(sublists,)k(b)n(ut)c(as)564
3601 y(you')o(ll)c(see,)i(it)f(generates)e(se)n(v)o(eral)h(sublists)h
(more)e(than)h(once.)66 b(Do)49 b(you)564 3701 y(understand)39
b(why?)p 0 TeXcolorgray 460 3859 a(5.)p 0 TeXcolorgray
41 w(Carry)51 b(out)h(traces)f(on)g(both)g Fs(naiverev/2)d
Fw(and)j Fs(rev/2)n Fw(,)j(and)d(compare)564 3959 y(their)41
b(beha)n(viour)-5 b(.)451 4123 y(No)n(w)41 b(for)f(some)h(programming)d
(w)o(ork:)p 0 TeXcolorgray 460 4287 a(1.)p 0 TeXcolorgray
41 w(It)f(is)g(possible)f(to)g(write)h(a)f(one)g(line)g(de\002nition)f
(of)h(the)h Fs(member)d Fw(predicate)564 4386 y(by)43
b(making)f(use)i(of)f Fs(append/3)m Fw(.)53 b(Do)43 b(so.)54
b(Ho)n(w)43 b(does)g(this)h(ne)n(w)f(v)o(ersion)564 4486
y(of)e Fs(member)e Fw(compare)g(in)i(ef)n(\002cienc)o(y)f(with)h(the)g
(standard)f(one?)p 0 TeXcolorgray 460 4644 a(2.)p 0 TeXcolorgray
41 w(Write)j(a)g(predicate)e Fs(set\(InList,OutL)o(ist)o(\))36
b Fw(which)42 b(tak)o(es)g(as)h(input)f(an)564 4744 y(arbitrary)37
b(list,)j(and)e(returns)g(a)h(list)h(in)e(which)g(each)h(element)f(of)g
(the)g(input)564 4844 y(list)k(appears)e(only)g(once.)45
b(F)o(or)c(e)o(xample,)e(the)i(query)730 5102 y Fs(set\([2,2,foo,1,)o
(foo)o(,)35 b([],[]],X\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 118 130
TeXDict begin 118 129 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(118)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 1013 1051 a(should)g(yield)h(the)g(result)1178
1317 y Fs(X)h(=)f([2,foo,1,[]].)1013 1483 y Fw(\(Hint:)67
b(use)52 b(the)g Fs(member)e Fw(predicate)g(to)i(test)h(for)e
(repetitions)g(of)g(items)1013 1582 y(you)40 b(ha)n(v)o(e)g(already)g
(found.\))p 0 TeXcolorgray 909 1748 a(3.)p 0 TeXcolorgray
41 w(W)-7 b(e)42 b(`\003atten')e(a)h(list)h(by)f(remo)o(ving)d(all)j
(the)g(square)f(brack)o(ets)g(around)f(an)o(y)1013 1848
y(lists)j(it)e(contains)g(as)h(elements,)f(and)f(around)f(an)o(y)i
(lists)h(that)g(its)g(elements)1013 1948 y(contain)i(as)i(elements,)f
(and)f(so)i(on,)f(for)f(all)i(nested)e(lists.)57 b(F)o(or)43
b(e)o(xample,)1013 2047 y(when)d(we)i(\003atten)f(the)g(list)1178
2213 y Fs([a,b,[c,d],[[1,2])o(],f)o(oo)o(])1013 2379
y Fw(we)g(get)g(the)g(list)1178 2545 y Fs([a,b,c,d,1,2,foo])1013
2711 y Fw(and)f(when)h(we)g(\003atten)g(the)g(list)1178
2877 y Fs([a,b,[[[[[[[c,d]])o(]]])o(]])o(,[)o([1,)o(2])o(],f)o(oo)o
(,[])o(])1013 3043 y Fw(we)g(also)h(get)1178 3209 y Fs
([a,b,c,d,1,2,foo])o(.)1013 3376 y Fw(Write)j(a)g(predicate)f
Fs(flatten\(List,Fla)o(t\))38 b Fw(that)45 b(holds)f(when)g(the)h
(\002rst)1013 3475 y(ar)o(gument)40 b Fs(List)h Fw(\003attens)h(to)h
(the)f(second)f(ar)o(gument)f Fs(Flat)n Fw(.)50 b(This)43
b(should)1013 3575 y(be)e(done)f(without)g(making)g(use)h(of)g
Fs(append/3)l Fw(.)900 3807 y(Ok,)f(we')l(re)f(no)n(w)g(halfw)o(ay)g
(through)f(the)i(book.)k(And)39 b(\003attening)g(a)i(list)g(is)f(the)
806 3907 y(Pons)50 b(Asinorum)f(of)h(Prolog)f(programming.)70
b(Did)50 b(you)g(cross)g(it)h(ok?)73 b(If)50 b(so,)806
4006 y(great.)45 b(T)m(ime)c(to)g(mo)o(v)o(e)e(on.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 119 131
TeXDict begin 119 130 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(7)612 2603 y Fm(De\002nite)f(Clause)h(Grammars)p
357 2785 2599 24 v 0 TeXcolorgray 0.95 TeXcolorgray 0
TeXcolorgray 714 4554 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
145.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial
797 3599 a Fl(This)f(chapter)h(has)g(t)m(w)m(o)g(main)g(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3748
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)47 b(intro)s(duce)i(context)g(free)
f(gramma)m(rs)h(\(CF)m(Gs\))1004 3865 y(and)41 b(some)i(related)f
(concepts.)p 0 TeXcolorgray 887 4047 a(2.)p 0 TeXcolorgray
41 w(T)-8 b(o)110 b(intro)s(duce)h(de\014nite)h(clause)g(gramma)m(rs)
1004 4164 y(\(DCGs\),)82 b(a)74 b(built-in)f(Prolog)g(mechanism)h(fo)m
(r)1004 4280 y(w)m(o)m(rking)d(with)f(context)h(free)f(gramma)m(rs)g
(\(and)1004 4396 y(other)42 b(kinds)g(of)g(gramma)m(r)f(to)s(o\).)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 120 132
TeXDict begin 120 131 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(120)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Context)42 b(Fr)n(ee)g(Grammars)806
1180 y Fw(Prolog)67 b(has)i(been)f(used)g(for)g(man)o(y)f(purposes,)74
b(b)n(ut)68 b(its)i(in)m(v)o(entor)m(,)i(Alain)806 1280
y(Colmerauer)m(,)39 b(w)o(as)j(interested)e(in)h(computational)e
(linguistics,)i(and)f(this)i(remains)806 1380 y(a)d(classic)i
(application)d(for)h(the)g(language.)44 b(Moreo)o(v)o(er)m(,)36
b(Prolog)j(of)n(fers)f(a)i(number)806 1479 y(of)j(tools)h(which)f(mak)o
(e)h(life)g(easier)g(for)f(computational)f(linguists,)i(and)f(we)i(are)
806 1579 y(no)n(w)56 b(going)f(to)i(start)g(learning)e(about)h(one)g
(of)g(the)h(most)g(useful)f(of)g(these:)806 1679 y(de\002nite)40
b(clause)h(grammars,)e(or)i(DCGs)h(as)g(the)o(y)e(are)h(usually)f
(called.)900 1778 y(DCGs)f(are)f(a)h(special)f(notation)f(for)h
(de\002ning)f(grammars.)43 b(So,)c(before)d(we)j(go)806
1878 y(an)o(y)46 b(further)m(,)h(we')l(d)f(better)h(learn)g(what)g(a)h
(grammar)d(is.)66 b(W)-7 b(e)48 b(shall)g(do)e(so)i(by)806
1977 y(discussing)43 b(conte)o(xt)g(free)h(grammars)f(\(or)g(CFGs\).)57
b(The)43 b(basic)i(idea)f(of)g(conte)o(xt)806 2077 y(free)38
b(grammars)g(is)i(simple)f(to)g(understand,)e(b)n(ut)i(don')o(t)f(be)h
(fooled)e(into)i(thinking)806 2177 y(that)46 b(CFGs)i(are)f(to)o(ys.)63
b(The)o(y')l(re)45 b(not.)62 b(While)47 b(CFGs)h(aren')o(t)e(po)n
(werful)f(enough)806 2276 y(to)c(cope)f(with)h(the)g(syntactic)g
(structure)e(of)i(all)h(natural)e(languages)f(\(that)i(is,)g(the)806
2376 y(kind)34 b(of)h(languages)e(that)i(human)f(beings)g(use\),)i(the)
o(y)f(can)f(certainly)h(handle)e(most)806 2476 y(aspects)47
b(of)g(the)g(syntax)f(of)h(man)o(y)f(natural)g(languages)f(\(for)h(e)o
(xample,)h(English)806 2575 y(and)40 b(French\))g(in)h(a)g(reasonably)e
(natural)h(w)o(ay)-5 b(.)900 2675 y(So)50 b(what)f(is)i(a)f(conte)o(xt)
e(free)h(grammar?)70 b(In)49 b(essence,)j(a)e(\002nite)g(collection)806
2774 y(of)h(rules)g(which)g(tell)h(us)g(that)f(certain)g(sentences)g
(are)h(grammatical)e(\(that)h(is,)806 2874 y(syntactically)j(correct\))
f(and)h(what)h(their)f(grammatical)g(structure)g(actually)g(is.)806
2974 y(Here')-5 b(s)41 b(a)g(simple)g(conte)o(xt)f(free)g(grammar)f
(for)i(a)g(small)h(fragment)d(of)h(English:)p 0 TeXcolorgray
0 TeXcolorgray 1868 3142 a Fs(s)h(->)g(np)g(vp)1868 3241
y(np)g(->)f(det)h(n)1868 3341 y(vp)g(->)f(v)i(np)1868
3441 y(vp)f(->)f(v)1868 3540 y(det)g(->)h Ft(a)1868 3640
y Fs(det)f(->)h Ft(the)1868 3739 y Fs(n)g(->)g Ft(woman)1868
3839 y Fs(n)g(->)g Ft(man)1868 3939 y Fs(v)g(->)g Ft(shoots)900
4105 y Fw(What)j(are)g(the)g(ingredients)f(of)h(this)g(little)h
(grammar?)53 b(W)-7 b(ell,)46 b(\002rst)f(note)e(that)806
4205 y(it)j(contains)e(three)h(types)g(of)g(symbol.)58
b(There')-5 b(s)45 b Fs(->)o Fw(,)i(which)d(is)j(used)e(to)g(de\002ne)
806 4305 y(the)c(rules.)49 b(Then)41 b(there)g(are)h(the)g(symbols)f
(written)h(lik)o(e)g(this:)48 b Fs(s)p Fw(,)42 b Fs(np)o
Fw(,)h Fs(vp)o Fw(,)f Fs(det)o Fw(,)806 4404 y Fs(n)o
Fw(,)47 b Fs(v)o Fw(.)59 b(These)45 b(symbols)g(are)g(called)g
(non-terminal)d(symbols;)47 b(we')o(ll)e(soon)g(learn)806
4504 y(why)-5 b(.)53 b(Each)44 b(of)g(these)g(symbols)f(has)i(a)f
(traditional)f(meaning)g(in)h(linguistics:)52 b Fs(s)806
4604 y Fw(is)44 b(short)e(for)h(sentence,)g Fs(np)g Fw(is)h(short)e
(for)h(noun)f(phrase,)g Fs(vp)h Fw(is)h(short)f(for)g(v)o(erb)806
4703 y(phrase,)e(and)g Fs(det)h Fw(is)h(short)e(for)h(determiner)-5
b(.)48 b(That)41 b(is,)i(each)f(of)g(these)g(symbols)806
4803 y(is)47 b(shorthand)d(for)i(a)h(grammatical)e(cate)o(gory)-5
b(.)60 b(Finally)46 b(there)g(are)h(the)f(symbols)806
4902 y(in)41 b(italics:)49 b Ft(a,)41 b(the)o(,)h(woman,)f(man)p
Fw(,)g(and)h Ft(shoots)p Fw(.)47 b(These)42 b(are)f(terminal)g
(symbols,)806 5002 y(though)i(a)j(computer)d(scientist)k(might)d(call)i
(them)f(the)h(alphabet,)f(and)f(linguists)806 5102 y(might)c(call)h
(them)g(le)o(xical)f(items.)46 b(W)-7 b(e')o(ll)43 b(usually)d(just)h
(call)h(them)e(w)o(ords.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 121 133
TeXDict begin 121 132 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(121)p 0 TeXcolorgray 451 1051 a(This)50 b(grammar)d(contains)i
(nine)g(conte)o(xt)f(free)h(rules.)71 b(A)50 b(conte)o(xt)e(free)h
(rule)357 1151 y(consists)40 b(of)f(a)g(single)h(non-terminal)d
(symbol,)h(follo)n(wed)g(by)h Fs(->)o Fw(,)h(follo)n(wed)e(by)h(a)357
1250 y(\002nite)49 b(sequence)f(made)h(up)g(of)g(terminal)f(and/or)g
(non-terminal)f(symbols.)70 b(All)357 1350 y(nine)38
b(items)h(listed)g(abo)o(v)o(e)e(ha)n(v)o(e)h(this)h(form,)f(so)g(the)o
(y)g(are)h(all)g(le)o(gitimate)f(conte)o(xt)357 1449
y(free)56 b(rules.)93 b(What)57 b(do)f(these)h(rules)f(mean?)92
b(The)o(y)56 b(tell)h(us)g(ho)n(w)f(dif)n(ferent)357
1549 y(grammatical)44 b(cate)o(gories)g(can)h(be)h(b)n(uilt)g(up.)59
b(Read)45 b Fs(->)h Fw(as)g Ft(can)f(consist)g(of)p Fw(,)i(or)357
1649 y Ft(can)42 b(be)i(b)n(uilt)f(out)g(of)p Fw(.)53
b(F)o(or)43 b(e)o(xample,)f(the)h(\002rst)h(rule)f(tells)i(us)e(that)h
(a)f(sentence)357 1748 y(can)e(consist)h(of)f(a)h(noun)e(phrase)g
(follo)n(wed)g(by)h(a)h(v)o(erb)f(phrase.)46 b(The)41
b(third)g(rule)357 1848 y(tells)49 b(us)g(that)f(a)h(v)o(erb)e(phrase)h
(can)g(consist)g(of)g(a)h(v)o(erb)e(follo)n(wed)g(by)h(a)h(noun)357
1948 y(phrase,)42 b(while)h(the)g(fourth)e(rule)i(tells)g(us)h(that)f
(there)f(is)i(another)d(w)o(ay)i(to)g(b)n(uild)357 2047
y(a)f(v)o(erb)e(phrase:)47 b(simply)41 b(use)h(a)g(v)o(erb)m(.)47
b(The)41 b(last)h(\002)n(v)o(e)g(rules)f(tell)i(us)f(that)g
Ft(a)f Fw(and)357 2147 y Ft(the)i Fw(are)g(determiners,)e(that)i
Ft(man)g Fw(and)f Ft(woman)h Fw(are)f(nouns,)h(and)f(that)h
Ft(shoots)g Fw(is)357 2246 y(a)e(v)o(erb)m(.)451 2346
y(No)n(w)50 b(consider)e(the)h(string)h(of)f(w)o(ords)g
Ft(a)h(woman)e(shoots)i(a)f(man)p Fw(.)71 b(Is)50 b(this)357
2446 y(grammatical)36 b(according)f(to)i(our)g(little)h(grammar?)k(And)
37 b(if)h(it)g(is,)g(what)g(structure)357 2545 y(does)i(it)i(ha)n(v)o
(e?)j(The)c(follo)n(wing)e(tree)i(answers)g(both)f(questions:)p
0 TeXcolorgray 0 TeXcolorgray 1174 2754 a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0 16 {InitRnode } NewNode end end
 1174 2754 a
Fs(s)740 2990 y
 tx@Dict begin tx@NodeDict begin {4.30554 2.22223 10.49991 5.24995
3.14996 } false /N@T-0-0 16 {InitRnode } NewNode end end
 740 2990 a Fs(np)784 2964 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 784 2964
a 564 3227 a
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 15.74986 7.87492 3.14996
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 564 3227 a Fs(det)630 3200 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 630 3200 a
608 3463 a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 608 3463 a Fs(a)630 3437 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 630 3437 a 916
3227 a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 916 3227 a Fs(n)938 3200 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 938 3200 a 829 3463
a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 26.24977 13.12488 3.14996
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 829 3463 a Fs(woman)938 3437 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 938 3437 a 1564 2990
a
 tx@Dict begin tx@NodeDict begin {4.30554 2.22223 10.49991 5.24995
3.14996 } false /N@T-0-1 16 {InitRnode } NewNode end end
 1564 2990 a Fs(vp)1607 2964 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1607 2964 a 1333 3227
a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0-1-0 16 {InitRnode } NewNode end end
 1333 3227 a Fs(v)1354 3200 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1354 3200 a 1224 3463
a
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 31.49973 15.74986 3.14996
} false /N@T-0-1-0-0 16 {InitRnode } NewNode end end
 1224 3463 a Fs(shoots)1354 3437 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1354 3437 a 1816
3227 a
 tx@Dict begin tx@NodeDict begin {4.30554 2.22223 10.49991 5.24995
3.14996 } false /N@T-0-1-1 16 {InitRnode } NewNode end end
 1816 3227 a Fs(np)1860 3200 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1860 3200 a 1662
3463 a
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 15.74986 7.87492 3.14996
} false /N@T-0-1-1-0 16 {InitRnode } NewNode end end
 1662 3463 a Fs(det)1728 3437 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1-1 /N@T-0-1-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1728 3437 a 1706
3699 a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0-1-1-0-0 16 {InitRnode } NewNode end end
 1706 3699 a Fs(a)1728 3673 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1-1-0 /N@T-0-1-1-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1728 3673 a 1970
3463 a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0-1-1-1 16 {InitRnode } NewNode end end
 1970 3463 a Fs(n)1992 3437 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1-1 /N@T-0-1-1-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1992 3437 a 1927
3699 a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 15.74986 7.87492 3.14996
} false /N@T-0-1-1-1-0 16 {InitRnode } NewNode end end
 1927 3699 a Fs(man)1992 3673 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1-1-1 /N@T-0-1-1-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1992 3673 a 451
3847 a Fw(Right)55 b(at)g(the)f(top)g(we)h(ha)n(v)o(e)f(a)h(node)e
(mark)o(ed)g Fs(s)p Fw(.)87 b(This)54 b(node)g(has)g(tw)o(o)357
3947 y(daughters,)45 b(one)h(mark)o(ed)f Fs(np)o Fw(,)j(and)d(one)h
(mark)o(ed)f Fs(vp)o Fw(.)62 b(Note)46 b(that)g(this)h(part)f(of)357
4046 y(the)f(diagram)e(agrees)i(with)g(the)g(\002rst)h(rule)e(of)h(the)
g(grammar)m(,)f(which)g(says)i(that)357 4146 y(an)f Fs(s)g
Fw(can)h(be)f(b)n(uilt)g(out)g(of)g(an)h Fs(np)f Fw(and)g(a)g
Fs(vp)o Fw(.)60 b(\(A)45 b(linguist)g(w)o(ould)g(say)h(that)357
4245 y(this)g(part)g(of)f(the)h(tree)g(is)h(licensed)f(by)f(the)h
(\002rst)h(rule.\))60 b(In)45 b(f)o(act,)i(as)g(you)e(can)357
4345 y(see,)39 b Ft(e)o(very)h Fw(part)e(of)h(the)g(tree)g(is)h
(licensed)f(by)g(one)f(of)h(our)g(rules.)45 b(F)o(or)38
b(e)o(xample,)357 4445 y(the)52 b(tw)o(o)h(nodes)e(mark)o(ed)g
Fs(np)h Fw(are)g(licensed)g(by)g(the)g(rule)g(that)h(says)f(that)h(an)
357 4544 y Fs(np)47 b Fw(can)g(consist)h(of)f(a)h Fs(det)f
Fw(follo)n(wed)f(by)h(an)h Fs(n)o Fw(.)66 b(And,)48 b(right)f(at)h(the)
g(bottom)357 4644 y(of)f(the)h(diagram,)g(all)h(the)f(w)o(ords)f(in)i
Ft(a)f(woman)f(shoots)h(a)g(man)f Fw(are)h(licensed)357
4744 y(by)k(a)h(rule.)81 b(Incidentally)-5 b(,)54 b(note)e(that)h(the)g
(terminal)f(symbols)g(only)g(decorate)357 4843 y(the)h(nodes)f(right)g
(at)i(the)f(bottom)f(of)h(the)g(tree)g(\(the)f(terminal)h(nodes\))f
(while)357 4943 y(non-terminal)38 b(symbols)j(only)f(decorate)g(nodes)g
(that)i(are)f(higher)e(up)i(in)h(the)f(tree)357 5042
y(\(the)f(non-terminal)f(nodes\).)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 122 134
TeXDict begin 122 133 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(122)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(Such)j(a)i(tree)f(is)g(called)g(a)g(parse)g
(tree.)54 b(P)o(arse)44 b(trees)g(are)g(important)e(because)806
1151 y(the)o(y)f(gi)n(v)o(e)g(us)i(tw)o(o)f(kinds)g(of)g(information.)
47 b(Firstly)-5 b(,)42 b(the)o(y)g(gi)n(v)o(e)f(us)i(information)806
1250 y(about)37 b(strings.)44 b(Secondly)-5 b(,)37 b(the)o(y)h(gi)n(v)o
(e)f(us)h(information)e(about)h(structure.)44 b(This)39
b(is)806 1350 y(an)k(important)e(distinction)i(to)g(grasp,)g(so)g(let')
-5 b(s)44 b(ha)n(v)o(e)f(a)h(closer)f(look,)f(and)h(learn)806
1449 y(some)d(important)g(terminology)e(while)j(we)g(are)g(doing)f(so.)
900 1549 y(First,)h(if)g(we)g(are)g(gi)n(v)o(en)e(a)i(string)f(of)h(w)o
(ords,)f(and)g(a)h(grammar)m(,)d(and)j(it)g(turns)806
1649 y(out)46 b(that)h(we)h Ft(can)e Fw(b)n(uild)h(a)g(parse)g(tree)g
(lik)o(e)g(the)g(one)g(abo)o(v)o(e)e(\(that)i(is,)i(a)e(tree)806
1748 y(that)f(has)h Fs(s)f Fw(at)h(the)g(top)f(node,)g(and)g(e)n(v)o
(ery)f(node)h(in)g(the)h(tree)f(is)i(licensed)e(by)806
1848 y(the)j(grammar)m(,)h(and)f(the)h(string)g(of)f(w)o(ords)h(we)g
(were)g(gi)n(v)o(en)e(is)j(listed)f(in)g(the)806 1948
y(correct)d(order)g(along)h(the)g(terminal)g(nodes\))f(then)h(we)h(say)
f(that)h(the)f(string)h(is)806 2047 y(grammatical)43
b(\(according)g(to)j(the)f(gi)n(v)o(en)f(grammar\).)57
b(F)o(or)45 b(e)o(xample,)f(the)i(string)806 2147 y Ft(a)e(woman)g
(shoots)g(a)h(man)f Fw(is)h(grammatical)e(according)g(to)h(our)g
(little)h(grammar)806 2246 y(\(and)51 b(indeed,)k(an)o(y)d(reasonable)f
(grammar)g(of)i(English)f(w)o(ould)g(classify)h(it)h(as)806
2346 y(grammatical\).)45 b(On)c(the)h(other)e(hand,)h(if)g(there)g
(isn')o(t)g(an)o(y)g(such)g(tree,)g(the)h(string)806
2446 y(is)50 b(ungrammatical)e(\(according)f(to)j(the)g(gi)n(v)o(en)e
(grammar\).)71 b(F)o(or)49 b(e)o(xample,)h(the)806 2545
y(string)38 b Ft(woman)h(a)g(woman)f(man)h(a)g(shoots)g
Fw(is)h(ungrammatical)c(according)h(to)i(our)806 2645
y(little)49 b(grammar)e(\(and)g(an)o(y)h(reasonable)f(grammar)g(of)i
(English)e(w)o(ould)h(classify)806 2745 y(it)42 b(as)h
(ungrammatical\).)j(The)c(language)e(generated)h(by)g(a)i(grammar)d
(consists)j(of)806 2844 y(all)g(the)h(strings)f(that)g(the)g(grammar)f
(classi\002es)i(as)g(grammatical.)51 b(F)o(or)43 b(e)o(xample,)806
2944 y Ft(a)i(woman)f(shoots)h(a)g(man)f Fw(also)h(belongs)f(to)h(the)g
(language)f(generated)f(by)h(our)806 3043 y(little)k(grammar)m(,)e(and)
h(so)g(does)g Ft(a)g(man)g(shoots)g(the)g(woman)p Fw(.)64
b(A)48 b(conte)o(xt)e(free)806 3143 y(recogniser)39 b(is)j(a)g(program)
d(which)h(correctly)g(tells)i(us)g(whether)e(or)g(not)h(a)h(string)806
3243 y(belongs)d(to)j(the)f(language)e(generated)h(by)h(a)g(conte)o(xt)
f(free)h(grammar)-5 b(.)45 b(T)-7 b(o)41 b(put)g(it)806
3342 y(another)c(w)o(ay)-5 b(,)38 b(a)h(recogniser)e(is)i(a)g(program)e
(that)h(correctly)f(classi\002es)j(strings)f(as)806 3442
y(grammatical)g(or)i(ungrammatical)d(\(relati)n(v)o(e)i(to)h(some)g
(grammar\).)900 3542 y(But)63 b(often,)j(in)c(both)f(linguistics)h(and)
f(computer)g(science,)67 b(we)62 b(are)g(not)806 3641
y(merely)51 b(interested)i(in)g(whether)e(a)j(string)e(is)i
(grammatical)d(or)i(not,)i(we)e(also)806 3741 y(w)o(ant)e(to)g(kno)n(w)
f Ft(why)i Fw(it)g(is)g(grammatical.)75 b(More)50 b(precisely)-5
b(,)53 b(we)e(often)f(w)o(ant)806 3840 y(to)56 b(kno)n(w)e(what)i(its)h
(structure)e(is,)60 b(and)c(this)g(is)h(e)o(xactly)e(the)h(information)
d(a)806 3940 y(parse)47 b(tree)h(gi)n(v)o(es)f(us.)67
b(F)o(or)47 b(e)o(xample,)h(the)g(abo)o(v)o(e)e(parse)h(tree)h(sho)n
(ws)g(us)g(ho)n(w)806 4040 y(the)i(w)o(ords)h(in)g Ft(a)g(woman)g
(shoots)f(a)h(man)g Fw(\002t)h(together)m(,)f(piece)g(by)f(piece,)j(to)
806 4139 y(form)44 b(the)h(sentence.)58 b(This)45 b(kind)g(of)g
(information)d(w)o(ould)j(be)g(important)f(if)h(we)806
4239 y(were)c(using)g(this)h(sentence)f(in)g(some)h(application)e(and)h
(needed)f(to)i(say)f(what)h(it)806 4339 y(actually)i(meant)h(\(that)f
(is,)j(if)f(we)f(w)o(anted)g(to)g(do)g(semantics\).)57
b(A)46 b(conte)o(xt)e(free)806 4438 y(parser)51 b(is)h(a)h(program)c
(which)i(correctly)g(decides)g(whether)g(a)h(string)g(belongs)806
4538 y(to)44 b(the)h(language)e(generated)g(by)h(a)h(conte)o(xt)f(free)
g(grammar)f Ft(and)h(also)g(tells)i(us)806 4637 y(what)h(its)i
(structur)m(e)f(is)p Fw(.)67 b(That)47 b(is,)j(whereas)d(a)i
(recogniser)d(merely)g(says)j(\223Y)-8 b(es,)806 4737
y(grammatical\224)47 b(or)j(\223No,)h(ungrammatical\224)c(to)i(each)g
(string,)i(a)f(parser)f(actually)806 4837 y(b)n(uilds)40
b(the)h(associated)g(parse)g(tree)g(and)f(gi)n(v)o(es)h(it)g(to)g(us.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 123 135
TeXDict begin 123 134 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(123)p 0 TeXcolorgray 451 1051 a(It)47 b(remains)f(to)h(e)o
(xplain)f(one)g(\002nal)h(concept,)f(namely)g(what)h(a)g(conte)o(xt)e
(free)357 1151 y(language)g(is.)66 b(\(Don')o(t)46 b(get)i(confused:)57
b(we')l(v)o(e)46 b(told)h(you)g(what)g(a)h(conte)o(xt)e(free)357
1250 y Ft(gr)o(ammar)g Fw(is,)g(b)n(ut)f(not)f(what)h(a)g(conte)o(xt)e
(free)i Ft(langua)o(g)o(e)d Fw(is.\))58 b(Quite)45 b(simply)-5
b(,)44 b(a)357 1350 y(conte)o(xt)e(free)h(language)f(is)j(a)f(language)
e(that)i(can)f(be)h(generated)e(by)h(a)h(conte)o(xt)357
1449 y(free)e(grammar)-5 b(.)52 b(Some)42 b(languages)g(are)h(conte)o
(xt)f(free,)h(and)g(some)g(are)g(not.)52 b(F)o(or)357
1549 y(e)o(xample,)37 b(it)i(seems)f(plausible)g(that)g(English)g(is)h
(a)f(conte)o(xt)f(free)h(language.)43 b(That)357 1649
y(is,)d(it)f(is)h(probably)c(possible)i(to)h(write)g(a)g(conte)o(xt)f
(free)g(grammar)f(that)i(generates)357 1748 y(all)53
b(\(and)f(only\))g(the)g(sentences)h(that)g(nati)n(v)o(e)f(speak)o(ers)
g(\002nd)h(acceptable.)80 b(On)357 1848 y(the)44 b(other)f(hand,)h
(some)g(dialects)g(of)g(Swiss-German)g(are)g Ft(not)h
Fw(conte)o(xt)e(free.)55 b(It)357 1948 y(can)38 b(be)g(pro)o(v)o(ed)e
(mathematically)h(that)h(no)g(conte)o(xt)f(free)h(grammar)f(can)h
(generate)357 2047 y(all)47 b(\(and)g(only\))f(the)h(sentences)f(that)i
(nati)n(v)o(e)e(speak)o(ers)h(of)f(Swiss-German)h(\002nd)357
2147 y(acceptable.)730 2117 y Fr(1)807 2147 y Fw(So)38
b(if)h(you)e(w)o(anted)h(to)g(write)g(a)h(grammar)d(for)i(such)g
(dialects,)h(you)357 2246 y(w)o(ould)49 b(ha)n(v)o(e)h(to)h(emplo)o(y)e
(additional)g(grammatical)g(mechanisms,)j(not)e(merely)357
2346 y(conte)o(xt)39 b(free)i(rules.)357 2515 y Fv(CFG)f(r)o
(ecognition)g(using)h(append)357 2644 y Fw(That')-5 b(s)45
b(the)g(theory)-5 b(,)45 b(b)n(ut)g(ho)n(w)g(do)f(we)i(w)o(ork)f(with)g
(conte)o(xt)f(free)h(grammars)f(in)357 2744 y(Prolog?)54
b(T)-7 b(o)45 b(mak)o(e)e(things)h(concrete:)52 b(suppose)43
b(we)h(are)h(gi)n(v)o(en)d(a)j(conte)o(xt)e(free)357
2844 y(grammar)-5 b(.)43 b(Ho)n(w)38 b(can)f(we)h(write)g(a)g
(recogniser)e(for)h(it?)46 b(And)37 b(ho)n(w)g(can)g(we)i(write)357
2943 y(a)i(parser)f(for)h(it?)46 b(In)41 b(this)g(chapter)f(we')o(ll)i
(look)e(at)h(the)g(\002rst)h(question)e(in)h(detail.)357
3043 y(W)-7 b(e')o(ll)40 b(\002rst)f(sho)n(w)g(ho)n(w)g(\(rather)e(nai)
n(v)o(e\))h(recognisers)g(can)g(be)h(written)g(in)g(Prolog,)357
3142 y(and)45 b(then)g(sho)n(w)h(ho)n(w)f(more)g(sophisticated)f
(recognisers)h(can)g(be)h(written)g(with)357 3242 y(the)35
b(help)g(of)g(dif)n(ference)e(lists.)46 b(This)35 b(discussion)g(will)h
(lead)f(us)h(to)g(de\002nite)f(clause)357 3342 y(grammars,)j(Prolog')-5
b(s)40 b(b)n(uilt-in)f(grammar)f(tool.)45 b(In)40 b(the)g(follo)n(wing)
e(chapter)h(we')o(ll)357 3441 y(look)g(at)i(de\002nite)g(clause)f
(grammars)f(in)i(more)e(detail,)i(and)f(learn)g(\(among)f(other)357
3541 y(things\))h(ho)n(w)g(to)h(use)h(them)e(to)h(de\002ne)g(parsers.)
451 3647 y(So:)48 b(gi)n(v)o(en)41 b(a)h(conte)o(xt)f(free)g(grammar)m
(,)f(ho)n(w)h(do)h(we)g(de\002ne)f(a)h(recogniser)f(in)357
3746 y(Prolog?)47 b(In)41 b(f)o(act,)h(Prolog)f(of)n(fers)g(a)h(v)o
(ery)f(direct)g(answer)h(to)f(this)i(question:)j(we)357
3846 y(can)51 b(simply)g(write)h(do)n(wn)f(Prolog)f(clauses)i(that)g
(correspond,)f(in)h(an)f(ob)o(vious)357 3945 y(w)o(ay)-5
b(,)48 b(to)g(the)f(grammar)f(rules.)65 b(That)47 b(is,)i(we)f(can)f
(simply)g(turn)g(the)g(grammar)357 4045 y(into)40 b(Prolog.)451
4151 y(Here')-5 b(s)46 b(a)f(simple)g(\(though)e(as)j(we)f(shall)h
(learn,)f(inef)n(\002cient\))f(w)o(ay)h(of)g(doing)357
4250 y(this.)86 b(W)-7 b(e)55 b(shall)f(use)h(lists)g(to)g(represent)e
(strings.)85 b(F)o(or)54 b(e)o(xample,)i(we)e(shall)357
4350 y(use)42 b(the)g(list)i Fs([a,woman,shoots)o(,a,)o(ma)o(n])36
b Fw(to)43 b(represent)e(the)h(string)g Ft(a)g(woman)357
4450 y(shoots)52 b(a)h(man)p Fw(.)79 b(No)n(w)-5 b(,)55
b(we)e(ha)n(v)o(e)f(already)f(said)i(that)g(the)f Fs(->)g
Fw(symbol)g(used)357 4549 y(in)i(conte)o(xt)f(free)g(grammars)g(means)g
Ft(can)h(consist)g(of)p Fw(,)j(or)d Ft(can)f(be)h(b)n(uilt)g(out)357
4649 y(of)p Fw(,)49 b(and)e(this)g(idea)h(is)g(easily)g(modelled)e
(using)h(lists.)66 b(F)o(or)47 b(e)o(xample,)h(the)f(rule)357
4748 y Fs(s)41 b(->)f(np)h(vp)e Fw(can)g(be)h(thought)d(of)i(as)h
(saying:)45 b(a)40 b(list)g(of)f(w)o(ords)g(is)h(an)f
Fs(s)h Fw(list)g(if)357 4848 y(it)j(is)g(the)f(result)g(of)g
(concatenating)e(an)i Fs(np)g Fw(list)h(with)f(a)h Fs(vp)f
Fw(list.)50 b(As)43 b(we)g(kno)n(w)p 0 TeXcolorgray 357
4944 1040 4 v 447 4999 a Fq(1)476 5023 y Fo(\223Evidence)60
b(against)g(the)f(conte)o(xt-freeness)i(of)d(natural)i(language\224,)65
b(Stuart)59 b(M.)e(Shieber)m(,)357 5102 y Fp(Linguistics)44
b(and)e(Philosophy)p Fo(,)h(8:333\226343,)g(1985.)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 124 136
TeXDict begin 124 135 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(124)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(ho)n(w)f(to)h(concatenate)f(lists)i(in)f
(Prolog)g(\(we)g(can)f(use)i Fs(append/3)l Fw(\),)g(it)g(should)e(be)
806 1151 y(easy)i(to)g(turn)g(these)g(kinds)g(of)g(rules)g(into)g
(Prolog.)k(And)c(what)g(about)f(the)i(rules)806 1250
y(that)47 b(tell)g(us)h(about)e(indi)n(vidual)f(w)o(ords?)64
b(Ev)o(en)46 b(easier:)59 b(we)47 b(can)g(simply)g(vie)n(w)806
1350 y Fs(n)41 b(->)f Ft(woman)h Fw(as)g(saying)g(that)g(the)g(list)h
Fs([woman])c Fw(is)k(an)f Fs(n)g Fw(list.)900 1451 y(If)g(we)g(turn)f
(these)h(ideas)h(into)e(Prolog,)g(this)h(is)h(what)f(we)h(get:)971
1624 y Fs(s\(Z\):-)d(np\(X\),)g(vp\(Y\),)g(append\(X,Y,Z\).)971
1823 y(np\(Z\):-)f(det\(X\),)h(n\(Y\),)h(append\(X,Y,Z\).)971
2022 y(vp\(Z\):-)e(v\(X\),)i(np\(Y\),)f(append\(X,Y,Z\).)971
2221 y(vp\(Z\):-)f(v\(Z\).)971 2421 y(det\([the]\).)971
2520 y(det\([a]\).)971 2719 y(n\([woman]\).)971 2819
y(n\([man]\).)971 3018 y(v\([shoots]\).)900 3191 y Fw(The)61
b(correspondence)c(between)j(the)h(CFG)h(rules)f(and)f(the)h(Prolog)f
(code)806 3290 y(should)47 b(be)h(clear)-5 b(.)69 b(And)48
b(to)g(use)h(this)g(program)d(as)j(a)g(recogniser)m(,)f(we)h(simply)806
3390 y(pose)40 b(the)h(ob)o(vious)e(queries.)45 b(F)o(or)c(e)o(xample:)
971 3562 y Fs(?-)g(s\([a,woman,shoo)o(ts,)o(a,)o(ma)o(n]\))o(.)971
3662 y(yes)900 3834 y Fw(In)j(f)o(act,)i(because)d(this)i(is)h(a)f
(simple)f(declarati)n(v)o(e)f(Prolog)h(program,)f(we)i(can)806
3933 y(do)c(more)f(than)h(this:)48 b(we)41 b(can)h(also)f(generate)g
(all)h(the)f(sentences)g(this)h(grammar)806 4033 y(produces.)53
b(Our)43 b(little)i(grammar)e(generates)g(20)g(sentences.)55
b(Here)44 b(are)g(the)g(\002rst)806 4133 y(\002)n(v)o(e:)971
4305 y Fs(?-)d(s\(X\).)971 4504 y(X)g(=)g([the,woman,shoot)o(s,t)o(he)o
(,wo)o(ma)o(n])35 b(;)971 4703 y(X)41 b(=)g([the,woman,shoot)o(s,t)o
(he)o(,ma)o(n])35 b(;)971 4902 y(X)41 b(=)g([the,woman,shoot)o(s,a)o
(,w)o(oma)o(n])35 b(;)971 5102 y(X)41 b(=)g([the,woman,shoot)o(s,a)o
(,m)o(an])35 b(;)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 125 137
TeXDict begin 125 136 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(125)p 0 TeXcolorgray 522 1151 a Fs(X)41 b(=)g([the,woman,shoots)
o(])451 1311 y Fw(Moreo)o(v)o(er)m(,)34 b(we')l(re)i(not)g(restricted)g
(to)g(posing)f(questions)h(about)f(sentences:)43 b(we)357
1411 y(can)d(ask)i(about)e(other)g(grammatical)f(cate)o(gories.)45
b(F)o(or)40 b(e)o(xample:)522 1571 y Fs(?-)h(np\([a,woman]\).)522
1671 y(yes)451 1831 y Fw(And)g(we)g(can)g(generate)e(noun)h(phrases)g
(with)i(the)f(follo)n(wing)e(query)-5 b(.)522 1991 y
Fs(?-)41 b(np\(X\).)451 2152 y Fw(No)n(w)59 b(this)g(is)h(rather)e
(nice.)99 b(W)-7 b(e)60 b(ha)n(v)o(e)f(a)g(simple,)k(easy)c(to)g
(understand)357 2251 y(program)36 b(which)h(corresponds)f(with)i(our)g
(CFG)h(in)f(an)g(ob)o(vious)e(w)o(ay)-5 b(.)45 b(Moreo)o(v)o(er)m(,)357
2351 y(if)54 b(we)h(added)f(more)f(rules)i(to)f(our)g(CFG,)h(it)h(w)o
(ould)d(be)i(easy)f(to)h(alter)g(the)357 2451 y(program)38
b(to)k(cope)e(with)h(the)g(ne)n(w)g(rules.)451 2550 y(But)47
b(there)g(is)h(a)f(problem:)56 b(the)47 b(program)d(doesn')o(t)h(use)i
(the)g(input)f(sentence)357 2650 y(to)h(guide)g(the)h(search.)65
b(Mak)o(e)48 b(a)g(trace)f(for)g(the)h(query)e Fs(s\([a,man,shoots]\))
357 2750 y Fw(and)59 b(you)g(will)i(see)g(that)f(the)g(program)e
(chooses)i(noun)f(phrases)g(and)h(v)o(erb)357 2849 y(phrases)47
b(and)g(only)g(afterw)o(ards)g(checks)g(whether)g(these)h(can)f(be)h
(combined)e(to)357 2949 y(form)41 b(the)i(sentence)g
Fs([a,man,shoots])-6 b Fw(.)52 b(F)o(or)42 b(e)o(xample,)g(Prolog)f
(will)j(\002nd)f(that)357 3048 y Fs([the,woman])33 b
Fw(is)38 b(a)g(noun)d(phrase)i(and)f Fs([shoots,the,woman)o(])c
Fw(a)37 b(v)o(erb)f(phrase)357 3148 y(and)50 b(only)g(then)g(will)i(it)
f(check)g(whether)e(concatenating)g(these)i(lists)h(happens)357
3248 y(to)46 b(yield)g Fs([a,man,shoots])-6 b Fw(,)48
b(which)d(of)h(course)f(it)i(w)o(on')o(t.)60 b(So,)48
b(Prolog)d(starts)357 3347 y(to)54 b(backtrack,)h(and)f(the)g(ne)o(xt)g
(thing)f(it)i(will)g(try)f(is)h(whether)e(concatenating)357
3447 y(the)43 b(noun)f(phrase)h Fs([the,woman])d Fw(and)j(the)g(v)o
(erb)g(phrase)g Fs([shoots,the,man])357 3547 y Fw(happens)50
b(to)h(yield)g Fs([a,man,shoots])-6 b Fw(,)54 b(another)c(non-starter)
-5 b(.)75 b(It)51 b(will)h(go)f(on)357 3646 y(lik)o(e)h(this)h(until)e
(it)i(\(\002nally\))e(produces)g(the)h(noun)e(phrase)h
Fs([a,man])f Fw(and)i(the)357 3746 y(v)o(erb)38 b(phrase)h
Fs([shoots])m Fw(.)46 b(The)39 b(problem)f(is)i(that)g(the)g(goals)f
Fs(np\(X\))f Fw(and)h Fs(vp\(Y\))357 3845 y Fw(are)i(called)f(with)h
(uninstantiated)f(v)n(ariables)g(as)i(ar)o(guments.)451
3945 y(So,)37 b(ho)n(w)e(about)g(changing)e(the)j(rules)f(in)h(such)f
(a)i(w)o(ay)e(that)h Fs(append)e Fw(becomes)357 4045
y(the)41 b(\002rst)g(goal:)522 4205 y Fs(s\(Z\):-)e(append\(X,Y,Z\),)d
(np\(X\),)j(vp\(Y\).)522 4404 y(np\(Z\):-)g(append\(X,Y,Z\),)c
(det\(X\),)k(n\(Y\).)522 4604 y(vp\(Z\):-)80 b(append\(X,Y,Z\),)36
b(v\(X\),)j(np\(Y\).)522 4803 y(vp\(Z\):-)80 b(v\(Z\).)522
5002 y(det\([the]\).)522 5102 y(det\([a]\).)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 126 138
TeXDict begin 126 137 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(126)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1151 a Fs(n\([woman]\).)971 1250 y(n\([man]\).)971
1449 y(v\([shoots]\).)900 1624 y Fw(Here)69 b(we)g(\002rst)h(use)f
Fs(append/3)d Fw(to)j(split)g(up)g(the)g(input)f(list.)130
b(This)806 1723 y(instantiates)43 b(the)g(v)n(ariables)g
Fs(X)g Fw(and)g Fs(Y)o Fw(,)h(so)g(that)f(the)g(other)g(goals)g(are)g
(all)h(called)806 1823 y(with)56 b(instantiated)g(ar)o(guments.)90
b(Ho)n(we)n(v)o(er)m(,)58 b(this)f(program)e(is)i(still)h(not)e(v)o
(ery)806 1923 y(appealing:)g(it)48 b(uses)g Fs(append/3)d
Fw(a)i(lot)h(and,)g(e)n(v)o(en)e(w)o(orse,)j(it)e(uses)h
Fs(append/3)806 2022 y Fw(with)c(uninstantiated)e(v)n(ariables)h(in)h
(the)g(\002rst)h(tw)o(o)f(ar)o(guments.)53 b(W)-7 b(e)45
b(sa)o(w)f(in)g(the)806 2122 y(pre)n(vious)i(chapter)h(that)h(this)h
(is)g(a)g(source)e(of)h(inef)n(\002cienc)o(y)-5 b(.)65
b(And)48 b(indeed,)g(the)806 2222 y(performance)53 b(of)j(this)h
(recogniser)e(is)j(v)o(ery)d(bad.)92 b(It)57 b(is)g(re)n(v)o(ealing)e
(to)i(trace)806 2321 y(through)48 b(what)i(actually)g(happens)f(when)h
(this)h(program)d(analyses)i(a)h(sentence)806 2421 y(such)41
b(as)i Ft(a)f(woman)f(shoots)h(a)g(man)p Fw(.)48 b(As)43
b(you)e(will)i(see,)f(relati)n(v)o(ely)f(fe)n(w)h(of)f(the)806
2520 y(steps)f(are)f(de)n(v)n(oted)f(to)i(the)f(real)g(task)h(of)f
(recognising)f(the)h(sentences:)45 b(most)40 b(are)806
2620 y(de)n(v)n(oted)47 b(to)j(using)e Fs(append/3)f
Fw(to)i(decompose)f(lists.)72 b(This)49 b(isn')o(t)g(much)f(of)h(a)806
2720 y(problem)f(for)h(our)h(little)g(grammar)m(,)h(b)n(ut)f(it)g
(certainly)f(w)o(ould)h(be)g(if)g(we)h(were)806 2819
y(w)o(orking)f(with)j(a)g(more)f(realistic)h(grammar)d(capable)i(of)g
(generating)f(a)h(lar)o(ge)806 2919 y(number)39 b(of)h(sentences.)46
b(W)-7 b(e)42 b(need)e(to)h(do)g(something)e(about)h(this.)806
3080 y Fv(CFG)g(r)o(ecognition)g(using)h(differ)o(ence)f(lists)806
3206 y Fw(A)58 b(more)f(ef)n(\002cient)h(implementation)d(can)j(be)g
(obtained)e(by)i(making)f(use)h(of)806 3306 y Ft(dif)o(fer)m(ence)52
b(lists)p Fw(.)83 b(This)53 b(is)h(a)f(sophisticated)f(\(and,)j(once)e
(you')l(v)o(e)d(grasped)i(it,)806 3405 y(beautiful\))39
b(Prolog)h(technique)f(that)i(can)g(be)g(used)f(for)h(a)g(v)n(ariety)f
(of)h(purposes.)900 3508 y(The)36 b(k)o(e)o(y)h(idea)f(underlying)e
(dif)n(ference)h(lists)j(is)g(to)f(represent)e(the)i(information)806
3607 y(about)45 b(grammatical)h(cate)o(gories)f(not)i(as)g(a)g(single)g
(list,)i(b)n(ut)d(as)i(the)f(dif)n(ference)806 3707 y(between)40
b(tw)o(o)h(lists.)47 b(F)o(or)41 b(e)o(xample,)e(instead)i(of)f
(representing)f Ft(a)i(woman)g(shoots)806 3807 y(a)f(man)h
Fw(as)g Fs([a,woman,shoots,)o(a,m)o(an)o(])35 b Fw(we)41
b(can)g(represent)f(it)h(as)h(the)e(pair)h(of)806 3906
y(lists)971 4081 y Fs([a,woman,shoots,)o(a,)o(man)o(])35
b([].)806 4255 y Fw(Think)41 b(of)i(the)g(\002rst)h(list)g(as)f
Ft(what)g(needs)g(to)g(be)g(consumed)g Fw(\(or)f(if)i(you)e(prefer:)806
4355 y(the)g Ft(input)f(list)q Fw(\),)i(and)f(the)g(second)f(list)i(as)
g Ft(what)f(we)g(should)f(leave)h(behind)h Fw(\(or:)806
4454 y(the)53 b Ft(output)g(list)q Fw(\).)86 b(V)-5 b(ie)n(wed)53
b(from)g(this)i(\(rather)d(procedural\))f(perspecti)n(v)o(e)h(the)806
4554 y(dif)n(ference)38 b(list)971 4728 y Fs([a,woman,shoots,)o(a,)o
(man)o(])d([].)806 4902 y Fw(represents)50 b(the)i(sentence)f
Ft(a)h(woman)f(shoots)h(a)f(man)h Fw(because)f(it)h(says:)68
b Ft(If)52 b(I)806 5002 y(consume)45 b(all)h(the)g(symbols)h(on)e(the)i
(left,)h(and)d(leave)h(behind)e(the)j(symbols)f(on)806
5102 y(the)53 b(right,)i(then)e(I)g(have)f(the)h(sentence)g(I)g(am)g
(inter)m(ested)g(in.)82 b Fw(That)53 b(is,)j(the)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 127 139
TeXDict begin 127 138 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(127)p 0 TeXcolorgray 357 1051 a(sentence)45 b(we)h(are)g
(interested)g(in)g(is)h(the)f(dif)n(ference)e(between)h(the)h(contents)
f(of)357 1151 y(these)c(tw)o(o)g(lists.)451 1256 y(That')-5
b(s)59 b(all)g(we)g(need)f(to)h(kno)n(w)f(about)g(dif)n(ference)e
(lists)k(to)f(re)n(write)f(our)357 1356 y(recogniser)-5
b(.)43 b(If)c(we)g(simply)g(bear)f(in)h(mind)f(the)h(idea)g(of)g
(consuming)d(something,)357 1456 y(and)30 b(lea)n(ving)f(something)g
(behind)g(in)i(mind,)h(we)e(obtain)g(the)g(follo)n(wing)f(recogniser:)
522 1640 y Fs(s\(X,Z\):-)38 b(np\(X,Y\),)g(vp\(Y,Z\).)522
1839 y(np\(X,Z\):-)g(det\(X,Y\),)g(n\(Y,Z\).)522 2039
y(vp\(X,Z\):-)79 b(v\(X,Y\),)39 b(np\(Y,Z\).)522 2238
y(vp\(X,Z\):-)79 b(v\(X,Z\).)522 2437 y(det\([the|W],W\).)522
2537 y(det\([a|W],W\).)522 2736 y(n\([woman|W],W\).)522
2836 y(n\([man|W],W\).)522 3035 y(v\([shoots|W],W\).)451
3220 y Fw(Consider)43 b(these)h(rules)f(carefully)-5
b(.)52 b(F)o(or)43 b(e)o(xample,)g(the)g Fs(s)h Fw(rule)f(says:)52
b Ft(I)44 b(know)357 3319 y(that)37 b(the)g(pair)h(of)f(lists)i
Fs(X)e Ft(and)i Fs(Z)f Ft(r)m(epr)m(esents)f(a)h(sentence)e(if)i(\(1\))
f(I)h(can)f(consume)357 3419 y Fs(X)f Ft(and)f(leave)h(behind)f(a)h
Fs(Y)o Fw(,)i Ft(and)d(the)h(pair)i Fs(X)e Ft(and)i Fs(Y)e
Ft(r)m(epr)m(esents)h(a)f(noun)e(phr)o(ase)o(,)357 3518
y(and)40 b(\(2\))g(I)h(can)f(then)g(go)h(on)f(to)h(consume)f
Fs(Y)h Ft(leaving)e(Z)j(behind)p Fw(,)d Ft(and)h(the)h(pair)357
3618 y Fs(Y)47 b(Z)g Ft(r)m(epr)m(esents)g(a)g(verb)g(phr)o(ase)p
Fw(.)63 b(The)47 b Fs(np)f Fw(rule)h(and)f(the)h(second)f(of)h(the)g
Fs(vp)357 3718 y Fw(rules)41 b(w)o(ork)f(similarly)-5
b(.)451 3824 y(Moreo)o(v)o(er)m(,)40 b(the)j(same)g(idea)f(underlies)g
(the)h(w)o(ay)g(this)g(grammar)e(handles)h(the)357 3923
y(w)o(ords.)j(F)o(or)c(e)o(xample)522 4108 y Fs(n\([man|W],W\).)357
4292 y Fw(means)i(we)h(are)f(handling)e Ft(man)i Fw(as)h(the)g(dif)n
(ference)d(between)i Fs([man|W])e Fw(and)i Fs(W)o Fw(.)357
4392 y(After)54 b(all,)k(the)c(dif)n(ference)e(between)i(what)g(is)h
(consumed)d(and)i(what)g(is)h(left)357 4492 y(behind)39
b(is)j(precisely)e(the)h(w)o(ord)g Fs(man)n Fw(.)451
4597 y(No)n(w)-5 b(,)56 b(at)d(\002rst)h(this)g(code)f(may)f(be)h
(harder)f(to)i(grasp)e(than)h(our)f(pre)n(vious)357 4697
y(recogniser)-5 b(.)97 b(But)59 b(note)e(that)i(we)g(ha)n(v)o(e)f
(gained)f(something)f(important:)80 b Ft(we)357 4797
y(haven')n(t)36 b(used)41 b Fs(append/3)l Fw(.)46 b(In)38
b(the)g(dif)n(ference)f(list)i(based)f(recogniser)m(,)f(it)i(simply)357
4896 y(isn')o(t)h(needed,)g(and)g(this)i(mak)o(es)e(a)i(big)e(dif)n
(ference.)451 5002 y(Ho)n(w)60 b(do)g(we)g(use)g(this)h(recogniser?)101
b(W)-7 b(ell,)66 b(here')-5 b(s)60 b(ho)n(w)g(to)g(recognise)357
5102 y(sentences:)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 128 140
TeXDict begin 128 139 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(128)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(?-)h(s\([a,woman,shoo)o(ts,)o(a,)o(ma)o
(n],)o([])o(\).)971 1151 y(yes)806 1318 y Fw(This)70
b(asks)h(whether)e(we)i(can)f(get)g(an)g Fs(s)h Fw(by)f(consuming)e
(the)i(symbols)806 1418 y(in)60 b Fs([a,woman,shoots,a)o(,ma)o(n])-7
b Fw(,)66 b(lea)n(ving)60 b(nothing)f(behind.)104 b(Similarly)-5
b(,)64 b(to)806 1517 y(generate)39 b(all)j(the)f(sentences)f(in)h(the)g
(grammar)m(,)e(we)i(ask)971 1685 y Fs(?-)g(s\(X,[]\).)806
1852 y Fw(This)47 b(asks:)58 b(what)47 b(v)n(alues)g(can)f(you)g(gi)n
(v)o(e)h(to)g Fs(X)o Fw(,)i(such)e(that)g(we)g(get)g(an)g
Fs(s)g Fw(by)806 1952 y(consuming)38 b(the)j(symbols)g(in)g
Fs(X)o Fw(,)h(lea)n(ving)e(nothing)f(behind?)900 2052
y(The)f(queries)g(for)f(other)h(grammatical)f(cate)o(gories)g(also)i(w)
o(ork)e(the)i(same)f(w)o(ay)-5 b(.)806 2151 y(F)o(or)40
b(e)o(xample,)f(to)i(\002nd)g(out)g(if)g Ft(a)g(woman)f
Fw(is)i(a)g(noun)d(phrase)h(we)i(ask:)971 2319 y Fs(?-)f
(np\([a,woman],[])o(\).)806 2486 y Fw(And)f(we)h(generate)f(all)i(the)e
(noun)g(phrases)h(in)g(the)g(grammar)e(as)i(follo)n(ws:)971
2653 y Fs(?-)g(np\(X,[]\).)900 2821 y Fw(Y)-9 b(ou)36
b(should)f(trace)h(what)h(happens)d(when)i(this)h(program)d(analyses)i
(a)h(sentence)806 2920 y(such)51 b(as)h Ft(a)f(woman)g(shoots)h(a)f
(man)p Fw(.)77 b(As)52 b(you)f(will)h(see,)i(it)e(is)h(a)f(lot)f(more)
806 3020 y(ef)n(\002cient)i(than)g(our)f Fs(append/3)f
Fw(based)i(program.)82 b(Moreo)o(v)o(er)m(,)53 b(as)i(no)e(use)h(is)806
3120 y(made)38 b(of)h Fs(append/3)l Fw(,)h(the)f(trace)g(is)h(a)g(lot)f
(easier)g(to)g(grasp.)45 b(So)39 b(we)g(ha)n(v)o(e)g(tak)o(en)806
3219 y(a)i(big)f(step)i(forw)o(ard.)900 3319 y(On)k(the)f(other)g
(hand,)h(it)g(has)g(to)g(be)f(admitted)g(that)h(the)f(second)g
(recogniser)806 3419 y(is)f(not)f(as)h(easy)f(to)g(understand,)f(at)i
(least)g(at)f(\002rst,)i(and)d(it')-5 b(s)45 b(a)e(pain)g(ha)n(ving)f
(to)806 3519 y(k)o(eep)f(track)g(of)g(all)h(those)g(dif)n(ference)d
(list)k(v)n(ariables.)k(If)41 b(only)g(it)h(were)g(possible)806
3618 y(to)37 b(ha)n(v)o(e)f(a)i(recogniser)d(as)j(simple)f(as)g(the)g
(\002rst)h(and)f(as)g(ef)n(\002cient)g(as)h(the)f(second.)806
3718 y(And)j(in)h(f)o(act,)g(it)h Ft(is)g Fw(possible:)j(this)d(is)g
(where)e(DCGs)i(come)e(in.)806 3910 y Fk(2)99 b(De\002nite)43
b(Clause)e(Grammars)806 4040 y Fw(So,)e(what)g(are)f(DCGs?)47
b(Quite)39 b(simply)-5 b(,)38 b(a)h(nice)g(notation)e(for)i(writing)f
(grammars)806 4140 y(that)51 b(hides)g(the)g(underlying)e(dif)n
(ference)g(list)j(v)n(ariables.)76 b(Let')-5 b(s)52 b(look)e(at)i
(three)806 4240 y(e)o(xamples.)806 4396 y Fv(A)41 b(\002rst)g(example)
806 4519 y Fw(As)g(our)f(\002rst)i(e)o(xample,)d(here')-5
b(s)41 b(our)f(little)i(grammar)d(written)i(as)h(a)f(DCG:)971
4703 y Fs(s)g(-->)f(np,vp.)971 4902 y(np)h(-->)f(det,n.)971
5102 y(vp)h(-->)f(v,np.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 129 141
TeXDict begin 129 140 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(129)p 0 TeXcolorgray 522 1051 a Fs(vp)41 b(-->)f(v.)522
1250 y(det)g(-->)h([the].)522 1350 y(det)f(-->)h([a].)522
1549 y(n)g(-->)f([woman].)522 1649 y(n)h(-->)f([man].)522
1848 y(v)h(-->)f([shoots].)451 2033 y Fw(The)d(link)f(with)h(the)g
(original)f(conte)o(xt)g(free)g(grammar)f(should)h(be)h(transparent:)
357 2132 y(this)44 b(is)h(de\002nitely)f(the)g(most)g(user)n(-friendly)
e(notation)g(we)j(ha)n(v)o(e)e(used)h(yet.)55 b(But)357
2232 y(ho)n(w)35 b(do)h(we)h(use)g(this)f(DCG?)h(In)f(f)o(act,)i(we)e
(use)h(it)g(in)f Ft(e)n(xactly)h Fw(the)f(same)h(w)o(ay)f(as)357
2331 y(we)41 b(used)f(our)g(dif)n(ference)f(list)i(recogniser)-5
b(.)45 b(F)o(or)40 b(e)o(xample,)f(to)i(\002nd)f(out)h(whether)357
2431 y Ft(a)g(woman)f(shoots)h(a)g(man)f Fw(is)i(a)g(sentence,)e(we)h
(pose)g(the)g(query:)522 2616 y Fs(?-)g(s\([a,woman,shoot)o(s,)o(a,)o
(man)o(],)o([]\))o(.)357 2800 y Fw(That)52 b(is,)k(just)d(as)h(in)f
(the)f(dif)n(ference)f(list)j(recogniser)m(,)f(we)g(ask)g(whether)e(we)
357 2900 y(can)42 b(get)h(an)g Fs(s)g Fw(by)f(consuming)f(the)h
(symbols)h(in)f Fs([a,woman,shoots,a)o(,ma)o(n])-7 b
Fw(,)357 3000 y(lea)n(ving)40 b(nothing)f(behind.)451
3100 y(Similarly)-5 b(,)45 b(to)f(generate)f(all)j(the)e(sentences)g
(in)h(the)f(grammar)m(,)g(we)g(pose)h(the)357 3199 y(query:)522
3367 y Fs(?-)c(s\(X,[]\).)357 3534 y Fw(This)51 b(asks)g(what)g(v)n
(alues)g(we)g(can)g(gi)n(v)o(e)f(to)h Fs(X)p Fw(,)j(such)d(that)g(we)g
(get)g(an)g Fs(s)g Fw(by)357 3634 y(consuming)39 b(the)i(symbols)f(in)h
Fs(X)p Fw(,)g(lea)n(ving)f(nothing)f(behind.)451 3734
y(Moreo)o(v)o(er)m(,)i(the)j(queries)f(for)g(other)f(grammatical)g
(cate)o(gories)h(also)h(w)o(ork)f(the)357 3834 y(same)i(w)o(ay)-5
b(.)58 b(F)o(or)45 b(e)o(xample,)g(to)g(\002nd)g(out)g(if)h
Ft(a)f(woman)g Fw(is)h(a)g(noun)e(phrase)g(we)357 3933
y(pose)c(the)h(query:)522 4101 y Fs(?-)g(np\([a,woman],[]\))o(.)357
4269 y Fw(And)f(we)h(generate)f(all)i(the)f(noun)e(phrases)i(in)g(the)g
(grammar)e(as)j(follo)n(ws:)522 4436 y Fs(?-)f(np\(X,[]\).)451
4604 y Fw(What')-5 b(s)60 b(going)d(on?)98 b(Quite)59
b(simply)-5 b(,)62 b(this)d(DCG)h Ft(is)f Fw(our)f(dif)n(ference)f
(list)357 4703 y(recogniser!)48 b(T)-7 b(o)42 b(put)g(it)h(another)e(w)
o(ay)-5 b(,)42 b(DCG)h(notation)e(is)j(essentially)e(syntactic)357
4803 y(sugar)m(,)56 b(user)n(-friendly)c(notation)h(that)i(lets)g(us)g
(write)g(grammars)e(in)i(a)g(natural)357 4902 y(w)o(ay)-5
b(.)45 b(But)40 b(Prolog)f(translates)h(this)g(notation)f(into)h(the)f
(kinds)h(of)f(dif)n(ference)f(lists)357 5002 y(discussed)47
b(before.)65 b(So)49 b(we)f(ha)n(v)o(e)f(the)h(best)g(of)g(both)f(w)o
(orlds:)60 b(a)48 b(nice)g(simple)357 5102 y(notation)39
b(for)i(w)o(orking)e(with,)i(and)f(the)h(ef)n(\002cienc)o(y)f(of)g(dif)
n(ference)f(lists.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 130 142
TeXDict begin 130 141 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(130)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(There)j(is)j(an)e(easy)g(w)o(ay)h(to)f(see)h
(what)f(Prolog)f(translates)i(DCG)g(rules)f(into.)806
1151 y(Suppose)37 b(you)h(are)g(w)o(orking)f(with)i(the)f(DCG)i(just)f
(gi)n(v)o(en)e(\(that)h(is,)i(suppose)d(that)806 1250
y(Prolog)i(has)j(already)d(consulted)h(the)h(rules\).)k(Then)c(if)g
(you)f(pose)h(the)f(query:)971 1397 y Fs(?-)h(listing\(s\).)806
1545 y Fw(you)f(will)h(get)g(the)g(response)971 1692
y Fs(s\(A,B\))e(:-)1137 1792 y(np\(A,C\),)1137 1891 y(vp\(C,B\).)806
2039 y Fw(This)45 b(is)i(what)e(Prolog)f(has)i(translated)f
Fs(s)c(-->)f(np,vp)k Fw(into.)59 b(Note)46 b(that)f(\(apart)806
2138 y(from)f(the)h(choice)f(of)h(v)n(ariables\))f(this)h(is)h(e)o
(xactly)e(the)h(dif)n(ference)e(list)j(rule)f(we)806
2238 y(used)40 b(in)h(our)f(second)h(recogniser)-5 b(.)900
2338 y(Similarly)g(,)40 b(if)h(you)f(pose)h(the)g(query)971
2485 y Fs(?-)g(listing\(np\).)806 2632 y Fw(you)f(will)h(get)971
2780 y Fs(np\(A,B\))d(:-)1137 2879 y(det\(A,C\),)1137
2979 y(n\(C,B\).)806 3126 y Fw(This)53 b(is)h(what)f(Prolog)g(has)g
(translated)g Fs(np)41 b(-->)f(det,n)52 b Fw(into.)82
b(Again)52 b(\(apart)806 3226 y(from)42 b(the)h(choice)f(of)h(v)n
(ariables\))f(this)i(is)g(the)f(dif)n(ference)f(list)i(rule)f(we)g
(used)g(in)806 3325 y(our)d(second)g(recogniser)-5 b(.)900
3425 y(T)e(o)46 b(get)f(a)h(complete)e(listing)i(of)f(the)g
(translations)g(of)g(all)h(the)g(rules,)g(simply)806
3525 y(type)971 3672 y Fs(?-)41 b(listing.)806 3819 y
Fw(There)55 b(is)j(one)e(thing)f(you)h(may)g(observ)o(e.)91
b(Some)56 b(Prolog)f(implementations)806 3919 y(translate)40
b(rules)h(such)g(as)971 4066 y Fs(det)f(-->)g([the].)806
4214 y Fw(not)g(into)971 4361 y Fs(det\([the|W],W\).)806
4508 y Fw(which)g(w)o(as)i(the)f(form)f(we)h(used)g(in)g(our)f(dif)n
(ference)f(list)j(recogniser)m(,)d(b)n(ut)h(into)971
4656 y Fs(det\(A,B\))e(:-)1137 4755 y('C'\(A,the,B\).)806
4902 y Fw(But)46 b(although)e(the)i(notation)f(is)i(dif)n(ferent,)f
(the)g(idea)g(is)h(the)f(same.)61 b(This)46 b(says)806
5002 y(you)c(can)h(get)g(a)h(list)g Fs(B)g Fw(from)e(a)h(list)i
Fs(A)e Fw(by)g(consuming)e(a)j Fs(the)o Fw(.)53 b(That)43
b(is,)h(once)806 5102 y(again)39 b(this)i(is)g(a)g(dif)n(ference)d
(list)k(representation.)h(Note)d(that)h Fs('C')e Fw(is)j(an)e(atom.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 131 143
TeXDict begin 131 142 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(131)p 0 TeXcolorgray 357 1051 a Fv(Adding)41 b(r)o(ecursi)o(v)o
(e)g(rules)357 1173 y Fw(Our)c(original)f(conte)o(xt)g(free)h(grammar)e
(generated)h(only)g(20)h(sentences.)44 b(Ho)n(we)n(v)o(er)357
1273 y(it)j(is)h(easy)f(to)g(write)g(conte)o(xt)e(free)i(grammars)e
(that)i(generate)f(in\002nitely)g(man)o(y)357 1372 y(sentences:)j
(simply)42 b(use)h(recursi)n(v)o(e)e(rules.)50 b(Here')-5
b(s)43 b(an)f(e)o(xample.)50 b(Let')-5 b(s)43 b(add)f(the)357
1472 y(follo)n(wing)d(rules)i(to)g(our)f(little)i(grammar:)p
0 TeXcolorgray 0 TeXcolorgray 1377 1648 a Fs(s)f(->)g(s)g(conj)e(s)1377
1747 y(conj)h(->)g Ft(and)1377 1847 y Fs(conj)g(->)g
Ft(or)1377 1946 y Fs(conj)g(->)g Ft(b)n(ut)357 2121 y
Fw(This)58 b(rule)g(allo)n(ws)h(us)g(to)f(join)g(as)h(man)o(y)f
(sentences)g(together)f(as)i(we)f(lik)o(e)357 2221 y(using)43
b(the)h(w)o(ords)g Ft(and)p Fw(,)g Ft(b)n(ut)p Fw(,)h(and)e
Ft(or)p Fw(.)56 b(So)44 b(this)h(grammar)d(classi\002es)k(sentences)357
2320 y(such)g(as)i Ft(The)f(woman)f(shoots)g(the)h(man)f(or)h(the)g
(man)f(shoots)h(the)g(woman)f Fw(as)357 2420 y(grammatical.)451
2519 y(No)n(w)-5 b(,)49 b(in)f(principle)f(it)h(is)h(easy)f(to)g(turn)f
(this)i(grammar)d(into)i(a)g(DCG.)h(W)-7 b(e)357 2619
y(need)40 b(merely)g(add)g(the)h(rules)522 2782 y Fs(s)g(-->)f
(s,conj,s.)522 2982 y(conj)g(-->)g([and].)522 3081 y(conj)g(-->)g
([or].)522 3181 y(conj)g(-->)g([but].)357 3344 y Fw(But)52
b(there)f(is)i(a)f(problem)d(lurking)h(under)h(the)g(surf)o(ace.)77
b(What)52 b(does)g(Prolog)357 3444 y(actually)40 b Ft(do)h
Fw(with)g(this)g(DCG?)h(Let')-5 b(s)41 b(ha)n(v)o(e)g(a)g(look.)451
3544 y(First,)g(let')-5 b(s)40 b(add)f(the)h(ne)n(w)f(rules)h(at)g(the)
g Ft(be)m(ginning)c Fw(of)k(the)f(kno)n(wledge)f(base,)357
3643 y(before)i(the)i(rule)g Fs(s)f(-->)f(np,vp)n Fw(.)49
b(What)43 b(happens)d(if)j(we)f(then)f(pose)h(the)g(query)357
3743 y Fs(s\([a,woman,shoo)o(ts])o(,[)o(]\))-6 b Fw(?)46
b(Prolog)40 b(immediately)f(goes)i(into)g(a)g(loop.)451
3842 y(Can)c(you)f(see)h(why?)44 b(The)36 b(point)g(is)i(this.)45
b(Prolog)36 b(translates)h(DCG)g(rules)g(into)357 3942
y(ordinary)45 b(Prolog)h(rules.)65 b(If)47 b(we)h(place)f(the)g
(recursi)n(v)o(e)f(rule)h Fs(s)41 b(-->)f(s,conj,s)357
4042 y Fw(in)45 b(the)g(kno)n(wledge)d(base)j(before)f(the)g
(non-recursi)n(v)o(e)e(rule)i Fs(s)e(-->)e(np,vp)j Fw(then)357
4141 y(the)g(kno)n(wledge)d(base)k(will)f(contain)f(the)h(follo)n(wing)
f(tw)o(o)h(Prolog)f(rules,)h(in)g(this)357 4241 y(order:)522
4404 y Fs(s\(A,)d(B\))h(:-)854 4504 y(s\(A,)f(C\),)854
4604 y(conj\(C,)f(D\),)854 4703 y(s\(D,)h(B\).)522 4902
y(s\(A,)g(B\))h(:-)854 5002 y(np\(A,)f(C\),)854 5102
y(vp\(C,)g(B\).)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 132 144
TeXDict begin 132 143 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(132)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(No)n(w)-5 b(,)46 b(from)e(a)i(declarati)n(v)o
(e)f(perspecti)n(v)o(e)f(this)i(is)h(\002ne,)f(b)n(ut)g(from)f(a)h
(procedural)806 1151 y(perspecti)n(v)o(e)54 b(this)i(is)h(f)o(atal.)91
b(When)56 b(it)g(tries)h(to)f(use)g(the)g(\002rst)g(rule,)k(Prolog)806
1250 y(immediately)46 b(encounters)f(the)i(goal)g Fs(s\(A,C\))n
Fw(,)i(which)e(it)h(then)f(tries)h(to)f(satisfy)806 1350
y(using)65 b(the)h(\002rst)g(rule,)72 b(whereupon)63
b(it)k(immediately)d(encounters)g(the)i(goal)806 1449
y Fs(s\(A,)39 b(C\))p Fw(,)h(which)f(it)h(then)f(tries)i(to)e(satisfy)h
(using)f(the)h(\002rst)g(rule,)g(whereupon)d(it)806 1549
y(immediately)42 b(encounters)h(the)h(goal)f Fs(s\(A,)d(C\))o
Fw(,)45 b(and)f(so)g(on.)55 b(In)44 b(short,)g(it)h(goes)806
1649 y(into)40 b(an)h(in\002nite)g(loop)f(and)g(does)h(no)g(useful)f(w)
o(ork.)900 1748 y(So)67 b(let')-5 b(s)67 b(add)f(the)g(recursi)n(v)o(e)
f(rule)h Fs(s)42 b(-->)e(s,conj,s)64 b Fw(at)i(the)h(end)f(of)806
1848 y(the)55 b(kno)n(wledge)e(base,)59 b(so)c(that)h(Prolog)e(al)o(w)o
(ays)i(encounters)d(the)i(translation)806 1948 y(of)60
b(the)g(non-recursi)n(v)o(e)d(rule)j(\002rst.)105 b(What)61
b(happens)e(no)n(w)-5 b(,)64 b(when)c(we)h(pose)806 2047
y(the)52 b(query)f Fs(s\([a,woman,shoot)o(s])o(,[)o(]\))-6
b Fw(?)80 b(W)-7 b(ell,)56 b(no)n(w)c(Prolog)f(handles)h(this)806
2147 y(and)59 b(gi)n(v)o(es)g(an)g(answer)-5 b(.)102
b(But)60 b(what)g(happens)e(when)h(we)h(pose)f(the)h(query)806
2246 y Fs(s\([woman,shoot])o(,[)o(]\))-6 b Fw(?)84 b(Note)54
b(that)f(this)i(is)f(an)g(ungrammatical)d(sentence)806
2346 y(that)46 b(is)g(not)g(accepted)f(by)h(our)f(grammar)-5
b(.)59 b(Once)46 b(again,)g(Prolog)f(gets)h(into)g(an)806
2446 y(in\002nite)g(loop.)64 b(Since)47 b(it)h(is)g(impossible)e(to)h
(recognise)f Fs([woman,shoot])c Fw(as)48 b(a)806 2545
y(sentence)j(consisting)g(of)h(a)h(noun)e(phrase)g(and)g(a)i(v)o(erb)e
(phrase,)j(Prolog)d(tries)806 2645 y(to)44 b(analyse)g(it)i(with)e(the)
h(rule)f Fs(s)d(-->)f(s,conj,s)m Fw(,)46 b(and)e(ends)g(up)g(in)h(the)f
(same)806 2745 y(unending)38 b(loop)i(as)i(before.)900
2844 y(In)51 b(short,)i(we)e(are)g(ha)n(ving)f(the)h(same)g(problems)f
(that)h(we)h(met)f(when)f(we)806 2944 y(discussed)k(recursion,)h(and)f
(rule)g(and)g(goal)f(ordering,)i(in)g(Chapter)f(3.)85
b(In)54 b(a)806 3043 y(nutshell,)41 b Fs(s)g(-->)f(s,conj,s)f
Fw(translates)j(into)g(a)g(left-recursi)n(v)o(e)e(rule,)i(and)f(that')
-5 b(s)806 3143 y(bad)51 b(ne)n(ws.)78 b(Moreo)o(v)o(er)m(,)52
b(as)g(we)g(sa)o(w)h(earlier)m(,)g(we)f Ft(can')n(t)g
Fw(\002x)g(such)g(problems)806 3243 y(simply)63 b(by)h(tink)o(ering)f
(with)i(the)f(rule)g(ordering:)90 b(the)65 b(w)o(ay)f(out)g(of)g(such)
806 3342 y(dif)n(\002culties)42 b(is)j(to)e(change)f(the)h(goal)g
(order)f(of)h(the)h(recursi)n(v)o(e)d(rule)i(so)h(that)f(the)806
3442 y(recursi)n(v)o(e)50 b(goal)h(is)i(not)f(the)g(\002rst)g(one)g(in)
g(the)g(body)e(of)i(the)g(rule.)78 b(That)52 b(is,)806
3542 y(ideally)40 b(we)h(should)f(re)n(write)h(the)g(rule)f(so)i(that)f
(it)g(is)h(no)f(longer)e(left-recursi)n(v)o(e.)900 3641
y(Nice)56 b(idea,)i(b)n(ut)d(unfortunately)-5 b(,)56
b(it)g(is)g(not)f(an)g(option)f(here.)88 b(Why)55 b(not?)806
3741 y(Because)39 b(the)h(order)e(of)h(the)g(goals)g(determines)g(the)g
(order)f(of)h(the)h(w)o(ords)f(in)g(the)806 3840 y(sentence!)74
b(It)51 b(mak)o(es)f(an)h(important)e(dif)n(ference,)i(for)f(e)o
(xample,)i(whether)d(our)806 3940 y(grammar)g(accepts)j
Ft(the)g(woman)f(shoots)g(the)h(man)f(and)f(the)i(man)f(shoots)g(the)
806 4040 y(woman)42 b Fw(\()p Fs(s)f(-->)f(s,conj,s)m
Fw(\))j(or)g(whether)f(it)h(accepts)g Ft(and)f(the)h(woman)g(shoots)806
4139 y(the)d(man)h(the)g(man)f(shoots)h(the)g(woman)f
Fw(\()p Fs(s)h(-->)f(conj,s,s)m Fw(\).)900 4239 y(But)k(there)e(is)i(a)
g(w)o(ay)f(out.)52 b(The)42 b(standard)g(solution)h(is)h(to)f
(introduce)e(a)j(ne)n(w)806 4339 y(non-terminal)d(symbol)j(and)g(re)n
(write)g(the)h(DCG.)g(W)-7 b(e)45 b(could,)g(for)f(e)o(xample,)f(use)
806 4438 y(the)i(cate)o(gory)f Fs(simple_s)f Fw(for)j(sentences)f
(without)g(embedded)f(sentences.)60 b(Our)806 4538 y(grammar)39
b(w)o(ould)h(then)g(look)h(lik)o(e)g(this:)971 4703 y
Fs(s)g(-->)f(simple_s.)971 4803 y(s)h(-->)f(simple_s,conj,s.)971
4902 y(simple_s)e(-->)i(np,vp.)971 5002 y(np)h(-->)f(det,n.)971
5102 y(vp)h(-->)f(v,np.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 133 145
TeXDict begin 133 144 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(133)p 0 TeXcolorgray 522 1051 a Fs(vp)41 b(-->)f(v.)522
1151 y(det)g(-->)h([the].)522 1250 y(det)f(-->)h([a].)522
1350 y(n)g(-->)f([woman].)522 1449 y(n)h(-->)f([man].)522
1549 y(v)h(-->)f([shoots].)522 1649 y(conj)g(-->)g([and].)522
1748 y(conj)g(-->)g([or].)522 1848 y(conj)g(-->)g([but].)357
2052 y Fw(As)51 b(you)f(should)g(check,)i(Prolog)e(doesn')o(t)g(get)g
(into)h(in\002nite)g(loops)f(with)h(this)357 2152 y(grammar)57
b(as)i(it)h(did)e(with)h(the)g(pre)n(vious)e(one,)62
b(so)d(from)f(a)h(computational)357 2252 y(perspecti)n(v)o(e)49
b(the)i(solution)g(is)h(satisf)o(actory)-5 b(.)75 b(But)52
b(it)g(lea)n(v)o(es)f(something)e(to)j(be)357 2351 y(desired)k(from)g
(a)h(linguistic)g(perspecti)n(v)o(e.)92 b(The)57 b(DCG)h(that)f(looped)
e(w)o(as)j(at)357 2451 y(least)45 b(f)o(aithful)e(to)i(the)g
(linguistic)f(intuitions)f(about)h(the)g(structure)g(of)g(sentences)357
2550 y(made)53 b(using)f Ft(and)p Fw(,)k Ft(b)n(ut)p
Fw(,)g(and)d Ft(or)p Fw(.)84 b(The)53 b(ne)n(w)g(DCG)h(imposes)g(an)f
(additional)357 2650 y(layer)47 b(of)g(structure)g(that)g(is)i(moti)n
(v)n(ated)d(by)h(processing)f(rather)h(than)g(linguistic)357
2750 y(considerations;)39 b(we)i(are)g(no)g(longer)e(simply)i(turning)e
(grammars)h(into)g(Prolog.)451 2862 y(The)h(moral)f(is:)48
b(DCGs)42 b(aren')o(t)e(magic.)46 b(The)o(y)40 b(are)h(a)h(nice)f
(notation,)e(b)n(ut)j(you)357 2962 y(can')o(t)c(e)o(xpect)h(to)h(write)
g(do)n(wn)e(an)i(arbitrary)e(CFG)j(as)f(a)g(DCG)h(and)e(ha)n(v)o(e)g
(it)h(run)357 3061 y(without)h(problems.)48 b(DCG)43
b(rules)f(are)h(ordinary)d(Prolog)h(rules)h(in)g(disguise,)g(and)357
3161 y(this)j(means)g(that)g(you)f(must)h(pay)f(attention)g(to)h(what)g
(your)e(Prolog)h(interpreter)357 3261 y(is)h(going)e(to)h(do)f(with)i
(them.)55 b(And)43 b(in)h(particular)m(,)g(you)f(ha)n(v)o(e)g(to)h(k)o
(eep)g(an)g(e)o(ye)357 3360 y(out)c(for)h(left-recursion.)357
3543 y Fv(A)g(DCG)g(f)n(or)g(a)g(simple)h(f)n(ormal)e(language)357
3681 y Fw(As)49 b(our)f(last)h(e)o(xample,)g(we)g(shall)g(de\002ne)f(a)
h(DCG)g(for)f(the)h(formal)e(language)357 3781 y Fj(a)401
3751 y Fc(n)446 3781 y Fj(b)482 3751 y Fc(n)527 3781
y Fw(.)f(What)41 b(is)h(this)g(language?)i(And)c(what)h(is)h(a)f
(formal)f(language)f(an)o(yw)o(ay?)451 3893 y(A)57 b(formal)e(language)
g(is)i(simply)f(a)h(set)g(of)f(strings.)92 b(The)56 b(term)g
(\223formal)357 3993 y(language\224)k(is)j(intended)e(to)h(contrast)g
(with)g(the)g(term)g(\223natural)f(language\224:)357
4093 y(whereas)g(natural)g(languages)g(are)h(languages)e(that)i(human)f
(beings)g(actually)357 4192 y(use,)46 b(formal)e(languages)g(are)h
(mathematical)f(objects)g(that)i(computer)d(scientists,)357
4292 y(logicians,)d(and)g(mathematicians)g(de\002ne)g(and)h(study)f
(for)g(v)n(arious)g(purposes.)451 4404 y(A)45 b(simple)g(e)o(xample)e
(of)h(a)h(formal)f(language)f(is)i Fj(a)2100 4374 y Fc(n)2145
4404 y Fj(b)2181 4374 y Fc(n)2226 4404 y Fw(.)57 b(The)44
b(w)o(ords)g(in)h(this)357 4504 y(language)c(are)h(b)n(uilt)h(up)f
(from)g(tw)o(o)h(symbols:)49 b(the)42 b(symbol)g Ft(a)h
Fw(and)f(the)h(symbol)357 4604 y Ft(b)p Fw(.)i(In)38
b(f)o(act,)i(the)f(language)e Fj(a)1282 4573 y Fc(n)1327
4604 y Fj(b)1363 4573 y Fc(n)1447 4604 y Fw(consists)j(of)e(all)i
(strings)f(made)f(up)h(from)f(these)357 4703 y(tw)o(o)h(symbols)g(that)
g(ha)n(v)o(e)f(the)i(follo)n(wing)d(form:)44 b(the)39
b(string)g(must)g(consist)h(of)f(an)357 4803 y(unbrok)o(en)46
b(block)i(of)h Ft(a)p Fw(s)h(of)f(length)f Ft(n)p Fw(,)j(follo)n(wed)d
(by)g(an)h(unbrok)o(en)e(block)h(of)357 4902 y Ft(b)p
Fw(s)c(of)g(length)f Ft(n)p Fw(,)h(and)g(nothing)e(else.)55
b(So)45 b(the)f(strings)g Ft(ab)p Fw(,)g Ft(aabb)p Fw(,)f
Ft(aaabbb)e Fw(and)357 5002 y Ft(aaaabbbb)k Fw(all)50
b(belong)e(to)h Fj(a)1305 4972 y Fc(n)1350 5002 y Fj(b)1386
4972 y Fc(n)1431 5002 y Fw(.)71 b(\(Note)48 b(that)h(the)h(empty)e
(string)h(belongs)f(to)357 5102 y Fj(a)401 5072 y Fc(n)446
5102 y Fj(b)482 5072 y Fc(n)567 5102 y Fw(too:)d(after)40
b(all,)g(the)g(empty)f(string)h(consists)g(of)g(a)g(block)f(of)h
Ft(a)p Fw(s)g(of)g(length)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 134 146
TeXDict begin 134 145 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(134)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(zero)e(follo)n(wed)h(by)g(a)h(block)e(of)h
Ft(b)p Fw(s)h(of)f(length)g(zero.\))44 b(On)c(the)f(other)g(hand,)f
Ft(aba)806 1151 y Fw(and)i Ft(abba)f Fw(do)i(not)g(belong)e(to)i
Fj(a)1864 1120 y Fc(n)1909 1151 y Fj(b)1945 1120 y Fc(n)1990
1151 y Fw(.)900 1253 y(No)n(w)-5 b(,)48 b(it)h(is)f(easy)g(to)f(write)h
(a)g(conte)o(xt)e(free)h(grammar)f(that)h(generates)g(this)806
1353 y(language:)p 0 TeXcolorgray 0 TeXcolorgray 1891
1547 a Fs(s)41 b(->)g Fj(\017)1891 1646 y Fs(s)g(->)g(l)g(s)g(r)1891
1746 y(l)g(->)g(a)1891 1846 y(r)g(->)g(b)900 2036 y Fw(The)46
b(\002rst)h(rule)f(says)h(that)f(an)g Ft(s)h Fw(can)f(be)g(realised)g
(as)h(nothing)e(at)i(all.)62 b(The)806 2135 y(second)44
b(rule)h(says)h(that)f(an)g Ft(s)h Fw(can)f(be)g(made)g(up)g(of)g(an)g
Ft(l)h Fw(\(for)e(left\))h(element,)806 2235 y(follo)n(wed)g(by)i(an)h
Ft(s)p Fw(,)h(follo)n(wed)d(by)h(an)g Ft(r)j Fw(\(for)d(right\))f
(element.)64 b(The)47 b(last)h(tw)o(o)806 2334 y(rules)d(say)h(that)g
Ft(l)g Fw(elements)f(and)g Ft(r)j Fw(elements)e(can)f(be)h(realised)f
(as)h Ft(a)p Fw(s)g(and)f Ft(b)p Fw(s)806 2434 y(respecti)n(v)o(ely)-5
b(.)65 b(It)48 b(should)f(be)i(clear)f(that)g(this)h(grammar)d(really)i
(does)g(generate)806 2534 y(all)41 b(and)f(only)h(the)g(elements)f(of)h
Fj(a)1915 2504 y Fc(n)1960 2534 y Fj(b)1996 2504 y Fc(n)2041
2534 y Fw(,)g(including)e(the)i(empty)f(string.)900 2636
y(Moreo)o(v)o(er)m(,)i(it)k(is)f(easy)g(to)g(turn)f(this)h(grammar)e
(into)h(DCG.)i(W)-7 b(e)45 b(can)g(do)f(so)806 2736 y(as)d(follo)n(ws:)
971 2911 y Fs(s)g(-->)f([].)971 3011 y(s)h(-->)f(l,s,r.)971
3210 y(l)h(-->)f([a].)971 3310 y(r)h(-->)f([b].)806 3485
y Fw(Note)d(that)g(the)h(second)e(rule)i(is)g(recursi)n(v)o(e)e(\(b)n
(ut,)h(thankfully)-5 b(,)36 b(not)h(left)h(recursi)n(v)o(e\).)806
3584 y(And)44 b(in)h(f)o(act)h(this)f(DCG)h(w)o(orks)f(e)o(xactly)f(as)
i(we)g(w)o(ould)e(hope.)57 b(F)o(or)45 b(e)o(xample,)806
3684 y(to)c(the)g(query)971 3859 y Fs(?-)g(s\([a,a,a,b,b,b])o(,[])o
(\).)806 4034 y Fw(we)g(get)g(the)g(answer)f(yes,)h(while)g(to)g(the)g
(query)971 4209 y Fs(?-)g(s\([a,a,a,b,b,b,)o(b],)o([])o(\).)806
4384 y Fw(we)g(get)g(the)g(answer)f(no.)46 b(The)40 b(query)971
4559 y Fs(?-)h(s\(X,[]\).)806 4734 y Fw(enumerates)e(the)i(strings)g
(in)g(the)g(language,)e(starting)i(from)f Fs([])o Fw(.)806
4935 y Fk(3)99 b(Exer)n(cises)806 5102 y Fv(Exer)o(cise)40
b(7.1.)95 b Fw(Suppose)40 b(we)h(are)g(w)o(orking)f(with)h(the)g(follo)
n(wing)e(DCG:)p 0 TeXcolorgray 357 5009 118 4 v 357 5127
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
361 5127 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
-2795 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
471 5127 4 118 v 357 5130 118 4 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 135 147
TeXDict begin 135 146 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(135)p 0 TeXcolorgray 522 1051 a Fs(s)41 b(-->)f(foo,bar,wiggle.)
522 1151 y(foo)g(-->)h([choo].)522 1250 y(foo)f(-->)h(foo,foo.)522
1350 y(bar)f(-->)h(mar,zar.)522 1449 y(mar)f(-->)h(me,my.)522
1549 y(me)g(-->)f([i].)522 1649 y(my)h(-->)f([am].)522
1748 y(zar)g(-->)h(blar,car.)522 1848 y(blar)f(-->)g([a].)522
1948 y(car)g(-->)h([train].)522 2047 y(wiggle)e(-->)h([toot].)522
2147 y(wiggle)f(-->)h(wiggle,wiggle.)357 2305 y Fw(Write)55
b(do)n(wn)g(the)g(ordinary)e(Prolog)h(rules)h(that)h(correspond)c(to)j
(these)h(DCG)357 2404 y(rules.)e(What)44 b(are)g(the)f(\002rst)i(three)
e(responses)g(that)h(Prolog)f(gi)n(v)o(es)g(to)h(the)g(query)357
2504 y Fs(s\(X,[]\))m Fw(?)357 2637 y Fv(Exer)o(cise)57
b(7.2.)146 b Fw(The)58 b(formal)e(language)g Fj(a)1854
2607 y Fc(n)1900 2637 y Fj(b)1936 2607 y Fc(n)2002 2637
y Fh(\000)21 b(f)p Fj(\017)p Fh(g)57 b Fw(consists)i(of)e(all)i(the)p
0 TeXcolorgray 3286 2544 118 4 v 3286 2662 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 3290 2662 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 358 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401 2662 4 118
v 3286 2665 118 4 v 0 TeXcolorgray 357 2736 a Fw(strings)49
b(in)g Fj(a)786 2706 y Fc(n)831 2736 y Fj(b)867 2706
y Fc(n)962 2736 y Fw(e)o(xcept)f(the)h(empty)g(string.)70
b(Write)50 b(a)f(DCG)h(that)g(generates)357 2836 y(this)41
b(language.)357 2969 y Fv(Exer)o(cise)51 b(7.3.)127 b
Fw(Let)52 b Fj(a)1167 2939 y Fc(n)1212 2969 y Fj(b)1248
2939 y Fe(2)p Fc(n)1378 2969 y Fw(be)g(the)g(formal)e(language)g(which)
h(contains)g(all)p 0 TeXcolorgray 3286 2876 V 3286 2994
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
3290 2994 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
359 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401
2994 4 118 v 3286 2997 118 4 v 0 TeXcolorgray 357 3068
a Fw(strings)i(of)g(the)g(follo)n(wing)f(form:)70 b(an)53
b(unbrok)o(en)e(block)h(of)h Ft(a)p Fw(s)h(of)f(length)g
Ft(n)357 3168 y Fw(follo)n(wed)48 b(by)g(an)i(unbrok)o(en)c(block)i(of)
h Ft(b)p Fw(s)h(of)f(length)f Ft(2n)p Fw(,)j(and)e(nothing)e(else.)357
3268 y(F)o(or)36 b(e)o(xample,)g Ft(abb)p Fw(,)h Ft(aabbbb)p
Fw(,)e(and)h Ft(aaabbbbbb)d Fw(belong)i(to)i Fj(a)2316
3238 y Fc(n)2362 3268 y Fj(b)2398 3238 y Fe(2)p Fc(n)2475
3268 y Fw(,)h(and)f(so)g(does)357 3367 y(the)k(empty)f(string.)45
b(Write)d(a)f(DCG)h(that)f(generates)f(this)h(language.)357
3556 y Fk(4)99 b(Practical)41 b(Session)357 3686 y Fw(The)53
b(purpose)f(of)h(this)i(session)f(is)g(to)g(help)f(you)g(get)h(f)o
(amiliar)f(with)h(DCGs,)357 3786 y(dif)n(ference)46 b(lists,)52
b(and)d(the)g(relation)f(between)g(them,)i(and)e(to)h(gi)n(v)o(e)f(you)
g(some)357 3885 y(e)o(xperience)c(in)j(writing)g(basic)g(DCGs.)64
b(As)48 b(you)e(will)h(learn)g(in)f(the)h(follo)n(wing)357
3985 y(chapter)m(,)32 b(there)g(is)h(more)e(to)h(DCGs)h(than)f(the)g
(ideas)g(just)h(discussed.)43 b(Nonetheless,)357 4084
y(what)i(you)f(ha)n(v)o(e)g(learned)g(so)i(f)o(ar)f(is)h(certainly)e
(the)h(core,)g(and)f(it)i(is)g(important)357 4184 y(that)41
b(you)f(are)h(comfortable)d(with)j(the)g(basic)h(ideas)f(before)e(mo)o
(ving)g(on.)451 4284 y(First)j(some)f(k)o(e)o(yboard)d(e)o(x)o
(ercises:)p 0 TeXcolorgray 460 4442 a(1.)p 0 TeXcolorgray
41 w(T)-7 b(ype)65 b(in)h(or)f(do)n(wnload)f(the)h(simple)h
Fs(append/3)d Fw(based)i(recognisers)564 4541 y(discussed)43
b(in)f(the)h(te)o(xt,)g(and)f(then)g(run)g(some)g(traces.)51
b(As)43 b(you)f(will)h(see,)564 4641 y(we)h(were)f(not)g(e)o
(xaggerating)d(when)i(we)i(said)f(that)h(their)f(performance)d(is)564
4741 y(poor)-5 b(.)56 b(Ev)o(en)43 b(for)h(such)g(simple)h(sentences)f
(as)h Ft(The)g(woman)f(shot)h(a)f(man)564 4840 y Fw(you)c(will)i(see)g
(that)f(the)g(traces)g(are)g(long)f(and)g(dif)n(\002cult)g(to)h(follo)n
(w)-5 b(.)p 0 TeXcolorgray 460 5002 a(2.)p 0 TeXcolorgray
41 w(Ne)o(xt,)37 b(type)f(in)h(or)f(do)n(wnload)f(our)g(second)h
(recogniser)m(,)f(the)i(one)f(based)g(on)564 5102 y(dif)n(ference)43
b(lists,)j(and)e(run)g(more)g(traces.)57 b(As)45 b(you)f(will)h(see,)h
(there)e(is)h(a)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 136 148
TeXDict begin 136 147 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(136)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 1013 1051 a(dramatic)h(gain)g(in)h(ef)n(\002cienc)o(y)-5
b(.)47 b(Moreo)o(v)o(er)m(,)39 b(you)i(will)i(see)f(that)g(the)g
(traces)1013 1151 y(are)g Ft(very)h Fw(simple)g(to)f(understand,)f
(especially)h(when)g(compared)e(with)i(the)1013 1250
y(monsters)e(produced)f(by)h(the)h Fs(append/3)d Fw(based)j
(implementations.)p 0 TeXcolorgray 909 1406 a(3.)p 0
TeXcolorgray 41 w(Ne)o(xt,)48 b(type)e(in)h(or)g(do)n(wnload)d(the)j
(DCG)h(discussed)e(in)h(the)g(te)o(xt.)63 b(T)-7 b(ype)1013
1505 y Fs(listing)42 b Fw(so)j(that)g(you)f(can)g(see)h(what)g(Prolog)f
(translates)g(the)h(rules)g(to.)1013 1605 y(Ho)n(w)35
b(does)g(your)f(system)i(translate)f(rules)g(of)g(the)g(form)g
Fs(Det)40 b(-->)g([the])n Fw(?)1013 1705 y(That)46 b(is,)i(does)d(it)i
(translate)f(them)f(to)h(rules)g(lik)o(e)g Fs(det\([the|X],X\))-6
b Fw(,)48 b(or)1013 1804 y(does)41 b(is)h(mak)o(e)e(use)h(of)g(rules)g
(containing)e(the)i Fs('C')f Fw(predicate?)p 0 TeXcolorgray
909 1960 a(4.)p 0 TeXcolorgray 41 w(No)n(w)k(run)g(some)g(traces.)57
b(Apart)44 b(from)f(v)n(ariable)h(names,)g(the)h(traces)f(you)1013
2059 y(observ)o(e)51 b(here)h(should)g(be)g(v)o(ery)g(similar)h(to)f
(the)h(traces)g(you)e(observ)o(ed)1013 2159 y(when)40
b(running)f(the)i(dif)n(ference)e(list)j(recogniser)-5
b(.)900 2304 y(And)40 b(no)n(w)h(it')-5 b(s)42 b(time)f(to)g(write)g
(some)g(DCGs:)p 0 TeXcolorgray 909 2460 a(1.)p 0 TeXcolorgray
41 w(The)e(formal)g(language)e Ft(Even)i Fw(is)i(v)o(ery)d(simple:)45
b(it)40 b(consists)g(of)f(all)i(strings)1013 2560 y(containing)g(an)h
(e)n(v)o(en)f(number)g(of)h Ft(a)p Fw(s,)h(and)e(nothing)g(else.)51
b(Note)42 b(that)g(the)1013 2660 y(empty)37 b(string)g
Fj(\017)g Fw(belongs)g(to)g Ft(Even)p Fw(.)44 b(Write)38
b(a)g(DCG)g(that)g(generates)e Ft(Even)p Fw(.)p 0 TeXcolorgray
909 2815 a(2.)p 0 TeXcolorgray 41 w(The)54 b(formal)f(language)f
Fj(a)1871 2785 y Fc(n)1916 2815 y Fj(b)1952 2785 y Fe(2)p
Fc(m)2048 2815 y Fj(c)2084 2785 y Fe(2)p Fc(m)2180 2815
y Fj(d)2223 2785 y Fc(n)2323 2815 y Fw(consists)j(of)f(all)h(strings)f
(of)f(the)1013 2915 y(follo)n(wing)37 b(form:)44 b(an)39
b(unbrok)o(en)d(block)i(of)g Ft(a)p Fw(s)i(follo)n(wed)d(by)h(an)h
(unbrok)o(en)1013 3015 y(block)j(of)g Ft(b)p Fw(s)h(follo)n(wed)f(by)g
(an)g(unbrok)o(en)e(block)i(of)h Ft(c)p Fw(s)g(follo)n(wed)e(by)i(an)
1013 3114 y(unbrok)o(en)j(block)h(of)h Ft(d)r Fw(s,)i(such)e(that)h
(the)f Ft(a)g Fw(and)g Ft(d)j Fw(blocks)c(are)h(e)o(xactly)1013
3214 y(the)39 b(same)f(length,)g(and)g(the)h Ft(b)f Fw(and)g
Ft(c)h Fw(blocks)f(are)g(also)h(e)o(xactly)f(the)g(same)1013
3313 y(length)49 b(and)f(furthermore)f(consist)j(of)f(an)g(e)n(v)o(en)f
(number)g(of)h Ft(b)p Fw(s)h(and)f Ft(c)p Fw(s)1013 3413
y(respecti)n(v)o(ely)-5 b(.)44 b(F)o(or)c(e)o(xample,)g
Fj(\017)p Fw(,)h Ft(abbccd)p Fw(,)e(and)h Ft(aabbbbccccdd)f
Fw(all)j(belong)1013 3513 y(to)f Fj(a)1163 3483 y Fc(n)1208
3513 y Fj(b)1244 3483 y Fe(2)p Fc(m)1340 3513 y Fj(c)1376
3483 y Fe(2)p Fc(m)1472 3513 y Fj(d)1515 3483 y Fc(n)1561
3513 y Fw(.)46 b(Write)41 b(a)h(DCG)f(that)h(generates)e(this)h
(language.)p 0 TeXcolorgray 909 3668 a(3.)p 0 TeXcolorgray
41 w(The)65 b(language)f(that)i(logicians)f(call)i(\223propositional)c
(logic)i(o)o(v)o(er)f(the)1013 3768 y(propositional)35
b(symbols)i Ft(p)p Fw(,)g Ft(q)p Fw(,)h(and)f Ft(r)r
Fw(\224)h(can)f(be)g(de\002ned)f(by)h(the)g(follo)n(wing)1013
3867 y(conte)o(xt)j(free)g(grammar:)p 0 TeXcolorgray
0 TeXcolorgray 1735 4037 a Fs(prop)g(->)h(p)1735 4137
y(prop)f(->)h(q)1735 4236 y(prop)f(->)h(r)1735 4336 y(prop)f(->)h
Fh(:)h Fs(prop)1735 4435 y(prop)e(->)h(\(prop)e Fh(^)j
Fs(prop\))1735 4535 y(prop)e(->)h(\(prop)e Fh(_)j Fs(prop\))1735
4635 y(prop)e(->)h(\(prop)e Fh(!)j Fs(prop\))1013 4803
y Fw(Write)48 b(a)g(DCG)g(that)f(generates)g(this)h(language.)63
b(Actually)-5 b(,)47 b(because)g(we)1013 4902 y(don')o(t)d(kno)n(w)h
(about)f(Prolog)h(operators)f(yet,)j(you)e(will)h(ha)n(v)o(e)f(to)h
(mak)o(e)f(a)1013 5002 y(fe)n(w)i(rather)f(clumsy)g(looking)g
(compromises.)62 b(F)o(or)46 b(e)o(xample,)h(instead)g(of)1013
5102 y(getting)40 b(it)i(to)f(recognise)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 137 149
TeXDict begin 137 148 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(7:)46 b(De\002nite)41 b(Clause)h(Grammars)
1130 b(137)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1541 1050 a Fh(:)p Fs(\(p)83 b Fh(!)41 b Fs(q\))564 1250
y Fw(you)f(will)i(ha)n(v)o(e)e(to)h(get)g(it)h(recognise)e(things)g
(lik)o(e)p 0 TeXcolorgray 0 TeXcolorgray 1111 1448 a
Fs([not,)g('\(',)f(p,)i(implies,)d(q,)j('\)'])564 1649
y Fw(instead.)k(W)-7 b(e)39 b(will)g(learn)f(in)g(Chapter)f(9)i(ho)n(w)
e(to)i(deal)f(with)g(propositional)564 1748 y(logic)f(some)n(what)f
(more)h(naturally;)g(in)g(the)h(meantime,)e(write)i(a)g(DCG)g(that)564
1848 y(accepts)43 b(a)g(clumsy)f(looking)f(v)o(ersion)h(of)g(this)i
(language.)49 b(Use)44 b Ft(or)h Fw(for)d Fh(_)p Fw(,)564
1948 y(and)f Ft(and)h Fw(for)e Fh(^)p Fw(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 138 150
TeXDict begin 138 149 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 139 151
TeXDict begin 139 150 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(8)1109 2603 y Fm(Mor)l(e)f(De\002nite)g(Clause)1980
2852 y(Grammars)p 357 3034 2599 24 v 0 TeXcolorgray 0.95
TeXcolorgray 0 TeXcolorgray 714 4616 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
130.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial 797 3786 a Fl(This)g(chapter)h(has)g(t)m(w)m
(o)g(main)g(goals:)p 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 887 3935 a(1.)p 0 TeXcolorgray 41 w(T)-8
b(o)33 b(examine)h(t)m(w)m(o)g(imp)s(o)m(rtant)g(capabilities)h
(o\013ered)1004 4051 y(b)m(y)j(DCG)h(notation:)50 b(extra)39
b(a)m(rguments)g(and)f(extra)1004 4168 y(goals.)p 0 TeXcolorgray
887 4350 a(2.)p 0 TeXcolorgray 41 w(T)-8 b(o)77 b(discuss)i(the)e
(status)i(and)e(limitations)h(of)1004 4467 y(DCGs.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 140 152
TeXDict begin 140 151 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(140)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Extra)42 b(Ar)o(guments)806
1180 y Fw(In)j(the)h(pre)n(vious)f(chapter)g(we)h(introduced)e(basic)i
(DCG)h(notation.)60 b(But)46 b(DCGs)806 1280 y(of)n(fer)34
b(more)h(than)g(we')l(v)o(e)g(seen)g(so)h(f)o(ar)-5 b(.)45
b(F)o(or)35 b(a)h(start,)h(DCGs)g(allo)n(w)e(us)h(to)g(specify)806
1380 y(e)o(xtra)41 b(ar)o(guments.)46 b(Extra)41 b(ar)o(guments)f(can)h
(be)h(used)f(for)h(man)o(y)e(purposes;)h(we')o(ll)806
1479 y(e)o(xamine)e(three.)806 1633 y Fv(Context)g(fr)o(ee)i(grammars)f
(with)h(featur)o(es)806 1755 y Fw(As)47 b(a)g(\002rst)g(e)o(xample,)g
(let')-5 b(s)47 b(see)g(ho)n(w)g(e)o(xtra)e(ar)o(guments)g(can)h(be)h
(used)f(to)h(add)806 1855 y Ft(featur)m(es)40 b Fw(to)i(conte)o
(xt-free)c(grammars.)900 1954 y(Here')-5 b(s)41 b(the)g(DCG)h(we)f(w)o
(ork)o(ed)f(with)h(in)g(the)g(pre)n(vious)f(chapter:)971
2113 y Fs(s)h(-->)f(np,vp.)971 2313 y(np)h(-->)f(det,n.)971
2512 y(vp)h(-->)f(v,np.)971 2612 y(vp)h(-->)f(v.)971
2811 y(det)g(-->)g([the].)971 2910 y(det)g(-->)g([a].)971
3110 y(n)h(-->)f([woman].)971 3209 y(n)h(-->)f([man].)971
3409 y(v)h(-->)f([shoots].)900 3568 y Fw(No)n(w)-5 b(,)58
b(suppose)c(we)h(w)o(anted)g(to)g(deal)g(with)h(sentences)e(lik)o(e)i
(\223She)f(shoots)806 3668 y(him\224,)48 b(and)f(\223He)g(shoots)g
(her\224.)65 b(What)47 b(should)g(we)g(do?)65 b(W)-7
b(ell,)50 b(ob)o(viously)45 b(we)806 3767 y(should)36
b(add)h(rules)g(saying)g(that)g(\223he\224,)h(\223she\224,)g
(\223him\224,)f(and)g(\223her\224)g(are)g(pronouns:)971
3915 y Fs(pro)j(-->)g([he].)971 4014 y(pro)g(-->)g([she].)971
4114 y(pro)g(-->)g([him].)971 4213 y(pro)g(-->)g([her].)806
4361 y Fw(Furthermore,)55 b(we)g(should)e(add)h(a)h(rule)f(saying)g
(that)g(noun)f(phrases)h(can)h(be)806 4460 y(pronouns:)971
4608 y Fs(np)41 b(-->)f(pro.)900 4755 y Fw(In)52 b(this)h(ne)n(w)f(DCG)
h(an)o(y)e(good?)79 b(W)-7 b(ell,)56 b(up)c(to)g(a)h(point,)h(it)f(w)o
(orks.)79 b(F)o(or)806 4855 y(e)o(xample:)971 5002 y
Fs(?-)41 b(s\([she,shoots,h)o(im])o(,[)o(]\))o(.)971
5102 y(yes)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 141 153
TeXDict begin 141 152 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(141)p 0 TeXcolorgray 451 1051 a(But)45
b(there')-5 b(s)45 b(an)f(ob)o(vious)f(problem.)54 b(The)44
b(DCG)h(will)h(also)e(accept)g(a)h(lot)g(of)357 1151
y(sentences)f(that)h(are)f(clearly)g(wrong,)g(such)h(as)g(\223)-7
b(A)45 b(w)o(oman)f(shoots)g(she\224,)i(\223Her)357 1250
y(shoots)40 b(a)i(man\224,)e(and)g(\223Her)h(shoots)g(she\224:)522
1401 y Fs(?-)g(s\([a,woman,shoot)o(s,)o(sh)o(e],)o([])o(\).)522
1500 y(yes)522 1700 y(?-)g(s\([her,shoots,a,)o(ma)o(n])o(,[])o(\).)522
1799 y(yes)522 1998 y(?-)g(s\([her,shoots,sh)o(e])o(,[)o(]\).)522
2098 y(yes)451 2249 y Fw(That)48 b(is,)i(the)d(grammar)f(doesn')o(t)g
(kno)n(w)h(that)g(\223she\224)h(and)f(\223he\224)g(are)h
Ft(subject)357 2348 y Fw(pronouns)40 b(and)i(cannot)f(be)h(used)g(in)h
Ft(object)g Fw(position;)g(thus)f(\223)-7 b(A)43 b(w)o(oman)f(shoots)
357 2448 y(she\224)h(is)h(bad)f(because)g(it)h(violates)f(this)h(basic)
g(f)o(act)f(about)g(English.)52 b(Moreo)o(v)o(er)m(,)357
2547 y(the)g(grammar)f(doesn')o(t)g(kno)n(w)g(that)i(\223her\224)f(and)
f(\223him\224)h(are)h Ft(object)g Fw(pronouns)357 2647
y(and)39 b(cannot)h(be)g(used)g(in)g Ft(subject)i Fw(position;)d(thus)i
(\223Her)f(shoots)g(a)g(man\224)g(is)h(bad)357 2747 y(because)36
b(it)i(violates)f(this)g(constraint.)44 b(As)37 b(for)g(\223Her)g
(shoots)f(she\224,)i(this)g(manages)357 2846 y(to)j(get)g(both)f
(matters)h(wrong)e(at)j(once.)451 2946 y(No)n(w)-5 b(,)49
b(it')-5 b(s)49 b(pretty)e(ob)o(vious)f Ft(what)k Fw(we)e(ha)n(v)o(e)f
(to)h(do)g(to)g(put)g(this)g(right:)59 b(we)357 3046
y(need)51 b(to)i(e)o(xtend)e(the)h(DCG)h(with)g(information)d(about)h
(which)h(pronouns)e(can)357 3145 y(occur)45 b(in)i(subject)f(position)g
(and)g(which)g(in)h(object)f(position.)62 b(The)47 b(interesting)357
3245 y(question:)d Ft(how)39 b Fw(e)o(xactly)f(are)g(we)i(to)f(do)f
(this?)46 b(First)40 b(let')-5 b(s)40 b(look)e(at)h(a)h(nai)n(v)o(e)e
(w)o(ay)357 3344 y(of)i(correcting)f(this,)j(namely)e(adding)f(ne)n(w)i
(rules:)522 3508 y Fs(s)g(-->)f(np_subject,vp.)522 3707
y(np_subject)d(-->)k(det,n.)522 3807 y(np_object)79 b(-->)41
b(det,n.)522 3906 y(np_subject)c(-->)k(pro_subject.)522
4006 y(np_object)79 b(-->)41 b(pro_object.)522 4205 y(vp)g(-->)f
(v,np_object.)522 4305 y(vp)h(-->)f(v.)522 4504 y(det)g(-->)h([the].)
522 4604 y(det)f(-->)h([a].)522 4803 y(n)g(-->)f([woman].)522
4902 y(n)h(-->)f([man].)522 5102 y(pro_subject)d(-->)j([he].)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 142 154
TeXDict begin 142 153 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(142)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(pro_subject)d(-->)j([she].)971
1151 y(pro_object)d(-->)k([him].)971 1250 y(pro_object)c(-->)k([her].)
971 1449 y(v)g(-->)f([shoots].)900 1595 y Fw(No)n(w)h(this)g(solution)f
(\223w)o(orks\224.)45 b(F)o(or)c(e)o(xample,)971 1731
y Fs(?-)g(s\([her,shoots,s)o(he])o(,[)o(]\))o(.)971 1831
y(no)900 1967 y Fw(But)55 b(neither)f(computer)f(scientists)j(nor)e
(linguists)h(w)o(ould)f(consider)g(this)h(a)806 2067
y(good)45 b(solution.)64 b(The)47 b(trouble)f(is,)k(a)d(small)h
(addition)e(to)i(the)f(le)o(xicon)f(has)h(led)806 2167
y(to)c(quite)g(a)h(big)f(change)f(in)i(the)f(DCG.)h(Let')-5
b(s)44 b(f)o(ace)g(it:)51 b(\223she\224)44 b(and)f(\223her\224)f(\(and)
806 2266 y(\223he\224)48 b(and)f(\223him\224\))h(are)g(the)h(same)f(in)
h(a)g(lot)f(of)g(respects.)69 b(But)48 b(to)h(deal)f(with)806
2366 y(the)g(property)f(in)i(which)f(the)o(y)g(dif)n(fer)g(\(namely)-5
b(,)49 b(in)f(which)h(position)f(the)o(y)g(can)806 2465
y(occur)40 b(in)i(sentences\))g(we')l(v)o(e)f(had)g(to)h(mak)o(e)g(big)
f(changes)g(to)h(the)g(grammar:)k(in)806 2565 y(particular)m(,)36
b(we')l(v)o(e)i(doubled)e(the)i(number)e(of)i(noun)f(phrase)g(rules.)45
b(If)38 b(we)h(had)e(to)806 2665 y(mak)o(e)48 b(further)f(changes)h
(\(for)g(e)o(xample,)h(to)g(cope)f(with)h(plural)f(noun)f(phrases\))806
2764 y(things)e(w)o(ould)g(get)h(e)n(v)o(en)f(w)o(orse.)60
b(What)47 b(we)f(really)f(need)h(is)g(a)h(more)e(delicate)806
2864 y(programming)38 b(mechanism)j(that)h(allo)n(ws)g(us)g(to)g(cope)f
(with)h(such)g(f)o(acts)g(without)806 2964 y(being)53
b(forced)g(to)i(add)f(rules)g(all)h(the)g(time.)86 b(And)54
b(here')-5 b(s)55 b(where)f(the)g(e)o(xtra)806 3063 y(ar)o(guments)38
b(come)j(into)f(play)-5 b(.)45 b(Look)40 b(at)h(the)g(follo)n(wing)f
(grammar:)971 3209 y Fs(s)h(-->)f(np\(subject\),vp.)971
3408 y(np\(_\))f(-->)i(det,n.)971 3508 y(np\(X\))e(-->)i(pro\(X\).)971
3707 y(vp)g(-->)f(v,np\(object\).)971 3807 y(vp)h(-->)f(v.)971
4006 y(det)g(-->)g([the].)971 4105 y(det)g(-->)g([a].)971
4305 y(n)h(-->)f([woman].)971 4404 y(n)h(-->)f([man].)971
4604 y(pro\(subject\))c(-->)41 b([he].)971 4703 y(pro\(subject\))36
b(-->)41 b([she].)971 4803 y(pro\(object\))c(-->)j([him].)971
4902 y(pro\(object\))d(-->)j([her].)971 5102 y(v)h(-->)f([shoots].)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 143 155
TeXDict begin 143 154 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(143)p 0 TeXcolorgray 451 1051 a(The)49
b(k)o(e)o(y)g(thing)f(to)i(note)f(is)h(that)g(this)f(ne)n(w)h(grammar)d
(contains)i(only)f(one)357 1151 y(ne)n(w)f(noun)f(phrase)g(rule.)65
b(In)47 b(f)o(act,)i(it)f(is)h(v)o(ery)d(similar)h(to)h(the)f(\002rst)h
(grammar)357 1250 y(that)40 b(we)h(wrote,)g(e)o(xcept)e(that)i(no)n(w)f
(the)h(symbol)f Fs(np)g Fw(is)i(associated)e(with)h(a)g(ne)n(w)357
1350 y(ar)o(gument,)k(either)h Fs(subject)n Fw(,)i Fs(object)n
Fw(,)g Fs(_)f Fw(or)f Fs(X)p Fw(.)63 b(A)47 b(linguist)g(w)o(ould)f
(say)h(that)357 1449 y(we')l(v)o(e)j(added)h(features)f(to)i
(distinguish)f(v)n(arious)f(kinds)h(of)g(noun)f(phrase.)77
b(In)357 1549 y(particular)m(,)50 b(note)f(the)h(four)e(rules)i(for)f
(the)h(pronouns.)70 b(Here)49 b(we')l(v)o(e)g(used)h(the)357
1649 y(e)o(xtra)f(ar)o(gument)f(to)i(state)g(which)g(pronouns)d(can)j
(occur)f(in)h(subject)g(position,)357 1748 y(and)44 b(which)g(can)h
(occur)f(in)h(object)f(position.)57 b(Thus)44 b(these)h(rules)g(are)g
(the)g(most)357 1848 y(fundamental,)40 b(for)j(the)o(y)f(gi)n(v)o(e)g
(us)h(the)g(basic)g(f)o(acts)g(about)f(ho)n(w)g(these)h(pronouns)357
1948 y(can)d(be)h(used.)451 2047 y(So)g(what)g(do)g(the)g(other)f
(rules)h(do?)k(W)-7 b(ell,)42 b(intuiti)n(v)o(ely)-5
b(,)39 b(the)i(rule)522 2213 y Fs(np\(X\))e(-->)i(pro\(X\).)357
2379 y Fw(uses)i(the)g(e)o(xtra)f(ar)o(gument)f(\(the)i(v)n(ariable)f
Fs(X)o Fw(\))h(to)g(pass)h(these)f(basic)g(f)o(acts)h(about)357
2479 y(pronouns)d(up)i(to)h(noun)e(phrases)i(b)n(uilt)f(out)h(of)f
(them:)51 b(because)43 b(the)h(v)n(ariable)f Fs(X)357
2578 y Fw(is)h(used)g(as)g(the)f(e)o(xtra)g(ar)o(gument)e(for)i(both)g
(the)h(np)f(and)g(the)g(pronoun,)f(Prolog)357 2678 y(uni\002cation)50
b(will)i(guarantee)d(that)j(the)o(y)f(will)h(be)f(gi)n(v)o(en)f(the)h
(same)h(v)n(alue.)76 b(In)357 2778 y(particular)m(,)44
b(if)i(the)g(pronoun)d(we)j(use)f(is)i(\223she\224)e(\(in)g(which)g
(case)h Fs(X=subject)m Fw(\),)357 2877 y(then)d(the)g(np)g(will)i
(\(through)c(its)j(e)o(xtra)f(ar)o(gument)e Fs(X=subject)m
Fw(\))i(be)h(mark)o(ed)e(as)357 2977 y(a)48 b(subject)g(np.)67
b(On)48 b(the)g(other)g(hand,)g(if)h(the)f(pronoun)d(we)k(use)f(is)h
(\223her\224)f(\(in)357 3076 y(which)c(case)h Fs(X=object)m
Fw(\),)g(then)g(the)f(e)o(xtra)g(ar)o(gument)f(for)h(np)g(will)h(be)g
(mark)o(ed)357 3176 y Fs(X=object)38 b Fw(too.)45 b(And)c(this,)g(of)g
(course,)f(is)h(e)o(xactly)f(the)h(beha)n(viour)e(we)j(w)o(ant.)451
3276 y(On)f(the)g(other)f(hand,)g(although)f(noun)h(phrases)g(b)n(uilt)
h(using)g(the)g(rule)522 3442 y Fs(np\(_\))e(-->)i(det,n.)357
3608 y Fw(also)56 b(ha)n(v)o(e)f(an)h(e)o(xtra)f(ar)o(gument,)i(we')l
(v)o(e)e(used)g(the)h(anon)o(ymous)d(v)n(ariable)i(as)357
3707 y(its)d(v)n(alue.)77 b(Essentially)52 b(this)g(means)g
Ft(can)f(be)g(either)p Fw(,)k(which)c(is)h(correct,)h(for)357
3807 y(e)o(xpressions)35 b(b)n(uilt)i(using)f(this)i(rule)e(\(such)h
(as)g(\223the)g(man\224)f(and)g(\223a)h(w)o(oman\224\))f(can)357
3906 y(be)41 b(used)f(in)h(both)f(subject)h(and)g(object)f(position.)
451 4006 y(No)n(w)h(consider)f(the)h(rule)522 4172 y
Fs(vp)g(-->)f(v,np\(object\).)357 4338 y Fw(This)k(says)h(that)f(to)g
(apply)f(this)i(rule)e(we)i(need)e(to)h(use)h(a)f(noun)f(phrase)g
(whose)357 4438 y(e)o(xtra)48 b(ar)o(gument)f(uni\002es)i(with)g
Fs(object)n Fw(.)71 b(This)49 b(can)g(be)g Ft(either)i
Fw(noun)d(phrases)357 4537 y(b)n(uilt)56 b(from)f(object)h(pronouns)e
Ft(or)k Fw(noun)d(phrases)h(such)g(as)h(\223the)f(man\224)f(and)357
4637 y(\223a)h(w)o(oman\224)f(which)g(ha)n(v)o(e)g(the)h(anon)o(ymous)d
(v)n(ariable)i(as)h(the)g(v)n(alue)f(of)h(the)357 4737
y(e)o(xtra)43 b(ar)o(gument.)51 b(Crucially)-5 b(,)43
b(pronouns)e(mark)o(ed)i(has)h(ha)n(ving)e Fs(subject)f
Fw(as)k(the)357 4836 y(v)n(alue)d(of)g(the)h(e)o(xtra)f(ar)o(gument)e
Ft(can')n(t)j Fw(be)g(used)f(here:)49 b(the)43 b(atoms)f
Fs(object)f Fw(and)357 4936 y Fs(subject)d Fw(don')o(t)i(unify)-5
b(.)44 b(Note)d(that)g(the)g(rule)522 5102 y Fs(s)g(-->)f
(np\(subject\),vp.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 144 156
TeXDict begin 144 155 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(144)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(w)o(orks)k(in)g(an)h(analogous)e(f)o(ashion)g
(to)i(pre)n(v)o(ent)e(noun)g(phrases)h(made)g(of)g(object)806
1151 y(pronouns)38 b(from)i(ending)f(up)i(in)g(subject)g(position.)900
1251 y(This)g(w)o(orks.)k(Y)-9 b(ou)41 b(can)g(check)f(it)h(out)g(by)f
(posing)g(the)h(query:)971 1420 y Fs(?-)g(s\(X,[]\).)806
1589 y Fw(As)61 b(you)f(step)h(through)e(the)i(responses,)j(you')o(ll)c
(see)i(that)f(only)f(acceptable)806 1688 y(English)40
b(is)i(generated.)900 1789 y(But)g(while)g(the)g(intuiti)n(v)o(e)f(e)o
(xplanation)e(just)j(gi)n(v)o(en)f(is)i(correct,)d(what')-5
b(s)42 b Ft(r)m(eally)806 1888 y Fw(going)49 b(on?)76
b(The)51 b(k)o(e)o(y)f(thing)g(to)h(remember)f(is)i(that)f(DCG)h(rules)
f(are)g(just)g(a)806 1988 y(con)m(v)o(enient)38 b(abbre)n(viation.)43
b(F)o(or)e(e)o(xample,)e(the)i(rule)971 2157 y Fs(s)g(-->)f(np,vp.)806
2325 y Fw(is)h(really)g(syntactic)g(sugar)f(for)971 2494
y Fs(s\(A,B\))f(:-)1137 2594 y(np\(A,C\),)1137 2694 y(vp\(C,B\).)806
2862 y Fw(That)52 b(is,)k(as)d(we)g(learned)f(in)h(the)f(pre)n(vious)f
(chapter)m(,)j(the)f(DCG)g(notation)f(is)806 2962 y(a)e(w)o(ay)h(of)f
(hiding)f(the)i(tw)o(o)f(ar)o(guments)f(responsible)g(for)h(the)g(dif)n
(ference)e(list)806 3062 y(representation,)34 b(so)j(that)g(we)f(don')o
(t)f(ha)n(v)o(e)h(to)g(think)g(about)f(them.)44 b(W)-7
b(e)38 b(w)o(ork)d(with)806 3161 y(the)46 b(nice)f(user)n(-friendly)f
(notation,)i(and)f(Prolog)g(translates)i(it)f(into)g(the)g(clauses)806
3261 y(just)41 b(gi)n(v)o(en.)900 3361 y(Ok,)g(so)g(we)g(ob)o(viously)e
(need)h(to)h(ask)h(what)971 3530 y Fs(s)f(-->)f(np\(subject\),vp.)806
3699 y Fw(translates)h(into.)k(Here')-5 b(s)41 b(the)g(answer:)971
3868 y Fs(s\(A,B\))e(:-)1137 3967 y(np\(subject,A,C\),)1137
4067 y(vp\(C,B\).)900 4236 y Fw(As)47 b(should)e(no)n(w)g(be)h(clear)m
(,)g(the)g(name)g(\223e)o(xtra)f(ar)o(gument\224)e(is)k(a)f(good)f
(one:)806 4335 y(as)j(this)g(translation)f(mak)o(es)h(clear)m(,)h(the)e
Fs(subject)f Fw(symbol)h(really)g Ft(is)i Fw(just)f(one)806
4435 y(more)e(ar)o(gument)g(in)h(an)h(ordinary)e(Prolog)g(rule.)66
b(Similarly)-5 b(,)48 b(our)f(noun)f(phrase)806 4534
y(DCG)41 b(rules)g(translate)g(into)971 4703 y Fs(np\(A,B,C\))d(:-)1137
4803 y(det\(B,D\),)1137 4902 y(n\(D,C\).)971 5002 y(np\(A,B,C\))g(:-)
1137 5102 y(pro\(A,B,C\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 145 157
TeXDict begin 145 156 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(145)p 0 TeXcolorgray 357 1051 a(Note)51
b(that)g(both)g(rules)g(ha)n(v)o(e)f Ft(thr)m(ee)i Fw(ar)o(guments.)74
b(The)51 b(\002rst,)j Fs(A)p Fw(,)g(is)e(the)f(e)o(xtra)357
1151 y(ar)o(gument,)36 b(and)i(the)h(last)g(tw)o(o)g(are)f(the)h
(ordinary)-5 b(,)36 b(hidden)h(DCG)j(ar)o(guments)c(\(the)357
1250 y(tw)o(o)41 b(hidden)e(ar)o(guments)g(are)i(al)o(w)o(ays)h(the)f
(last)g(tw)o(o)h(ar)o(guments\).)451 1352 y(Incidentally)-5
b(,)38 b(ho)n(w)i(do)g(you)f(think)g(we)i(w)o(ould)f(use)g(the)g
(grammar)f(to)h(list)i(the)357 1451 y(grammatical)36
b(noun)h(phrases?)44 b(W)-7 b(ell,)40 b(if)e(we)h(had)e(been)g(w)o
(orking)g(with)h(the)g(DCG)357 1551 y(rule)43 b Fs(np)e(-->)f(det,n)i
Fw(\(that)h(is,)i(a)f(rule)f(with)h(no)f(e)o(xtra)f(ar)o(guments\))g
(we)h(w)o(ould)357 1651 y(ha)n(v)o(e)d(made)g(the)h(query)522
1823 y Fs(?-)g(np\(NP,[]\).)357 1995 y Fw(So,)51 b(in)f(vie)n(w)f(of)g
(what)h(we)g(ha)n(v)o(e)f(just)h(learned)e(about)h(e)o(xtra)f(ar)o
(guments,)i(it')-5 b(s)357 2095 y(not)40 b(too)h(surprising)f(that)h
(we)g(need)f(to)h(pose)g(the)g(query)522 2267 y Fs(?-)g(np\(X,NP,[]\).)
357 2439 y Fw(when)f(w)o(orking)e(with)j(our)f(ne)n(w)g(DCG.)h(And)f
(here')-5 b(s)40 b(what)g(the)h(response)e(w)o(ould)357
2539 y(be:)522 2711 y Fs(X)i(=)g(_2625)522 2810 y(NP)g(=)g([the,woman])
c(;)522 3010 y(X)k(=)g(_2625)522 3109 y(NP)g(=)g([the,man])d(;)522
3308 y(X)j(=)g(_2625)522 3408 y(NP)g(=)g([a,woman])d(;)522
3607 y(X)j(=)g(_2625)522 3707 y(NP)g(=)g([a,man])d(;)522
3906 y(X)j(=)g(subject)522 4006 y(NP)g(=)g([he])f(;)522
4205 y(X)h(=)g(subject)522 4305 y(NP)g(=)g([she])e(;)522
4504 y(X)i(=)g(object)522 4604 y(NP)g(=)g([him])e(;)522
4803 y(X)i(=)g(object)522 4902 y(NP)g(=)g([her])e(;)522
5102 y(no)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 146 158
TeXDict begin 146 157 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(146)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(One)j(\002nal)h(remark:)50
b(don')o(t)41 b(be)j(misled)f(by)g(this)h(simplicity)f(of)g(our)g(e)o
(xample)806 1151 y(grammar)-5 b(.)85 b(Extra)54 b(ar)o(guments)e(can)j
(be)f(used)g(to)h(cope)f(with)h(some)f(comple)o(x)806
1250 y(syntactic)g(problems.)86 b(DCGs)55 b(are)g(no)f(longer)g(the)h
(state-of-the-art)d(grammar)806 1350 y(de)n(v)o(elopment)36
b(tools)k(the)o(y)f(once)g(were,)g(b)n(ut)h(the)o(y')l(re)e(not)h(to)o
(ys)h(either)-5 b(.)45 b(Once)39 b(you)806 1449 y(kno)n(w)50
b(about)g(writing)h(DCGs)h(with)g(e)o(xtra)e(ar)o(guments,)i(you)e(can)
h(write)h(some)806 1549 y(f)o(airly)40 b(sophisticated)g(grammars.)806
1703 y Fv(Building)i(parse)f(tr)o(ees)806 1825 y Fw(So)52
b(f)o(ar)m(,)j(the)d(programs)f(we)i(ha)n(v)o(e)e(discussed)i(ha)n(v)o
(e)e(been)h(able)g(to)h Ft(r)m(eco)o(gnise)806 1925 y
Fw(grammatical)f(structure)g(\(that)i(is,)j(the)o(y)c(could)g
(correctly)f(answer)i(yes)g(or)f(no)806 2024 y(when)47
b(ask)o(ed)g(whether)g(the)h(input)f(w)o(as)i(a)f(sentence,)h(a)g(noun)
d(phrase,)j(and)e(so)806 2124 y(on\))40 b(and)g(to)i
Ft(g)o(ener)o(ate)e Fw(grammatical)f(output.)45 b(This)c(is)h
(pleasant,)f(b)n(ut)g(we)g(w)o(ould)806 2224 y(also)h(lik)o(e)g(to)h
(be)f(able)g(to)g Ft(par)o(se)p Fw(.)49 b(That)42 b(is,)h(we)g(w)o
(ould)e(lik)o(e)h(our)g(programs)e(not)806 2323 y(only)h(to)i(tell)g
(us)g Ft(whic)o(h)f Fw(sentences)g(are)g(grammatical,)f(b)n(ut)i(also)g
(to)f(gi)n(v)o(e)g(us)h(an)806 2423 y(analysis)g(of)g(their)g
(structure.)52 b(In)43 b(particular)m(,)f(we)i(w)o(ould)f(lik)o(e)g(to)
h(see)g(the)f(trees)806 2522 y(the)d(grammar)g(assigns)h(to)g
(sentences.)900 2622 y(W)-7 b(ell,)54 b(using)49 b(only)h(standard)f
(Prolog)g(tools)h(we)g(can')o(t)g(actually)f(dra)o(w)h(nice)806
2722 y(pictures)44 b(of)g(trees,)i(b)n(ut)f(we)h Ft(can)e
Fw(b)n(uild)h(data)f(structures)h(which)f(describe)g(trees)806
2821 y(in)d(a)g(clear)g(w)o(ay)-5 b(.)45 b(F)o(or)c(e)o(xample,)e
(corresponding)e(to)42 b(the)f(tree)p 0 TeXcolorgray
0 TeXcolorgray 1496 3012 a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0 16 {InitRnode } NewNode end end
 1496 3012 a Fs(s)1189 3248
y
 tx@Dict begin tx@NodeDict begin {4.30554 2.22223 10.49991 5.24995
3.14996 } false /N@T-0-0 16 {InitRnode } NewNode end end
 1189 3248 a Fs(np)1232 3222 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1232 3222 a 1013 3484
a
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 15.74986 7.87492 3.14996
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1013 3484 a Fs(det)1078 3458 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1078 3458 a 1056 3721
a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 1056 3721 a Fs(a)1078 3694 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1078 3694 a 1365 3484
a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1365 3484 a Fs(n)1386 3458 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1386 3458 a 1277 3721
a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 26.24977 13.12488 3.14996
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1277 3721 a Fs(woman)1386 3694 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1386 3694 a 1760 3248
a
 tx@Dict begin tx@NodeDict begin {4.30554 2.22223 10.49991 5.24995
3.14996 } false /N@T-0-1 16 {InitRnode } NewNode end end
 1760 3248 a Fs(vp)1803 3222 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1803 3222 a 1781 3484
a
 tx@Dict begin tx@NodeDict begin {4.30554 0.0 5.24995 2.62497 3.14996
} false /N@T-0-1-0 16 {InitRnode } NewNode end end
 1781 3484 a Fs(v)1803 3458 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1803 3458 a 1673 3721
a
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 31.49973 15.74986 3.14996
} false /N@T-0-1-0-0 16 {InitRnode } NewNode end end
 1673 3721 a Fs(shoots)1803 3694 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1803 3694 a 806 3850
a Fw(we)g(could)f(ha)n(v)o(e)g(the)h(follo)n(wing)e(term:)971
4002 y Fs(s\(np\(det\(a\),n\(wo)o(ma)o(n\)\))o(,v)o(p\(v)o(\(s)o(ho)o
(ots)o(\)\))o(\).)806 4153 y Fw(Sure:)57 b(it)48 b(doesn')o(t)d
Ft(look)j Fw(as)f(nice,)h(b)n(ut)f(all)g(the)g(information)e(in)i(the)g
(picture)f(is)806 4253 y(there.)e(And,)39 b(with)g(the)g(aid)g(of)g(a)g
(decent)g(graphics)f(package,)f(it)j(w)o(ould)e(be)h(easy)806
4353 y(to)i(turn)f(this)h(term)g(into)g(a)g(picture.)900
4452 y(But)k(ho)n(w)f(do)f(we)i(get)f(DCGs)i(to)e(b)n(uild)g(such)g
(terms?)56 b(Actually)-5 b(,)44 b(it')-5 b(s)45 b(pretty)806
4552 y(easy)-5 b(.)44 b(After)39 b(all,)h(in)g(ef)n(fect)e(a)i(DCG)g
(has)g(to)f(w)o(ork)g(out)g(what)g(the)g(tree)g(structure)806
4651 y(is)54 b(when)f(recognising)e(a)j(sentence.)83
b(So)54 b(we)g(just)g(need)f(to)h(\002nd)f(a)h(w)o(ay)g(of)806
4751 y(k)o(eeping)36 b(track)h(of)h(the)f(structure)g(that)h(the)g(DCG)
g(\002nds.)45 b(W)-7 b(e)39 b(do)e(this)i(by)e(adding)806
4851 y(e)o(xtra)j(ar)o(guments.)j(Here')-5 b(s)42 b(ho)n(w:)971
5002 y Fs(s\(s\(NP,VP\)\))37 b(-->)j(np\(NP\),vp\(VP\).)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 147 159
TeXDict begin 147 158 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(147)p 0 TeXcolorgray 522 1051 a Fs(np\(np\(DET,N\)\))36
b(-->)k(det\(DET\),n\(N\).)522 1250 y(vp\(vp\(V,NP\)\))d(-->)j
(v\(V\),np\(NP\).)522 1350 y(vp\(vp\(V\)\))162 b(-->)41
b(v\(V\).)522 1549 y(det\(det\(the\)\))36 b(-->)k([the].)522
1649 y(det\(det\(a\)\))120 b(-->)40 b([a].)522 1848 y(n\(n\(woman\)\))d
(-->)j([woman].)522 1948 y(n\(n\(man\)\))121 b(-->)40
b([man].)522 2147 y(v\(v\(shoots\)\))d(-->)j([shoots].)451
2303 y Fw(What')-5 b(s)41 b(going)d(on)h(here?)45 b(Essentially)40
b(we)g(are)g(b)n(uilding)e(the)i(parse)f(trees)h(for)357
2402 y(the)50 b(syntactic)h(cate)o(gories)f(on)g(the)h(left)g(hand)f
(side)h(of)f(the)h(rules)g(out)f(of)h(the)357 2502 y(parse)g(trees)i
(for)e(the)h(syntactic)g(cate)o(gories)f(on)g(the)h(right)g(hand)f
(side)h(of)g(the)357 2602 y(rules.)74 b(Consider)50 b(the)g(rule)g
Fs(vp\(vp\(V,NP\)\))37 b(-->)j(v\(V\),np\(NP\))-5 b Fw(.)75
b(When)50 b(we)357 2701 y(mak)o(e)35 b(a)i(query)e(using)g(this)i(DCG,)
f(the)h Fs(V)f Fw(in)g Fs(v\(V\))f Fw(and)h(the)g Fs(NP)g
Fw(in)g Fs(np\(NP\))e Fw(will)357 2801 y(be)39 b(instantiated)g(to)h
(terms)g(representing)e(parse)h(trees.)45 b(F)o(or)40
b(e)o(xample,)e(perhaps)h Fs(V)357 2901 y Fw(will)i(be)g(instantiated)g
(to)522 3057 y Fs(v\(shoots\))357 3213 y Fw(and)f Fs(NP)h
Fw(will)g(be)g(instantiated)g(to)522 3369 y Fs(np\(det\(a\),n\(woma)o
(n\)\))o(.)357 3525 y Fw(What)33 b(is)i(the)e(term)g(corresponding)d
(to)k(a)f(vp)g(made)g(out)g(of)g(these)h(tw)o(o)f(structures?)357
3624 y(Ob)o(viously)39 b(it)j(should)e(be)g(this:)522
3780 y Fs(vp\(v\(shoots\),np\()o(det)o(\(a)o(\),n)o(\(w)o(om)o(an\))o
(\)\))o(.)357 3936 y Fw(And)48 b(this)i(is)g(precisely)e(what)h(the)g
(e)o(xtra)f(ar)o(gument)f Fs(vp\(V,NP\))f Fw(gi)n(v)o(en)i(in)h(the)357
4036 y(rule)59 b Fs(vp\(vp\(V,NP\)\))36 b(-->)59 b(v\(V\),np\(NP\))c
Fw(returns)j(to)i(us:)82 b(a)60 b(term)f(whose)357 4136
y(functor)44 b(is)j Fs(vp)o Fw(,)g(and)e(whose)h(\002rst)g(and)f
(second)g(ar)o(guments)f(are)i(the)g(v)n(alues)f(of)357
4235 y Fs(V)f Fw(and)f Fs(NP)h Fw(respecti)n(v)o(ely)-5
b(.)53 b(T)-7 b(o)44 b(put)g(it)h(informally:)50 b(it)45
b(plugs)e(the)h Fs(V)g Fw(and)g(the)g Fs(NP)357 4335
y Fw(terms)d(together)e(under)h(a)h Fs(vp)g Fw(functor)-5
b(.)451 4434 y(T)e(o)41 b(parse)g(the)g(sentence)f(\223)-7
b(A)42 b(w)o(oman)e(shoots\224)h(we)g(pose)g(the)g(query:)522
4590 y Fs(?-)g(s\(T,[a,woman,sho)o(ot)o(s])o(,[])o(\).)357
4746 y Fw(That)k(is,)i(we)e(ask)h(for)e(the)h(e)o(xtra)g(ar)o(gument)e
Fs(T)i Fw(to)g(be)g(instantiated)g(to)g(a)h(parse)357
4846 y(tree)41 b(for)f(the)h(sentence.)k(And)40 b(we)i(get:)522
5002 y Fs(T)f(=)g(s\(np\(det\(a\),n\(wom)o(an)o(\)\),)o(vp)o(\(v)o
(\(sh)o(oo)o(ts\))o(\)\))522 5102 y(yes)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 148 160
TeXDict begin 148 159 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(148)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(Furthermore,)e(we)i(can)g(generate)e(all)j
(parse)f(trees)g(by)g(making)e(the)i(follo)n(wing)806
1151 y(query:)971 1350 y Fs(?-)h(s\(T,S,[]\).)806 1550
y Fw(The)f(\002rst)i(three)e(responses)h(are:)971 1749
y Fs(T)g(=)g(s\(np\(det\(the\),n\()o(wom)o(an)o(\)\),)1220
1849 y(vp\(v\(shoots\),np\()o(de)o(t\(t)o(he)o(\),n)o(\(w)o(oma)o(n\))o
(\)\))o(\))971 1948 y(S)g(=)g([the,woman,shoot)o(s,t)o(he)o(,wo)o(ma)o
(n])35 b(;)971 2148 y(T)41 b(=)g(s\(np\(det\(the\),n\()o(wom)o(an)o
(\)\),)1220 2247 y(vp\(v\(shoots\),np\()o(de)o(t\(t)o(he)o(\),n)o(\(m)o
(an\))o(\)\))o(\))971 2347 y(S)g(=)g([the,woman,shoot)o(s,t)o(he)o(,ma)
o(n])35 b(;)971 2546 y(T)41 b(=)g(s\(np\(det\(the\),n\()o(wom)o(an)o
(\)\),)1220 2646 y(vp\(v\(shoots\),np\()o(de)o(t\(a)o(\),)o(n\(w)o(om)o
(an\))o(\)\))o(\))971 2745 y(S)g(=)g([the,woman,shoot)o(s,a)o(,w)o(oma)
o(n])806 2945 y Fw(In)i(short,)h(we)g(ha)n(v)o(e)f(just)h(seen)f(an)h
(ele)o(gant)e(\(and)h(useful\))g(e)o(xample)f(of)h(ho)n(w)g(to)806
3044 y(b)n(uild)d(structure)g(using)g(uni\002cation.)900
3155 y(Extra)49 b(ar)o(guments)e(can)i(also)g(be)g(used)g(to)h(b)n
(uild)f(semantic)g(representations.)806 3255 y(No)n(w)-5
b(,)64 b(we)d(did)f(not)g(say)h(an)o(ything)e(about)g(what)i(the)f(w)o
(ords)g(in)h(our)f(little)806 3354 y(DCG)c(mean.)91 b(In)56
b(f)o(act,)k(no)n(w)o(adays)55 b(a)h(lot)h(is)g(kno)n(wn)d(about)h(the)
i(semantics)806 3454 y(of)63 b(natural)g(languages,)68
b(and)c(it)h(is)g(surprisingly)d(easy)i(to)g(b)n(uild)g(semantic)806
3554 y(representations)39 b(which)h(partially)h(capture)f(the)h
(meaning)e(of)i(sentences)g(or)g(e)n(v)o(en)806 3653
y(entire)47 b(discourses.)64 b(Such)47 b(representations)f(are)h
(usually)g(e)o(xpressions)f(of)i(some)806 3753 y(formal)i(language)h
(\(for)f(e)o(xample)h(\002rst-order)g(logic,)j(discourse)d
(representation)806 3853 y(structures,)46 b(or)f(a)h(database)f(query)g
(language\))e(and)i(the)o(y)g(are)h(usually)f(b)n(uilt)h(up)806
3952 y(compositionally)-5 b(.)85 b(That)55 b(is,)60 b(the)55
b(meaning)f(of)h(each)g(w)o(ord)f(is)i(e)o(xpressed)e(in)806
4052 y(the)h(formal)f(language;)61 b(this)56 b(meaning)d(is)k(gi)n(v)o
(en)d(as)i(an)f(e)o(xtra)f(ar)o(gument)f(in)806 4152
y(the)48 b(DCG)h(entries)f(for)g(the)h(indi)n(vidual)d(w)o(ords.)68
b(Then,)49 b(for)f(each)g(rule)g(in)g(the)806 4251 y(grammar)m(,)40
b(an)i(e)o(xtra)g(ar)o(gument)d(sho)n(ws)k(ho)n(w)e(to)i(combine)e(the)
h(meaning)f(of)g(the)806 4351 y(tw)o(o)i(subcomponents.)51
b(F)o(or)43 b(e)o(xample,)f(to)i(the)f(rule)h Fs(s)d(-->)f(np,)g(vp)j
Fw(we)h(w)o(ould)806 4450 y(add)d(an)i(e)o(xtra)e(ar)o(gument)f
(stating)i(ho)n(w)g(to)h(combine)d(the)j Fs(np)f Fw(meaning)f(and)g
(the)806 4550 y Fs(vp)f Fw(meaning)g(to)i(form)e(the)h
Fs(s)g Fw(meaning.)k(Although)40 b(some)n(what)g(more)h(comple)o(x,)806
4650 y(the)i(semantic)g(construction)e(process)i(is)h(quite)f(lik)o(e)h
(the)f(w)o(ay)g(we)h(b)n(uilt)g(up)e(the)806 4749 y(parse)e(tree)h(for)
f(the)h(sentence)g(from)f(the)h(parse)f(tree)h(of)g(its)h(subparts.)
3055 4719 y Fr(1)p 0 TeXcolorgray 806 4865 1040 4 v 896
4921 a Fq(1)925 4944 y Fo(F)o(or)49 b(a)g(detailed)j(account)f(of)e(ho)
n(w)g(to)g(do)g(this,)i(see)e Fp(Repr)n(esentation)i(and)f(Infer)n
(ence)g(for)806 5023 y(Natur)o(al)c(Langua)o(g)o(e:)54
b(A)44 b(F)m(ir)o(st)h(Cour)o(se)h(in)g(Computational)i(Semantics)p
Fo(,)f(P)o(atrick)g(Blackb)o(urn)g(and)806 5102 y(Johan)42
b(Bos,)f(CSLI)h(Publications,)i(2005.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 149 161
TeXDict begin 149 160 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(149)p 0 TeXcolorgray 357 1051 a Fv(Bey)n(ond)41
b(context)e(fr)o(ee)i(languages)357 1174 y Fw(In)52 b(the)g(pre)n
(vious)f(chapter)g(we)h(introduced)e(DCGs)j(as)g(a)g(useful)f(Prolog)f
(tool)357 1274 y(for)44 b(representing)g(and)g(w)o(orking)g(with)h
(conte)o(xt)f(free)h(grammars.)57 b(No)n(w)-5 b(,)46
b(this)g(is)357 1373 y(certainly)h(a)i(good)f(w)o(ay)g(of)h(thinking)e
(about)g(DCGs,)52 b(b)n(ut)d(it')-5 b(s)49 b(not)g(the)f(whole)357
1473 y(story)-5 b(.)66 b(F)o(or)48 b(the)g(f)o(act)g(of)g(the)g(matter)
g(is:)61 b(DCGs)49 b(can)f(deal)g(with)h(a)f(lot)h(more)357
1573 y(than)j(just)i(conte)o(xt)e(free)g(languages.)81
b(The)52 b(e)o(xtra)h(ar)o(guments)e(we)i(ha)n(v)o(e)f(been)357
1672 y(discussing)44 b(\(and)g(indeed,)h(the)g(e)o(xtra)f(goals)h(we)g
(shall)h(introduce)d(shortly\))g(gi)n(v)o(e)357 1772
y(us)k(the)f(tools)g(for)g(coping)f(with)i(an)o(y)f(computable)e
(language)h(whatsoe)n(v)o(er)-5 b(.)61 b(W)-7 b(e)357
1872 y(shall)40 b(illustrate)h(this)g(by)e(presenting)g(a)i(simple)f
(DCG)h(for)f(the)g(formal)f(language)357 1971 y Fj(a)401
1941 y Fc(n)446 1971 y Fj(b)482 1941 y Fc(n)527 1971
y Fj(c)563 1941 y Fc(n)608 1971 y Fh(nf)p Fj(\017)p Fh(g)p
Fw(.)451 2072 y(The)f(formal)f(language)f Fj(a)1261 2042
y Fc(n)1306 2072 y Fj(b)1342 2042 y Fc(n)1387 2072 y
Fj(c)1423 2042 y Fc(n)1468 2072 y Fh(nf)p Fj(\017)p Fh(g)h
Fw(consists)h(of)g(all)g(non-null)e(strings)i(made)357
2171 y(up)e(of)g Fs(a)o Fw(s,)i Fs(b)p Fw(s,)g(and)e
Fs(c)o Fw(s)h(which)f(consist)h(of)f(an)g(unbrok)o(en)e(block)h(of)i
Fs(a)o Fw(s,)h(follo)n(wed)357 2271 y(by)43 b(an)g(unbrok)o(en)e(block)
h(of)i Fs(b)o Fw(s,)h(follo)n(wed)d(by)h(an)g(unbrok)o(en)e(block)i(of)
g Fs(c)o Fw(s,)i(all)357 2371 y(three)36 b(blocks)h(ha)n(ving)f(the)h
(same)g(length.)44 b(F)o(or)36 b(e)o(xample,)h Fs(abc)n
Fw(,)i(and)d Fs(aabbcc)f Fw(and)357 2470 y Fs(aaabbbccc)i
Fw(all)42 b(belong)e(to)h Fj(a)1333 2440 y Fc(n)1378
2470 y Fj(b)1414 2440 y Fc(n)1459 2470 y Fj(c)1495 2440
y Fc(n)1540 2470 y Fh(nf)p Fj(\017)p Fh(g)p Fw(.)451
2571 y(The)d(interesting)g(thing)f(about)h(this)h(language)d(is)k(that)
e(it)h(is)h Ft(not)f Fw(conte)o(xt)e(free.)357 2671 y(T)m(ry)46
b(whate)n(v)o(er)g(you)h(lik)o(e,)h(you)f(will)h(not)f(succeed)f(in)i
(writing)e(a)i(conte)o(xt)e(free)357 2770 y(grammar)d(that)i(generates)
f(precisely)g(these)h(strings.)58 b(Pro)o(ving)43 b(this)i(w)o(ould)g
(tak)o(e)357 2870 y(us)d(too)f(f)o(ar)h(a\002eld,)g(b)n(ut)f(the)h
(proof)e(is)j(not)f(particularly)e(dif)n(\002cult,)h(and)g(you)g(can)
357 2969 y(\002nd)f(it)i(in)f(man)o(y)f(books)g(on)g(formal)g(language)
f(theory)-5 b(.)451 3070 y(On)51 b(the)g(other)f(hand,)j(as)e(we)h
(shall)f(no)n(w)g(see,)j(it)d(is)h(v)o(ery)e(easy)h(to)h(write)357
3170 y(a)g(DCG)h(that)f(generates)f(this)h(language.)77
b(Just)53 b(as)f(we)h(did)e(in)h(the)g(pre)n(vious)357
3269 y(chapter)m(,)45 b(we)h(shall)g(represent)e(strings)i(as)g(lists;)
j(for)c(e)o(xample,)g(the)h(string)f Fs(abc)357 3369
y Fw(will)39 b(be)f(represented)f(using)h(the)g(list)h
Fs([a,b,c])m Fw(.)46 b(Gi)n(v)o(en)37 b(this)i(con)m(v)o(ention,)d
(here')-5 b(s)357 3469 y(the)41 b(DCG)g(we)h(need:)522
3638 y Fs(s\(Count\))c(-->)j(ablock\(Count\),b)o(bl)o(ock)o(\(C)o(oun)o
(t\))o(,cb)o(lo)o(ck)o(\(Co)o(un)o(t\).)522 3837 y(ablock\(0\))d(-->)i
([].)522 3936 y(ablock\(succ\(Coun)o(t\)\))35 b(-->)40
b([a],ablock\(Count)o(\).)522 4136 y(bblock\(0\))e(-->)i([].)522
4235 y(bblock\(succ\(Coun)o(t\)\))35 b(-->)40 b([b],bblock\(Count)o
(\).)522 4435 y(cblock\(0\))e(-->)i([].)522 4534 y(cblock\(succ\(Coun)o
(t\)\))35 b(-->)40 b([c],cblock\(Count)o(\).)451 4703
y Fw(The)57 b(idea)f(underlying)e(this)k(DCG)f(is)h(f)o(airly)f
(simple:)77 b(we)58 b(use)f(an)f(e)o(xtra)357 4803 y(ar)o(gument)41
b(to)j(k)o(eep)f(track)g(of)h(the)f(length)g(of)h(the)f(blocks.)54
b(The)43 b Fs(s)h Fw(rule)f(simply)357 4902 y(says)c(that)g(we)g(w)o
(ant)g(a)g(block)e(of)i Fs(a)o Fw(s)h(follo)n(wed)d(by)h(a)i(block)d
(of)i Fs(b)o Fw(s)h(follo)n(wed)d(by)357 5002 y(block)44
b(of)h Fs(c)p Fw(s,)i(and)d(all)i(three)f(blocks)f(are)i(to)f(ha)n(v)o
(e)g(the)g(same)g(length,)h(namely)357 5102 y Fs(Count)n
Fw(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 150 162
TeXDict begin 150 161 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(150)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(What)k(should)g(the)g(v)n(alues)f(of)h
Fs(Count)f Fw(be?)55 b(The)44 b(ob)o(vious)e(answer)i(is:)53
b Fs(1)o Fw(,)46 b Fs(2)o Fw(,)806 1151 y Fs(3)o Fw(,)51
b Fs(4)p Fw(,)g(and)d(so)i(on.)69 b(But)49 b(as)h(yet)f(we)g(don')o(t)e
(kno)n(w)h(ho)n(w)g(to)h(mix)g(DCGs)h(and)806 1250 y(arithmetic,)f(so)f
(this)h(isn')o(t)f(v)o(ery)f(helpful.)66 b(F)o(ortunately)-5
b(,)48 b(as)h(this)g(DCG)g(sho)n(ws,)806 1350 y(there')-5
b(s)48 b(an)g(easier)g(\(and)g(more)f(ele)o(gant\))g(w)o(ay)-5
b(.)67 b(Represent)48 b(the)g(number)f(0)h(by)806 1449
y Fs(0)o Fw(,)k(the)e(number)e(1)i(by)f Fs(succ\(0\))m
Fw(,)k(the)c(number)f(2)i(by)g Fs(succ\(succ\(0\)\))-6
b Fw(,)52 b(the)806 1549 y(number)44 b(3)j(by)g Fs(succ\(succ\(succ\(0)
o(\)\))o(\))-6 b Fw(,)48 b(and)f(so)g(on,)g(just)h(as)f(we)g(did)g(it)g
(in)806 1649 y(Chapter)d(3)h(\(as)h(we)f(said)h(in)f(Chapter)g(3,)h
(you)e(can)h(read)g Fs(succ)f Fw(as)i(\223successor)806
1748 y(of)5 b(\224\).)44 b(This)d(choice)f(of)h(notation)f(enables)g
(us)h(to)h(count)e(using)g(uni\002cation.)900 1848 y(And)f(this)h(is)h
(precisely)d(what)i(our)f(ne)n(w)g(DCG)h(does.)45 b(F)o(or)39
b(e)o(xample,)f(suppose)806 1948 y(we)j(pose)g(the)f(follo)n(wing)g
(query:)971 2108 y Fs(?-)h(s\(Count,L,[]\).)806 2269
y Fw(which)e(asks)h(Prolog)f(to)h(generate)f(the)h(lists)h
Fs(L)f Fw(of)f(symbols)h(that)g(belong)e(to)i(this)806
2369 y(language,)f(and)h(to)h(gi)n(v)o(e)g(the)g(v)n(alue)f(of)h
Fs(Count)f Fw(needed)f(to)j(produce)d(each)i(item.)806
2468 y(Then)f(the)h(\002rst)g(four)f(responses)g(are:)971
2629 y Fs(Count)f(=)i(0)971 2729 y(L)g(=)g([])g(;)971
2928 y(Count)e(=)i(succ\(0\))971 3028 y(L)g(=)g([a,)f(b,)h(c])g(;)971
3227 y(Count)e(=)i(succ\(succ\(0\)\))971 3327 y(L)g(=)g([a,)f(a,)h(b,)g
(b,)f(c,)h(c])g(;)971 3526 y(Count)e(=)i(succ\(succ\(succ\(0\))o(\)\))
971 3625 y(L)g(=)g([a,)f(a,)h(a,)g(b,)f(b,)h(b,)g(c,)f(c,)h(c])900
3786 y Fw(The)g(v)n(alue)f(of)h Fs(Count)e Fw(clearly)h(corresponds)f
(to)i(the)g(length)f(of)h(the)g(blocks.)900 3886 y(So:)j(DCGs)37
b(are)f(not)g(just)g(a)h(tool)f(for)f(w)o(orking)g(with)h(conte)o(xt)f
(free)g(grammars.)806 3985 y(The)o(y)40 b(are)h(strictly)g(more)g(po)n
(werful)e(than)i(that,)g(and)g(\(as)h(we')l(v)o(e)e(just)i(seen\))f
(part)806 4085 y(of)f(the)h(e)o(xtra)f(po)n(wer)g(comes)h(from)f(the)h
(use)g(of)g(e)o(xtra)f(ar)o(guments.)806 4275 y Fk(2)99
b(Extra)42 b(Goals)806 4404 y Fw(An)o(y)f(DCG)i(rule)e(is)i(really)f
(syntactic)g(sugar)f(for)g(an)h(ordinary)e(Prolog)h(rule.)48
b(So)806 4504 y(it')-5 b(s)50 b(not)g(really)g(too)f(surprising)g(that)
h(we')l(re)f(allo)n(wed)g(to)h(mak)o(e)g(use)g(of)f(e)o(xtra)806
4604 y(ar)o(guments.)56 b(Similarly)-5 b(,)45 b(it)h(shouldn')o(t)d
(come)h(as)i(too)f(much)f(of)h(a)h(surprise)e(that)806
4703 y(we)k(can)f(call)i(an)o(y)e(Prolog)g(predicate)f(whatsoe)n(v)o
(er)g(from)h(the)h(right)f(hand)g(side)806 4803 y(of)40
b(a)i(DCG)f(rule.)900 4902 y(The)51 b(DCG)h(of)f(the)g(pre)n(vious)f
(section)h(can,)i(for)e(e)o(xample,)h(be)f(adapted)f(to)806
5002 y(w)o(ork)i(with)h(Prolog)f(numbers)g(\(instead)g(of)h(the)g
(successor)g(representation)e(of)806 5102 y(numbers\))41
b(by)h(using)h(calls)g(to)g(Prolog')-5 b(s)43 b(b)n(uilt-in)f
(arithmetic)g(functionality)-5 b(.)49 b(W)-7 b(e)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 151 163
TeXDict begin 151 162 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(151)p 0 TeXcolorgray 357 1051 a(simply)40
b(count)g(ho)n(w)g(man)o(y)g Fs(a)p Fw(s,)h Fs(b)p Fw(s,)g(and)g
Fs(c)o Fw(s)h(ha)n(v)o(e)e(been)h(generated.)j(Here')-5
b(s)41 b(the)357 1151 y(code:)522 1316 y Fs(s)g(-->)f
(ablock\(Count\),bbl)o(ock)o(\(C)o(ou)o(nt\))o(,c)o(blo)o(ck)o(\(Co)o
(un)o(t\))o(.)522 1516 y(ablock\(0\))e(-->)i([].)522
1615 y(ablock\(NewCount\))35 b(-->)40 b([a],ablock\(Count\))o(,)1394
1715 y({NewCount)e(is)i(Count)g(+)h(1}.)522 1914 y(bblock\(0\))d(-->)i
([].)522 2014 y(bblock\(NewCount\))35 b(-->)40 b([b],bblock\(Count\))o
(,)1394 2113 y({NewCount)e(is)i(Count)g(+)h(1}.)522 2313
y(cblock\(0\))d(-->)i([].)522 2412 y(cblock\(NewCount\))35
b(-->)40 b([c],cblock\(Count\))o(,)1394 2512 y({NewCount)e(is)i(Count)g
(+)h(1}.)451 2678 y Fw(As)48 b(this)g(e)o(xample)e(suggests,)j(e)o
(xtra)e(goals)g(can)g(be)g(written)g(\(an)o(ywhere\))e(on)357
2777 y(the)35 b(right)g(side)h(of)f(a)h(DCG)h(rule,)f(b)n(ut)f(must)h
(be)f(placed)g(between)g(curly)g(brack)o(ets.)357 2877
y(When)52 b(Prolog)f(encounters)f(such)i(curly)f(brack)o(ets)g(while)h
(translating)f(a)i(DCG)357 2977 y(into)j(its)h(internal)f
(representation,)i(it)f(just)g(tak)o(es)g(the)f(e)o(xtra)g(goals)g
(speci\002ed)357 3076 y(between)39 b(the)i(curly)f(brack)o(ets)g(o)o(v)
o(er)f(into)h(the)h(translation.)j(So,)d(the)f(second)g(rule)357
3176 y(for)g(the)h(non-terminal)d Fs(ablock)h Fw(abo)o(v)o(e)h(w)o
(ould)g(be)h(translated)f(as)i(follo)n(ws:)522 3342 y
Fs(ablock\(NewCount,)o(A,B)o(\):)o(-)647 3441 y('C'\(A,)d(a,)h(C\),)647
3541 y(ablock\(Count,)c(C,)k(B\),)647 3641 y(NewCount)e(is)i(Count)g(+)
h(1.)451 3807 y Fw(Incidentally)-5 b(,)51 b(if)h(you)e(play)h(around)e
(with)j(this)g(DCG,)f(you)g(will)h(\002nd)f(that)357
3906 y(there)39 b(are)h(actually)f(some)g(problems)g(with)h(it.)46
b(In)39 b(contrast)g(to)h(the)g(one)f(that)h(we)357 4006
y(sa)o(w)e(in)f(the)h(last)g(section,)g(this)g(ne)n(w)f(v)o(ersion)f
(only)h(w)o(orks)g(correctly)f(when)h(used)357 4105 y(in)42
b(the)g(recognition)e(mode.)49 b(If)42 b(you)f(try)h(to)g(generate)f
(with)h(it,)h(it)g(will)g(at)g(some)357 4205 y(point)i(enter)h(an)g
(in\002nite)g(loop.)60 b(W)-7 b(e)48 b(w)o(on')o(t)d(bother)f(to)j
(\002x)f(this)h(problem)d(here)357 4305 y(\(apart)37
b(from)g(an)o(ything)f(else,)j(we)g(\002nd)f(the)g(earlier)g
Fs(succ)f Fw(based)h(approach)e(more)357 4404 y(ele)o(gant\).)451
4504 y(The)j(possibility)f(of)h(adding)e(arbitrary)g(Prolog)h(goals)h
(to)g(the)f(right)h(hand)e(side)357 4604 y(of)49 b(DCG)h(rules,)i(mak)o
(es)d(DCGs)i(v)o(ery)d(po)n(werful)g(\(it)i(means)f(that)h(we)g(can)f
(do)357 4703 y(an)o(ything)j(that)i(we)g(can)g(do)f(in)h(plain)g
(Prolog\).)83 b(In)54 b(general,)i(ho)n(we)n(v)o(er)m(,)e(this)357
4803 y(capability)39 b(is)i(not)f(used)g(much,)f(which)g(tends)h(to)g
(suggest)g(that)g(the)h(basic)f(DCG)357 4902 y(notation)h(is)i(well)g
(designed.)48 b(There)42 b(is,)h(ho)n(we)n(v)o(er)m(,)d(one)i(classic)h
(application)e(for)357 5002 y(e)o(xtra)c(goals)i(in)f(computational)e
(linguistics:)45 b(with)39 b(the)f(help)g(of)g(e)o(xtra)g(goals,)g(we)
357 5102 y(can)d(neatly)f(separate)h(grammar)e(rules)j(and)e(le)o
(xical)h(information.)41 b(Let')-5 b(s)36 b(see)g(ho)n(w)-5
b(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 152 164
TeXDict begin 152 163 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(152)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fv(Separating)f(rules)j(and)g(lexicon)806
1174 y Fw(W)-7 b(e)56 b(are)e(going)g(to)h(separate)f(rules)h(and)g(le)
o(xicon.)86 b(That)55 b(is,)k(we)c(are)g(going)806 1273
y(to)47 b(eliminate)g(all)h(mention)d(of)i(indi)n(vidual)f(w)o(ords)h
(in)g(our)g(DCGs)h(and)f(instead)806 1373 y(record)36
b(all)j(the)f(information)e(about)h(indi)n(vidual)f(w)o(ords)i
(separately)f(in)h(a)h(le)o(xicon.)806 1473 y(T)-7 b(o)41
b(see)g(what)g(is)h(meant)e(by)h(this,)g(let')-5 b(s)42
b(return)e(to)h(our)f(basic)h(grammar:)971 1640 y Fs(np)g(-->)f(det,n.)
971 1840 y(vp)h(-->)f(v,np.)971 1939 y(vp)h(-->)f(v.)971
2139 y(det)g(-->)g([the].)971 2238 y(det)g(-->)g([a].)971
2437 y(n)h(-->)f([woman].)971 2537 y(n)h(-->)f([man].)971
2736 y(v)h(-->)f([shoots].)806 2904 y Fw(W)-7 b(e)55
b(are)g(no)n(w)f(going)f(to)i(write)g(a)g(DCG)g(that)g(generates)f(e)o
(xactly)g(the)g(same)806 3004 y(language,)46 b(b)n(ut)g(in)h(which)f
(no)h(rule)f(mentions)g(an)o(y)g(indi)n(vidual)f(w)o(ord.)62
b(All)47 b(the)806 3103 y(information)38 b(about)i(indi)n(vidual)f(w)o
(ords)i(will)g(be)g(recorded)e(separately)-5 b(.)900
3204 y(Here)49 b(is)h(an)f(e)o(xample)e(of)i(a)g(\(v)o(ery)f(simple\))g
(le)o(xicon.)68 b(Le)o(xical)49 b(entries)g(are)806 3303
y(encoded)f(by)j(using)f(a)h(predicate)e Fs(lex/2)h Fw(whose)g(\002rst)
h(ar)o(gument)e(is)i(a)g(w)o(ord,)806 3403 y(and)40 b(whose)h(second)f
(ar)o(gument)e(is)k(a)f(syntactic)g(cate)o(gory)-5 b(.)971
3571 y Fs(lex\(the,det\).)971 3670 y(lex\(a,det\).)971
3770 y(lex\(woman,n\).)971 3869 y(lex\(man,n\).)971 3969
y(lex\(shoots,v\).)900 4137 y Fw(And)48 b(here)g(is)i(a)f(simple)g
(grammar)e(that)i(could)f(go)g(with)h(this)g(le)o(xicon.)68
b(In)806 4237 y(essence)46 b(it')-5 b(s)48 b(the)e(same)g(as)i(the)e
(pre)n(vious)f(one.)61 b(In)46 b(f)o(act,)i(the)e(only)g(rules)g(that)
806 4336 y(ha)n(v)o(e)c(changed)g(are)i(those)f(that)h(mentioned)d
(speci\002c)j(w)o(ords,)f(that)h(is,)h(the)e Fs(det)o
Fw(,)806 4436 y Fs(n)o Fw(,)e(and)g Fs(v)g Fw(rules.)971
4604 y Fs(np)g(-->)f(det,n.)971 4803 y(vp)h(-->)f(v,np.)971
4902 y(vp)h(-->)f(v.)971 5102 y(det)g(-->)g([Word],{lex\(Word,)o(det)o
(\)})o(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 153 165
TeXDict begin 153 164 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(153)p 0 TeXcolorgray 522 1051 a Fs(n)41
b(-->)f([Word],{lex\(Word,)o(n\)})o(.)522 1151 y(v)h(-->)f
([Word],{lex\(Word,)o(v\)})o(.)451 1316 y Fw(Consider)e(the)h(ne)n(w)g
Fs(det)f Fw(rule.)44 b(This)39 b(rule)g(part)f(says)h(\223a)g
Fs(det)f Fw(can)h(consist)g(of)357 1416 y(a)k(list)i(containing)c(a)i
(single)g(element)g Fs(Word)n Fw(\224)h(\(note)e(that)i
Fs(Word)e Fw(is)i(a)f(v)n(ariable\).)357 1515 y(Then)35
b(the)g(e)o(xtra)g(goal)g(adds)h(the)f(crucial)h(stipulation:)42
b(\223so)36 b(long)f(as)h Fs(Word)f Fw(uni\002es)357
1615 y(with)43 b(something)f(that)i(is)h(listed)e(in)h(the)g(le)o
(xicon)e(as)i(a)g(determiner\224.)52 b(W)m(ith)43 b(our)357
1714 y(present)h(le)o(xicon,)h(this)h(means)f(that)g
Fs(Word)f Fw(must)h(be)g(matched)f(either)h(with)h(the)357
1814 y(w)o(ord)e(\223a\224)h(or)g(\223the\224.)58 b(So)46
b(this)f(single)g(rule)g(replaces)g(the)g(tw)o(o)g(pre)n(vious)f(DCG)
357 1914 y(rules)d(for)f Fs(det)o Fw(.)451 2013 y(This)61
b(e)o(xplains)f(the)g(\223ho)n(w\224)g(of)h(separating)e(rules)i(from)e
(le)o(xicon,)64 b(b)n(ut)d(it)357 2113 y(doesn')o(t)37
b(e)o(xplain)g(the)i(\223why\224.)44 b(Is)39 b(it)g(really)f(so)h
(important?)44 b(Is)39 b(this)g(ne)n(w)f(w)o(ay)h(of)357
2213 y(writing)h(DCGs)i(really)f(that)g(much)f(better?)451
2312 y(The)k(answer)f(is)i(an)f(unequi)n(v)n(ocal)e(yes!)54
b(It')-5 b(s)45 b Ft(muc)o(h)e Fw(better)m(,)h(and)f(for)h(at)g(least)
357 2412 y(tw)o(o)d(reasons.)451 2511 y(The)54 b(\002rst)i(reason)e(is)
h(theoretical.)86 b(Ar)o(guably)52 b(rules)j(should)f(not)g(mention)357
2611 y(speci\002c)46 b(le)o(xical)g(items.)63 b(The)46
b(purpose)f(of)h(rules)h(is)g(to)g(list)g Ft(g)o(ener)o(al)f
Fw(syntactic)357 2711 y(f)o(acts,)e(such)g(as)g(the)g(f)o(act)g(that)f
(sentence)g(can)h(be)f(made)g(up)h(of)f(a)h(noun)e(phrase)357
2810 y(follo)n(wed)h(by)i(a)g(v)o(erb)f(phrase.)57 b(The)44
b(rules)h(for)g Fs(s)o Fw(,)h Fs(np)p Fw(,)g(and)e Fs(vp)h
Fw(describe)f(such)357 2910 y(general)34 b(syntactic)h(f)o(acts,)h(b)n
(ut)g(the)f(old)g(rules)g(for)g Fs(det)n Fw(,)i Fs(n)p
Fw(,)f(and)f Fs(v)g Fw(don')o(t.)43 b(Instead,)357 3010
y(the)j(old)g(rules)h(simply)f(list)h(particular)e(f)o(acts:)58
b(that)46 b(\223a\224)h(is)g(a)g(determiner)m(,)f(that)357
3109 y(\223the\224)37 b(is)h(a)g(determiner)m(,)e(and)h(so)h(on.)44
b(From)37 b(theoretical)g(perspecti)n(v)o(e)f(it)i(is)h(much)357
3209 y(neater)47 b(to)i(ha)n(v)o(e)e(a)i(single)f(rule)g(that)g(says)h
(\223an)o(ything)d(is)j(a)f(determiner)f(\(or)g(a)357
3308 y(noun,)i(or)g(a)h(v)o(erb,)g(or)f(an)o(y)f(other)h(grammatical)f
(cate)o(gory\))f(if)i(it)h(is)g(listed)g(as)357 3408
y(such)f(in)g(the)h(le)o(xicon\224.)69 b(And)49 b(this,)j(of)d(course,)
i(is)f(precisely)f(what)g(our)g(ne)n(w)357 3508 y(DCG)41
b(rules)g(say)-5 b(.)451 3607 y(The)66 b(second)g(reason)g(is)i(more)e
(practical.)122 b(One)66 b(of)h(the)f(k)o(e)o(y)g(lessons)357
3707 y(computational)46 b(linguists)i(ha)n(v)o(e)g(learnt)g(o)o(v)o(er)
f(the)h(last)h(twenty)f(or)g(so)h(years)f(is)357 3807
y(that)37 b(the)f(le)o(xicon)g(is)i(by)e(f)o(ar)h(the)g(most)g
(interesting,)f(important)f(\(and)h(e)o(xpensi)n(v)o(e!\))357
3906 y(repository)42 b(of)i(linguistic)g(kno)n(wledge.)53
b(Bluntly)-5 b(,)44 b(if)g(you)f(w)o(ant)h(to)h(get)f(to)g(grips)357
4006 y(with)55 b(natural)f(language)g(from)g(a)i(computational)d
(perspecti)n(v)o(e,)k(you)d(need)h(to)357 4105 y(kno)n(w)40
b(a)h(lot)g(of)g(w)o(ords,)f(and)h(you)f(need)g(to)h(kno)n(w)f(a)h(lot)
g(about)f(them.)451 4205 y(No)n(w)-5 b(,)52 b(our)d(little)i(le)o
(xicon,)g(with)f(its)h(simple)f(tw)o(o-place)f Fs(lex)g
Fw(entries,)j(is)f(a)357 4305 y(to)o(y)-5 b(.)62 b(But)47
b(a)g(real)g(le)o(xicon)e(is)i(\(most)g(emphatically!\))60
b(not.)j(A)47 b(real)f(le)o(xicon)g(is)357 4404 y(lik)o(ely)40
b(to)g(be)h(v)o(ery)e(lar)o(ge)g(\(it)i(may)f(contain)f(hundreds)f(of)i
(thousands)f(of)h(w)o(ords\))357 4504 y(and)g(moreo)o(v)o(er)m(,)d(the)
k(information)d(associated)j(with)g(each)f(w)o(ord)h(is)g(lik)o(ely)g
(to)g(be)357 4604 y(v)o(ery)48 b(rich.)71 b(Our)49 b
Fs(lex)f Fw(entries)i(gi)n(v)o(e)e(only)h(the)g(syntactical)g(cate)o
(gory)f(of)h(each)357 4703 y(w)o(ord,)37 b(b)n(ut)g(a)h(real)f(le)o
(xicon)f(will)j(gi)n(v)o(e)d(much)h(more,)g(such)g(as)h(information)d
(about)357 4803 y(its)42 b(phonological,)37 b(morphological,)h
(semantic,)i(and)h(pragmatic)e(properties.)451 4902 y(Because)32
b(real)f(le)o(xicons)f(are)h(big)g(and)g(comple)o(x,)g(from)f(a)h
(softw)o(are)g(engineering)357 5002 y(perspecti)n(v)o(e)56
b(it)i(is)h(best)f(to)g(write)g(simple)g(grammars)f(that)g(ha)n(v)o(e)h
(a)g(simple,)357 5102 y(well-de\002ned)51 b(w)o(ay)-5
b(,)55 b(of)d(pulling)g(out)g(the)h(information)d(the)o(y)i(need)g
(from)f(v)n(ast)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 154 166
TeXDict begin 154 165 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(154)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(le)o(xicons.)73 b(That)50 b(is,)k(grammars)49
b(should)h(be)g(thought)f(of)i(as)g(separate)f(entities)806
1151 y(which)35 b(can)h(access)h(the)g(information)d(contained)g(in)j
(le)o(xicons.)43 b(W)-7 b(e)37 b(can)f(then)g(use)806
1250 y(specialised)46 b(mechanisms)f(for)h(ef)n(\002ciently)g(storing)g
(the)g(le)o(xicon)f(and)h(retrie)n(ving)806 1350 y(data)40
b(from)g(it.)900 1455 y(Our)52 b(ne)n(w)f(DCG)i(rules,)i(though)50
b(simple,)k(illustrate)e(the)g(basic)g(idea.)79 b(The)806
1554 y(ne)n(w)43 b(rules)g(really)g(do)h(just)g(list)g(general)f
(syntactic)g(f)o(acts,)h(and)f(the)h(e)o(xtra)f(goals)806
1654 y(act)51 b(as)h(an)f(interf)o(ace)g(to)g(our)g(le)o(xicon)f(that)h
(lets)h(the)g(rules)f(\002nd)g(e)o(xactly)f(the)806 1753
y(information)40 b(the)o(y)h(need.)50 b(Furthermore,)40
b(we)j(no)n(w)f(tak)o(e)g(adv)n(antage)f(of)h(Prolog')-5
b(s)806 1853 y(\002rst)45 b(ar)o(gument)e(inde)o(xing)g(which)h(mak)o
(es)h(looking)e(up)i(a)g(w)o(ord)g(in)g(the)g(le)o(xicon)806
1953 y(more)62 b(ef)n(\002cient.)112 b(First)64 b(ar)o(gument)c(inde)o
(xing)h(is)j(a)g(technique)d(for)i(making)806 2052 y(Prolog')-5
b(s)43 b(kno)n(wledge)e(base)j(access)g(more)f(ef)n(\002cient.)54
b(If)43 b(in)h(the)g(query)e(the)i(\002rst)806 2152 y(ar)o(gument)39
b(is)j(instantiated)f(it)h(allo)n(ws)g(Prolog)e(to)i(ignore)e(all)i
(clauses)g(where)e(the)806 2252 y(\002rst)k(ar)o(gument')-5
b(s)41 b(functor)h(and)h(arity)h(is)g(dif)n(ferent.)52
b(This)44 b(means,)f(for)g(e)o(xample,)806 2351 y(that)h(we)i(can)e
(get)h(all)h(the)f(possible)f(cate)o(gories)g(of)h Fs(man)f
Fw(immediately)f(without)806 2451 y(ha)n(ving)e(to)h(e)n(v)o(en)f(look)
h(at)h(the)f(le)o(xicon)f(entries)h(for)g(all)h(the)f(other)g(hundreds)
e(or)806 2550 y(thousands)f(of)i(w)o(ords)f(that)h(we)h(might)e(ha)n(v)
o(e)g(in)h(our)g(le)o(xicon.)806 2758 y Fk(3)99 b(Concluding)42
b(Remarks)806 2895 y Fw(W)-7 b(e)45 b(no)n(w)f(ha)n(v)o(e)f(a)i(f)o
(airly)f(useful)g(picture)f(of)h(what)h(DCGs)g(are)f(and)g(what)g(the)o
(y)806 2994 y(can)k(do)g(for)g(us.)68 b(T)-7 b(o)49 b(conclude,)f(let')
-5 b(s)50 b(think)d(about)h(them)g(from)f(a)i(some)n(what)806
3094 y(higher)39 b(le)n(v)o(el,)h(from)g(both)h(a)g(formal)f(and)g(a)h
(linguistic)g(perspecti)n(v)o(e.)900 3199 y(First)60
b(the)f(formal)g(remarks.)99 b(F)o(or)59 b(the)h(most)f(part,)k(we)d
(ha)n(v)o(e)f(presented)806 3298 y(DCGs)45 b(as)f(a)g(simple)g(tool)g
(for)f(encoding)f(conte)o(xt)h(free)g(grammars)g(\(or)g(conte)o(xt)806
3398 y(free)j(grammars)f(enriched)h(with)h(features)f(such)g(as)i
Ft(subject)g Fw(and)e Ft(object)q Fw(\).)63 b(But)806
3497 y(DCGs)50 b(go)f(be)o(yond)e(this.)71 b(W)-7 b(e)50
b(sa)o(w)g(that)f(it)h(w)o(as)g(possible)f(to)h(write)f(a)h(DCG)806
3597 y(that)61 b(generated)e(a)j(language)d(that)i(w)o(as)h(not)f
(conte)o(xt)f(free.)106 b(In)61 b(f)o(act,)66 b Ft(any)806
3697 y(pr)l(o)o(gr)o(am)49 b(whatsoe)o(ver)j Fw(can)f(be)f(written)g
(in)h(DCG)g(notation.)74 b(That)50 b(is,)j(DCGs)806 3796
y(are)f(a)i(full-\003edged)d(programming)e(language)j(in)h(their)g(o)n
(wn)f(right)h(\(the)o(y)f(are)806 3896 y(T)l(uring-complete,)d(to)i
(use)f(the)h(proper)d(terminology\).)72 b(And)50 b(although)e(DCGs)806
3996 y(are)39 b(usually)g(associated)h(with)f(linguistic)h
(applications,)e(the)o(y)h(can)g(be)h(useful)f(for)806
4095 y(other)h(purposes.)900 4200 y(Ho)n(w)56 b(good)f(are)g(DCGs)j
(from)d(a)h(linguistic)g(perspecti)n(v)o(e?)89 b(W)-7
b(ell,)61 b(mix)o(ed.)806 4300 y(At)48 b(one)g(stage)h(\(in)f(the)g
(early)g(1980s\))f(the)o(y)g(were)i(pretty)e(much)g(state)i(of)f(the)
806 4399 y(art.)59 b(The)o(y)45 b(made)g(it)h(possible)g(to)g(code)f
(comple)o(x)e(grammars)i(in)g(a)i(clear)e(w)o(ay)-5 b(,)806
4499 y(and)46 b(to)h(e)o(xplore)e(the)i(interplay)e(of)h(syntactic)h
(and)f(semantic)h(ideas.)63 b(Certainly)806 4598 y(an)o(y)40
b(history)h(of)h(parsing)e(in)i(computational)d(linguistics)j(w)o(ould)
f(gi)n(v)o(e)g(DCGs)i(an)806 4698 y(honourable)38 b(mention.)900
4803 y(Nonetheless,)55 b(DCGs)e(ha)n(v)o(e)f(dra)o(wbacks.)79
b(F)o(or)52 b(a)h(start,)j(their)c(tendenc)o(y)e(to)806
4902 y(loop)57 b(when)g(the)h(goal)f(ordering)f(is)j(wrong)d(\(we)i(sa)
o(w)g(an)g(e)o(xample)e(in)i(the)806 5002 y(pre)n(vious)46
b(chapter)i(when)g(we)g(added)g(a)h(left-recursi)n(v)o(e)d(rule)i(for)g
(conjunctions\))806 5102 y(is)53 b(anno)o(ying;)j(we)d
Ft(don')n(t)g Fw(w)o(ant)f(to)h(think)f(about)f(such)i(issues)g(when)f
(writing)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 155 167
TeXDict begin 155 166 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(155)p 0 TeXcolorgray 357 1051 a(serious)41
b(grammars.)k(Furthermore,)39 b(while)i(the)h(ability)f(to)g(add)g(e)o
(xtra)g(ar)o(guments)357 1151 y(is)50 b(useful,)h(if)f(we)g(need)f(to)h
(use)g(lots)g(of)g(them)f(\(and)g(for)g(big)g(grammars)f(we)357
1250 y(will\))41 b(it)h(is)g(a)f(rather)f(clumsy)g(mechanism.)451
1354 y(It)61 b(is)h(important)d(to)i(notice,)j(ho)n(we)n(v)o(er)m(,)f
(that)e(these)g(problems)e(come)h(up)357 1454 y(because)42
b(of)g(the)h(w)o(ay)g(Prolog)f(interprets)g(DCG)i(rules.)51
b(The)o(y)42 b(are)h(not)f(inherent)357 1554 y(to)h(the)h(DCG)g
(notation.)51 b(An)o(y)43 b(of)g(you)f(who)h(ha)n(v)o(e)g(studied)g
(parsing)f(algorithms)357 1653 y(probably)35 b(kno)n(w)h(that)h(all)h
(top-do)n(wn)c(parsers)j(loop)g(on)f(left-recursi)n(v)o(e)f(grammars.)
357 1753 y(So,)i(it)g(is)g(not)e(surprising)g(that)h(Prolog,)g(which)g
(interprets)f(DCGs)i(in)f(a)h(top-do)n(wn)357 1853 y(f)o(ashion,)50
b(loops)f(on)g(the)g(left-recursi)n(v)o(e)f(grammar)f(rule)i
Fs(s)41 b(-->)g(s)g(conj)f(s)o Fw(.)72 b(If)357 1952
y(we)39 b(used)f(a)i(dif)n(ferent)d(strate)o(gy)h(to)h(interpret)e
(DCGs,)j(for)f(e)o(xample)e(a)i(bottom-up)357 2052 y(strate)o(gy)-5
b(,)55 b(we)f(w)o(ould)e(not)h(run)g(into)g(the)h(same)f(problem.)82
b(Similarly)-5 b(,)56 b(if)d(we)357 2151 y(didn')o(t)e(use)h(Prolog')-5
b(s)52 b(b)n(uilt-in)g(interpretation)e(of)i(DCGs,)57
b(we)52 b(could)g(use)h(the)357 2251 y(e)o(xtra)c(ar)o(guments)f(for)i
(a)h(more)e(sophisticated)g(speci\002cation)h(of)g(features,)h(one)357
2351 y(that)41 b(w)o(ould)f(f)o(acilitate)h(the)g(use)g(of)g(lar)o(ge)f
(feature)g(structures.)451 2455 y(Summing)51 b(up,)j(no)n(w)o(adays)c
(DCGs)k(are)d(probably)f(best)i(vie)n(wed)g(as)g(a)h(nice)357
2554 y(notation)35 b(for)h(de\002ning)f(conte)o(xt)g(free)h(grammars)f
(enhanced)g(with)h(some)h(features,)357 2654 y(a)53 b(notation)f(that)h
(\(ignoring)e(left-recursion\))f(doubles)i(as)i(a)f(parser/recogniser)
-5 b(.)357 2754 y(That)57 b(is,)63 b(the)o(y)57 b(are)h(best)h(vie)n
(wed)e(as)h(a)h(con)m(v)o(enient)c(tool)j(for)f(testing)h(ne)n(w)357
2853 y(grammatical)53 b(ideas,)k(or)e(for)e(implementing)g(reasonably)f
(comple)o(x)h(grammars)357 2953 y(for)f(particular)g(applications.)81
b(DCGs)54 b(are)f(no)f(longer)g(state)i(of)f(the)g(art,)j(b)n(ut)357
3053 y(the)o(y)42 b(are)g(useful.)51 b(Ev)o(en)42 b(if)h(you)f(ha)n(v)o
(e)g(ne)n(v)o(er)f(programmed)f(before,)i(simply)g(by)357
3152 y(using)c(what)h(you)f(ha)n(v)o(e)g(learned)g(so)h(f)o(ar)g(you)f
(are)h(ready)e(to)i(start)h(e)o(xperimenting)357 3252
y(with)61 b(reasonably)d(sophisticated)i(grammar)f(writing.)105
b(W)m(ith)61 b(a)g(con)m(v)o(entional)357 3352 y(programming)52
b(language)h(\(such)i(as)h(C++)g(or)g(Ja)n(v)n(a\))f(it)h(simply)f(w)o
(ouldn')o(t)f(be)357 3451 y(possible)34 b(to)g(reach)g(this)h(stage)g
(so)g(soon.)43 b(Things)33 b(w)o(ould)h(be)g(easier)h(in)f(functional)
357 3551 y(languages)43 b(\(such)g(as)j(Lisp,)f(Caml,)g(or)f(Hask)o
(ell\),)h(b)n(ut)g(e)n(v)o(en)e(so,)i(it)g(is)h(doubtful)357
3650 y(whether)40 b(be)o(ginners)f(could)h(do)g(so)i(much)d(so)j(early)
-5 b(.)357 3856 y Fk(4)99 b(Exer)n(cises)357 4025 y Fv(Exer)o(cise)40
b(8.1.)142 b Fw(Here')-5 b(s)41 b(our)f(basic)h(DCG:)p
0 TeXcolorgray 3286 3932 118 4 v 3286 4050 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 3290 4050 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 1530 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401 4050 4 118
v 3286 4053 118 4 v 0 TeXcolorgray 522 4205 a Fs(s)g(-->)f(np,vp.)522
4404 y(np)h(-->)f(det,n.)522 4604 y(vp)h(-->)f(v,np.)522
4703 y(vp)h(-->)f(v.)522 4902 y(det)g(-->)h([the].)522
5002 y(det)f(-->)h([a].)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 156 168
TeXDict begin 156 167 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(156)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(n)h(-->)f([woman].)971 1151
y(n)h(-->)f([man].)971 1250 y(n)h(-->)f([apple].)971
1350 y(n)h(-->)f([pear].)971 1549 y(v)h(-->)f([eats].)900
1740 y Fw(Suppose)57 b(we)i(add)e(the)i(noun)e(\223men\224)g(\(which)g
(is)j(plural\))d(and)g(the)i(v)o(erb)806 1839 y(\223kno)n(w\224.)43
b(Then)37 b(we)h(w)o(ould)f(w)o(ant)h(a)g(DCG)h(which)e(says)i(that)f
(\223The)f(men)g(eat\224)i(is)806 1939 y(ok,)d(\223The)g(man)g
(eats\224)h(is)h(ok,)e(\223The)g(men)g(eats\224)h(is)h(not)e(ok,)g(and)
g(\223The)g(man)g(eat\224)806 2039 y(is)41 b(not)f(ok.)46
b(Change)40 b(the)g(DCG)i(so)f(that)g(it)g(correctly)e(handles)h(these)
h(sentences.)806 2138 y(Use)g(an)g(e)o(xtra)f(ar)o(gument)f(to)i(cope)f
(with)h(the)g(singular/plural)e(distinction.)806 2279
y Fv(Exer)o(cise)h(8.2.)141 b Fw(In)41 b(the)g(te)o(xt,)f(we)h(only)f
(ga)n(v)o(e)g(e)o(xamples)g(of)g(DCG)i(rules)e(with)p
0 TeXcolorgray 357 2186 118 4 v 357 2304 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 2304 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -3019 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 2304 4 118
v 357 2307 118 4 v 0 TeXcolorgray 806 2379 a Fw(one)46
b(e)o(xtra)f(ar)o(gument,)h(b)n(ut)g(in)h(f)o(act)g(you)f(can)g(add)g
(as)h(man)o(y)f(e)o(xtra)g(ar)o(guments)806 2479 y(as)41
b(you)f(lik)o(e.)46 b(Here')-5 b(s)41 b(a)h(DCG)g(rule)e(with)h(three)g
(e)o(xtra)f(ar)o(guments:)971 2669 y Fs(kanga\(V,R,Q\))c(-->)41
b(roo\(V,R\),jumps\()o(Q,Q)o(\),)o({ma)o(rs)o(upi)o(al)o(\(V)o(,R,)o
(Q\))o(}.)806 2860 y Fw(T)m(ranslate)f(it)i(into)e(the)h(form)f(Prolog)
g(uses.)806 3077 y Fk(5)99 b(Practical)41 b(Session)806
3218 y Fw(The)53 b(purpose)f(of)i(Practical)g(Session)g(8)g(is)h(to)f
(help)f(you)g(get)h(f)o(amiliar)f(with)806 3318 y(DCGs)42
b(that)f(mak)o(e)f(use)h(of)g(additional)f(ar)o(guments)e(and)j(goals.)
900 3426 y(First)h(some)f(k)o(e)o(yboard)d(e)o(x)o(ercises:)p
0 TeXcolorgray 909 3616 a(1.)p 0 TeXcolorgray 41 w(T)m(race)44
b(some)h(e)o(xamples)e(using)h(the)g(DCG)i(which)e(uses)h(e)o(xtra)f
(ar)o(guments)1013 3716 y(to)k(handle)f(the)i(subject/object)e
(distinction,)h(the)h(DCG)g(which)e(produces)1013 3816
y(parses,)k(and)e(the)g(DCG)h(which)f(uses)h(e)o(xtra)e(goals)i(to)f
(separate)g(le)o(xicon)1013 3915 y(and)37 b(rules.)44
b(Mak)o(e)37 b(sure)g(you)f(fully)g(understand)f(the)i(w)o(ay)g(all)h
(three)e(DCGs)1013 4015 y(w)o(ork.)p 0 TeXcolorgray 909
4214 a(2.)p 0 TeXcolorgray 41 w(Carry)65 b(out)g(traces)g(on)g(the)g
(DCG)h(for)f Fj(a)2463 4184 y Fc(n)2508 4214 y Fj(b)2544
4184 y Fc(n)2589 4214 y Fj(c)2625 4184 y Fc(n)2736 4214
y Fw(gi)n(v)o(en)f(in)h(the)h(te)o(xt)1013 4313 y(\(the)57
b(one)f(that)h(ga)n(v)o(e)e(the)i Fs(Count)f Fw(v)n(ariable)f(the)i(v)n
(alues)f Fs(0)p Fw(,)61 b Fs(succ\(0\))m Fw(,)1013 4413
y Fs(succ\(succ\(0\)\))-5 b Fw(,)42 b(and)f(so)h(on\).)48
b(T)m(ry)41 b(cases)h(where)g(the)f(three)h(blocks)f(of)1013
4513 y Fs(a)p Fw(s,)48 b Fs(b)o Fw(s,)g(and)e Fs(c)o
Fw(s)h(are)f(indeed)f(of)h(the)g(same)h(length)e(as)i(well)f(as)h
(queries)1013 4612 y(where)40 b(this)i(is)g(not)e(the)h(case.)900
4803 y(No)n(w)46 b(for)f(some)h(programming.)58 b(W)-7
b(e)47 b(suggest)f(the)g(follo)n(wing)f(mini-project,)806
4902 y(which)36 b(dra)o(ws)h(on)f(all)i(you)e(ha)n(v)o(e)h(learned)f
(so)h(f)o(ar)-5 b(.)45 b(Incidentally)-5 b(,)35 b(in)i(the)g(Practical)
806 5002 y(Session)i(at)g(the)g(end)f(of)h(Chapter)f(12)h(we)g(will)h
(be)f(asking)f(to)h(e)o(xtend)f(this)h(w)o(ork)806 5102
y(e)n(v)o(en)g(further)m(,)g(so)j(do)e(tak)o(e)h(this)h(project)e
(seriously)-5 b(.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 157 169
TeXDict begin 157 168 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(8:)46 b(More)40 b(De\002nite)h(Clause)h
(Grammars)909 b(157)p 0 TeXcolorgray 0 TeXcolorgray 460
1051 a(1.)p 0 TeXcolorgray 41 w(First,)52 b(bring)47
b(together)h(all)h(the)g(things)f(we)i(ha)n(v)o(e)e(learned)g(about)g
(DCGs)564 1151 y(for)c(English)f(into)h(one)f(DCG.)i(In)e(particular)m
(,)g(in)i(the)f(te)o(xt)f(we)i(sa)o(w)f(ho)n(w)564 1250
y(to)j(use)f(e)o(xtra)g(ar)o(guments)e(to)j(deal)f(with)g(the)h
(subject/object)e(distinction,)564 1350 y(and)i(in)g(the)g(e)o(x)o
(ercises)g(you)f(were)h(ask)o(ed)g(to)h(use)f(additional)f(ar)o
(guments)564 1449 y(to)k(deal)g(with)h(the)f(singular/plural)e
(distinction.)72 b(Write)51 b(a)f(DCG)h(which)564 1549
y(handles)39 b(both.)44 b(Moreo)o(v)o(er)m(,)37 b(write)j(the)g(DCG)g
(in)g(such)f(a)h(w)o(ay)g(that)g(it)g(will)564 1649 y(produce)f(parse)i
(trees,)g(and)f(mak)o(es)h(use)g(of)g(a)g(separate)g(le)o(xicon.)p
0 TeXcolorgray 460 1815 a(2.)p 0 TeXcolorgray 41 w(Once)47
b(you)f(ha)n(v)o(e)h(done)f(this,)i(e)o(xtend)e(the)h(DCG)h(so)f(that)g
(noun)f(phrases)564 1914 y(can)34 b(be)h(modi\002ed)e(by)h(adjecti)n(v)
o(es)f(and)h(simple)h(prepositional)d(phrases)i(\(that)564
2014 y(is,)51 b(it)e(should)f(be)g(able)h(to)f(handle)f(noun)h(phrases)
g(such)g(as)h(\223the)f(small)564 2114 y(frightened)k(w)o(oman)g(on)i
(the)f(table\224)h(or)f(\223the)h(big)f(f)o(at)h(co)n(w)f(under)g(the)
564 2213 y(sho)n(wer\224\).)66 b(Then,)48 b(further)f(e)o(xtend)f(it)j
(so)f(that)g(the)g(distinction)f(between)564 2313 y(\002rst,)d(second,)
f(and)f(third)h(person)f(pronouns)f(is)j(correctly)d(handled)h(\(both)
564 2412 y(in)f(subject)g(and)f(object)h(form\).)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 158 170
TeXDict begin 158 169 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 159 171
TeXDict begin 159 170 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2156 1855
a Fn(Chapter)42 b(9)880 2603 y Fm(A)g(Closer)g(Look)g(at)g(T)-19
b(erms)p 357 2785 2599 24 v 0 TeXcolorgray 0.95 TeXcolorgray
0 TeXcolorgray 714 4429 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
115.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial
797 3723 a Fl(This)41 b(chapter)h(has)g(three)h(main)e(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3873
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)41 b(intro)s(duce)h(the)g
Fg(==)g Fl(p)m(redicate.)p 0 TeXcolorgray 887 4056 a(2.)p
0 TeXcolorgray 41 w(T)-8 b(o)41 b(tak)m(e)h(a)f(closer)i(lo)s(ok)e(at)g
(term)i(structure.)p 0 TeXcolorgray 887 4238 a(3.)p 0
TeXcolorgray 41 w(T)-8 b(o)41 b(intro)s(duce)h(op)s(erato)m(rs.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 160 172
TeXDict begin 160 171 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(160)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Comparing)42 b(T)-9
b(erms)806 1180 y Fw(Prolog)41 b(contains)i(an)f(important)g(predicate)
g(for)g(comparing)e(terms,)k(namely)d(the)806 1280 y(identity)49
b(predicate)g Fs(==/2)n Fw(.)75 b(As)51 b(its)g(name)f(suggests,)i
(this)f(tests)g(whether)e(tw)o(o)806 1380 y(terms)41
b(are)h(identical.)47 b(Ho)n(we)n(v)o(er)40 b Fs(==/2)h
Fw(does)g Ft(not)i Fw(instantiate)e(v)n(ariables,)g(thus)h(it)806
1479 y(is)51 b(not)f(the)g(same)h(as)g(the)f(uni\002cation)f(predicate)
g Fs(=/2)o Fw(.)74 b(Let')-5 b(s)51 b(look)f(at)h(some)806
1579 y(e)o(xamples.)971 1730 y Fs(?-)41 b(a)g(==)f(a.)971
1830 y(yes)971 2029 y(?-)h(a)g(==)f(b.)971 2129 y(no)971
2328 y(?-)h(a)g(==)f('a'.)971 2427 y(yes)806 2579 y Fw(The)57
b(reason)h(Prolog)f(gi)n(v)o(es)h(these)g(answers)g(should)g(be)g
(clear)m(,)k(though)56 b(pay)806 2678 y(attention)41
b(to)i(the)f(last)h(one.)50 b(It)42 b(tells)i(us)e(that,)h(as)g(f)o(ar)
f(as)h(Prolog)f(is)h(concerned,)806 2778 y Fs(a)e Fw(and)f
Fs('a')g Fw(are)h(the)g(same)g(object.)900 2877 y(No)n(w)c(let')-5
b(s)37 b(look)f(at)h(e)o(xamples)f(in)m(v)n(olving)f(v)n(ariables,)h
(and)g(e)o(xplicitly)g(compare)806 2977 y Fs(==)k Fw(with)h(the)g
(uni\002cation)f(predicate)g Fs(=)o Fw(.)971 3141 y Fs(?-)h(X==Y.)971
3241 y(no)971 3440 y(?-)g(X=Y.)971 3540 y(X)g(=)g(_2808)971
3639 y(Y)g(=)g(_2808)971 3739 y(yes)806 3903 y Fw(In)g(these)h
(queries,)g Fs(X)g Fw(and)f Fs(Y)i Fw(are)e Ft(uninstantiated)h
Fw(v)n(ariables;)g(we)h(ha)n(v)o(en')o(t)d(gi)n(v)o(en)806
4002 y(them)53 b(an)o(y)h(v)n(alue.)84 b(Thus)54 b(the)g(\002rst)h
(answer)e(is)i(correct:)72 b Fs(X)54 b Fw(and)g Fs(Y)g
Fw(are)g Ft(not)806 4102 y Fw(identical)43 b(objects,)h(so)g(the)g
Fs(==)g Fw(test)h(f)o(ails.)55 b(On)44 b(the)g(other)f(hand,)h(the)g
(use)g(of)f Fs(=)806 4202 y Fw(succeeds,)d(for)g Fs(X)h
Fw(and)g Fs(Y)g Fw(can)f(be)h(uni\002ed.)900 4301 y(Let')-5
b(s)42 b(no)n(w)e(look)g(at)i(queries)e(in)m(v)n(olving)f
Ft(instantiated)i Fw(v)n(ariables:)971 4452 y Fs(?-)g(a=X,)e(a==X.)971
4652 y(X)i(=)g(a)971 4751 y(yes)806 4902 y Fw(The)d(\002rst)h
(conjunct,)f Fs(a=X)n Fw(,)i(binds)e Fs(X)h Fw(to)g Fs(a)o
Fw(.)46 b(Thus)38 b(when)g Fs(a==X)f Fw(is)j(e)n(v)n(aluated,)d(the)806
5002 y(left)43 b(hand)g(side)h(and)f(right)g(hand)g(sides)h(are)g(e)o
(xactly)f(the)h(same)g(Prolog)e(object,)806 5102 y(and)e
Fs(a==X)g Fw(succeeds.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 161 173
TeXDict begin 161 172 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(161)p 0 TeXcolorgray 451 1051 a(A)42 b(similar)f(thing)f
(happens)g(in)h(the)g(follo)n(wing)e(query:)522 1241
y Fs(?-)i(X=Y,)f(X==Y.)522 1440 y(X)h(=)g(_4500)522 1539
y(Y)g(=)g(_4500)522 1639 y(yes)357 1829 y Fw(The)49 b(conjunct)g
Fs(X=Y)g Fw(\002rst)h(uni\002es)g(the)g(v)n(ariables)f
Fs(X)h Fw(and)f Fs(Y)p Fw(.)73 b(Thus)49 b(when)h(the)357
1928 y(second)j(conjunct)g Fs(X==Y)h Fw(is)h(e)n(v)n(aluated,)h(the)e
(tw)o(o)h(v)n(ariables)f(are)g(e)o(xactly)g(the)357 2028
y(same)41 b(Prolog)f(object,)g(and)g(the)h(second)f(conjunct)g
(succeeds)g(as)i(well.)451 2136 y(It)h(should)e(no)n(w)h(be)h(clear)f
(that)h Fs(=)f Fw(and)g Fs(==)g Fw(are)h(dif)n(ferent,)e(nonetheless)g
(there)357 2235 y(is)i(an)g(important)e(relation)h(between)g(them:)49
b Fs(==)42 b Fw(can)h(be)g(vie)n(wed)f(as)h(a)g(stronger)357
2335 y(test)f(for)g(equality)e(between)h(terms)h(than)g
Fs(=)o Fw(.)49 b(That)42 b(is,)g(if)g Fs(term1)f Fw(and)g
Fs(term)g Fw(are)357 2434 y(Prolog)i(terms,)i(and)f(the)g(query)f
Fs(term1)d(==)g(term2)j Fw(succeeds,)i(then)f(the)g(query)357
2534 y Fs(term1)39 b(=)i(term2)f Fw(will)h(succeed)g(too.)451
2642 y(Another)55 b(predicate)g(w)o(orth)h(kno)n(wing)e(about)i(is)h
Fs(\\==)o Fw(.)92 b(This)57 b(predicate)e(is)357 2741
y(de\002ned)39 b(so)h(that)h(it)g(succeeds)e(in)i(precisely)e(those)h
(cases)h(where)f Fs(==)g Fw(f)o(ails.)46 b(That)357 2841
y(is,)39 b(it)h(succeeds)e(whene)n(v)o(er)f(tw)o(o)i(terms)f(are)h
Ft(not)h Fw(identical,)e(and)g(f)o(ails)i(otherwise.)357
2940 y(F)o(or)g(e)o(xample:)522 3130 y Fs(?-)h(a)g(\\==)f(a.)522
3230 y(no)522 3429 y(?-)h(a)g(\\==)f(b.)522 3529 y(yes)522
3728 y(?-)h(a)g(\\==)f('a'.)522 3827 y(no)357 4017 y
Fw(These)48 b(answers)h(should)e(be)i(understandable:)58
b(the)o(y)48 b(are)h(simply)f(the)h(opposite)357 4117
y(of)40 b(the)h(answers)g(we)h(got)e(abo)o(v)o(e)f(when)i(we)g(used)g
Fs(==)o Fw(.)46 b(No)n(w)41 b(consider:)522 4306 y Fs(?-)g(X)g(\\==)f
(a.)522 4506 y(X)h(=)g(_3719)522 4605 y(yes)357 4795
y Fw(Why)50 b(this)h(response?)74 b(W)-7 b(ell,)54 b(we)c(kno)n(w)g
(from)g(abo)o(v)o(e)e(that)j(the)g(query)e Fs(X==a)357
4895 y Ft(fails)c Fw(\(recall)g(the)g(w)o(ay)g Fs(==)g
Fw(treats)g(uninstantiated)f(v)n(ariables\).)56 b(Thus)45
b(the)g(query)357 4994 y Fs(X\\==a)39 b Fw(should)h Ft(succeed)p
Fw(,)g(and)g(it)i(does.)451 5102 y(Similarly:)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 162 174
TeXDict begin 162 173 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(162)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(?-)h(X)g(\\==)f(Y.)971 1250
y(X)h(=)g(_798)971 1350 y(Y)g(=)g(_799)971 1449 y(yes)806
1587 y Fw(Again,)k(we)h(kno)n(w)f(from)g(abo)o(v)o(e)f(that)h(the)h
(query)f Fs(X==Y)f Fw(f)o(ails,)k(thus)d(the)h(query)806
1686 y Fs(X\\==Y)39 b Fw(succeeds.)806 1871 y Fk(2)99
b(T)-9 b(erms)42 b(with)g(a)f(Special)h(Notation)806
2000 y Fw(Sometimes)63 b(terms)h(look)f(dif)n(ferent)f(to)i(us,)70
b(b)n(ut)64 b(Prolog)f(re)o(gards)f(them)i(as)806 2100
y(identical.)92 b(F)o(or)56 b(e)o(xample,)j(when)d(we)h(compare)e
Fs(a)h Fw(and)g Fs('a')o Fw(,)61 b(we)c(see)g(tw)o(o)806
2199 y(distinct)50 b(strings)h(of)f(symbols,)i(b)n(ut)f(Prolog)e
(treats)i(them)f(as)i(the)e(same.)75 b(And)806 2299 y(in)43
b(f)o(act)i(there)e(are)h(man)o(y)e(other)h(cases)i(where)e(Prolog)g
(re)o(gards)f(tw)o(o)i(strings)g(as)806 2399 y(being)52
b(e)o(xactly)h(the)g(same)h(term.)83 b(Why?)g(Because)53
b(it)i(mak)o(es)e(programming)806 2498 y(more)39 b(pleasant.)45
b(Sometimes)40 b(the)g(notation)f(Prolog)g(lik)o(es)i(isn')o(t)f(as)h
(user)n(-friendly)806 2598 y(as)52 b(the)f(notation)g(we)h(w)o(ould)f
(choose.)77 b(So)51 b(it)i(is)f(nice)g(to)g(be)f(able)h(to)f(write)806
2698 y(programs)39 b(in)i(the)g(notation)e(we)i(\002nd)g(natural,)f
(and)g(to)h(let)h(Prolog)e(run)g(them)g(in)806 2797 y(the)g(notation)g
(it)i(prefers.)806 2950 y Fv(Arithmetic)e(terms)806 3072
y Fw(The)i(arithmetic)g(predicates)g(introduced)f(earlier)h(are)h(a)h
(good)d(e)o(xample)h(of)g(this.)806 3171 y(As)57 b(w)o(as)h(mentioned)d
(in)i(Chapter)g(5,)j Fs(+)p Fw(,)h Fs(-)p Fw(,)g Fs(*)p
Fw(,)g(and)56 b Fs(/)i Fw(are)e Ft(functor)o(s)p Fw(,)61
b(and)806 3271 y(arithmetic)56 b(e)o(xpressions)g(such)h(as)99
b Fs(2+3)57 b Fw(are)g Ft(terms)p Fw(.)95 b(And)57 b(this)h(is)g(not)f
(an)806 3371 y(analogy)-5 b(.)70 b(Apart)50 b(from)e(the)i(f)o(act)g
(that)g(it)h(can)f(e)n(v)n(aluate)f(them)g(with)h(the)g(help)806
3470 y(of)j(the)g Fs(is/2)f Fw(predicate,)j(Prolog)d(vie)n(ws)i
(strings)f(of)g(symbols)g(such)g(as)h Fs(2+3)806 3570
y Fw(as)48 b(being)e(identical)h(with)h(ordinary)d(comple)o(x)h(terms.)
65 b(The)47 b(follo)n(wing)f(queries)806 3669 y(mak)o(e)40
b(this)h(clear:)971 3807 y Fs(?-)g(2+3)f(==)h(+\(2,3\).)971
3906 y(yes)971 4105 y(?-)g(+\(2,3\))e(==)h(2+3.)971 4205
y(yes)971 4404 y(?-)h(2-3)f(==)h(-\(2,3\).)971 4504 y(yes)971
4703 y(?-)g(*\(2,3\))e(==)h(2*3.)971 4803 y(yes)971 5002
y(?-)h(2*\(7+2\))d(==)j(*\(2,+\(7,2\)\).)971 5102 y(yes)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 163 175
TeXDict begin 163 174 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(163)p 0 TeXcolorgray 357 1051 a(In)49 b(short,)i(the)f(f)
o(amiliar)f(arithmetic)g(notation)f(is)j(there)e(for)g
Ft(our)i Fw(con)m(v)o(enience.)357 1151 y(Prolog)40 b(doesn')o(t)f(re)o
(gard)g(it)j(as)f(dif)n(ferent)f(from)f(the)i(usual)g(term)g(notation.)
451 1263 y(Similar)48 b(remarks)f(to)i(the)f(arithmetic)f(comparison)f
(predicates)h Fs(<)p Fw(,)j Fs(=<)o Fw(,)h Fs(=:=)n Fw(,)357
1363 y Fs(=\\=)n Fw(,)42 b Fs(>)f Fw(and)f Fs(>=)o Fw(:)522
1569 y Fs(?-)h(\(2)f(<)i(3\))e(==)h(<\(2,3\).)522 1668
y(yes)522 1868 y(?-)g(\(2)f(=<)h(3\))g(==)f(=<\(2,3\).)522
1967 y(yes)522 2167 y(?-)h(\(2)f(=:=)h(3\))f(==)h(=:=\(2,3\).)522
2266 y(yes)522 2465 y(?-)g(\(2)f(=\\=)h(3\))f(==)h(=\\=\(2,3\).)522
2565 y(yes)522 2764 y(?-)g(\(2)f(>)i(3\))e(==)h(>\(2,3\).)522
2864 y(yes)522 3063 y(?-)g(\(2)f(>=)h(3\))g(==)f(>=\(2,3\).)522
3163 y(yes)451 3369 y Fw(These)45 b(e)o(xample)e(sho)n(w)h(why)g(it')-5
b(s)45 b(nice)g(to)f(ha)n(v)o(e)g(the)h(user)n(-friendly)d(notation)357
3468 y(\(w)o(ould)52 b(you)g(w)o(ant)h(to)g(ha)n(v)o(e)f(to)h(w)o(ork)f
(with)h(e)o(xpressions)f(lik)o(e)h Fs(=:=\(2,3\))m Fw(?\).)357
3568 y(Note,)40 b(by)f(the)h(w)o(ay)-5 b(,)40 b(that)g(we)h(enclosed)e
(the)h(left)g(hand)f(ar)o(guments)f(in)j(brack)o(ets.)357
3668 y(F)o(or)f(e)o(xample,)g(we)h(didn')o(t)e(ask)522
3873 y Fs(?-)i(2)g(=:=)f(3)h(==)g(=:=\(2,3\).)357 4079
y Fw(we)g(ask)o(ed)522 4285 y Fs(?-)g(\(2)f(=:=)h(3\))f(==)h
(=:=\(2,3\).)357 4491 y Fw(Why?)74 b(W)-7 b(ell,)54 b(Prolog)49
b(\002nds)h(the)h(query)e Fs(2)41 b(=:=)f(3)i(==)e(=:=\(2,3\))48
b Fw(confusing,)357 4590 y(and)38 b(let')-5 b(s)41 b(f)o(ace)e(it,)h
(can)f(you)f(blame)h(it?)46 b(It')-5 b(s)40 b(not)f(sure)g(whether)f
(to)i(brack)o(et)e(this)357 4690 y(e)o(xpression)h(as)j
Fs(\(2)f(=:=)f(3\))h(==)g(=:=\(2,3\))d Fw(\(which)j(is)h(what)f(we)h(w)
o(ant\),)f(or)g(as)357 4790 y Fs(2)g(=:=)f(\(3)h(==)f(=:=\(2,3\)\))m
Fw(.)46 b(So)41 b(we)g(need)g(to)g(state)g(the)g(grouping)e(e)o
(xplicitly)-5 b(.)451 4902 y(One)35 b(\002nal)f(remark.)42
b(W)-7 b(e)36 b(ha)n(v)o(e)e(no)n(w)g(introduced)e(three)i(rather)g
(similar)g(looking)357 5002 y(symbols,)48 b(namely)e
Fs(=)p Fw(,)j Fs(==)o Fw(,)h(and)c Fs(=:=)h Fw(\(and)g(indeed,)g(there)
g(are)g(also)h Fs(\\=)o Fw(,)i Fs(\\==)n Fw(,)357 5102
y(and)40 b Fs(=\\=)o Fw(\).)46 b(Here')-5 b(s)41 b(a)g(summary:)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 164 176
TeXDict begin 164 175 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(164)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1001 1038
a Fs(=)187 b Fw(The)40 b(uni\002cation)g(predicate.)1232
1137 y(Succeeds)g(if)h(it)h(can)f(unify)f(its)i(ar)o(guments,)c(f)o
(ails)k(otherwise.)1001 1237 y Fs(\\=)143 b Fw(The)40
b(ne)o(gation)f(of)i(the)g(uni\002cation)e(predicate.)1232
1336 y(Succeeds)h(if)h Fs(=)h Fw(f)o(ails,)f(and)f(vice-v)o(ersa.)1001
1436 y Fs(==)143 b Fw(The)40 b(identity)h(predicate.)1232
1536 y(Succeeds)f(if)h(its)h(ar)o(guments)d(are)i(identical,)f(f)o
(ails)i(otherwise.)1001 1635 y Fs(\\==)99 b Fw(The)40
b(ne)o(gation)f(of)i(the)g(identity)f(predicate.)1232
1735 y(Succeeds)g(if)h Fs(==)g Fw(f)o(ails,)h(and)e(vice-v)o(ersa.)1001
1835 y Fs(=:=)99 b Fw(The)40 b(arithmetic)h(equality)f(predicate.)1232
1934 y(Succeeds)g(if)h(its)h(ar)o(guments)d(e)n(v)n(aluate)h(to)h(the)g
(same)g(inte)o(ger)-5 b(.)1001 2034 y Fs(=\\=)99 b Fw(The)40
b(arithmetic)h(inequality)e(predicate.)1232 2134 y(Succeeds)h(if)h(its)
h(ar)o(guments)d(e)n(v)n(aluate)h(to)h(dif)n(ferent)f(inte)o(gers.)806
2318 y Fv(Lists)i(as)f(terms)806 2442 y Fw(Lists)55 b(are)g(another)e
(good)h(e)o(xample)f(of)h(Prolog)g(w)o(orking)f(with)i(one)f(internal)
806 2542 y(representation,)d(while)g(gi)n(ving)f(us)i(another)m(,)g
(more)e(user)n(-friendly)-5 b(,)51 b(notation)f(to)806
2641 y(w)o(ork)37 b(with.)45 b(Let')-5 b(s)39 b(start)g(with)f(a)h
(quick)e(look)g(at)i(the)f(user)n(-friendly)e(list)k(notation)806
2741 y(it)d(pro)o(vides)e(\(that)h(is,)i(the)f(square)e(brack)o(ets)h
Fs([)h Fw(and)f Fs(])p Fw(\).)44 b(In)36 b(f)o(act,)i(because)e(Prolog)
806 2840 y(also)44 b(of)n(fers)f(the)h Fs(|)g Fw(constructor)m(,)e
(there)i(are)g(man)o(y)f(w)o(ays)h(of)g(writing)f(the)h(same)806
2940 y(list,)d(e)n(v)o(en)f(at)i(the)f(user)n(-friendly)d(le)n(v)o(el:)
971 3129 y Fs(?-)j([a,b,c,d])c(==)k([a|[b,c,d]].)971
3228 y(yes)971 3428 y(?-)g([a,b,c,d])c(==)k([a,b|[c,d]].)971
3527 y(yes)971 3727 y(?-)g([a,b,c,d])c(==)k([a,b,c|[d]].)971
3826 y(yes)971 4025 y(?-)g([a,b,c,d])c(==)k([a,b,c,d|[]].)971
4125 y(yes)900 4314 y Fw(But)59 b(ho)n(w)e(does)h(Prolog)f(vie)n(w)h
(lists)i(internally?)96 b(In)58 b(f)o(act,)k(it)d(sees)g(lists)806
4413 y(as)49 b(terms)g(which)g(are)g(b)n(uilt)g(out)g(of)g(tw)o(o)g
(special)g(terms,)i(namely)d Fs([])p Fw(,)j(which)806
4513 y(represents)c(the)i(empty)f(list,)j(and)e(\223)p
Fs(.)o Fw(\224)g(\(the)f(full-stop\),)h(a)h(functor)d(of)h(arity)g(2)
806 4613 y(which)42 b(is)i(used)f(to)g(b)n(uild)g(non-empty)d(lists.)53
b(The)43 b(terms)g Fs([])g Fw(and)f Fs(.)i Fw(are)f(called)806
4712 y(list)f(constructors.)900 4813 y(This)50 b(is)h(ho)n(w)e(these)h
(constructors)e(are)i(used)g(to)g(b)n(uild)f(lists.)74
b(Needless)50 b(to)806 4913 y(say)-5 b(,)40 b(the)h(de\002nition)f(is)i
(recursi)n(v)o(e:)p 0 TeXcolorgray 930 5102 a Fh(\017)p
0 TeXcolorgray 41 w Fw(The)f(empty)f(list)i(is)g(the)f(term)f
Ff([)i(])p Fw(.)k(It)41 b(has)h(length)e(0.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 165 177
TeXDict begin 165 176 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(165)p 0 TeXcolorgray 0 TeXcolorgray 481
1051 a Fh(\017)p 0 TeXcolorgray 41 w Fw(A)42 b(non-empty)c(list)k(is)g
(an)o(y)e(term)h(of)g(the)g(form)f Fj(:)p Ff(\()p Ft(term)p
Fj(;)14 b Ft(list)q Ff(\))p Fw(,)42 b(where)e Ft(term)564
1151 y Fw(is)k(an)o(y)e(Prolog)f(term,)i(and)f Ft(list)j
Fw(is)e(an)o(y)f(list.)52 b(If)42 b Ft(list)j Fw(has)e(length)f
Fj(n)p Fw(,)h(then)564 1250 y Fj(:)p Ff(\()p Ft(term)q
Fj(;)14 b Ft(list)p Ff(\))42 b Fw(has)f(length)f Fj(n)19
b Ff(+)f(1)p Fw(.)451 1438 y(Let')-5 b(s)50 b(mak)o(e)e(sure)h(we)g
(fully)g(understand)d(this)k(de\002nition)e(by)g(w)o(orking)f(our)357
1538 y(w)o(ay)41 b(through)d(a)k(fe)n(w)f(e)o(xamples.)522
1726 y Fs(?-)g(.\(a,[]\))d(==)j([a].)522 1825 y(yes)522
2025 y(?-)g(.\(f\(d,e\),[]\))36 b(==)41 b([f\(d,e\)].)522
2124 y(yes)522 2323 y(?-)g(.\(a,.\(b,[]\)\))36 b(==)41
b([a,b].)522 2423 y(yes)522 2622 y(?-)g(.\(a,.\(b,.\(f\(d,e\))o(,[)o
(]\))o(\)\))35 b(==)41 b([a,b,f\(d,e\)].)522 2722 y(yes)522
2921 y(?-)g(.\(.\(a,[]\),[]\))36 b(==)41 b([[a]].)522
3021 y(yes)522 3220 y(?-)g(.\(.\(.\(a,[]\),[]\),)o([])o(\))35
b(==)41 b([[[a]]].)522 3320 y(yes)522 3519 y(?-)g
(.\(.\(a,.\(b,[]\)\),[)o(]\))35 b(==)40 b([[a,b]].)522
3619 y(yes)522 3818 y(?-)h(.\(.\(a,.\(b,[]\)\),.)o(\(c)o(,[)o(]\)\))35
b(==)40 b([[a,b],c].)522 3917 y(yes)522 4117 y(?-)h
(.\(.\(a,[]\),.\(b,.\()o(c,)o([])o(\)\)\))35 b(==)40
b([[a],b,c].)522 4216 y(yes)522 4416 y(?-)h(.\(.\(a,[]\),.\(.\(b,)o
(.\()o(c,)o([]\))o(\),)o([]\))o(\))35 b(==)41 b([[a],[b,c]].)522
4515 y(yes)451 4703 y Fw(Prolog')-5 b(s)47 b(internal)g(notation)g(for)
g(lists)i(is)g(not)e(as)i(user)n(-friendly)c(as)k(the)e(use)357
4803 y(of)d(the)h(square)g(brack)o(et)f(notation.)56
b(But)46 b(it')-5 b(s)46 b(not)e(as)i(bad)f(as)g(it)h(seems)f(at)h
(\002rst)357 4902 y(sight.)87 b(In)54 b(f)o(act,)k(it)e(w)o(orks)e
(similarly)h(to)g(the)g Fs(|)f Fw(notation.)86 b(It)55
b(represents)f(a)357 5002 y(list)f(in)f(tw)o(o)g(parts:)69
b(its)53 b(\002rst)g(element)e(\(the)h(head\),)i(and)d(a)i(list)g
(representing)357 5102 y(the)k(rest)h(of)g(the)f(list)i(\(the)e
(tail\).)96 b(The)58 b(trick)f(is)i(to)e(read)h(these)f(terms)h(as)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 166 178
TeXDict begin 166 177 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(166)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Ft(tr)m(ees)p Fw(.)65 b(The)47
b(internal)g(nodes)f(of)h(this)h(tree)g(are)f(labeled)f(with)i
Fs(.)f Fw(and)g(all)h(ha)n(v)o(e)806 1151 y(tw)o(o)58
b(daughter)f(nodes.)98 b(The)58 b(subtree)g(under)f(the)i(left)g
(daughter)d(represents)806 1250 y(the)c(\002rst)h(element)e(of)h(the)h
(list)g(and)f(the)g(subtree)g(under)f(the)h(right)f(daughter)806
1350 y(represents)d(the)h(rest)g(of)g(the)f(list.)71
b(F)o(or)49 b(e)o(xample,)g(the)g(tree)g(representation)e(of)806
1449 y Fs(.\(a,.\(.\(b,.\(c,[)o(]\))o(\),.)o(\(d)o(,[])o(\)\))o(\))-6
b Fw(,)55 b(that)d(is,)j Fs([a,)40 b([b,c],)f(d])o Fw(,)55
b(looks)c(lik)o(e)806 1549 y(this:)p 0 TeXcolorgray 0
TeXcolorgray 1136 2360 a @beginspecial 0 @llx 0 @lly
332 @urx 123 @ury 2324 @rwi @setspecial
%%BeginDocument: listtree.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: listtree.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Mon Aug 30 20:21:35 2004
%%For: kris@tora (Kristina Striegnitz)
%%BoundingBox: 0 0 332 123
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 123 moveto 0 0 lineto 332 0 lineto 332 123 lineto closepath clip newpath
-112.5 207.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 100
% Arc
7.500 slw
gs  clippath
6229 2508 m 6248 2451 l 6105 2403 l 6210 2470 l 6086 2460 l cp
eoclip
 [60] 0 sd
n 5812.5 3487.5 1093.3 -112.2 -67.8 arc
gs col0 s gr
 gr
 [] 0 sd
% arrowhead
%n 6086 2460 m 6210 2470 l 6105 2403 l 6086 2460 l  cp gs col7 1.00 shd ef gr  col0 s
% Arc
 [60] 0 sd
n 4650.0 2362.5 940.5 -113.5 -66.5 arc
gs col0 s gr
 [] 0 sd
% Arc
gs  clippath
5477 2058 m 5500 2003 l 5360 1945 l 5460 2019 l 5337 2000 l cp
eoclip
 [60] 0 sd
n 5137.5 2662.5 721.3 -117.9 -62.1 arc
gs col0 s gr
 gr
 [] 0 sd
% arrowhead
%n 5337 2000 m 5460 2019 l 5360 1945 l 5337 2000 l  cp gs col7 1.00 shd ef gr  col0 s
% Arc
gs  clippath
3981 2432 m 3997 2375 l 3851 2335 l 3959 2396 l 3835 2392 l cp
eoclip
 [60] 0 sd
n 3450.0 4050.0 1731.5 -107.7 -72.3 arc
gs col0 s gr
 gr
 [] 0 sd
% arrowhead
%n 3835 2392 m 3959 2396 l 3851 2335 l 3835 2392 l  cp gs col7 1.00 shd ef gr  col0 s
% Arc
gs  clippath
4298 3024 m 4280 2966 l 4136 3011 l 4260 3005 l 4153 3068 l cp
eoclip
 [60] 0 sd
n 2835.9 -1481.2 4706.6 90.7 72.2 arcn
gs col0 s gr
 gr
 [] 0 sd
% arrowhead
%n 4153 3068 m 4260 3005 l 4136 3011 l 4153 3068 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 4200 1725 m
 3600 1950 l gs col0 s gr 
% Polyline
n 4200 1725 m
 4725 1950 l gs col0 s gr 
% Polyline
n 4725 2175 m
 4125 2400 l gs col0 s gr 
% Polyline
n 4725 2175 m
 5325 2400 l gs col0 s gr 
% Polyline
n 4050 2625 m
 3825 2775 l gs col0 s gr 
% Polyline
n 4050 2625 m
 4350 2775 l gs col0 s gr 
% Polyline
n 5400 2625 m
 5100 2775 l gs col0 s gr 
% Polyline
n 5400 2625 m
 5700 2700 l gs col0 s gr 
% Polyline
n 4425 3000 m
 4125 3300 l gs col0 s gr 
% Polyline
n 4425 3000 m
 4650 3225 l gs col0 s gr 
/Times-Bold ff 300.00 scf sf
4050 2550 m
gs 1 -1 sc (.) col0 sh gr
/Times-Bold ff 210.00 scf sf
3750 3000 m
gs 1 -1 sc (b) col0 sh gr
/Times-Bold ff 300.00 scf sf
4350 2925 m
gs 1 -1 sc (.) col0 sh gr
/Times-Bold ff 210.00 scf sf
4050 3450 m
gs 1 -1 sc (c) col0 sh gr
/Times-Bold ff 210.00 scf sf
4575 3450 m
gs 1 -1 sc ([ ]) col0 sh gr
/Times-Bold ff 300.00 scf sf
5325 2550 m
gs 1 -1 sc (.) col0 sh gr
/Times-Bold ff 210.00 scf sf
5625 2925 m
gs 1 -1 sc ([ ]) col0 sh gr
/Times-Bold ff 210.00 scf sf
5025 3000 m
gs 1 -1 sc (d) col0 sh gr
/Times-Bold ff 300.00 scf sf
4725 2100 m
gs 1 -1 sc (.) col0 sh gr
/Times-Bold ff 210.00 scf sf
3525 2175 m
gs 1 -1 sc (a) col0 sh gr
/Times-Bold ff 300.00 scf sf
4200 1650 m
gs 1 -1 sc (.) col0 sh gr
/Times-Bold ff 210.00 scf sf
5475 2100 m
gs 1 -1 sc (.\(.\(b, .\(c,[ ]\)\), .\(d,[]\)\)) col0 sh gr
/Times-Bold ff 210.00 scf sf
6300 2550 m
gs 1 -1 sc (.\(d, []\)) col0 sh gr
/Times-Bold ff 210.00 scf sf
5100 1575 m
gs 1 -1 sc (.\(a, .\(.\(b,.\(c,[ ]\)\), .\(d,[ ]\)\)\)) col0 sh gr
/Times-Bold ff 210.00 scf sf
1875 2550 m
gs 1 -1 sc (.\(b, .\(c,[ ]\)\)) col0 sh gr
/Times-Bold ff 210.00 scf sf
2175 3225 m
gs 1 -1 sc (.\(c, []\)) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage

%%EndDocument
 @endspecial 900 2543 a(One)e(\002nal)g(remark.)69 b(Prolog)48
b(is)i(v)o(ery)e(polite.)69 b(Not)49 b(only)g(are)g(you)f(free)g(to)806
2642 y(talk)41 b(to)g(it)g(in)g(the)g(user)n(-friendly)e(notation,)g
(it)j(will)g(reply)e(in)h(the)g(same)g(w)o(ay:)971 2809
y Fs(?-)g(.\(f\(d,e\),[]\))36 b(=)41 b(Y.)971 3008 y(Y)g(=)g
([f\(d,e\)])971 3108 y(yes)971 3407 y(?-)g(.\(a,.\(b,[]\)\))36
b(=)41 b(X,)g(Z=)g(.\(.\(c,[]\),[]\),)35 b(W)41 b(=)g([1,2,X].)971
3606 y(X)g(=)g([a,b])971 3705 y(Z)g(=)g([[c]])971 3805
y(W)g(=)g([1,2,[a,b]])971 3905 y(yes)806 4096 y Fk(3)99
b(Examining)42 b(T)-9 b(erms)806 4226 y Fw(In)54 b(this)i(section,)i
(we)d(will)h(learn)e(about)g(some)h(b)n(uilt-in)g(predicates)f(that)h
(let)806 4325 y(us)49 b(e)o(xamine)f(terms)h(more)g(closely)-5
b(.)69 b(First,)52 b(we)e(will)g(look)e(at)i(predicates)e(that)806
4425 y(test)g(whether)f(their)h(ar)o(guments)e(are)i(terms)f(of)h(a)g
(certain)g(type)f(\(for)g(e)o(xample,)806 4525 y(whether)41
b(the)o(y)h(are)g(atoms)h(or)f(numbers\).)49 b(Then)41
b(we)i(will)h(introduce)c(predicates)806 4624 y(that)h(tell)g(us)g
(something)f(about)g(the)h(internal)f(structure)g(of)h(comple)o(x)e
(terms.)806 4780 y Fv(T)-6 b(ypes)41 b(of)g(T)-8 b(erms)806
4902 y Fw(Remember)35 b(what)i(we)g(said)g(about)e(Prolog)h(terms)h(in)
g(Chapter)f(1:)44 b(there)36 b(are)h(four)806 5002 y(dif)n(ferent)51
b(kinds,)k(namely)d(v)n(ariables,)i(atoms,)i(numbers)51
b(and)i(comple)o(x)e(terms.)806 5102 y(Furthermore,)c(atoms)h(and)g
(numbers)f(are)i(grouped)d(together)h(under)g(the)h(name)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 167 179
TeXDict begin 167 178 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(167)p 0 TeXcolorgray 357 1051 a(constants,)47
b(and)f(constants)g(and)g(v)n(ariables)g(constitute)g(the)h(simple)f
(terms.)63 b(The)357 1151 y(follo)n(wing)39 b(tree)i(diagram)f
(summarises)g(this:)p 0 TeXcolorgray 0 TeXcolorgray 1631
1365 a
 tx@Dict begin tx@NodeDict begin {5.78992 0.11491 22.21957 11.10979
3.14996 } false /N@T-0 16 {InitRnode } NewNode end end
 1631 1365 a Fw(terms)1171 1601 y
 tx@Dict begin tx@NodeDict begin {6.81989 2.16492 53.88908 26.94453
3.14996 } false /N@T-0-0 16 {InitRnode } NewNode end end
 1171 1601 a Fw(simple)h(terms)
1395 1575 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1395 1575 a 1006 1837 a
 tx@Dict begin tx@NodeDict begin {6.81989 0.1399 35.84946 17.92473
3.14996 } false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1006 1837 a Fw(v)n(ariables)1154
1811 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1154 1811 a 1480 1837 a
 tx@Dict begin tx@NodeDict begin {5.78992 0.11491 37.21945 18.60973
3.14996 } false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1480 1837 a Fw(constants)1635
1811 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1635 1811 a 1326 2074 a
 tx@Dict begin tx@NodeDict begin {5.78992 0.11491 23.88962 11.94481
3.14996 } false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1326 2074 a Fw(atoms)1425
2047 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1425 2047 a 1702 2074 a
 tx@Dict begin tx@NodeDict begin {6.81989 0.11491 34.43968 17.21983
3.14996 } false /N@T-0-0-1-1 16 {InitRnode } NewNode end end
 1702 2074 a Fw(numbers)1845
2047 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1845 2047 a 1796 1601 a
 tx@Dict begin tx@NodeDict begin {6.81989 2.16492 61.50934 30.75467
3.14996 } false /N@T-0-1 16 {InitRnode } NewNode end end
 1796 1601 a Fw(comple)o(x)e(terms)2051
1575 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2051 1575 a 451 2227 a Fw(Sometimes)d(it)h(is)g(useful)f(to)g
(be)g(able)g(to)h(determine)d(what)j(type)e(a)i(gi)n(v)o(en)e(term)357
2327 y(is.)57 b(Y)-9 b(ou)44 b(might,)h(for)f(e)o(xample,)g(w)o(ant)g
(to)h(write)g(a)g(predicate)f(that)g(has)h(to)g(deal)357
2426 y(with)j(dif)n(ferent)e(kinds)h(of)g(terms,)i(b)n(ut)f(has)g(to)g
(treat)f(them)h(in)g(dif)n(ferent)e(w)o(ays.)357 2526
y(Prolog)38 b(pro)o(vides)h(se)n(v)o(eral)g(b)n(uilt-in)g(predicates)g
(that)h(test)g(whether)f(a)h(gi)n(v)o(en)f(term)357 2626
y(is)j(of)e(a)i(certain)e(type:)p 0 TeXcolorgray 0 TeXcolorgray
415 2810 a Fs(atom/1)228 b Fw(Is)41 b(the)g(ar)o(gument)e(an)i(atom?)
415 2910 y Fs(integer/1)96 b Fw(Is)41 b(the)g(ar)o(gument)e(an)i(inte)o
(ger?)415 3010 y Fs(float/1)184 b Fw(Is)41 b(the)g(ar)o(gument)e(a)i
(\003oating)f(point)g(number?)415 3109 y Fs(number/1)140
b Fw(Is)41 b(the)g(ar)o(gument)e(an)i(inte)o(ger)e(or)i(a)g(\003oating)
g(point)f(number?)415 3209 y Fs(atomic/1)140 b Fw(Is)41
b(the)g(ar)o(gument)e(a)i(constant?)415 3308 y Fs(var/1)272
b Fw(Is)41 b(the)g(ar)o(gument)e(an)i(uninstantiated)e(v)n(ariable?)415
3408 y Fs(nonvar/1)140 b Fw(Is)34 b(the)h(ar)o(gument)d(an)i
(instantiated)f(v)n(ariable)h(or)g(another)e(term)907
3508 y(that)41 b(is)h(not)e(an)h Ft(un)p Fw(instantiated)e(v)n
(ariable?)451 3661 y(Let')-5 b(s)42 b(see)f(ho)n(w)g(the)o(y)f(beha)n
(v)o(e.)522 3848 y Fs(?-)h(atom\(a\).)522 3948 y(yes)522
4147 y(?-)g(atom\(7\).)522 4247 y(no)522 4446 y(?-)g
(atom\(loves\(vince)o(nt)o(,m)o(ia\))o(\).)522 4546 y(no)357
4733 y Fw(These)52 b(three)g(e)o(xamples)g(beha)n(v)o(e)f(e)o(xactly)h
(as)i(we)f(w)o(ould)f(e)o(xpect.)80 b(But)53 b(what)357
4833 y(happens,)39 b(when)h(we)i(call)f Fs(atom/1)e Fw(with)i(a)h(v)n
(ariable)d(as)j(ar)o(gument?)522 5002 y Fs(?-)f(atom\(X\).)522
5102 y(no)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 168 180
TeXDict begin 168 179 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(168)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(This)62 b(mak)o(es)g(sense,)67
b(since)c(an)f(uninstantiated)e(v)n(ariable)h(is)i(not)f(an)g(atom.)806
1151 y(Ho)n(we)n(v)o(er)43 b(if)i(we)h(instantiate)e
Fs(X)i Fw(with)f(an)g(atom)f(\002rst)i(and)e(then)h(ask)g
Fs(atom\(X\))m Fw(,)806 1250 y(Prolog)39 b(answers)i(yes.)971
1412 y Fs(?-)g(X)g(=)g(a,)f(atom\(X\).)971 1511 y(X)h(=)g(a)971
1611 y(yes)806 1772 y Fw(But)g(it)h(is)g(important)d(that)i(the)g
(instantiation)f(is)i(done)e Ft(befor)m(e)g Fw(the)h(test:)971
1934 y Fs(?-)g(atom\(X\),)d(X)j(=)g(a.)971 2034 y(no)806
2195 y Fw(The)j(predicates)g Fs(integer/1)d Fw(and)j
Fs(float/1)f Fw(beha)n(v)o(e)g(analogously)-5 b(.)54
b(T)m(ry)45 b(some)806 2295 y(e)o(xamples.)900 2394 y(The)k(predicates)
g Fs(number/1)e Fw(and)i Fs(atomic/1)e Fw(beha)n(v)o(e)i(disjuncti)n(v)
o(ely)-5 b(.)70 b(First,)806 2494 y Fs(number/1)49 b
Fw(tests)54 b(whether)d(a)i(gi)n(v)o(en)e(term)h(is)i(either)e(an)g
(inte)o(ger)f(or)h(a)h(\003oat:)806 2594 y(that)43 b(is,)h(it)g(will)g
(e)n(v)n(aluate)e(to)h(true)g(whene)n(v)o(er)e(either)i
Fs(integer/1)d Fw(or)j Fs(float/1)806 2693 y Fw(e)n(v)n(aluate)e(to)i
(true)g(and)f(it)i(f)o(ails)f(when)f(both)g(of)h(them)f(f)o(ail.)52
b(As)43 b(for)f Fs(atomic/1)m Fw(,)806 2793 y(this)c(tests)i(whether)d
(a)i(gi)n(v)o(en)e(term)h(is)h(a)g(constant,)f(that)g(is,)h(whether)f
(it)h(is)g(either)806 2893 y(an)53 b(atom)g(or)h(a)g(number)-5
b(.)82 b(So)54 b Fs(atomic/1)d Fw(will)k(e)n(v)n(aluate)d(to)i(true)g
(whene)n(v)o(er)806 2992 y(either)40 b Fs(atom/1)f Fw(or)i
Fs(number/1)d Fw(e)n(v)n(aluate)i(to)h(true)f(and)h(it)g(f)o(ails)h
(when)e(both)g(f)o(ail.)971 3169 y Fs(?-)h(atomic\(mia\).)971
3269 y(yes)971 3468 y(?-)g(atomic\(8\).)971 3568 y(yes)971
3767 y(?-)g(atomic\(3.25\).)971 3867 y(yes)971 4066 y(?-)g
(atomic\(loves\(vi)o(nce)o(nt)o(,m)o(ia\))o(\).)971 4165
y(no)971 4365 y(?-)g(atomic\(X\))971 4464 y(no)900 4641
y Fw(What)46 b(about)f(v)n(ariables?)59 b(First)47 b(there)e(is)i(the)e
Fs(var/1)g Fw(predicate.)58 b(This)46 b(tests)806 4741
y(whether)39 b(the)i(ar)o(gument)e(is)j(an)f Ft(uninstantiated)g
Fw(v)n(ariable:)971 4902 y Fs(?-)g(var\(X\))971 5002
y(yes)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 169 181
TeXDict begin 169 180 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(169)p 0 TeXcolorgray 522 1051 a Fs(?-)41
b(var\(mia\).)522 1151 y(no)522 1350 y(?-)g(var\(8\).)522
1449 y(no)522 1649 y(?-)g(var\(3.25\).)522 1748 y(no)522
1948 y(?-)g(var\(loves\(vincen)o(t,)o(mi)o(a\)\))o(.)522
2047 y(no)451 2195 y Fw(Then)j(there)f(is)i(the)g Fs(nonvar/1)c
Fw(predicate.)55 b(This)44 b(succeeds)g(precisely)f(when)357
2295 y Fs(var/1)35 b Fw(f)o(ails;)40 b(that)d(is,)i(it)f(tests)g
(whether)e(its)j(ar)o(gument)c(is)j Ft(not)g Fw(an)f(uninstantiated)357
2394 y(v)n(ariable:)522 2542 y Fs(?-)k(nonvar\(X\))522
2642 y(no)522 2841 y(?-)g(nonvar\(mia\).)522 2941 y(yes)522
3140 y(?-)g(nonvar\(8\).)522 3239 y(yes)522 3439 y(?-)g
(nonvar\(3.25\).)522 3538 y(yes)522 3738 y(?-)g(nonvar\(loves\(vin)o
(ce)o(nt)o(,mi)o(a\))o(\).)522 3837 y(yes)451 3985 y
Fw(Note)49 b(that)g(a)h(comple)o(x)d(term)i(which)f(contains)g
(uninstantiated)g(v)n(ariables)g(is)357 4085 y(not)38
b(itself)i(an)f(uninstantiated)e(v)n(ariable)h(\(it)h(is)h(a)g(comple)o
(x)d(term\).)44 b(Therefore)37 b(we)357 4184 y(ha)n(v)o(e:)522
4344 y Fs(?-)k(var\(loves\(_,mia\))o(\).)522 4444 y(no)522
4643 y(?-)g(nonvar\(loves\(_,m)o(ia)o(\)\))o(.)522 4743
y(yes)451 4902 y Fw(And)53 b(when)f(the)h(v)n(ariable)e
Fs(X)i Fw(gets)g(instantiated)g Fs(var\(X\))e Fw(and)h
Fs(nonvar\(X\))357 5002 y Fw(beha)n(v)o(e)43 b(dif)n(ferently)f
(depending)f(on)j(whether)f(the)o(y)g(are)h(called)g(before)f(or)h
(after)357 5102 y(the)d(instantiation:)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 170 182
TeXDict begin 170 181 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(170)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(?-)h(X)g(=)g(a,)f(var\(X\).)971
1151 y(no)971 1350 y(?-)h(X)g(=)g(a,)f(nonvar\(X\).)971
1449 y(X)h(=)g(a)971 1549 y(yes)971 1748 y(?-)g(var\(X\),)d(X)j(=)g(a.)
971 1848 y(X)g(=)g(a)971 1948 y(yes)971 2147 y(?-)g(nonvar\(X\),)c(X)k
(=)g(a.)971 2246 y(no)806 2435 y Fv(The)g(Structur)o(e)g(of)f(T)-8
b(erms)806 2559 y Fw(Gi)n(v)o(en)48 b(a)i(comple)o(x)d(term)i(of)g
(unkno)n(wn)e(structure)i(\(perhaps)e(a)j(comple)o(x)e(term)806
2659 y(returned)54 b(as)j(the)f(output)f(of)h(some)g(predicate\),)i
(what)f(kind)e(of)h(information)806 2759 y(might)40 b(we)i(w)o(ant)g
(to)g(e)o(xtract)f(from)f(it?)49 b(The)41 b(ob)o(vious)f(response)h
(is:)48 b(its)43 b(functor)m(,)806 2858 y(its)57 b(arity)-5
b(,)59 b(and)d(what)g(its)h(ar)o(guments)d(look)i(lik)o(e.)91
b(Prolog)56 b(pro)o(vides)e(b)n(uilt-in)806 2958 y(predicates)49
b(that)h(pro)o(vide)e(this)j(information.)71 b(Information)48
b(about)h(the)h(functor)806 3057 y(and)i(arity)h(is)h(supplied)e(by)h
(the)g(predicate)f Fs(functor/3)l Fw(.)83 b(Gi)n(v)o(en)53
b(a)g(comple)o(x)806 3157 y(term,)40 b Fs(functor/3)e
Fw(will)j(tell)h(us)f(what)g(its)h(functor)e(and)g(arity)h(are:)971
3346 y Fs(?-)g(functor\(f\(a,b\),)o(F,A)o(\).)971 3446
y(A)g(=)g(2)971 3545 y(F)g(=)g(f)971 3645 y(yes)971 3844
y(?-)g(functor\([a,b,c])o(,X,)o(Y\))o(.)971 3944 y(X)g(=)g('.')971
4043 y(Y)g(=)g(2)971 4143 y(yes)806 4332 y Fw(Note)d(that)g(when)g(ask)
o(ed)g(about)g(a)h(list,)h(Prolog)d(returns)g(the)i(functor)e(.,)i
(which)f(is)806 4431 y(the)i(functor)g(it)h(uses)h(in)f(its)h(internal)
e(representation)f(of)i(lists.)900 4533 y(What)g(happens)f(when)g(we)i
(use)f Fs(functor/3)d Fw(with)j(constants?)k(Let')-5
b(s)42 b(try:)971 4703 y Fs(?-)f(functor\(mia,F,A)o(\).)971
4803 y(A)g(=)g(0)971 4902 y(F)g(=)g(mia)971 5002 y(yes)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 171 183
TeXDict begin 171 182 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(171)p 0 TeXcolorgray 522 1051 a Fs(?-)41
b(functor\(8,F,A\).)522 1151 y(A)g(=)g(0)522 1250 y(F)g(=)g(8)522
1350 y(yes)522 1549 y(?-)g(functor\(3.25,F,A)o(\).)522
1649 y(A)g(=)g(0)522 1748 y(F)g(=)g(3.25)522 1848 y(yes)451
2021 y Fw(So)j(we)h(can)f(use)g(the)g(predicate)f Fs(functor/3)d
Fw(to)45 b(\002nd)e(out)h(the)g(functor)e(and)357 2121
y(the)e(arity)h(of)f(a)h(term,)g(and)f(this)h(usage)f(also)h(w)o(orks)g
(for)f(the)g(special)h(case)g(of)g(0)357 2220 y(arity)f(terms)h
(\(constants\).)451 2322 y(W)-7 b(e)42 b(can)f(also)g(use)g
Fs(functor/3)d Fw(to)j Ft(construct)h Fw(terms.)j(Ho)n(w?)h(By)41
b(specifying)357 2422 y(the)k(second)g(and)h(third)f(ar)o(gument)e(and)
i(lea)n(ving)g(the)h(\002rst)h(undetermined.)57 b(The)357
2521 y(query)522 2695 y Fs(?-)41 b(functor\(T,f,7\).)357
2868 y Fw(for)f(e)o(xample,)f(returns)h(the)h(follo)n(wing)f(answer:)
522 3041 y Fs(T)h(=)g(f\(_G286,)d(_G287,)h(_G288,)g(_G289,)h(_G290,)f
(_G291,)g(_G292\))522 3140 y(yes)357 3313 y Fw(Note)53
b(that)g(either)g(the)g(\002rst)h(ar)o(gument)d(or)h(the)i(second)e
(and)h(third)f(ar)o(gument)357 3413 y(ha)n(v)o(e)37 b(to)h(be)g
(instantiated.)45 b(F)o(or)37 b(e)o(xample,)g(Prolog)g(w)o(ould)h
(answer)g(with)g(an)g(error)357 3513 y(message)47 b(to)g(the)h(query)e
Fs(functor\(T,f,N\))-6 b Fw(.)65 b(And)47 b(if)g(you)g(think)f(about)h
(what)357 3612 y(the)j(query)f(means,)j(Prolog)d(is)i(reacting)e(in)i
(a)f(sensible)h(w)o(ay)-5 b(.)73 b(The)50 b(query)f(is)357
3712 y(asking)42 b(Prolog)g(to)i(construct)e(a)h(comple)o(x)f(term)h
(without)f(telling)h(it)h(ho)n(w)f(man)o(y)357 3811 y(ar)o(guments)c
(to)i(pro)o(vide,)d(which)j(is)h(not)e(a)i(v)o(ery)d(sensible)i
(request.)451 3913 y(No)n(w)50 b(that)f(we)h(kno)n(w)f(about)g
Fs(functor/3)l Fw(,)j(let')-5 b(s)51 b(put)e(it)h(to)g(w)o(ork.)71
b(In)50 b(the)357 4013 y(pre)n(vious)39 b(section,)i(we)h(discussed)f
(the)h(b)n(uilt-in)e(predicates)h(that)g(tested)h(whether)357
4113 y(their)k(ar)o(gument)e(w)o(as)k(an)e(atom,)i(a)f(number)m(,)e(a)i
(constant,)g(or)g(a)g(v)n(ariable.)61 b(But)357 4212
y(there)43 b(w)o(as)i(no)f(predicate)f(that)h(tested)g(whether)f(its)i
(ar)o(gument)d(w)o(as)j(a)f(comple)o(x)357 4312 y(term.)g(T)-7
b(o)39 b(mak)o(e)f(the)h(list)h(complete,)e(let')-5 b(s)39
b(de\002ne)g(such)f(a)h(predicate.)44 b(It)39 b(is)h(easy)357
4412 y(to)46 b(do)h(so)f(using)g Fs(functor/3)m Fw(.)63
b(All)47 b(we)g(ha)n(v)o(e)f(to)h(do)f(is)h(to)g(check)f(that)g(there)
357 4511 y(is)f(a)g(suitable)f(functor)m(,)g(and)g(that)g(the)h(input)e
(has)i(ar)o(guments)e(\(that)h(is,)i(that)f(its)357 4611
y(arity)40 b(is)i(greater)e(than)h(zero\).)j(Here)d(is)h(the)f
(de\002nition:)522 4803 y Fs(complexterm\(X\):-)647 4902
y(nonvar\(X\),)647 5002 y(functor\(X,_,A\),)647 5102
y(A)g(>)g(0.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 172 184
TeXDict begin 172 183 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(172)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(So)48 b(much)e(for)h(functors)f(\227)i(what)f
(about)g(ar)o(guments?)63 b(In)47 b(addition)f(to)h(the)806
1151 y(predicate)35 b Fs(functor/3)m Fw(,)j(Prolog)e(supplies)h(us)g
(with)g(the)h(predicate)d Fs(arg/3)h Fw(which)806 1250
y(tells)51 b(us)f(about)f(the)h(ar)o(guments)e(of)i(comple)o(x)e
(terms.)73 b(It)50 b(tak)o(es)h(a)f(number)f Ft(N)806
1350 y Fw(and)c(a)h(comple)o(x)e(term)h Ft(T)53 b Fw(and)45
b(returns)f(the)i Ft(Nth)g Fw(ar)o(gument)e(of)h Ft(T)53
b Fw(in)45 b(its)i(third)806 1449 y(ar)o(gument.)c(It)e(can)g(be)g
(used)f(to)h(access)h(the)f(v)n(alue)f(of)h(an)g(ar)o(gument)971
1618 y Fs(?-)g(arg\(2,loves\(vin)o(cen)o(t,)o(mi)o(a\),)o(X\))o(.)971
1718 y(X)g(=)g(mia)971 1818 y(yes)806 1987 y Fw(or)f(to)h(instantiate)g
(an)g(ar)o(gument)971 2156 y Fs(?-)g(arg\(2,loves\(vin)o(cen)o(t,)o
(X\))o(,mi)o(a\))o(.)971 2255 y(X)g(=)g(mia)971 2355
y(yes)806 2524 y Fw(T)m(rying)e(to)i(access)h(an)f(ar)o(gument)d(which)
j(doesn')o(t)e(e)o(xist,)i(of)g(course,)f(f)o(ails:)971
2693 y Fs(?-)h(arg\(2,happy\(yol)o(and)o(a\))o(,X)o(\).)971
2793 y(no)900 2962 y Fw(The)c(predicates)g Fs(functor/3)e
Fw(and)i Fs(arg/3)f Fw(allo)n(w)h(us)h(to)g(access)g(all)h(the)e(basic)
806 3061 y(information)c(we)k(need)f(to)g(kno)n(w)g(about)f(comple)o(x)
g(terms.)44 b(Ho)n(we)n(v)o(er)35 b(Prolog)g(also)806
3161 y(supplies)50 b(a)h(third)f(b)n(uilt-in)g(predicate)f(for)h
(analysing)f(term)i(structure,)h(namely)806 3260 y Fs('=..'/2)m
Fw(.)79 b(This)52 b(tak)o(es)g(a)g(comple)o(x)e(term)i(and)f(returns)g
(a)h(list)h(that)f(has)g(the)806 3360 y(functor)35 b(as)k(its)f(head,)g
(and)f(then)g(all)h(the)g(ar)o(guments,)e(in)h(order)m(,)g(as)h(the)g
(elements)806 3460 y(of)i(the)h(tail.)46 b(So)c(to)f(the)g(query)971
3629 y Fs(?-)g('=..'\(loves\(vin)o(cen)o(t,)o(mi)o(a\),)o(X\))806
3798 y Fw(Prolog)e(will)j(respond)971 3967 y Fs(X)f(=)g
([loves,vincent,m)o(ia])806 4136 y Fw(This)58 b(predicate)g(\(which)f
(is)j(called)e(uni)n(v\))g(can)g(also)h(be)g(used)f(as)h(an)g(in\002x)
806 4235 y(operator)-5 b(.)63 b(Here)47 b(are)g(some)g(e)o(xamples)f
(sho)n(wing)g(v)n(arious)g(w)o(ays)h(of)g(using)g(this)806
4335 y(\(v)o(ery)39 b(useful\))h(tool:)971 4504 y Fs(?-)h
(cause\(vincent,d)o(ead)o(\(z)o(ed)o(\)\))35 b(=..)40
b(X.)971 4604 y(X)h(=)g([cause,)e(vincent,)f(dead\(zed\)])971
4703 y(yes)971 4902 y(?-)j(X)g(=..)f([a,b\(c\),d].)971
5002 y(X)h(=)g(a\(b\(c\),)e(d\))971 5102 y(yes)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 173 185
TeXDict begin 173 184 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(173)p 0 TeXcolorgray 522 1151 a Fs(?-)41
b(footmassage\(Y,mi)o(a\))35 b(=..)40 b(X.)522 1250 y(Y)h(=)g(_G303)522
1350 y(X)g(=)g([footmassage,)36 b(_G303,)j(mia])522 1449
y(yes)451 1626 y Fw(Uni)n(v)f(really)f(comes)h(into)g(its)h(o)n(wn)e
(when)h(something)e(has)j(to)f(be)g(done)f(to)h(all)357
1726 y(ar)o(guments)k(of)j(a)g(comple)o(x)e(term.)56
b(Since)45 b(it)g(returns)f(the)h(ar)o(guments)d(as)k(a)f(list,)357
1826 y(normal)39 b(list)j(processing)e(strate)o(gies)h(can)g(be)f(used)
h(to)g(tra)n(v)o(erse)g(the)g(ar)o(guments.)357 1989
y Fv(Strings)357 2116 y Fw(Strings)46 b(are)g(represented)f(in)h
(Prolog)g(by)g(a)h(list)g(of)f(character)f(\(ASCII\))h(codes.)357
2215 y(Ho)n(we)n(v)o(er)m(,)k(it)g(w)o(ould)f(be)h(a)g(right)g(k)o
(erfuf)n(\003e)e(to)i(use)g(list)h(notation)d(for)i(simple)357
2315 y(string)k(manipulation,)h(so)f(Prolog)g(also)g(of)n(fers)g(a)g
(user)n(-friendly)e(notation)h(for)357 2414 y(strings:)46
b(double)39 b(quotes.)45 b(T)m(ry)c(the)g(follo)n(wing)e(query:)522
2612 y Fs(?-)i(S)g(=)g("Vicky".)522 2711 y(S)g(=)g([86,)f(105,)g(99,)g
(107,)g(121])522 2811 y(yes)357 3008 y Fw(Here)52 b(the)h(v)n(ariable)f
Fs(S)h Fw(uni\002es)g(with)g(the)g(string)g Fs("Vicky")p
Fw(,)g(which)f(is)i(a)g(list)357 3108 y(containing)39
b(of)i(\002)n(v)o(e)g(numbers,)f(each)h(of)g(them)f(corresponding)e(to)
k(the)f(character)357 3207 y(codes)f(of)h(the)h(single)f(characters)f
(the)h(strings)g(is)h(composed)e(of.)46 b(\(F)o(or)40
b(instance,)357 3307 y(86)48 b(is)h(the)g(character)f(code)f(for)h(the)
h(character)f(V)-11 b(,)49 b(105)e(is)j(the)f(code)f(for)g(the)357
3407 y(character)39 b(i,)j(and)e(so)h(on.\))451 3510
y(In)36 b(other)g(w)o(ords,)g(strings)h(in)f(Prolog)f(are)h(actually)g
(lists)i(of)e(numbers.)42 b(Se)n(v)o(eral)357 3609 y(standard)h
(predicates)h(are)g(supported)e(by)i(most)h(Prolog)e(dialects)i(to)g(w)
o(ork)f(with)357 3709 y(strings.)98 b(A)59 b(particularly)d(useful)i
(one)g(is)i Fs(atom)p 1995 3709 27 4 v 29 w(codes/2)p
Fw(.)96 b(This)59 b(predicate)357 3809 y(con)m(v)o(erts)45
b(an)h(atom)g(into)g(a)h(string.)63 b(The)46 b(follo)n(wing)f(e)o
(xamples)g(illustrate)i(what)357 3908 y Fs(atom)p 538
3908 V 29 w(codes/2)39 b Fw(can)i(do)f(for)h(you:)522
4105 y Fs(?-)g(atom_codes\(vicky)o(,X)o(\).)522 4205
y(X)g(=)g([118,)f(105,)g(99,)g(107,)g(121])522 4305 y(yes)522
4504 y(?-)h(atom_codes\('Vick)o(y')o(,X)o(\).)522 4604
y(X)g(=)g([86,)f(105,)g(99,)g(107,)g(121])522 4703 y(yes)522
4902 y(?-)h(atom_codes\('Vick)o(y)35 b(Pollard',X\).)522
5002 y(X)41 b(=)g([86,)f(105,)g(99,)g(107,)g(121,)g(32,)g(80,)g(111,)g
(108|...])522 5102 y(yes)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 174 186
TeXDict begin 174 185 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(174)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(It)h(also)h(w)o(orks)f(the)g(other)f(w)o(ay)h
(around:)k Fs(atom)p 2428 1051 27 4 v 30 w(codes/2)38
b Fw(can)j(also)h(be)f(used)806 1151 y(to)g(generate)g(atoms)g(from)g
(strings.)48 b(Suppose)40 b(you)h(w)o(ant)h(to)g(duplicate)e(an)i(atom)
806 1250 y Fs(abc)e Fw(into)g(the)h(atom)g(abcabc.)k(This)c(is)h(ho)n
(w)e(you)g(could)g(do)h(it:)971 1432 y Fs(?-)g(atom_codes\(abc,)o(X\),)
35 b(append\(X,X,L\),)g(atom_codes\(N,L\).)971 1632 y(X)41
b(=)g([97,)f(98,)g(99])971 1731 y(L)h(=)g([97,)f(98,)g(99,)g(97,)h(98,)
f(99])971 1831 y(N)h(=)g(abcabc)900 2013 y Fw(One)j(last)i(thing)d(you)
h(need)g(to)g(kno)n(w)g(about)f(the)i Fs(atom)p 2725
2013 V 30 w(codes/2)d Fw(predicate)806 2113 y(is)78 b(that)g(it)h(is)g
(related)f(to)g(another)e(other)h(b)n(uilt-in)h(predicate,)86
b(namely)806 2212 y Fs(number)p 1075 2212 V 28 w(codes/2)p
Fw(.)59 b(This)46 b(predicate)f(beha)n(v)o(es)g(in)h(a)g(similar)g(w)o
(ay)-5 b(,)47 b(b)n(ut,)g(as)f(the)806 2312 y(names)40
b(suggest,)g(only)h(w)o(orks)f(for)g(numbers.)806 2503
y Fk(4)99 b(Operators)806 2632 y Fw(As)63 b(we)g(ha)n(v)o(e)f(seen,)68
b(in)63 b(certain)f(cases)h(\(for)f(e)o(xample,)k(when)c(performing)806
2732 y(arithmetic\))29 b(Prolog)g(lets)i(us)g(use)f(operator)f
(notations)g(that)h(are)g(more)g(user)n(-friendly)806
2832 y(than)56 b(its)j(o)n(wn)e(internal)f(representations.)94
b(Indeed,)60 b(as)e(we)f(shall)h(no)n(w)f(see,)806 2931
y(Prolog)36 b(e)n(v)o(en)g(has)i(a)f(mechanism)f(for)h(letting)g(us)h
(de\002ne)f(our)f(o)n(wn)h(operators.)43 b(In)806 3031
y(this)h(section)f(we')o(ll)h(\002rst)h(tak)o(e)f(a)g(closer)f(look)g
(at)i(the)e(properties)g(of)g(operators,)806 3130 y(and)d(then)g(learn)
h(ho)n(w)f(to)h(de\002ne)g(our)f(o)n(wn.)806 3286 y Fv(Pr)o(operties)f
(of)i(operators)806 3408 y Fw(Let')-5 b(s)44 b(start)h(with)g(an)f(e)o
(xample)f(from)g(arithmetic.)55 b(Internally)-5 b(,)42
b(Prolog)i(uses)g(the)806 3508 y(e)o(xpression)33 b Fs
(is\(11,+\(2,*\(3,3\))o(\)\))-7 b Fw(,)37 b(b)n(ut)e(we)g(are)g(free)f
(to)h(write)g(the)g(functors)e Fs(*)806 3607 y Fw(and)h
Fs(+)i Fw(between)f(their)g(ar)o(guments,)f(to)i(form)f(the)g(more)g
(user)n(-friendly)e(e)o(xpression)806 3707 y Fs(11)40
b(is)h(2)g(+)g(3)g(*)g(3)p Fw(.)k(Functors)38 b(that)h(can)f(be)g
(written)h(between)e(their)i(ar)o(guments)806 3807 y(are)47
b(called)g(in\002x)h(operators.)64 b(Other)47 b(e)o(xamples)f(of)h
(in\002x)h(operators)e(in)i(Prolog)806 3906 y(are)56
b Fs(:-)o Fw(,)61 b Fs(-->)o Fw(,)g Fs(;)p Fw(,)g Fs(',')o
Fw(,)g Fs(=)o Fw(,)g Fs(=..)o Fw(,)g Fs(==)c Fw(and)f(so)h(on.)93
b(In)56 b(addition)g(to)h(in\002x)806 4006 y(operators)43
b(there)h(are)h(also)g(pre\002x)f(operators)g(\(which)g(are)h(written)f
(before)g(their)806 4105 y(ar)o(guments\))39 b(and)i(post\002x)h
(operators)e(\(which)h(are)h(written)g(after\).)48 b(F)o(or)41
b(e)o(xample,)806 4205 y Fs(?-)51 b Fw(is)i(a)g(pre\002x)e(operator)m
(,)i(and)e(so)h(is)h(the)g(one-place)d Fs(-)i Fw(which)g(is)h(used)e
(to)806 4305 y(represent)56 b(ne)o(gati)n(v)o(e)g(numbers)g(\(as)i(in)g
Fs(1)41 b(is)g(3)g(+)g(-2)o Fw(\).)96 b(An)58 b(e)o(xample)f(of)g(a)806
4404 y(post\002x)40 b(operator)f(is)i(the)g Fs(++)g Fw(notation)e(used)
i(in)g(the)f(C)i(programming)37 b(language)806 4504 y(to)k(increment)e
(the)i(v)n(alue)f(of)h(a)g(v)n(ariable.)900 4604 y(When)55
b(we)i(learned)d(about)h(arithmetic)g(in)h(Prolog,)i(we)e(sa)o(w)g
(that)g(Prolog)806 4703 y(kno)n(ws)48 b(about)g(the)i(con)m(v)o
(entions)c(for)j(disambiguating)e(arithmetic)h(e)o(xpressions.)806
4803 y(So)34 b(when)g(we)h(write)f Fs(2)41 b(+)g(3)g(*)g(3)p
Fw(,)36 b(Prolog)d(kno)n(ws)h(that)g(we)h(mean)f Fs(2)41
b(+)g(\(3)g(*)g(3\))806 4902 y Fw(and)59 b(not)g Fs(\(2)41
b(+)g(3\))g(*)g(3)p Fw(.)103 b(But)60 b(ho)n(w)g(does)f(Prolog)g(kno)n
(w)g(this?)103 b(Because)806 5002 y(e)n(v)o(ery)63 b(operator)f(has)j
(a)g(certain)f(precedence.)114 b(The)64 b(precedence)f(of)h
Fs(+)h Fw(is)806 5102 y(greater)44 b(than)i(the)g(precedence)e(of)h
Fs(*)p Fw(,)i(and)f(that')-5 b(s)46 b(why)f Fs(+)h Fw(is)h(tak)o(en)f
(to)g(be)f(the)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 175 187
TeXDict begin 175 186 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(175)p 0 TeXcolorgray 357 1051 a(main)44
b(functor)f(of)h(the)h(e)o(xpression)e Fs(2)e(+)g(3)g(*)g(3)p
Fw(.)57 b(\(Note)45 b(that)f(Prolog')-5 b(s)44 b(internal)357
1151 y(representation)35 b Fs(+\(2,*\(3,3\)\))f Fw(is)k(not)g
(ambiguous.\))k(Similarly)-5 b(,)37 b(the)h(precedence)357
1250 y(of)69 b Fs(is)g Fw(is)i(higher)d(than)h(the)h(precedence)d(of)i
Fs(+)p Fw(,)77 b(so)70 b Fs(11)40 b(is)h(2)g(+)g(3)g(*)h(3)357
1350 y Fw(is)61 b(interpreted)e(as)j Fs(is\(11,+\(2,*\(3,3\))o(\)\))55
b Fw(and)60 b(not)g(as)i(the)e(\(nonsensical\))357 1449
y(e)o(xpression)38 b Fs(+\(is\(11,2\),*\(3,3\))o(\))-6
b Fw(.)46 b(In)39 b(Prolog,)g(precedence)f(is)j(e)o(xpressed)e(by)357
1549 y(a)46 b(number)e(between)h(0)h(and)g(1200;)h(the)f(higher)e(the)i
(number)m(,)f(the)h(greater)f(the)357 1649 y(precedence.)70
b(T)-7 b(o)50 b(gi)n(v)o(e)f(some)g(e)o(xamples,)i(the)f(precedence)e
(of)h Fs(=)h Fw(is)h(700,)g(the)357 1748 y(precedence)39
b(of)h Fs(+)h Fw(is)h(500,)e(and)g(the)h(precedence)e(of)i
Fs(*)g Fw(is)h(400.)451 1848 y(What)72 b(happens)d(when)i(there)f(are)h
(se)n(v)o(eral)g(operators)e(with)i(the)h(same)357 1948
y(precedence)c(in)j(one)f(e)o(xpression?)133 b(W)-7 b(e)72
b(said)f(abo)o(v)o(e)d(that)j(Prolog)f(\002nds)357 2047
y(the)c(query)f Fs(2)41 b(=:=)f(3)h(==)g(=:=\(2,3\))63
b Fw(confusing.)120 b(It)66 b(doesn')o(t)f(kno)n(w)g(ho)n(w)357
2147 y(to)g(brack)o(et)f(the)h(e)o(xpression:)93 b(Is)65
b(it)h Fs(=:=\(2,==\(3,=:=\(2,)o(3\))o(\)\))59 b Fw(or)65
b(is)h(it)357 2246 y Fs(==\(=:=\(2,3\),=:=)o(\(2,)o(3\))o(\))-6
b Fw(?)56 b(The)44 b(reason)g(Prolog)f(is)i(not)f(able)g(to)h(decide)e
(on)357 2346 y(the)c(correct)g(brack)o(eting)e(is)k(because)e
Fs(==)g Fw(and)g Fs(=:=)g Fw(ha)n(v)o(e)g(the)g(same)h(precedence.)357
2446 y(In)g(such)h(cases,)g(e)o(xplicit)g(brack)o(etings)e(must)i(be)g
(supplied)f(by)g(the)h(programmer)-5 b(.)451 2545 y(What)42
b(about)d(the)i(follo)n(wing)f(query)f(though?)522 2704
y Fs(?-)i(X)g(is)g(2)g(+)g(3)g(+)g(4.)357 2862 y Fw(Does)50
b(Prolog)f(\002nd)g(this)i(confusing?)71 b(Not)50 b(at)g(all:)65
b(it)50 b(deals)g(with)g(it)h(happily)357 2962 y(and)45
b(correctly)f(answers)h Fs(X)c(=)g(9)p Fw(.)60 b(But)45
b(which)g(brack)o(eting)f(did)h(Prolog)f(choose:)357
3062 y Fs(is\(X,+\(2,+\(3,4\))o(\)\))35 b Fw(or)41 b
Fs(is\(X,+\(+\(2,3\),4\)\))-7 b Fw(?)48 b(As)42 b(the)f(follo)n(wing)e
(queries)357 3161 y(sho)n(w)-5 b(,)40 b(it)h(chose)g(the)g(second:)522
3334 y Fs(?-)g(2)g(+)g(3)g(+)g(4)g(=)g(+\(2,+\(3,4\)\).)522
3434 y(no)522 3534 y(?-)g(2)g(+)g(3)g(+)g(4)g(=)g(+\(+\(2,3\),4\).)522
3633 y(yes)451 3807 y Fw(Here)58 b(Prolog)g(has)h(used)f(information)e
(about)h(the)i(associati)n(vity)f(of)g Fs(+)h Fw(to)357
3906 y(disambiguate:)c Fs(+)47 b Fw(is)g(left)g(associati)n(v)o(e,)g
(which)f(means)g(that)g(the)h(e)o(xpression)e(to)357
4006 y(the)55 b(right)f(of)h Fs(+)g Fw(must)g(ha)n(v)o(e)f(a)h(lo)n
(wer)g(precedence)e(than)h Fs(+)h Fw(itself,)k(whereas)357
4105 y(the)51 b(e)o(xpression)e(on)i(the)g(left)g(may)f(ha)n(v)o(e)h
(the)g(same)g(precedence)d(as)k Fs(+)p Fw(.)76 b(The)357
4205 y(precedence)62 b(of)j(an)g(e)o(xpression)e(is)j(simply)e(the)h
(precedence)e(of)h(its)i(main)357 4305 y(operator)m(,)38
b(or)i(0)g(if)g(it)h(is)g(enclosed)e(in)i(brack)o(ets.)k(The)39
b(main)h(operator)e(of)i Fs(3)h(+)h(4)357 4404 y Fw(is)j
Fs(+)p Fw(,)g(so)g(that)f(interpreting)e Fs(2)f(+)g(3)g(+)h(4)i
Fw(as)h Fs(+\(2,+\(3,4\)\))40 b Fw(w)o(ould)k(mean)g(that)357
4504 y(the)f(e)o(xpression)e(to)i(the)g(right)f(of)h(the)f(\002rst)i
Fs(+)f Fw(has)g(the)g(same)g(precedence)e(as)j Fs(+)357
4604 y Fw(itself,)d(which)f(is)i(ille)o(gal.)j(It)d(has)f(to)g(be)g(lo)
n(wer)-5 b(.)451 4703 y(The)56 b(operators)f Fs(==)o
Fw(,)61 b Fs(=:=)n Fw(,)g(and)56 b Fs(is)g Fw(are)g(de\002ned)f(to)i
(be)f(non-associati)n(v)o(e,)357 4803 y(which)36 b(means)h(that)g(both)
f(of)g(their)h(ar)o(guments)e(must)i(ha)n(v)o(e)f(a)i(lo)n(wer)e
(precedence.)357 4902 y(Therefore)65 b Fs(2)41 b(=:=)f(3)i(==)e
(=:=\(2,3\))65 b Fw(is)k(an)e(ille)o(gal)g(e)o(xpression,)72
b(since)c(no)357 5002 y(matter)43 b(ho)n(w)g(you)g(brack)o(et)g(it)h
(you')o(ll)f(get)h(a)g(con\003ict:)51 b Fs(2)42 b(=:=)e(3)k
Fw(has)g(the)g(same)357 5102 y(precedence)36 b(as)j Fs(==)o
Fw(,)g(and)f Fs(3)j(==)g(=:=\(2,3\))35 b Fw(has)k(the)f(same)g
(precedence)f(as)i Fs(=:=)n Fw(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 176 188
TeXDict begin 176 187 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(176)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(The)h(type)f(of)h(an)g(operator)e(\(in\002x,)
h(pre\002x,)g(or)h(post\002x\),)e(its)j(precedence,)d(and)806
1151 y(its)d(associati)n(vity)g(are)f(the)h(three)f(things)h(that)f
(Prolog)g(needs)g(to)h(kno)n(w)f(to)h(be)g(able)806 1250
y(to)51 b(translate)h(user)n(-friendly)d(\(b)n(ut)i(potentially)g
(ambiguous\))e(operator)h(notations)806 1350 y(into)40
b(Prolog')-5 b(s)41 b(internal)f(representation.)806
1568 y Fv(De\002ning)h(operators)806 1728 y Fw(In)58
b(addition)g(to)h(pro)o(viding)d(a)j(user)n(-friendly)e(operator)g
(notation)h(for)g(certain)806 1828 y(functors,)39 b(Prolog)i(also)g
(lets)i(you)d(de\002ne)h(your)f(o)n(wn)h(operators.)46
b(So)41 b(you)g(could,)806 1927 y(for)59 b(e)o(xample,)k(de\002ne)c(a)i
(post\002x)e(operator)g Fs(is_dead)m Fw(;)70 b(then)59
b(Prolog)g(w)o(ould)806 2027 y(allo)n(w)44 b(you)g(to)h(write)f
Fs(zed)d(is_dead)h Fw(as)j(a)g(f)o(act)g(in)g(your)e(database)h
(instead)h(of)806 2127 y Fs(is_dead\(zed\))-5 b Fw(.)900
2256 y(Operator)40 b(de\002nitions)g(in)h(Prolog)f(look)g(lik)o(e)h
(this:)971 2511 y Fs(:-)g(op\(Precedence,T)o(ype)o(,N)o(am)o(e\).)806
2766 y Fw(As)k(we)g(mentioned)e(abo)o(v)o(e,)g(precedence)g(is)j(a)f
(number)d(between)i(0)h(and)f(1200,)806 2865 y(and)c(the)h(higher)e
(the)i(number)m(,)d(the)j(greater)f(the)h(precedence.)i(T)-7
b(ype)40 b(is)i(an)f(atom)806 2965 y(specifying)k(the)i(type)f(and)g
(associati)n(vity)h(of)f(the)h(operator)-5 b(.)62 b(In)47
b(the)g(case)g(of)f Fs(+)806 3065 y Fw(this)37 b(atom)f(is)i
Fs(yfx)o Fw(,)f(which)g(says)g(that)g Fs(+)g Fw(is)g(an)g(in\002x)f
(operator;)h(the)g Fs(f)f Fw(represents)806 3164 y(the)42
b(operator)m(,)e(and)i(the)h Fs(x)f Fw(and)g Fs(y)h Fw(the)f(ar)o
(guments.)48 b(Furthermore,)40 b Fs(x)j Fw(stands)f(for)806
3264 y(an)37 b(ar)o(gument)f(which)h(has)h(a)g(precedence)d(which)j(is)
g(lo)n(wer)g(than)f(the)h(precedence)806 3363 y(of)g
Fs(+)h Fw(and)g Fs(y)g Fw(stands)g(for)f(an)h(ar)o(gument)e(which)h
(has)h(a)h(precedence)d(which)h(lo)n(wer)806 3463 y(or)48
b(equal)g(to)h(the)g(precedence)d(of)j Fs(+)o Fw(.)70
b(There)48 b(are)g(the)h(follo)n(wing)e(possibilities)806
3563 y(for)40 b(type:)p 0 TeXcolorgray 0 TeXcolorgray
1700 3844 a(in\002x)140 b Fs(xfx)o Fw(,)41 b Fs(xfy)o
Fw(,)g Fs(yfx)1700 3943 y Fw(pre\002x)98 b Fs(fx)o Fw(,)41
b Fs(fy)1700 4043 y Fw(suf)n(\002x)105 b Fs(xf)o Fw(,)41
b Fs(yf)900 4293 y Fw(So)g(your)f(operator)f(de\002nition)h(for)g
Fs(is_dead)f Fw(might)h(be)h(as)h(follo)n(ws:)971 4548
y Fs(:-)f(op\(500,)d(xf,)i(is_dead\).)900 4803 y Fw(Here)46
b(are)f(the)h(de\002nitions)f(for)g(some)h(of)g(the)f(b)n(uilt-in)h
(operators.)58 b(Y)-9 b(ou)46 b(can)806 4902 y(see)57
b(that)g(operators)f(with)h(the)g(same)h(properties)d(can)i(be)g
(speci\002ed)g(in)g(one)806 5002 y(statement)43 b(by)g(gi)n(ving)f(a)i
(list)g(of)f(their)g(names)g(\(instead)g(of)g(a)h(single)f(name\))g(as)
806 5102 y(the)d(third)h(ar)o(gument)d(of)j Fs(op)o Fw(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 177 189
TeXDict begin 177 188 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(177)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
680 1038 a Fs(:-)41 b(op\()f(1200,)g(xfx,)g([)h(:-,)f(-->)g(]\).)680
1137 y(:-)h(op\()f(1200,)81 b(fx,)41 b([)g(:-,)f(?-)h(]\).)680
1237 y(:-)g(op\()f(1100,)g(xfy,)g([)h(;)g(]\).)680 1336
y(:-)g(op\()f(1000,)g(xfy,)g([)h(',')f(]\).)680 1436
y(:-)h(op\()82 b(700,)40 b(xfx,)g([)h(=,)f(is,)h(=..,)e(==,)i(\\==,)
1511 1536 y(=:=,)e(=\\=,)h(<,)h(>,)g(=<,)f(>=)h(]\).)680
1635 y(:-)g(op\()82 b(500,)40 b(yfx,)g([)h(+,)f(-]\).)680
1735 y(:-)h(op\()82 b(500,)f(fx,)40 b([)i(+,)e(-)h(]\).)680
1835 y(:-)g(op\()82 b(300,)40 b(xfx,)g([)h(mod)f(]\).)680
1934 y(:-)h(op\()82 b(200,)40 b(xfy,)g([)h(^)g(]\).)451
2122 y Fw(One)34 b(\002nal)g(point)f(should)f(made)h(e)o(xplicit.)43
b(Operator)32 b(de\002nitions)h(don')o(t)f(specify)357
2222 y(the)52 b Ft(meanings)f Fw(of)h(operators,)i(the)o(y)e(only)f
(describe)h(ho)n(w)g(the)o(y)f(can)i(be)f(used)357 2322
y(syntactically)-5 b(.)59 b(That)46 b(is,)i(an)d(operator)g
(de\002nition)f(doesn')o(t)h(say)h(an)o(ything)e(about)357
2421 y(when)52 b(a)h(query)f(in)m(v)n(olving)e(this)k(operator)d(will)i
(e)n(v)n(aluate)f(to)h(true,)i(it)f(merely)357 2521 y(e)o(xtends)42
b(the)g Ft(syntax)h Fw(of)g(Prolog.)50 b(So)44 b(if)f(the)g(operator)e
Fs(is_dead)f Fw(is)k(de\002ned)e(as)357 2621 y(abo)o(v)o(e,)52
b(and)f(you)g(pose)g(the)h(query)e Fs(zed)40 b(is_dead)m
Fw(,)55 b(Prolog)c(w)o(on')o(t)f(complain)357 2720 y(about)42
b(ille)o(gal)i(syntax)f(\(as)h(it)g(w)o(ould)f(without)g(this)i
(de\002nition\))d(b)n(ut)i(will)g(try)g(to)357 2820 y(pro)o(v)o(e)f
(the)i(goal)f Fs(is_dead\(zed\))-5 b Fw(,)46 b(which)f(is)g(Prolog')-5
b(s)45 b(internal)f(representation)357 2919 y(of)37 b
Fs(zed)k(is_dead)m Fw(.)k(And)37 b(this)i(is)g(all)f(operator)e
(de\002nitions)h(do)h(\227)g(the)o(y)g(just)g(tell)357
3019 y(Prolog)f(ho)n(w)g(to)h(translate)g(a)h(user)n(-friendly)d
(notation)g(into)i(real)g(Prolog)f(notation.)357 3119
y(So,)60 b(what)d(w)o(ould)f(be)g(Prolog')-5 b(s)56 b(answer)g(to)h
(the)g(query)e Fs(zed)40 b(is_dead)m Fw(?)93 b(It)357
3218 y(w)o(ould)50 b(be)h Fs(no)p Fw(,)j(because)c(Prolog)g(w)o(ould)h
(try)g(to)g(pro)o(v)o(e)f Fs(is_dead\(zed\))-5 b Fw(,)54
b(b)n(ut)357 3318 y(w)o(ould)48 b(not)g(\002nd)h(an)o(y)f(matching)f
(clause)i(in)g(the)g(database.)69 b(But)49 b(suppose)f(we)357
3418 y(e)o(xtended)39 b(the)i(database)f(as)i(follo)n(ws:)522
3591 y Fs(:-)f(op\(500,)d(xf,)j(is_dead\).)522 3791 y
(kill\(marsellus,z)o(ed\))o(.)522 3890 y(is_dead\(X\))c(:-)k
(kill\(_,X\).)357 4064 y Fw(No)n(w)g(Prolog)e(w)o(ould)i(answer)f
Fs(yes)h Fw(to)g(the)g(query)-5 b(.)357 4264 y Fk(5)99
b(Exer)n(cises)357 4430 y Fv(Exer)o(cise)40 b(9.1.)95
b Fw(Which)41 b(of)g(the)g(follo)n(wing)e(queries)h(succeed,)g(and)h
(which)f(f)o(ail?)p 0 TeXcolorgray 3286 4337 118 4 v
3286 4455 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 3290 4455 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 359 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0
TeXcolorgray 3401 4455 4 118 v 3286 4458 118 4 v 0 TeXcolorgray
522 4604 a Fs(?-)h(12)f(is)h(2*6.)522 4803 y(?-)g(14)f(=\\=)h(2*6.)522
5002 y(?-)g(14)f(=)i(2*7.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 178 190
TeXDict begin 178 189 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(178)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(?-)h(14)f(==)h(2*7.)971
1250 y(?-)g(14)f(\\==)h(2*7.)971 1449 y(?-)g(14)f(=:=)h(2*7.)971
1649 y(?-)g([1,2,3|[d,e]])36 b(==)k([1,2,3,d,e].)971
1848 y(?-)h(2+3)f(==)h(3+2.)971 2047 y(?-)g(2+3)f(=:=)g(3+2.)971
2246 y(?-)h(7-2)f(=\\=)g(9-2.)971 2446 y(?-)h(p)g(==)f('p'.)971
2645 y(?-)h(p)g(=\\=)f('p'.)971 2844 y(?-)h(vincent)d(==)j(VAR.)971
3043 y(?-)g(vincent=VAR,)36 b(VAR==vincent.)806 3350
y Fv(Exer)o(cise)k(9.2.)95 b Fw(Ho)n(w)41 b(does)g(Prolog)f(respond)f
(to)i(the)g(follo)n(wing)e(queries?)p 0 TeXcolorgray
357 3257 118 4 v 357 3375 4 118 v 0 0 0 0.05 TeXcolorcmyk
0 0 0 0.05 TeXcolorcmyk 361 3375 112 118 v 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray -2832 w Fi(E)p 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray 471 3375 4 118 v 357 3378
118 4 v 0 TeXcolorgray 971 3525 a Fs(?-)i(.\(a,.\(b,.\(c,[]\))o(\)\))35
b(=)41 b([a,b,c].)971 3724 y(?-)g(.\(a,.\(b,.\(c,[]\))o(\)\))35
b(=)41 b([a,b|[c]].)971 3923 y(?-)g(.\(.\(a,[]\),.\(.\(b)o(,[])o(\),)o
(.\()o(.\(c)o(,[)o(]\),)o([])o(\)\))o(\))36 b(=)41 b(X.)971
4122 y(?-)g(.\(a,.\(b,.\(.\(c,[)o(]\),)o([])o(\)\))o(\))36
b(=)41 b([a,b|[c]].)806 4330 y Fv(Exer)o(cise)i(9.3.)101
b Fw(Write)44 b(a)g(tw)o(o-place)e(predicate)g Fs(termtype\(Term,Typ)o
(e\))37 b Fw(that)p 0 TeXcolorgray 357 4237 V 357 4355
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
361 4355 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
-3019 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
471 4355 4 118 v 357 4358 118 4 v 0 TeXcolorgray 806
4429 a Fw(tak)o(es)51 b(a)h(term)g(and)f(gi)n(v)o(es)g(back)f(the)i
(type\(s\))f(of)g(that)g(term)h(\(atom,)h(number)m(,)806
4529 y(constant,)46 b(v)n(ariable,)h(and)e(so)i(on\).)61
b(The)46 b(types)h(should)e(be)h(gi)n(v)o(en)f(back)h(in)g(the)806
4629 y(order)e(of)i(their)g(generality)-5 b(.)59 b(The)45
b(predicate)g(should)g(beha)n(v)o(e)g(in)h(the)g(follo)n(wing)806
4728 y(w)o(ay)-5 b(.)971 4902 y Fs(?-)41 b(termtype\(Vincen)o(t,v)o(ar)
o(ia)o(ble)o(\).)971 5002 y(yes)971 5102 y(?-)g(termtype\(mia,X\))o(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 179 191
TeXDict begin 179 190 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(179)p 0 TeXcolorgray 522 1051 a Fs(X)41
b(=)g(atom)f(;)522 1151 y(X)h(=)g(constant)d(;)522 1250
y(X)j(=)g(simple_term)c(;)522 1350 y(X)k(=)g(term)f(;)522
1449 y(no)522 1549 y(?-)h(termtype\(dead\(ze)o(d\))o(,X)o(\).)522
1649 y(X)g(=)g(complex_term)c(;)522 1748 y(X)k(=)g(term)f(;)522
1848 y(no)357 2044 y Fv(Exer)o(cise)63 b(9.4.)164 b Fw(Write)65
b(a)f(Prolog)f(program)f(that)i(de\002nes)g(the)g(predicate)p
0 TeXcolorgray 3286 1951 118 4 v 3286 2069 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 3290 2069 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 357 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401 2069 4 118
v 3286 2072 118 4 v 0 TeXcolorgray 357 2144 a Fs(groundterm\(Term)o(\))
37 b Fw(which)43 b(tests)h(whether)d(or)i(not)f Fs(Term)g
Fw(is)h(a)h(ground)c(term.)357 2244 y(Ground)g(terms)j(are)f(terms)h
(that)f(don')o(t)f(contain)h(v)n(ariables.)49 b(Here)42
b(are)h(e)o(xamples)357 2343 y(of)d(ho)n(w)h(the)g(predicate)f(should)f
(beha)n(v)o(e:)522 2506 y Fs(?-)i(groundterm\(X\).)522
2606 y(no)522 2706 y(?-)g(groundterm\(frenc)o(h\()o(bi)o(c_m)o(ac)o
(,le)o(_b)o(ic)o(_ma)o(c\))o(\).)522 2805 y(yes)522 2905
y(?-)g(groundterm\(frenc)o(h\()o(wh)o(opp)o(er)o(,X\))o(\).)522
3004 y(no)357 3201 y Fv(Exer)o(cise)f(9.5.)95 b Fw(Assume)41
b(that)g(we)h(ha)n(v)o(e)e(the)h(follo)n(wing)e(operator)g
(de\002nitions.)p 0 TeXcolorgray 3286 3108 V 3286 3226
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
3290 3226 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
392 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401
3226 4 118 v 3286 3229 118 4 v 0 TeXcolorgray 522 3364
a Fs(:-)i(op\(300,)d(xfx,)i([are,)g(is_a]\).)522 3464
y(:-)h(op\(300,)d(fx,)j(likes\).)522 3563 y(:-)g(op\(200,)d(xfy,)i
(and\).)522 3663 y(:-)h(op\(100,)d(fy,)j(famous\).)357
3826 y Fw(Which)56 b(of)g(the)g(follo)n(wing)f(are)h(well-formed)e
(terms?)92 b(What)57 b(are)f(the)g(main)357 3926 y(operators?)44
b(Gi)n(v)o(e)d(the)g(brack)o(etings.)522 4105 y Fs(X)g(is_a)f(witch)522
4204 y(harry)f(and)i(ron)f(and)g(hermione)e(are)j(friends)522
4304 y(harry)e(is_a)h(wizard)f(and)i(likes)e(quidditch)522
4404 y(dumbledore)e(is_a)j(famous)f(wizard)357 4673 y
Fk(6)99 b(Practical)41 b(Session)357 4803 y Fw(T)-7 b(o)38
b(start)h(this)h(session,)f(we')o(ll)g(introduce)d(some)j(b)n(uilt-in)f
(predicates)f(for)h(printing)357 4902 y(terms)g(onto)g(the)h(screen.)45
b(Y)-9 b(ou)38 b(should)f(try)i(out)f(the)h(follo)n(wing)e(e)o(xamples)
h(as)h(we)357 5002 y(introduce)45 b(them.)62 b(The)47
b(\002rst)g(predicate)f(we)h(w)o(ant)g(to)g(look)f(at)h(is)h
Fs(display/1)l Fw(.)357 5102 y(Here)41 b(are)f(some)h(simple)g(e)o
(xamples:)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 180 192
TeXDict begin 180 191 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(180)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(?-)h(display\(loves\(v)o(inc)o(en)o(t,)o
(mia)o(\)\))o(.)971 1151 y(loves\(vincent,)36 b(mia\))971
1350 y(yes)971 1449 y(?-)41 b(display\('jules)35 b(eats)40
b(a)h(big)f(kahuna)g(burger'\).)971 1549 y(jules)f(eats)h(a)h(big)g
(kahuna)e(burger)971 1748 y(yes)900 1912 y Fw(But)56
b(the)g(really)g(important)e(point)h(about)g Fs(display/1)l
Fw(,)60 b(as)c(the)g(follo)n(wing)806 2012 y(e)o(xamples)38
b(demonstrate,)f(is)j(that)f(it)h(prints)f(Prolog')-5
b(s)38 b Ft(internal)h(r)m(epr)m(esentation)f Fw(of)806
2111 y(terms)i(to)i(the)f(screen:)971 2291 y Fs(?-)g(display\(2+3+4\).)
971 2391 y(+\(+\(2,)e(3\),)h(4\))971 2590 y(yes)900 2769
y Fw(This)j(property)d(of)i Fs(display/1)d Fw(mak)o(es)j(it)h(a)g(v)o
(ery)e(useful)h(tool)g(for)g(learning)806 2869 y(ho)n(w)k(operators)g
(w)o(ork)g(in)h(Prolog.)63 b(So,)49 b(before)c(going)h(on,)i(try)f(the)
g(follo)n(wing)806 2969 y(queries.)d(Mak)o(e)38 b(sure)g(you)f
(understand)f(why)h(Prolog)g(answers)i(the)f(w)o(ay)g(it)h(does.)971
3148 y Fs(?-)i(display\([a,b,c])o(\).)971 3248 y(?-)g(display\(3)c(is)k
(4)g(+)g(5)g(/)g(3\).)971 3348 y(?-)g(display\(3)c(is)k(\(4)g(+)g(5\))f
(/)i(3\).)971 3447 y(?-)f(display\(\(a:-b,c)o(,d\))o(\).)971
3547 y(?-)g(display\(a:-b,c,)o(d\).)900 3727 y Fw(So)63
b Fs(display/1)d Fw(is)65 b(useful)d(when)h(we)g(w)o(ant)h(to)f(look)f
(at)i(the)f(internal)806 3826 y(representation)31 b(of)i(terms)g(in)h
(operator)d(notation.)42 b(But)34 b(often)f(we)h(w)o(ould)e(prefer)g
(to)806 3926 y(see)40 b(the)g(user)n(-friendly)e(notation)h(instead.)45
b(F)o(or)40 b(e)o(xample,)e(when)i(reading)e(lists)k(it)806
4025 y(is)f(usually)g(more)f(pleasant)g(to)i(see)f Fs([a,b,c])e
Fw(rather)h(than)g Fs(.\(a.\(b.\(c,[]\)\)\))-6 b Fw(.)806
4125 y(The)61 b(b)n(uilt-in)g(predicate)g Fs(write/1)f
Fw(lets)j(us)f(vie)n(w)g(terms)g(lik)o(e)g(this.)109
b(This)806 4225 y(predicate)49 b(tak)o(es)h(a)h(term)f(and)f(prints)h
(it)h(to)f(the)g(screen)g(in)h(the)f(user)n(-friendly)806
4324 y(notation.)971 4504 y Fs(?-)41 b(write\(2+3+4\).)971
4604 y(2+3+4)971 4703 y(yes)971 4902 y(?-)g(write\(+\(2,3\)\).)971
5002 y(2+3)971 5102 y(yes)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 181 193
TeXDict begin 181 192 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(181)p 0 TeXcolorgray 522 1151 a Fs(?-)41
b(write\([a,b,c]\).)522 1250 y([a,)f(b,)h(c])522 1350
y(yes)522 1549 y(?-)g(write\(.\(a,.\(b,[])o(\)\))o(\).)522
1649 y([a,)f(b])522 1748 y(yes)451 1900 y Fw(And)57 b(here)h(is)g(what)
g(happens)e(when)h(the)h(term)f(to)h(be)g(written)f(contains)357
2000 y(v)n(ariables:)522 2151 y Fs(?-)41 b(write\(X\).)522
2251 y(_G204)522 2351 y(X)g(=)g(_G204)522 2450 y(yes)522
2649 y(?-)g(X)g(=)g(a,)g(write\(X\).)522 2749 y(a)522
2849 y(X)g(=)g(a)522 2948 y(yes)451 3100 y Fw(The)62
b(follo)n(wing)f(e)o(xample)g(sho)n(ws)i(what)f(happens)f(when)h(you)g
(gi)n(v)o(e)f(tw)o(o)357 3200 y Fs(write/1)38 b Fw(commands)i(one)g
(after)h(the)g(other:)522 3341 y Fs(?-)g(write\(a\),write\(b)o(\).)522
3441 y(ab)522 3640 y(yes)357 3781 y Fw(That)53 b(is,)j(Prolog)d(just)g
(e)o(x)o(ecutes)f(one)h(after)g(the)g(other)f(without)g(putting)g(an)o
(y)357 3881 y(space)42 b(in)g(between)f(the)h(output)f(of)h(the)g(tw)o
(o)h(commands.)k(Of)42 b(course,)g(you)f(can)357 3980
y(get)g(Prolog)f(to)h(print)f(space)h(by)f(telling)h(it)h(to)f(write)g
(the)g(term)g Fs(')g(')o Fw(:)522 4122 y Fs(?-)g(write\(a\),write\(')35
b('\),write\(b\).)522 4221 y(a)41 b(b)522 4421 y(yes)357
4562 y Fw(And)c(if)i(you)e(w)o(ant)i(more)e(than)h(one)g(space,)g(for)g
(e)o(xample)f(\002)n(v)o(e)h(blanks,)g(you)f(can)357
4662 y(tell)k(Prolog)f(to)h(write)g Fs(')208 b(')o Fw(.)522
4803 y Fs(?-)41 b(write\(a\),write\(')201 b('\),write\(b\).)522
4902 y(a)207 b(b)522 5102 y(yes)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 182 194
TeXDict begin 182 193 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(182)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(Another)d(w)o(ay)h(of)h(printing)d(spaces)j
(is)g(by)f(using)g(the)h(predicate)e Fs(tab/1)n Fw(.)45
b(This)806 1151 y(tak)o(es)c(a)g(number)e(as)j(ar)o(gument)d(and)h
(then)g(prints)h(that)g(number)e(of)i(spaces:)971 1317
y Fs(?-)g(write\(a\),tab\(5\))o(,wr)o(it)o(e\()o(b\).)971
1416 y(a)207 b(b)971 1615 y(yes)900 1781 y Fw(Another)50
b(predicate)g(useful)g(for)h(formatting)e(is)j Fs(nl)o
Fw(.)77 b(This)51 b(tells)h(Prolog)e(to)806 1881 y(mak)o(e)40
b(a)h(line-break)e(and)i(to)g(go)f(on)h(printing)e(on)i(the)g(ne)o(xt)f
(line.)971 2047 y Fs(?-)h(write\(a\),nl,wri)o(te\()o(b\))o(.)971
2147 y(a)971 2246 y(b)971 2346 y(yes)900 2512 y Fw(T)m(ime)c(to)h
(apply)f(what)g(you)g(ha)n(v)o(e)g(just)h(learned.)43
b(In)38 b(the)f(last)i(chapter)d(we)i(sa)o(w)806 2611
y(ho)n(w)44 b(e)o(xtra)g(ar)o(guments)f(in)j(DCGs)g(could)e(be)h(used)g
(to)g(b)n(uild)g(parse)f(trees.)59 b(F)o(or)806 2711
y(e)o(xample,)39 b(to)i(the)g(query)971 2877 y Fs(s\(T,[a,man,shoot)o
(s,)o(a,w)o(om)o(an])o(,[)o(]\))806 3043 y Fw(Prolog)e(w)o(ould)i
(answer)971 3209 y Fs(s\(np\(det\(a\),n\(ma)o(n\))o(\),v)o(p\()o(v\(s)o
(ho)o(ot)o(s\),)o(np)o(\(de)o(t\()o(a\))o(,n\()o(wo)o(man)o(\)\))o
(\)\).)806 3375 y Fw(This)52 b(term)h(is)h(a)f(representation)e(of)h
(the)h(parse)f(tree,)k(b)n(ut)d(it)g(is)h(not)e(a)i(v)o(ery)806
3475 y(readable)48 b(representation.)68 b(It)50 b(w)o(ould)f(be)g
(nicer)g(if)h(Prolog)e(printed)g(something)806 3574 y(lik)o(e)37
b(the)g(follo)n(wing)f(\(this)h(style)h(of)e(printing)g(is)i(usually)f
(called)g(pretty)f(printing\):)971 3740 y Fs(s\()1054
3840 y(np\()1178 3939 y(det\(a\))1178 4039 y(n\(man\)\))1054
4139 y(vp\()1137 4238 y(v\(shoots\))1137 4338 y(np\()1220
4438 y(det\(a\))1220 4537 y(n\(woman\)\)\)\))806 4703
y Fw(Write)50 b(a)g(predicate)f Fs(pptree/1)e Fw(that)j(tak)o(es)g(a)h
(comple)o(x)d(term)h(representing)f(a)806 4803 y(tree)40
b(as)i(its)g(ar)o(gument)d(and)h(prints)h(the)g(tree)g(in)g(a)g(more)f
(readable)g(form.)900 4902 y(T)m(ime)73 b(to)h(practice)e(writing)h
(operator)e(de\002nitions.)142 b(In)73 b(the)g(practical)806
5002 y(session)62 b(of)f(Chapter)h(7,)67 b(you)61 b(were)h(ask)o(ed)f
(to)h(write)g(a)h(DCG)g(generating)806 5102 y(propositional)69
b(logic)j(formulas.)138 b(The)72 b(input)f(you)g(had)h(to)g(use)g(w)o
(as)h(a)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 183 195
TeXDict begin 183 194 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(9:)46 b(A)c(Closer)f(Look)f(at)h(T)-6
b(erms)1174 b(183)p 0 TeXcolorgray 357 1051 a(bit)59
b(a)o(wkw)o(ard)e(though.)97 b(The)58 b(formula)f Fh(:)p
Ff(\()p Fj(p)31 b Fh(!)h Fj(q)s Ff(\))59 b Fw(had)f(to)h(be)f
(represented)357 1151 y(as)64 b Fs([not,)40 b('\(',)f(p,)i(implies,)d
(q,)j('\)'])n Fw(.)115 b(No)n(w)63 b(that)h(you)f(kno)n(w)g(about)357
1250 y(operators,)32 b(you)g(can)g(do)h(things)f(rather)g(more)f
(neatly)-5 b(.)42 b(Write)34 b(operator)d(de\002nitions)357
1350 y(for)47 b Fs(not)o Fw(,)i Fs(and)o Fw(,)h Fs(or)o
Fw(,)g(and)d Fs(implies)m Fw(,)j(so)e(that)g(Prolog)f(accepts)g(\(and)g
(correctly)357 1449 y(brack)o(ets\))j(propositional)g(logic)h
(formulas.)76 b(Use)52 b Fs(display/1)d Fw(to)i(check)g(your)357
1549 y(code.)45 b(It)c(should)f(yield)g(the)h(follo)n(wing)f(kinds)g
(of)h(response:)522 1715 y Fs(?-)g(display\(not\(p)36
b(implies)i(q\)\).)522 1815 y(not\(implies\(p,q\))o(\).)522
2014 y(yes)522 2213 y(?-)j(display\(not)c(p)k(implies)d(q\).)522
2313 y(implies\(not\(p\),q)o(\))522 2512 y(yes)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 184 196
TeXDict begin 184 195 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 185 197
TeXDict begin 185 196 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2053 1855
a Fn(Chapter)42 b(10)1334 2603 y Fm(Cuts)g(and)f(Negation)p
357 2785 2599 24 v 0 TeXcolorgray 0.95 TeXcolorgray 0
TeXcolorgray 714 4554 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
145.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial
797 3599 a Fl(This)g(chapter)h(has)g(t)m(w)m(o)g(main)g(goals:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3748
a(1.)p 0 TeXcolorgray 41 w(T)-8 b(o)66 b(explain)h(ho)m(w)h(to)f
(control)g(Prolog's)g(back-)1004 3865 y(tracking)50 b(b)s(ehaviour)e
(with)h(the)h(help)f(of)g(the)g(cut)1004 3981 y(p)m(redicate.)p
0 TeXcolorgray 887 4164 a(2.)p 0 TeXcolorgray 41 w(T)-8
b(o)60 b(explain)g(ho)m(w)g(cut)h(can)g(b)s(e)f(pack)m(aged)h(into)1004
4280 y(a)47 b(mo)m(re)g(structured)i(fo)m(rm,)g(namely)d(negation)h(as)
1004 4396 y(failure.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 186 198
TeXDict begin 186 197 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(186)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(The)43 b(Cut)806
1180 y Fw(Automatic)58 b(backtracking)e(is)k(one)f(of)g(the)g(most)g
(characteristic)f(features)h(of)806 1280 y(Prolog.)82
b(But)55 b(backtracking)c(can)i(lead)h(to)g(inef)n(\002cienc)o(y)-5
b(.)81 b(Sometimes)54 b(Prolog)806 1380 y(can)49 b(w)o(aste)i(time)g(e)
o(xploring)c(possibilities)k(that)f(lead)g(no)n(where.)72
b(It)50 b(w)o(ould)g(be)806 1479 y(pleasant)44 b(to)i(ha)n(v)o(e)f
(some)g(control)f(o)o(v)o(er)g(this)h(aspect)h(of)f(its)h(beha)n(viour)
m(,)e(b)n(ut)h(so)806 1579 y(f)o(ar)d(we)i(ha)n(v)o(e)e(only)g(seen)h
(tw)o(o)g(\(rather)f(crude\))g(w)o(ays)h(of)f(doing)g(this:)51
b(changing)806 1679 y(rule)41 b(order)m(,)g(and)g(changing)f(goal)i
(order)-5 b(.)48 b(But)43 b(there)e(is)i(another)e(w)o(ay)-5
b(.)48 b(There)42 b(is)806 1778 y(a)k(b)n(uilt-in)g(Prolog)g(predicate)
f Fs(!)i Fw(\(the)f(e)o(xclamation)f(mark\),)h(called)g(cut,)i(which)
806 1878 y(of)n(fers)35 b(a)i(more)f(direct)g(w)o(ay)g(of)g(e)o(x)o
(ercising)f(control)g(o)o(v)o(er)h(the)g(w)o(ay)h(Prolog)e(looks)806
1977 y(for)40 b(solutions.)900 2077 y(What)h(e)o(xactly)f(is)i(cut,)e
(and)h(what)f(does)h(it)h(do?)j(It')-5 b(s)41 b(simply)g(a)g(special)g
(atom)806 2177 y(that)g(we)g(can)g(use)g(when)f(writing)g(clauses.)46
b(F)o(or)41 b(e)o(xample,)971 2332 y Fs(p\(X\):-)e(b\(X\),)g(c\(X\),)h
(!,)g(d\(X\),)g(e\(X\).)806 2488 y Fw(is)48 b(a)h(perfectly)d(good)h
(Prolog)g(rule.)66 b(As)48 b(for)g(what)g(cut)f(does,)j(\002rst)e(of)g
(all,)i(it)806 2587 y(is)44 b(a)g(goal)f(that)g Ft(always)h
Fw(succeeds.)53 b(Second,)43 b(and)g(more)g(importantly)-5
b(,)41 b(it)j(has)g(a)806 2687 y(side)i(ef)n(fect.)59
b(Suppose)45 b(that)h(some)f(goal)g(mak)o(es)h(use)g(of)f(this)i
(clause)e(\(we)h(call)806 2786 y(this)c(goal)g(the)g(parent)g(goal\).)
49 b(Then)41 b(the)i(cut)f(commits)g(Prolog)f(to)h(an)o(y)g(choices)806
2886 y(that)37 b(were)h(made)f(since)h(the)f(parent)g(goal)g(w)o(as)h
(uni\002ed)f(with)h(the)g(left)g(hand)e(side)806 2986
y(of)51 b(the)g(rule)g(\(including,)g(importantly)-5
b(,)52 b(the)f(choice)g(of)g(using)f(that)i(particular)806
3085 y(clause\).)45 b(Let')-5 b(s)41 b(look)g(at)g(an)g(e)o(xample)e
(to)j(see)f(what)g(this)g(means.)900 3185 y(First)h(consider)e(the)h
(follo)n(wing)e(piece)i(of)f(cut-free)g(code:)971 3340
y Fs(p\(X\):-)f(a\(X\).)971 3540 y(p\(X\):-)g(b\(X\),)g(c\(X\),)h
(d\(X\),)f(e\(X\).)971 3739 y(p\(X\):-)g(f\(X\).)971
3938 y(a\(1\).)81 b(b\(1\).)122 b(c\(1\).)h(d\(2\).)81
b(e\(2\).)g(f\(3\).)1261 4038 y(b\(2\).)123 b(c\(2\).)900
4193 y Fw(If)41 b(we)g(pose)g(the)g(query)e Fs(p\(X\))h
Fw(we)h(will)h(get)f(the)g(follo)n(wing)e(responses:)971
4349 y Fs(X)i(=)g(1)g(;)971 4548 y(X)g(=)g(2)g(;)971
4747 y(X)g(=)g(3)g(;)971 4847 y(no)900 5002 y Fw(Here)53
b(is)h(the)f(search)f(tree)h(that)g(e)o(xplains)f(ho)n(w)h(Prolog)f
(\002nds)h(these)g(three)806 5102 y(solutions.)45 b(Note)40
b(that)h(it)g(has)g(to)g(backtrack)e(once,)h(namely)g(when)g(it)h
(enters)f(the)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 187 199
TeXDict begin 187 198 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(10:)46 b(Cuts)41 b(and)g(Ne)o(gation)1357
b(187)p 0 TeXcolorgray 357 1051 a(second)51 b(clause)g(for)h
Fs(p/1)f Fw(and)g(decides)g(to)h(unify)f(the)h(\002rst)g(goal)g(with)g
Fs(b\(1\))357 1151 y Fw(instead)40 b(of)h Fs(b\(2\))n
Fw(.)p 0 TeXcolorgray 0 TeXcolorgray 357 2835 a @beginspecial
151 @llx 479 @lly 463 @urx 662 @ury 3120 @rwi @setspecial
%%BeginDocument: chap10-pspic1.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap10-pspic1.dvi
%%CreationDate: Mon Jan 28 11:55:39 2013
%%BoundingBox: 151 479 463 662
%%DocumentFonts: CMTT10 CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap10-pspic1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 121 /dagger put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D40539DE74A31B0CA623CA9DCE374762E175D0A
65D0D0B45F164D2441F7CBB3F86FE50191DF171E0ACFEA45E9CAB2BE910515E5
B5FF9D2A28AF222DB3A1E1EBC8C3BD5CC0AAB87006F4B7FB9F10C6BEFA6F261A
5B25FD44700ACA85FAF43A89C1380403CEB3BCE247E57D562848BAD491C7015F
0EF6865B3F398C720EDC7D66E3532C6389FFC941B250373BDD6D8F80FE59F3B3
7CA5D9FBEF891874A1AD09F68F3F761C6E4B96FD501BC43CF046FA932047C601
255A672A4704DA6CE54BE541C186C6B9CAB339B7285310E08EEF4120654BB3E5
4531F86E9E162D186C96F0BDF652B10FB882BBDB3ACEFC0E364920F1E2760475
0C4A97593D36244BD35727D42B5EA2E94DEAABDC44903D33F3743CFAE6E641FD
EBFE94BFDA686EC3D18D0DF7EE3F9EC6C4EDC5AD9B11D011D83B82BBCDC481A4
3CE3B7A026DEFF7FFCC16460
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 88 /X put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 112 /p put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F977EFEFBE4B0AC369070B3652B7542ED968F2FFE533C
CC1D8B7C35A5E29CBF897D9C8EF5A14FAB67FB0F77D9BC7ECA7FEA2B7A35DAE9
DF290446920B4C534715BEEF4819E438491C9DAB191FED40312E6AD0F142653D
A546D27C470377E95C9B1336AE16F5EC016DDF11F79234A880A99AB7E1784384
2B2B7EA60F88D50CB5BE5F12FBDBE6481D67434810D24D6260EF6D7975C3D2ED
C2E7C2F5D2C8CFC5F6FDA3736CFDEC04A31DFF256C6198A819D55C36D2C5556D
4AEB2371A60B1C9951D8A457A4F1CB344477D7A65161332224B0253D61A9F5AB
6BB0345592B42926CF2AC2C9B9EAA0489C6D09EA559B9E0DFCCA1A39673371E8
054176E97358DECFA6BE9B8612606BD71EE76ACABD4070C05B82C58509CC2E62
4E738FA2C0117AF693E5EDC640F5E1D4AF398B968C9DFB0B022776922B60CFAD
564C1C0665B2E9E576C11C4075F11A0832D4CEDA6CF087824EF502A43830B823
E31313BF7119F0871D66B3B390ADA6E7AE165E475189A3DD01B7C3A527A6DED4
07DCA42C29BAC20A476A80199EEDB53219103D50C16C7ADA4B3A932692615492
C046257CAC1CBCC31D44C06BCC58D737F7D239EBE3EEE1A4F981B1FDC52CE047
DAB64EBA1EEF23FDD6D15A5E4B14C74C0766E857E9E8AC1C2DD5D792284965F0
0F59BF602D2632D99EC6250B2EE635842201231CA58B99CBD64E8626DD3751C6
FB8E2F2860942F2C184DCB96E253D3B955F509788DA6C2B8989DDE361B3E647E
74A243877B5D493E16FAA75186E7E463661F67414DF1A49EED1ABA92CB5DE7E5
A67D422015897BF849D5F6C083D1C0BFB5F4671FD86467C1D92099E1AE77B2AE
AE256C8FAC76BD8CDAF0B8639B5BC93DA9F95FC332E6ACF5492EF3F0E58CF499
AF8E7330A29CFEA108EBA3BBBF8A957D3DAE33E4256B328E47790CA040FDE7AC
BAB9CD81431D83E8F8F63251495D697C39066073BA727B0E325EB254CFAAFF46
79D517E2AF16291F826F737BF5FF3E29615123BDD600E8C7747F809C16EA730F
ED64195A91418D7AC2EE620CD0BEABE1059DDAB4BF671A31A59AFE302EFDC971
E675FF79E8AC4CAD991C4DA475EED7D0BD65CFA1CB3982A975D80B2B468DEBC0
A61BBCCDA82A2973003F19013BDBCEFA2098218C07205E981A506B03CA1BA21E
A53D617553D5C57CB1722553E997ABE85A338682767D2D78543AAA9FE0BBE86D
9703B7EB6E6CBFF97EF717E6E7FFF7B1BFE2E98D872573C86536F65E61502617
06FE5DA56E84A1947299D5B636ACE7B2E2E3D5FB3A9FE077F2E6D4384BE6BC39
4E71C5DB81E42AEDDECD1E30A6E774696C251F318AC1D9EF5FB1F77A48F7D075
BD8D36F3DE102AF8DC9875C222FBF9C9290C7E72AE23DFFDCD5D253FA3D3F64C
683052221935574C11295A73FE3649A98308BC5906C1DA356869F9B16849F1A6
719B66AA3E4CF75139449BC7B5EE13540072DD100BFB08788D566560A69AB23A
E66B1C7FDFBF42BB874493329A8428A7788D760543C8E5C906B36C055F3DBCF5
9A190826C75E642967145C85D58457081F0EF2F1B5A882CD357EE2E010146CB2
5CDEEE6CFD7697FF9C6A98C0F94E2411023F22CD2E8D61D57DE5ACECFAE9F3CD
33E155543275D8C75FF855BE2F7EC3151F50BB9D5C0D6ACFBAFA134AEF156CA7
7A355219E2EE13D5D6369F656836EE0A77206E860D8B5D346E148C9FC7BEC569
14ADF730F9DA026FB61391678E402EC73D4064328E15B8921F38FDB6F2436CC2
CB7205435589588FBD166C47CD29BEC5AA33A87E88418D5F2C1040FA69D4FFB8
CB188046A323A03044D4BD0999B8B10169C9CAC6FCD9FA9FF379C70C8E42E2E7
3D4934F65C216EB6C3A6207CF39EA825E6DD146AC8D807EBDEFBB74E9894BF0E
C793699F0E68263D8C360D69D0102F4ACA897F0502C545F92404F6B149237C9F
E0735F63CC8A90417E1C801CC732102E82379A4AA777E6AD335AA67D5A40F782
E613876BF68357BE1ECD6C0A8950DE1B3AE1F568D62C02A925336A0485959FA2
48AE438BD826589C79EDD9ECA933132625E7DE3516C74E042D463CEFB3AD5073
2A73939D2B0B48E5A0DC6F25F8961846432962AAC20E6CF6D92A82A96482D082
EA17AF275115451DC085ACF7A57BE104A7F3067B87B87E035955EDA54ADCBDAB
898BF23B6D6FD2E434A863D0E30ACA2AD971E8F7607A33DD31C45DDAC4172E4D
A1CC7E86F96D7D22F8F3EC32DFCDBBF89755B6A6F6352D29D3BDC5292B02BD06
EA9F7953E11CD5A07EE81D9CE04C5C360D9E34336321D1559AFA351BF48C085D
FDE098DDD70C5B19184CA0DE6A010F22AE7F3ED41C5A1ED7C09D5E5B10D88B80
F9A654626A6170C23F693B0407F1F2EC6A71A25168E79BE81C1268E6F02AF77A
A10D7D1AC101FDD852DF21A55C4CA89D30976AD6A6B7B481D05C69088A0EE5EF
2E8112CFDA076494E2D674A598A242CA05A4D35DD27E7273C1D614DDA7385D76
B433B2F64CCCE9200BF4219F1FF8FEFEE1DFB4839B51D0B3A0ABAD2DC8332E0C
C15A728C039FE4CBD3C02792CB44A20BED2AD99D24A5D61785A1CA5061495048
1EE24E0912AFEF4388B8A7D245DA395FC8249F699D53644402065FBE9DB5837A
2C8F46351AFF12977BFCBFDBDA1ADACABFBC997E673FE15C883B4D1B9AEC0670
D0C15BDA4FC76FC922C72ADFAF9C9B191A822926AC57AE183F523BD30971E169
817F5C3D831392691BEDF5CB53AC9E2E886770A211ED5F977043FA68A7F217AB
094808F6F1115CA55BCFCC70330FBBFC59E35B4E5EC8C4F1CDF22436737286E0
5FF05A147BF151C01D6601F1244FBD30E3A2A00F5BF1CBFAE15104AADF811142
75B724BE8BAB06C70E29062752375EEC9C69037715A42A4ABD8C57B53F8E1566
58C28F0DE85F4A44F768A0B759AD767D6DBD2A03864654459C88A0E7CDC434E6
6A8E0E87E958B7890E4DD5F63F5963EE8920C04B03D5A186A162D897A755C4E9
A63F4A192F86876E944458CFA0BF0D626428871E85B7BB80784A14FE34FE6F78
4D7D5B23C33BC9A31E1A92B02D1E465054D930E1A0D7E82F4E1C7B9538AED335
1B83EBA2B5865E51279742076F5FCA3A80D8438F951A33AF1A184C2BFCF854FA
2CD47C598A4ED2A7FE4C82BC3C14E8DC7FB4E870F920F5FA75F3FD1241C13418
F4FDA1B07288C5209903B80129E27F418043F90079E830B0840619A1BBE5F56F
C10AA60E9598590E2099605256A39E4FDCAA6BE9E231379757F52BEB5E4D3EA7
0718914CEF0514346C305B2EE3EAA00D6C61F3A7AAB341F74C0317C6595C2FED
39E4B9A3DBE7BF918D8594731E3B093D7646B28F0FE10E9266BB4E4AC610D57F
D768C94A30E76B330DF9A0FF620BE192948C7AC634AA90935FF59DB3F38E801C
40D7A69B58C153BD380BC350690E8B1D5C8C1793C52F1517E33D55555A0E55B0
B67FF1596E44AC9C6B1207DA2955F1D1935FE208341EEEA5DE8B5D079C55079D
B035A40B714288C473AFB82C83504B4C37B6631B400D8875DEDEE759A2BBCAFA
B91BE65835556D5D19F2EF8D2DD860F4546F8E0D0D7251B42996FED9FE395A6C
3ACEE855EF0C55EB18101DD99D7E891CD7AB35D36424F4C5F7E3B2776695CC53
DAD92EF1A10B62010CECCD8026D087C9152076018424B18229686AC6B105FBB0
EF32B6242B3B3EA4167DEFC2B4BAF5887EC34F2C4EED947F6D00A3ED466DB543
A61D400FE4C56F61DC9D2D6A8943D193740AD4B135C94FAF3226AD14333F6E22
38D80441858158BC9398BEB4AB0DBB1D48C8841C89D121D1FAB2D7886119ACFE
B60F5EA2A1664AD0B71F6004B00DCADECA2338E2E50D288E227A9B4D8CCB5C43
682B4D2FB2D27FEF0BB9E41BCF9747554AE464C93EAA4D5C9FD2FC7FE00FEDB5
4993FEC18395385B283E504DA0C0946D366600A4B68465B99DDF131E74058838
7C237B4C88D7C53A8A878940D1AB99F7959BDE7C79A165A4BF3D0C543D291178
9B01AE1D168A1540047B466EDDA8A8C72A02ADCD7B3148CDB5E690E925065346
8B54530D6F97E103B1E3A75B8760DA6C64BDDC9092C34E8D3764494C41A9464C
3A52C8FE373B240FEF6A5A9F16D6631FA1C5578888FD4C742D9AE4C9722026B8
A12E614DEA2BD0D04965323E65792D0BE8794C514A71720D284521A957EC00A8
831F166440FDEF243CA7C251CB8BEA17120E1CEC02B8FB9DA05C45A04AF5D6C2
5FEE7E4176F67D6133F46882944B7DD8358694A1C49EBC49F9C1AF1F8F922132
2158FA5ADA7C4900E21057D21361D0D1B7FC7A47FB58950369BF6634CD890E21
EBEA1469D53AA0F99549A3921BB8FBE06C1C062803333AD8BD94EDB07773482F
580DF39514E0F86272B6A01CD225DA05BAB304679A13C964A634A6FFC5ED912C
E03F6ADB1572E9BDA7EEA81A80A2D9F85E7947A5A0FF42BC94EED258E8ED7E05
A173BDBB9D001751281D1634C1B3838BF5D87CA71B09C8E23232562B1728EB68
FF2DCA5E51D61D1DAB32C3A7294263CCA745B1B26D72C44A469A59114BC98F99
77A365C02076CDF6B30065F05DD5E5DCCB2E1FC8537AEB34A8ED6F1559AC779E
0336AEA9E7C08BCE9554ABDF93773BAFDF49AB3043DB152FD0BEB8A087517C52
9DACB5A93B99D62809487C864EEB6077CA05798D6922BD31C4726488B8F2C12F
06F42BCDC9A5813CDEB76FFAA42F3F93E9272A9DFFB795B5B6AA1FC4ED373C6E
20737C11B5E77CABE44EAC8374B260462584FA50D3268DF23C5F5FE32F763675
006A44513AAB8ACE6DF3574CC10FD5D4A32504F70F766ACC3EA6808B74A6B0B5
B2086BF3188F4F38458C13355D2D1ECB263C7525A839261C4E0FFD6D2C0A4A11
F3684CD9C058DC385A726ECB2A247B840B9EABAD9AF00309CB9897F4B2388EA7
48E258DBE344971EA49E7042CD866BFF4B05CD58CACFB23044B0C767A45C80BD
479D50FC933C66E1E6F8B5598BC39136579E2C8644A792A7E4B581D62E02A44E
13087B4E98FC9EBD11411C87EF1187985228FCF0885CC95E97089F2DC44A1B03
5BC8EDFDF652D1242A86A4A4A263645BD760C459229E185680162EE35019F337
0C2C657D48DBFBDDB7704A556FC7D763D7728A87B7702521BA430C39CD6291A0
D67D74C8C4850AE8DAF010667C5D418B4C40C1827EFAB97DEEE0B0C88B70E624
267E37F611093899E0411E983973BBC8A64929E1983F25C4643887E76FA8D876
B4F5EF8D39C1C5580228D5E30D7C823C53A5F8BD7A01E66A4B9517A7A6444653
77AD12CF501DAC07846EA752BF7502D94893D7ACF8E5A9A772FC240954C8E1DC
D8771343876387BE971DA9BC78EC8513FA5B4C7474470EA1FE59181CE500C4AF
C5B5664983B867D2B2DB3FC6C4DEF1541B0743F5FABC55047B0EE0A8428384D6
EBAE606BF6B3792DD08E0CCA4C6B00C2BB8174B76CC7ABFF487D307084
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap10-pspic1.dvi)
@start /Fa 134[77 121[{}1 172.188 /CMSY10 rf /Fb 143[44
9[44 44 44 44 44 44 8[44 16[44 7[44 1[44 9[44 44 44 3[44
44 2[44 44 40[{}18 83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1778 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 44.34969 22.17484
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1778 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fb(?-)42 b(p\(X\))639 902 y
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 53.3796 26.68979
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 639 902 a 32
w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 49.57959 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)h(a\()p
895 902 27 4 v 30 w(G1\))861 877 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 861 877 a 861 877
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 861 877 a 714 902 a Fb(X)h(=)p 894 902 27 4 v 74 w(G1)861
877 y
 tx@Dict begin PutEnd  end
 861 877 a 829 1257 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 3.01385 } false /N@T-0-0-0
16 {InitRnode } NewNode end  end
 829 1257 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 3.8 3.8 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 861 1232 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 861 1232 a 861 1232
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 861 1232 a 720 1257 27 4 v 746 1257 a Fb(G1)f(=)g(1)861
1232 y
 tx@Dict begin PutEnd  end
 861 1232 a 1301 902 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 159.21863 79.60931
3.01385 } false /N@T-0-1 16 {InitRnode } NewNode end  end
 1301 902 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 155.41862 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)g(b\()p 1557 902 27 4
v 30 w(G2\),c\()p 1851 902 V 29 w(G2\),d\()p 2144 902
V 29 w(G2\),e\()p 2437 902 V 29 w(G2\))1962 877 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1962
877 a 1962 877 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1962 877 a 1816 902 a Fb(X)g(=)p 1995
902 27 4 v 74 w(G2)1962 877 y
 tx@Dict begin PutEnd  end
 1962 877 a 1070 1257 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 96.84923 48.4246
3.01385 } false /N@T-0-1-0 16 {InitRnode } NewNode end  end

1070 1257 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 93.04922 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fb(?-)g(c\(1\),d\(1\),e\(1\))1472 1232 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1472 1232 a
1472 1232 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1472 1232 a 1330 1257 27 4 v 1357 1257 a
Fb(G2)f(=)h(1)1472 1232 y
 tx@Dict begin PutEnd  end
 1472 1232 a 1179 1493 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 70.59946 35.29973
3.01385 } false /N@T-0-1-0-0 16 {InitRnode } NewNode end  end
 1179
1493 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 66.79945 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)g
(d\(1\),e\(1\))1472 1468 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1472 1468 a 1458 1965 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 3.33333 1.66666 3.01385 }
false /N@T-0-1-0-0-0 16 {InitRnode } NewNode end  end
 1458
1965 a 1472 1940 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0-0 /N@T-0-1-0-0-0 InitNC { NCLine  } if end 
 grestore end
 1472 1940 a 1472 1940 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 4.6089 def
/r 4.6089 def /h 11.38892 def /d 7.04663 def LPutCoor end PutBegin
 end
 1472 1940
a 1434 1965 a Fa(y)1472 1940 y
 tx@Dict begin PutEnd  end
 1472 1940 a 2051 1257
a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 96.84923 48.4246
3.01385 } false /N@T-0-1-1 16 {InitRnode } NewNode end  end
 2051 1257 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 93.04922 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fb(?-)g(c\(2\),d\(2\),e\(2\))2453 1232 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 2453 1232 a
2453 1232 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2453 1232 a 2312 1257 27 4 v 2338 1257 a
Fb(G2)g(=)g(2)2453 1232 y
 tx@Dict begin PutEnd  end
 2453 1232 a 2160 1493 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 70.59946 35.29973
3.01385 } false /N@T-0-1-1-0 16 {InitRnode } NewNode end  end
 2160
1493 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 66.79945 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)g
(d\(2\),e\(2\))2453 1468 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-1 /N@T-0-1-1-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 2453 1468 a 2269 1729 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 44.34969 22.17484
3.01385 } false /N@T-0-1-1-0-0 16 {InitRnode } NewNode end  end
 2269
1729 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fb(?-)g(e\(2\))2453
1704 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-1-0 /N@T-0-1-1-0-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 2453 1704 a 2421 1965 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 3.01385 } false /N@T-0-1-1-0-0-0
16 {InitRnode } NewNode end  end
 2421 1965 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 3.8 3.8 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 2453 1940 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-1-0-0 /N@T-0-1-1-0-0-0 InitNC { NCLine  } if end
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 2453 1940 a 2842
902 a
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 53.3796 26.68979
3.01385 } false /N@T-0-2 16 {InitRnode } NewNode end  end
 2842 902 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 49.57959 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fb(?-)f(f\()p 3097 902 27 4 v 31 w(G3\))3064 877 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-2 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 3064
877 a 3064 877 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 3064 877 a 2917 902 a Fb(X)h(=)p 3097
902 27 4 v 75 w(G3)3064 877 y
 tx@Dict begin PutEnd  end
 3064 877 a 3032 1257 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 3.01385 } false /N@T-0-2-0
16 {InitRnode } NewNode end  end

3032 1257 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 3.8 3.8 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
3064 1232 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-2 /N@T-0-2-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 3064 1232 a 3064 1232 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 3064 1232 a 2922
1257 27 4 v 2949 1257 a Fb(G3)f(=)h(3)3064 1232 y
 tx@Dict begin PutEnd  end
 3064
1232 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 451 2986 a(But)h(no)n(w)e(suppose)g(we)h(insert)g(a)h(cut)
f(in)g(the)g(second)f(clause:)522 3126 y Fs(p\(X\):-)f(b\(X\),)h
(c\(X\),)f(!,)i(d\(X\),)e(e\(X\).)451 3267 y Fw(If)i(we)g(no)n(w)g
(pose)f(the)h(query)f Fs(p\(X\))g Fw(we)h(will)h(get)f(the)g(follo)n
(wing)e(responses:)522 3408 y Fs(X)i(=)g(1)g(;)522 3507
y(no)451 3648 y Fw(What')-5 b(s)42 b(going)e(on)g(here?)45
b(Let')-5 b(s)42 b(consider)-5 b(.)p 0 TeXcolorgray 460
3799 a(1.)p 0 TeXcolorgray 41 w Fs(p\(X\))51 b Fw(is)i(\002rst)g
(uni\002ed)e(with)h(the)g(\002rst)g(rule,)j(so)d(we)g(get)g(a)g(ne)n(w)
g(goal)564 3898 y Fs(a\(X\))o Fw(.)60 b(By)47 b(instantiating)e
Fs(X)h Fw(to)f Fs(1)p Fw(,)i(Prolog)e(uni\002es)h Fs(a\(X\))f
Fw(with)h(the)f(f)o(act)564 3998 y Fs(a\(1\))f Fw(and)g(we)h(ha)n(v)o
(e)f(found)f(a)i(solution.)56 b(So)44 b(f)o(ar)m(,)h(this)g(is)h(e)o
(xactly)e(what)564 4098 y(happened)39 b(in)i(the)g(\002rst)h(v)o
(ersion)d(of)i(the)g(program.)p 0 TeXcolorgray 460 4251
a(2.)p 0 TeXcolorgray 41 w(W)-7 b(e)34 b(then)f(go)f(on)h(and)f(look)g
(for)g(a)i(second)e(solution.)42 b Fs(p\(X\))32 b Fw(is)h(uni\002ed)g
(with)564 4351 y(the)e(second)g(rule,)h(so)g(we)g(get)f(the)g(ne)n(w)g
(goals)g Fs(b\(X\),c\(X\),!,d\(X\))o(,e\()o(X\))-7 b
Fw(.)564 4450 y(By)48 b(instantiating)e Fs(X)h Fw(to)h
Fs(1)o Fw(,)h(Prolog)d(uni\002es)h Fs(b\(X\))f Fw(with)i(the)f(f)o(act)
g Fs(b\(1\))n Fw(,)564 4550 y(so)j(we)f(no)n(w)f(ha)n(v)o(e)h(the)g
(goals)g Fs(c\(1\),!,d\(1\),e\(1)o(\))-6 b Fw(.)70 b(But)50
b Fs(c\(1\))e Fw(is)i(in)564 4650 y(the)41 b(database)g(so)g(this)g
(simpli\002es)h(to)f Fs(!,d\(1\),e\(1\))-5 b Fw(.)p 0
TeXcolorgray 460 4803 a(3.)p 0 TeXcolorgray 41 w(No)n(w)41
b(for)g(the)h(big)f(change.)k(The)c Fs(!)h Fw(goal)f(succeeds)g(\(as)g
(it)h(al)o(w)o(ays)g(does\))564 4902 y(and)h(commits)f(us)i(to)f(the)g
(choices)f(made)h(so)g(f)o(ar)-5 b(.)52 b(In)43 b(particular)m(,)e(we)j
(are)564 5002 y(committed)g(to)i(ha)n(ving)e Fs(X)d(=)g(1)p
Fw(,)47 b(and)e(we)g(are)h(also)g(committed)e(to)h(using)564
5102 y(the)c(second)f(rule.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 188 200
TeXDict begin 188 199 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(188)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 909 1051 a(4.)p 0 TeXcolorgray
41 w(But)51 b Fs(d\(1\))e Fw(f)o(ails.)75 b(And)50 b(there')-5
b(s)50 b(no)g(w)o(ay)g(we)h(can)f(re-satisfy)g(the)g(goal)1013
1151 y Fs(p\(X\))n Fw(.)45 b(Sure,)37 b(if)h(we)f(were)f(allo)n(wed)h
(to)g(try)f(the)h(v)n(alue)f Fs(X=2)g Fw(we)h(could)f(use)1013
1250 y(the)i(second)g(rule)f(to)i(generate)e(a)h(solution)g(\(that')-5
b(s)38 b(what)g(happened)e(in)i(the)1013 1350 y(original)48
b(v)o(ersion)f(of)h(the)h(program\).)66 b(But)49 b(we)g
Ft(can')n(t)g Fw(do)f(this:)62 b(the)48 b(cut)1013 1449
y(has)41 b(remo)o(v)o(ed)d(this)j(possibility)f(from)f(the)i(search)f
(tree.)45 b(And)40 b(sure,)g(if)h(we)1013 1549 y(were)h(allo)n(wed)g
(to)g(try)h(the)f(third)g(rule,)g(we)h(could)e(generate)g(the)h
(solution)1013 1649 y Fs(X=3)o Fw(.)54 b(But)44 b(we)g
Ft(can')n(t)g Fw(do)f(this:)52 b(once)43 b(again,)g(the)g(cut)h(has)g
(remo)o(v)o(ed)d(this)1013 1748 y(possibility)g(from)f(the)g(search)h
(tree.)900 1907 y(If)i(you)g(look)g(at)h(the)f(search)h(tree,)g(you')o
(ll)e(see)i(that)g(this)g(all)g(boils)g(do)n(wn)e(to)806
2007 y(the)53 b(follo)n(wing:)68 b(search)53 b(stops)g(when)g(the)g
(goal)g Fs(d\(1\))f Fw(doesn')o(t)f(lead)i(to)g(an)o(y)806
2107 y(node)40 b(where)i(an)f(alternati)n(v)o(e)g(choice)g(is)i(a)n(v)n
(ailable.)k(The)42 b(crosses)g(in)g(the)g(search)806
2206 y(tree)e(indicate)h(the)g(branches)e(that)i(the)g(cut)g(trimmed)f
(a)o(w)o(ay)-5 b(.)p 0 TeXcolorgray 0 TeXcolorgray 921
4050 a @beginspecial 151 @llx 451 @lly 435 @urx 662 @ury
2840 @rwi @setspecial
%%BeginDocument: chap10-pspic4.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap10-pspic4.dvi
%%CreationDate: Mon Jan 28 11:55:39 2013
%%BoundingBox: 151 451 435 662
%%DocumentFonts: CMTT10 CMSY10 CMMI10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap10-pspic4.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC8944C70F30925FB48A16342CC26D444F54CA15E5A624C4A2DAA2AEF8
404145BBA339F2A2D6FC2F3ECE54387761CA1213C8D56FF96E37C6147CA44B84
262EA87E7CC10D931E6B5B80D7F09813498497AA84ACB4AC69BC6C8481ED2953
084F560D7B1CF90555E69BD2AF7C5D944E8E3506165014652462BE1BC81CA341
E1B0725159D36DA0FFF3577D1DEBC5D91AE683FB0384
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /multiply put
dup 121 /dagger put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AF3863EE8A24A003F07FBF0DFBC12CF2625CE95B5F1C575C28144E1D3C8CF5D7
6D071DB7562414E228147876D4529CD51AEF4B2BE347530451D0908EF11AC8DC
93918A00840C4CF8DC8262539A2633ECE031FDE71E95CD70D495FF8E813A3296
BD9FC3CFB9233FA0C800ECB41156D3A6BCE07B0A230189D213487D3E2C9244DC
04A297CFE71DED5CF81D8BD30AC6787C86AE20FBB58C31FE46F6014FB774CD6A
857BBD272917B8F71AE44C8A2175080F1D8087E55F1FC186B9D731BE77FC2E2A
45D9D2870855819AE82D0A2CC4673DD10F0A96BBFCFBACB36C1ED99CE9E13A7E
4EE67B8185BE80DBA3F2BCE27C663B58A98E115068F105C360369C354C63756D
C2DFEB94791800FB94BA0E53F1EC1EBD31F8D910D735DAC1D12CA473882FDA2B
6C897C7A238C343A5E353D5D73E1E01812A1BBADD09AC19E4BBA4A609D95DBD2
D998459B25A9DEC84E9AEC6AD45563CE5DAF8E8F071164D8586E1EB4194BB4AA
1A586E8BC31F06E414AABD9B47820431F64DDBA36A285D7DF40149FAD4123FF4
13A24722796DE81B5561A5E82B44346A981FA9637585B93CEF9707EF36F7D1A2
D604BD33F65AA74359713F6A8803087D0BB067AEB8B6048134FEE45B591AD353
D84D1F26DB0AF1C40D5F180BE33D907316D7B86EAF3D24FBFD8AB1870D4550CE
81C20A5963D4DE5C38CE6E6AE90DEBD55E45DF517AED3902BE055DDCBD8DCE69
2C637047A814352F0397D3D6A848E93FC7E05BE346D5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /exclam put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 49 /one put
dup 50 /two put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 88 /X put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 112 /p put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F9779E5FC0575729CE67A777CC63C4C9E2FD541287A3A
42A90C674BE17D468F96194BAB0E7440A2520AAF712CAF7F3009025CDF190E9C
4738695EED42E02F7B91334762A700EE46CCFF0F8222069A239E9C090C09AFD5
53AFE0EDF8A1D4878FBE6A8D6BD3179330980037F8648900B5DF62C1541F20F4
94D78EEF9EC6A9FA4A244D9C62352A2CF2DB8831D815BFC5CCB48C38754580AB
02B561FF49E6D9BC9858A3ED3CAA1D77C8D8405ADA3E1BF030E67C7B8BCD803B
4C9ED2CA50CAA498EC8C4702F89F660AD38ABB9AE811E6C73E3DFBBF6CADD1BD
ED4F258F2DAC9F55447F8CC88BD98AFFFF3DDBCE4060684BF01E1B6243EB49BC
46825B83A56A5DEA32906003D98F0F6A1C6EEBFA6BC532C158864CDC967B7DBF
599ED098122F892CF878D7655957F1D1D600CC774F3C59ED5565F2096B42E9F5
84070C463D8E698F7480D0341973BC61EC9CC7B9F5F582B7B653D90E146B6AAA
318E165C8353C9CC1F0925643682D938AB70D416CD39E8562FD546F1E50BFD46
28F81E9C990A17DB0EDF2A084E7A3EB215C17570FD6FD69201F8BC3012053AF9
EBC8C8A36F19DB4EDEF9ED72C6FCD6B3EFF627203630AF2BD897DB3C7DD9D21C
42688054ED5805F3788325FAB9397B4F558005B415BB3E2B65D78732C40F1F4B
6614F932F98837F99ECF5FDCE14D56D38E2618E1383678A6FA47A599EFBD72A7
2CBDC5810412ACA2F4F7436FA46BA59CAF89453F314418E48F9FC2C35D851E69
8B6D8ACE333E6562097BAEFDAE24E118A4B8868B8E06FFADFC82A81ADBFC2101
28639A86DC64121B1E1A4E96BC983B3419A762D7B47A547F2A92EB8A77F9298A
753B436319CEAA2ACCAA6366E6F24AE0C1E34786373934C751B4D96B191C6746
93FA839DD4A4F6A61B071BAD4D9333CF841E1C5DEA29F74F1029652A562A92C1
4624912AC1B71399E2D2F54C91AFBF8433523090C2F750A332F6ED55AFB39660
5676CFDC389025C1DD011F8C4681BAEE3702C91A6EAE8CD0ACCCB5F7FF167316
00330F1417DA1F4E9A285E47E58A2D3575BB23494E1EE481F9C4119AB947B5F5
B9E5E3146795BEDABC7C47532B4B80F77BF6EE43CFD08C91357A48C8F0868369
A32C73656A45B8347529021C9673D75EC25A96919B0623C4B487F73D78D9C5A4
00978CD885D64EFEFA51409FC4D512C520EF5235E1EADA95B101B01D5D3349B6
F868364FA6DEBEFB280385D2FD98D9B711D0DBFDE94205CA706005B3B61C2C80
32BE9723187596489A8894E0373BF6D0E1D56EA24BE8EB32B5BA477D13141991
A518561E2A2917CF1B3F674CF98CC8406C58FF0958C886D21E0680503D7A796B
947FD535832BFF11FF54BE1ADEEAC0BE35B4D79729419970A51644BF123DA78D
D6E50E5CDE1A284747AF7093F49703A97B4E38EF33DCAC5FED08DC5181AED7EC
DB37E421FC121459AB1C3EAB556C64EA77AFF7D79B198A9E9B5B270888D17146
10671D3927F5ABCCAD6C82EB09720475D09D7B01F32707FA6CDE7DD6CF34EFB8
455C231D0F83DA849DC65BBE3920ED4EB7F085A9B20DB623915950B4C87D72F2
7B03AF97DB32B98721AAC2F00DF496288F46F21FC15112897EDAA16AFC57C7D5
B023C047A3BD4D4EF55D2EE095ED55C343DD3F3DC1599A2B89F3F57C11D33386
81C091CB8D07A5D43B48D40D3DE3B9062DEBFA016CF35B3537994772816DF9B5
04269E3B619082247D5EB409ECFD1E92E5B4BA25D13F5D195B574BA565A92F4F
AB8AC781807CDD2C350BCC0744C96275ED215CFC24750FB1FF6F91C1F91EF913
AAECD09865679DE5E7CDFD746AD109D574766075BA04259AAC658551DA940B46
55CE12F9CDF82A54C3EE8257A7A35A79626604E7D472D5AC2903486CB294E951
1AA1C526296480C0B454E8801902CD36205FEFF337141B615C5EC6C35CF6BF8D
153B0C00756EBB1434F12890DDE30FE7663844A16B2C595FCC5D86C2A8DEB922
528C5E62A52A33537E590C709A6384626DED6E559002E066EDFD837CD4058413
1D2C2E09F563444664D7CBE2EDA83D632EDE4C96C7D317119E70E9CAA97A988E
0A3FD5B4EF3B7B4711C4476866A88DE2A0BB3ED8E4078E752EA0862A91BE79B7
33082E7E6252EDDEDE9B5C114485D79FDE4D1842965754EA9D78C89AEFE99A9A
12C8E2FE34D80F9082AFF017095BBBC52138226F4676DF944C9BF3A808F1DD37
AAA08E086FD25F3EF5349A014757FD13542D2049170E8CC2996F962660B1E52C
2BB872DE3E1037057CCE7DAE39EE3BC646E9F5F90FA0AF877BAC764156FFAB04
DE7E34E3CB2B2311703266E231B0D3484293F9C2A0BB8CDE0DB1783E17043B1E
55EA7DC30406F1FA70D8205F20DD78AA19FF23F8E3C80D3B28D85EBA19E8D8F2
9D7BE27936E61C95F5BCD2AF527BCA6D36C2A0B6178D6CFC823231226D7FEF42
8E38AEC49755752BF3C22148B688177396101C62656145C238E5F5BC27F161F8
981BA53BBEBC1E99CB7803859969B997169A19443ACF0B31BBEDC245455943A3
DF190C11054A40B4FE2A322E18A0B8068B434BE178AE00EB4B5AB05793D0348F
BC9BC6022E501CAB54F7ED18111E23604F60559B8C8903093B967B85FA3E8716
6DC3AD1DC11CF78A0C03ED86703EC4F9FC142E5C27D766843EC32C75474C6B0B
903AEC934DDF6B3AC645B2DE4F326ABB8AF94B9D06542B9F98335E3075A6F5E0
390F9AEA83BE92CD78AE6BFBFA42B1B97FCC95115BF771426856EDAA1877D87C
90E6E23A210DDF755142DEAAC47F0AE1D6D15D5B21AAA0646D03B9DE7197E603
5B263433E4CF7F5DF39A20704ADE162418ABDDA20E3E525573DE2FD7078CF30F
58CD05F8DAC250A102E7404C157C82ECE06663AD6F4FD8E48D1266015F38B5D5
D65E7FB00A72BD009D71AF78DAC4CD3CF96BC50F57ABEA8DA682280CE645D152
6527F4B372DBD5E59CBDA9BA2B569F34BF33D91956B775D8056A119E10B97454
D2C1B12E7734667319FECB7859B2BB3A6AAF4F94B23CD47BD476742DF4D2A40D
A9CCEA60F2C1A5359B46AB30CD42654AF91C769731545B30E4239964211B5FA6
09B01E845E800C5CB09A3D05F478D6444BF9CD18E7D2AA3EE812B8153E501B8B
6374B7F57DF32ACACF8BDACE529EFA2865760B1B004B5FBB0259F65E9FFE2CFA
E303B944528719A9CAD99381DF046DC26269205E21863AC496C7EE85DB54D1C0
2672FCED90C294CCF66E78E966386E076E56368AD0C706EB2D4DDC7FB19DE5CD
200343CD09B690874D5A7ABBA5673992A496B044C69C620E8D1B77023F8712C6
7A8D519304EE6A69E6C401FAE185A88073C4586F4E32049B3007C7D41D503E0B
9B12EB2542591C6CEF345BBC4BBF53944258F3184E2842A4B54C18D9FD3A1DC0
4BFD5718EA2316FAF52FC3C16FD2449FDDFE8FD647E481C838667E28B964E6CE
5B9A2E6F0EEE75A2EF5C39C3165714FF830522A6C0149CB9870BE2B81524BAFF
8D86A818AE2E826B94A08099BB1AB52F9FD1F67428FCB396D517AE0A9481B3E8
2DED506B83CBC7BE2DBF22E993C4E13DB3B9E34C23CC3610C6D6BB4B14AF62FE
77AD8C6477CAFDF60DF547026B2E7C44D3B19284BEFFD367DAC691669A4AACDE
25BF7087560D454F6D4A24755ED702BF186447DB2D1EB2909679889BD7237F96
18CAA6BF3BC6FA07199280019E6A730DFC1BCCC53AE04F584BB99AC426E19C2C
2E3C61E518710A5F54D884125E31F2575D9415EC241B53FB7CC0BBEC54033575
7ADCBDEC0662C5E0BA2561CFDE7576583B9E85FE01B7D72F630A77A50510B216
F85363155624C371064E027557B411F9DD08174C28E4C66CCED98C9D82EAB242
23F5B50253847D114C7A1B164CEA8EAD899965380B0778C579E97D5823E0C7B2
C327423748B95B92D5D63FE9D87597EB10050CE2255FC9F11047D378909ECE79
567438AD7C67856D3575F61DB30F9C36ADED911523ED593A5507662C217ABC9B
B5F835EB4E271FD3F1D1B20FD598EB2A868F81EE5A39B932941E3500AF4CBEC2
3E3DF7CAB83B5A27CA6A1F684992EFA8B940685851F61FFC6E8B776DB8501EFD
0D47FA4B70AFBEC452F42CC4AE0B590C41433CB4C15A55E2AD6AD8C81E65EFD6
89682807FE57CCA122E2DB38ED40E802665FEB18C39CE587B668B3C180A87A19
9A4177FF9DBC7622A941E2FB9AE0E9100CCD70D7AF4B94326ED1143004174CC6
D7D1234887C318F673B8EB138DA7F83ABF136B87739CB93AA581C3AFE26207EB
2E7480E120AC44BAAA2A8D91FEF7653F1DA6EF605E6766D5D775E4A72562F9D5
23E870006B66023536C0B2B51D9D9F7A8EF3906A1C4B2F8CA6F5DB0B6550B353
859AF48738BAA5D9EC9C92F0E0AABA7F7FA8971C996082A38444F92E5252AE2C
05612B518CECE80DFED2468DA651F3450174BE27060866F3E500B7DF90CDFA56
200640DD3BB6AA8CC3B141C6DB028390D00E65D8A79BBC5ADA4173C819B6BF5C
DD0B238ECF4F499B9D5A45DDF39A40AEDD6FDFF5983F5F4906FF1BE6E3F6C276
07306091C12BFD706FD493CCAF371734FFC32FDDD72E8A21A5727200B816C530
13190D5F427B4CAA2A3790C99F6A16182F033E3BDF191AB3C6BB81ED09F4947C
E8BAA9A4A60195A9AB1B9BDD80A34CA2D7F9A920399810DEFEAA726C5C321C14
EA81598F21B0E9C9F1125F788EF0F9B8B9271F8A72132F6F4C68CB310ABCD40D
D48549C6B069FFC9222A388C37B4A5062894F5757FE7D6AC03DF117925885038
07BB57D07C2B2F82F4CBFC79DFF698B3438F73549BAE43FF1AD01D7FEF19EDC3
17C3645720BE4D87A3FFCFEB081DBC6B9B58FF904FDA4799002C133FC064AF2A
F83C39F58B40484E4BE5985F59DE03C5FD8278D4C83A877A97ECB587848F3077
BB19A1B6B4D0C21C1E17298B183AFF8554FFBD1529B886EAF9565E4EAFF42467
314D73B0244246155A9F0854CB29CBBB7FE5BA8A734BD17A03A90D64D39C14DA
12EFC9707999012E68E571697D4CDE115DCF20E632FCE83EAFFF1F2B34F544F8
2C83FA822D2803E720B9B4A2A04C0982CC32B1212A98059486B1D48733F20BEE
25553B8D9DC7647EF16FBD9B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap10-pspic4.dvi)
@start /Fa 197[23 58[{}1 83.022 /CMMI10 rf /Fb 134[77
118[134 2[{}2 172.188 /CMSY10 rf /Fc 143[44 10[44 44
44 44 44 8[44 16[44 7[44 1[44 10[44 44 3[44 44 2[44 44
6[44 33[{}17 83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1709 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 44.34969 22.17484
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1709 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 40.54968 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fc(?-)43 b(p\(X\))639 902 y
 tx@Dict begin tx@NodeDict begin {10.74445 4.6333 53.3796 26.68979
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 639 902 a 32
w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.6333
neg 49.57959 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fc(?-)g(a\()p
895 902 27 4 v 30 w(G1\))861 877 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 861 877 a 861 877
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 861 877 a 714 902 a Fc(X)h(=)p 894 902 27 4 v 74 w(G1)861
877 y
 tx@Dict begin PutEnd  end
 861 877 a 829 1257 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 3.01385 } false /N@T-0-0-0
16 {InitRnode } NewNode end  end
 829 1257 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 3.8 3.8 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 861 1232 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 861 1232 a 861 1232
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 861 1232 a 720 1257 27 4 v 746 1257 a Fc(G1)f(=)g(1)861
1232 y
 tx@Dict begin PutEnd  end
 861 1232 a 1260 902 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 169.71854 84.85927
3.01385 } false /N@T-0-1 16 {InitRnode } NewNode end  end
 1260 902 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 165.91853 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fc(?-)g(b\()p 1515 902 27 4
v 30 w(G2\),c\()p 1809 902 V 29 w(G2\),!,d\()p 2190 902
V 28 w(G2\),e\()p 2482 902 V 29 w(G2\))1964 877 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1964
877 a 1964 877 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1964 877 a 1818 902 a Fc(X)g(=)p 1997
902 27 4 v 74 w(G2)1964 877 y
 tx@Dict begin PutEnd  end
 1964 877 a 1167 1257 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 107.34914 53.67456
3.01385 } false /N@T-0-1-0 16 {InitRnode } NewNode end  end

1167 1257 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 103.54913 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
Fc(?-)f(c\(1\),!,d\(1\),e\(1\))1613 1232 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1613 1232
a 1613 1232 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1613 1232 a 1472 1257 27 4 v 1498 1257
a Fc(G2)g(=)i(1)1613 1232 y
 tx@Dict begin PutEnd  end
 1613 1232 a 1254 1493 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 86.34932 43.17465
3.01385 } false /N@T-0-1-0-0 16 {InitRnode } NewNode end  end
 1254
1493 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 82.54932 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fc(?-)f(!,)f
(d\(1\),e\(1\))1613 1468 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1613 1468 a 1320 1729 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 70.59946 35.29973
3.01385 } false /N@T-0-1-0-0-0 16 {InitRnode } NewNode end  end
 1320
1729 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 66.79945 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fc(?-)h
(d\(1\),e\(1\))1613 1704 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0-0 /N@T-0-1-0-0-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1613 1704 a 1599 2202 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 3.33333 1.66666 3.01385 }
false /N@T-0-1-0-0-0-0 16 {InitRnode } NewNode end  end
 1599
2202 a 1613 2177 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1-0-0-0 /N@T-0-1-0-0-0-0 InitNC { NCLine  } if end
  grestore end
 1613 2177 a 1613 2177 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 4.6089 def
/r 4.6089 def /h 11.38892 def /d 7.04663 def LPutCoor end PutBegin
 end
 1613 2177
a 1575 2202 a Fb(y)1613 2177 y
 tx@Dict begin PutEnd  end
 1613 2177 a 2236 1257
a
 tx@Dict begin tx@NodeDict begin {4.85555 3.8 19.26662 9.6333 3.01385
} false /N@T-0-1-1 16 {InitRnode } NewNode end  end
 2236 1257 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 15.46661 4.85555 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap 5.0 3.0 0.0 0.0 2 DashLine  grestore end
 
@endspecial
Fa(:)14 b(:)g(:)2316 1232 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-1 /N@T-0-1-1 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap 5.0 3.0 0.0 0.0
0 0 add  DashLine  grestore  grestore end
 2316 1232 a 2316 1232 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 8.06558 def
/r 8.06558 def /h 9.08449 def /d 4.74219 def LPutCoor end PutBegin
 end
 2316
1232 a 2249 1257 a Fb(\002)2316 1232 y
 tx@Dict begin PutEnd  end
 2316 1232 a 2846
902 a
 tx@Dict begin tx@NodeDict begin {4.85555 3.8 19.26662 9.6333 3.01385
} false /N@T-0-2 16 {InitRnode } NewNode end  end
 2846 902 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 15.46661 4.85555 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap 5.0 3.0 0.0 0.0 2 DashLine  grestore end
 
@endspecial
Fa(:)g(:)g(:)2926 877 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-2 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap 5.0 3.0 0.0 0.0 0 0
add  DashLine  grestore  grestore end
 2926 877 a 2926 877 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 8.06558 def
/r 8.06558 def /h 9.08449 def /d 4.74219 def LPutCoor end PutBegin
 end
 2926 877
a 2859 902 a Fb(\002)2926 877 y
 tx@Dict begin PutEnd  end
 2926 877 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 900 4210 a(One)43 b(point)f(is)i(w)o(orth)e(emphasising:)
48 b(the)43 b(cut)g(only)f(commits)h(us)g(to)g(choices)806
4309 y(made)i(since)i(the)g(parent)e(goal)h(w)o(as)h(uni\002ed)f(with)h
(the)f(left)h(hand)e(side)i(of)f(the)806 4409 y(clause)40
b(containing)g(the)g(cut.)46 b(F)o(or)41 b(e)o(xample,)e(in)i(a)h(rule)
e(of)h(the)g(form)971 4556 y Fs(q:-)f(p1,...,pn,)e(!,)i(r1,...,rm)806
4703 y Fw(when)g(we)i(reach)f(the)g(cut)h(it)g(commits)f(us)h(to)g
(using)e(this)i(particular)f(clause)g(for)806 4803 y
Fs(q)k Fw(and)f(it)h(commits)g(us)g(to)g(the)g(choices)f(made)h(when)f
(e)n(v)n(aluating)f Fs(p1,...,pn)l Fw(.)806 4902 y(Ho)n(we)n(v)o(er)m
(,)j(we)h Ft(ar)m(e)g Fw(free)g(to)g(backtrack)e(among)g(the)i
Fs(r1,...,rm)d Fw(and)i(we)i(are)806 5002 y(also)k(free)h(to)f
(backtrack)f(among)g(alternati)n(v)o(es)h(for)g(choices)g(that)h(were)f
(made)806 5102 y(before)39 b(reaching)g(the)i(goal)g
Fs(q)o Fw(.)47 b(A)41 b(concrete)f(e)o(xample)f(will)j(mak)o(e)f(this)g
(clear)-5 b(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 189 201
TeXDict begin 189 200 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(10:)46 b(Cuts)41 b(and)g(Ne)o(gation)1357
b(189)p 0 TeXcolorgray 451 1051 a(First)42 b(consider)e(the)h(follo)n
(wing)e(cut-free)h(program:)522 1267 y Fs(s\(X,Y\):-)e(q\(X,Y\).)522
1366 y(s\(0,0\).)522 1565 y(q\(X,Y\):-)g(i\(X\),)i(j\(Y\).)522
1765 y(i\(1\).)522 1864 y(i\(2\).)522 2064 y(j\(1\).)522
2163 y(j\(2\).)522 2263 y(j\(3\).)451 2479 y Fw(Here')-5
b(s)41 b(ho)n(w)g(it)g(beha)n(v)o(es:)522 2694 y Fs(?-)g(s\(X,Y\).)522
2894 y(X)g(=)g(1)522 2993 y(Y)g(=)g(1)g(;)522 3192 y(X)g(=)g(1)522
3292 y(Y)g(=)g(2)g(;)522 3491 y(X)g(=)g(1)522 3591 y(Y)g(=)g(3)g(;)522
3790 y(X)g(=)g(2)522 3890 y(Y)g(=)g(1)g(;)522 4089 y(X)g(=)g(2)522
4189 y(Y)g(=)g(2)g(;)522 4388 y(X)g(=)g(2)522 4488 y(Y)g(=)g(3)g(;)522
4687 y(X)g(=)g(0)522 4786 y(Y)g(=)g(0;)522 4886 y(no)451
5102 y Fw(And)g(this)g(is)h(the)f(corresponding)c(search)k(tree:)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 190 202
TeXDict begin 190 201 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(190)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1176 2576
a @beginspecial 139 @llx 469 @lly 362 @urx 662 @ury 2230
@rwi @setspecial
%%BeginDocument: chap10-pspic5.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap10-pspic5.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 139 469 362 662
%%DocumentFonts: CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap10-pspic5.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 88 /X put
dup 89 /Y put
dup 105 /i put
dup 106 /j put
dup 113 /q put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F977EFEFBE4B0AC369070B3652B7542ED968F2FFE533C
CC1D8B7C35A5E29CBF897D9C8EF5A14FAB67FB0F77D9BC7ECA7FEA2B7A35DAE9
DF290446920B4C534715BEEF4819E438491C9DAB191FED40312E6AD740B0E8DC
830511BACBF4195AFB170B0879363CB5A6EFD84CBABDDA3912B02A6B2B3B7C1E
A96FA4236B559CF53D112DFDDD7FF4E0450EC05D7CE5569AB4015AB7EE48E8C9
A9FF38FAB1DB04D7E857CB98BD6EB89942D636B8C192807D64F545448A59934D
385554B18368BBBE292FF30EBAF2055448995FEC91991A3409A41865DFDE675D
073F415271514ACFA19D2B9D2E2D6B74355655EB64342E5FB6E18F2149FCF4C0
F743ABCF9B953972BCABAB06157DBFB18A3A746FA3102EAEEACCE12DFC18BBDB
6FD96D53CEB809BCEB184AF69E05F088F10DE2078E17FA0A86A5017656773E7A
78C61720415EA8334CC2F26CF23323EF301095C6E99EFD1612EC925F74956D7C
9B33DFE35B6F5B28F68AB7880F9F127C68FD1978342F0243E90FA83E34CF238C
F8C95A507E98CE91CDD1A857949EE4900E844103E4045752282535996BB5A11D
194DA347C0CBC91F06FE436C8F2641A0331A1B124FEF7F6297759E9893FE26C6
58B30905B56CCEDE37F37167FBCFA2CC9AF44D03B562DFEE4836C38AB1F2B58D
683AEB91505FAD2B2CCF4CFBA53477316D1F4EA0CBA36C3B9A4D6E654B976E73
6091D33F5E6D4508278FE8CB356B5B756BABB5AD2ACD4E749734781021CBF820
4C93E1E8BEEEBEAAE575B67C26D06A35A0D394EF1A332D55D8641DE41479CD3A
02BE03C555B0808D40B953D2EC56876077700E2A7FA861500A83FA40F7BEECD7
8B8AE3B5A39F69C84B6C55AE734229625C964C5B35F141AB733F8BB4A5B3301C
A9B795626F48588DD09D1AAF7BD6761DF5029011D8526850A8606A7EF26357BD
2707948C03FF764C914B4C11AEA7B23988D184F29AAC5C274A6EDB05374C2AAD
AA24486F9A831BA1179B2EA360281724BA210DFCE1D1388FDAA040A900CD88D7
39CAFEEBA00BC42B92571D1CB29505E041FB5D15E78F084969D4175F0202B68C
507C4C5DB9E33952A62D116F130A4E7FFFB11805152716480C8922794B1094DA
E152843319FFCD5AB8DD414AA8135C8E1DC0A4707D2549435B525F2651793E24
8B766B14312F79498447697ECDC84D3F29B4B1E6EDE30B7CCD28B6DE66C5F0C4
1B7206F9B62728FC8905C1004C71572FB537C859DBDB759D19A6F9ED2ED65CE6
C88304C1B997A491F8A791219C9BF8B526AB86059610EB26CEBF4B3683FCA929
E0834456AA879B90896E2F250369FC6B6F5504B4E002A992E25156A3224212F6
086D865C491EADBE21EF5DAEA5041C617268F63AF0978DDF59311FBD5C2A4352
9A894801EBF259D3C9DF710F88DDE482BD73951D43521475AA7F6A69BCBD3041
6E874194A2C4AA475A156096793EF1013BECEDFB1567439AF718D3B7B02416DF
5DECABA354B335C2D5487DDBDC27DCAA73799D9308C7344ECF730045CCE64066
306B98AED8E8A2C89898F7DFE1221DB2141FF3E6B825F8614676C7D0F98CF455
C5BA967E93DDD51184B814EDC24C3140E4EC906A5D1E4C58E6471FC04A20B0D1
8E5084C2EF591E9922AC5D7B7DC01070725DF295DAAF21DB214A7EB7317E5312
1418D9CE58CCD3407F05019CF493CEAAB36A6F25C04968AA801A46BCA9E0AE0B
C347E34E287A975CDD8C4D720EBDB7C7064D39ED4002559F8D4DFEF81A9B1FA7
62109D5886BF9CE95E9B6D4F8F652A67D2F5A6F86FFB094793BFC01FD4FE641E
BE81BC162C737FDD6FD4C3F6CF2688AD5470018A3A25DE52599A06FBDDC4081F
7A0A37E5B5DBE210ED390137714ED15192DA6AAA5BA61365E0BC1E2EA30E1471
75D400559FA3197B114E80C716E2A28DF7F3753A0E399368F112736EC85AE934
384BD2C37346F1C23170D055FEEC32CB76364270266C5FDD06CA4AFDB10985EB
8E446E6324976F54A91DEF5E9EACBB7F56025D56B5995584ABC44F621B061CC7
093730FE1C0B4AEDD95F8530968B43C07BDB026529287868F1A012D2896DFBD3
2164C5A8C686F4E4A3F2972382441633AB9F4342BF135B8336E5261C6E4CABBD
E97C779758F505CE4E67063193FE50EF77073E8139AE61B458FA634E90631952
E9128FB04BF7B01394A89239D468C505AEAB9ECB57017A78DA901C0B1F4DBDFE
9A898723BD98BA37133B3791F5A4233D7882E9B8F42D90434A48E3744A8DE1B0
C42D0B3E7A7D379D9E5F9BCA2B0BD5C991CD7C83F9931A7999FE0DF0D457EC37
0A83F0835DBE608C044D459E36097C8EBEF1BE4BA75016DDE7A620C47B25DCEA
2A45A0235DE6CB1AF51A704F9FE9AF1454D0F972A836D8913BACCCA3738A02BE
845A5A229171418522A0D9777006F34A570894E270F385BA03F1F660E3BC6DF0
8E0C5371C2FA2214F61F94203D3B194AECC28144CB83AA3779463CF7B0684608
8A92AFDC97EBED583E7C2E9CBE279E022D40ABAE45C47F563B7B0959A7F09B22
DA93B27DF5350603F96ED2D241D8AAA542C228774387DC63593135122925F0E5
E532D1DB24C891D5B8499275F6CCC7C89D2FB896653CB353F3EDC520D290F4E4
1D5BA4629300C3197B13303EDCBCDCC580D115ABC24656CF856C445E00A535C0
34C220E0057682FFAE785ECC8700DD3DAFAFBB2EDD2C3164086C2178E3726496
098EE814A6B793611881E22203FC23EEC76FECC53D5F90D21ECD97649134BDA4
CE27D47BF65E8E64023B8BD242CAA7C7A518D4E88B742A157C64B1FF857564BC
53309C191D09057414513608E97DDA76B97CC18DB34E054E701C45FAA9BAFBF1
F565592897441D1373D8DC493532D105336042E5AF5A3205483F6CC843BDFA75
036C40B556262F2339871B8EEFEB19F5E1C69C7AC92473F8BBFD598652A5DE82
7A0E02CD0CCCA86CD502C3E23E72A99373D4CC9F198268B1A5EF2C7D92EDB517
D4F9AEAA96C951163A1E95D8C89D48FD39180B0074861CDA6823B79233D29F4C
9D54DD53711D764AE4EB0189D00E9D2D7784CC724E7314E3CB55B1340A216A0C
7DB39C0EF5A3971B19A226EA8995623BD6D6AE819C0163822047F7911F858833
45A2EF10EEB7579C582464D04F519F52BDEA2A00E33BFB6FDEE035C7CD1C46CD
71F1B13756C693DB788A890CE18533F0C21C9CCE0A41AEF65004B0218895B360
881FF0537A29EF15044BAD0A2F5DDC4D4490E6C60689DCF08B9B1DCAFED286A7
82878A71434F46A17EB905650D92D4A40026E01BCE9092C79539210FBE05A990
150416C5E9554AD861517505CEE8BB76F13312B81CC9189C92A0CD399B942D59
955332A1CC9E90A2C6B9EF40F0EB3E4BDABBF4DBED83EFC4C70802DB93CF01F6
00C74BF4D4DB0F414A8611F7994327FB0585A845F83BE93725A0719FA3C66753
E04550E95E2C7CB8F42BD8EC6F7A0B8DD6CE9A06C1824DF16FE9A425BAFD5F90
0737769CBB3E003287D8D3528F17D87933FCA2F03FDECB6300649B8A09D8234D
27C43C08B7B723B91F1C970976AD01340C9BD8429BE164322B7E3A4537C4FEFD
8173E964F26DC3DB43CBCDB737A2CEEB73BFC5E0FB90418B4D41AE4984185BF0
6965E3E308883D04AAE5214DA8CD8233B1B6E7DCBDCE14657BE5FF7B15F69760
C30A4EBEE2BFCE517775850C25630B4EDFE80EF84559FF75387E854119521110
B16363529DD3A3C7F21DEF8E7151B351E8873A4D7DCC79F8735215CF245D06DB
8A631E1507644675FA6958FD7EF6FE655309BF47C9BB139DEDED9BAA77C8EE37
FEF8C56BCF32B80DCB21BDC6895ADA27103235E85E06D2F2D5467E999E4DA126
0EEF5285F12FC591A0073FD4FDEB188475474DB833064CBBB3405430FF38B50F
FE0CA98895D3D1BEFEA6077AA746E2DAEE8687BA55C6309749D589D511483380
6642485387E9168CD6A842FBC65BA0B7791600B9C85CF64BD41FC2885B38B725
9249DC96E3D632E1D0B058D97B9DB3FB5A57C8EA4D2F1B07F1B022E02619449F
3B599405410000705A994A8CFD50A4214AF6B0F95AD9759E606CD807235E5F49
D084D530D8EA3372171FD26DC906874D843831F232A90DE3238986B68CAED804
ABD9CE2705E9A632E350E53A5A5C4EE0DAC8EBFEDA2E5F4006B2CBE3F27E497D
BAC3CD263723FBFACCDA2754CAA97EDFD4884D73CFFC97663A4E039A14E96488
5AEA603E8384C0FD7B7D2627CAB472B1DA3690A34A860A3204AF932B1A44E7CB
A12017897EAC6BC1B3F77D64F09269B09618406F2183ACD0C36B96C20E2C6807
0D9764FF2BA151302B228841C580B18C6F2C72A9E6DA1306B14EA69F40CE42CE
9D83099E4AD6778ACF8660D1836CE8B617D3CAC681ACD470B30F89CCD2900C26
07EEE03B1646BF39D26EB60906BCA75D53D0B23D08DB06AE0188EA60F26BAFBA
129EB42855D343A35BE8EE7FC5D2CFF72CFA26C8130C69C31FC45C80977C7812
6F09EBAE65E368C7465E6DCD933A51DB64DD691212FDE73F5FEA439069954AFF
D441EABFE5E509C35FB87ADCEDF1CB773B9A610D8536A1DB406F39E275E415F2
347B1A33F7D0EDB2E3369D0713EBFD23F1A0BFDB527BB45255FCA36FFCD949E9
AB9CC24B39401BAB24DECDF8AC65ED8DE14AFC8B8452C7193FB9F44C1F23E9F6
4FB23BE32A3C265BD9425931FBFE1434A875CDD76F461604664EBB08002EA178
77E71506BD7D74D599F073384746B0910BA9E173FDB76B3D29A4BCCCDD85463C
524D819938B3F30C4E6627A2C7ACADC711760B18536EB37FAB9B24710EB6453D
9A021AA23BD118D13C6DE5D11B25877B7269B8F89DF7D608163B794A28F23990
114C799CC28C4C802D06F03DBB53F50EA5048513EA48194093668D22E7BB0763
0EBC781E1AC31DD9CAFBC8F2FB7F1794FF6744E65331234276082E17993BFB15
5A2D1FA71B51D22B92EFDDD6945273DD6DC37C9790A43CF6D3FBC09963E26817
78521870E80C5A69C5F7C9C7E95E6FBC7E2E58F4B878CCCE4904ECB6F1054221
AABD427F84FAC6F45D0E78BF2EC3E28E7FDFA8AD0E42C2E0D4CE45087025596B
C0CC97FC7002ACF15CEC1FEA6C65ACDB11703AC5CD291C0EC45439D0E95E84CC
BAE617599263510C05AE5E8555117336605FE785C2412CBDE0C76A6ABA7A87C6
AA641E0DD72100F1EB1E09DDF7A7C0CC1B77F052A00369AC53111002A771044B
BB1A4EB9B964BE75B38D1D1703591E283752155D9A3FABF08480D66149A85389
779FD83C9F2847950D47271561F4A9E0161FFFD9E002AEFAF688AB62123F565F
DA73C2C8ACC058ACE447D8C6D644DC4D06096C19298E6901D334DA2E4D83B4E5
24390F73BEE3DFC6F6521F120D8A002A85EEB2D2BECF5AE595B22DD0521DD656
7907824B7FA12795604518A43E0E79BA1E38A793A06354C5DC70463A87C0D189
80D77636A3E5B11A28440C3AD0784920DA47E00187D1B4855D1FCC2AA7C35089
CAC09A431C2C115A62BCCAC2003D5A4FB45AD74FE8A6F90D80B411745AAE6A2D
278A6B8B812BC3A3392FF7732BC22A009DB2DA3EDE5B2ABFE43E61A9D69D76BB
73E2D13B5D4923B09DC81F9D9FE6DE48957DCD5F7E9B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap10-pspic5.dvi)
@start /Fa 140[44 1[44 6[44 44 15[44 44 16[44 7[44 1[44
7[44 44 44 44 44 44 2[44 44 2[44 44 40[{}19 83.022 /CMTT10
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1530 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 54.8496 27.42479
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1530 548 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 51.04959 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)43 b(s\(X,Y\))1181 902 y
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 72.90941 36.4547
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 1181 902
a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 69.1094 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)g(q\()p
1437 902 27 4 v 30 w(G4,)p 1599 902 V 30 w(G5\))1484
877 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1484 877 a 1484 877 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 40.52963
def /r 40.52963 def /h 3.09726 def /d 4.40273 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1484 877 a 1148 902 a Fa(X)g(=)p
1327 902 27 4 v 74 w(G4,)g(Y)g(=)p 1707 902 V 74 w(G5)1484
877 y
 tx@Dict begin PutEnd  end
 1484 877 a 1116 1139 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 88.65927 44.32964
3.01385 } false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 1116 1139 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 84.85927 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)f(i\()p 1371 1139 27 4
v 31 w(G4\),j\()p 1666 1139 V 29 w(G5\))1484 1114 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1484
1114 a 796 1493 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 53.3796 26.68979
3.01385 } false /N@T-0-0-0-0 16 {InitRnode } NewNode end  end
 796 1493 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 49.57959 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fa(?-)h(j\()p 1051 1493 27 4 v 31 w(G5\))1017
1468 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1017 1468 a 1017 1468 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1017 1468 a 876 1493 27
4 v 902 1493 a Fa(G4)g(=)g(1)1017 1468 y
 tx@Dict begin PutEnd  end
 1017 1468 a
639 1847 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end  end
 639 1847 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial 706 1822 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 706 1822 a 706 1822 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 706 1822
a 565 1847 27 4 v 591 1847 a Fa(G5)g(=)g(1)706 1822 y
 tx@Dict begin PutEnd  end

706 1822 a 950 1847 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-0-1 16 {InitRnode } NewNode end  end
 950 1847 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial 1017 1822 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-1 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1017 1822 a 1017 1822 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def LPutCoor end PutBegin
 end
 1017
1822 a 876 1847 27 4 v 902 1847 a Fa(G5)g(=)g(2)1017
1822 y
 tx@Dict begin PutEnd  end
 1017 1822 a 1262 1847 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-0-2 16 {InitRnode } NewNode end  end
 1262 1847 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 1329 1822 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-2 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1329 1822 a 1329
1822 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 1329 1822 a 1187 1847 27 4 v 1213 1847 a Fa(G5)g(=)g(3)1329
1822 y
 tx@Dict begin PutEnd  end
 1329 1822 a 1729 1493 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 53.3796 26.68979
3.01385 } false /N@T-0-0-0-1 16 {InitRnode } NewNode end  end
 1729 1493 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 49.57959 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fa(?-)f(j\()p 1984 1493 27 4
v 31 w(G5\))1951 1468 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1951 1468 a 1951 1468 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 1951
1468 a 1810 1493 27 4 v 1836 1493 a Fa(G4)g(=)i(2)1951
1468 y
 tx@Dict begin PutEnd  end
 1951 1468 a 1573 2083 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-1-0 16 {InitRnode } NewNode end  end
 1573 2083 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 1640 2058 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1640 2058 a 1640
2058 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1640 2058 a 1498 2083 27 4 v 1525 2083 a Fa(G5)e(=)i(1)1640
2058 y
 tx@Dict begin PutEnd  end
 1640 2058 a 1884 2083 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-1-1 16 {InitRnode } NewNode end  end
 1884 2083 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 1951 2058 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-1 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1951 2058 a 1951
2058 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def LPutCoor end PutBegin
 end
 1951 2058 a 1810 2083 27 4 v 1836 2083 a Fa(G5)e(=)i(2)1951
2058 y
 tx@Dict begin PutEnd  end
 1951 2058 a 2195 2083 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-1-2 16 {InitRnode } NewNode end  end
 2195 2083 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 2262 2058 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-2 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 2262 2058 a 2262
2058 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2262 2058 a 2121 2083 27 4 v 2147 2083 a Fa(G5)f(=)g(3)2262
2058 y
 tx@Dict begin PutEnd  end
 2262 2058 a 1964 902 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-1 16 {InitRnode } NewNode end  end
 1964 902 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 2031 877 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 2031 877 a 2031 877
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 31.49973
def /r 31.49973 def /h 3.09726 def /d 4.40273 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 2031 877 a 1769 902 a Fa(X)h(=)f(0,)f(Y)i(=)f(0)2031
877 y
 tx@Dict begin PutEnd  end
 2031 877 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 900 2779 a(Suppose)g(we)h(add)g(a)g(cut)g(to)g(the)g
(clause)g(de\002ning)f Fs(q/2)n Fw(:)971 2960 y Fs(q\(X,Y\):-)e
(i\(X\),)i(!,)g(j\(Y\).)900 3142 y Fw(No)n(w)h(the)g(program)e(beha)n
(v)o(es)h(as)h(follo)n(ws:)971 3323 y Fs(?-)g(s\(X,Y\).)971
3522 y(X)g(=)g(1)971 3622 y(Y)g(=)g(1)g(;)971 3821 y(X)g(=)g(1)971
3921 y(Y)g(=)g(2)g(;)971 4120 y(X)g(=)g(1)971 4219 y(Y)g(=)g(3)g(;)971
4419 y(X)g(=)g(0)971 4518 y(Y)g(=)g(0;)971 4618 y(no)900
4799 y Fw(Let')-5 b(s)42 b(see)f(why)-5 b(.)p 0 TeXcolorgray
909 5002 a(1.)p 0 TeXcolorgray 41 w Fs(s\(X,Y\))44 b
Fw(is)k(\002rst)f(uni\002ed)e(with)i(the)f(\002rst)h(rule,)h(which)d
(gi)n(v)o(es)h(us)h(a)g(ne)n(w)1013 5102 y(goal)41 b
Fs(q\(X,Y\))m Fw(.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 191 203
TeXDict begin 191 202 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(10:)46 b(Cuts)41 b(and)g(Ne)o(gation)1357
b(191)p 0 TeXcolorgray 0 TeXcolorgray 460 1051 a(2.)p
0 TeXcolorgray 41 w Fs(q\(X,Y\))50 b Fw(is)j(then)f(uni\002ed)f(with)i
(the)f(third)f(rule,)k(so)d(we)h(get)f(the)g(ne)n(w)564
1151 y(goals)45 b Fs(i\(X\),!,j\(Y\))-5 b Fw(.)57 b(By)45
b(instantiating)e Fs(X)i Fw(to)g Fs(1)o Fw(,)h(Prolog)d(uni\002es)i
Fs(i\(X\))564 1250 y Fw(with)38 b(the)f(f)o(act)h Fs(i\(1\))o
Fw(.)45 b(This)37 b(lea)n(v)o(es)h(us)g(with)g(the)f(goal)g
Fs(!,j\(Y\))n Fw(.)45 b(The)37 b(cut,)564 1350 y(of)k(course,)f
(succeeds,)g(and)h(commits)f(us)h(to)h(the)e(choices)h(made)f(so)i(f)o
(ar)-5 b(.)p 0 TeXcolorgray 460 1562 a(3.)p 0 TeXcolorgray
41 w(But)46 b(what)f(are)h(these)f(choices?)58 b(These:)d(that)45
b Fs(X)d(=)f(1)o Fw(,)47 b(and)e(that)g(we)h(are)564
1662 y(using)37 b(this)i(clause.)44 b(But)38 b(note:)44
b(we)38 b(ha)n(v)o(e)f Ft(not)i Fw(yet)f(chosen)f(a)h(v)n(alue)f(for)g
Fs(Y)o Fw(.)p 0 TeXcolorgray 460 1875 a(4.)p 0 TeXcolorgray
41 w(Prolog)48 b(then)f(goes)i(on,)g(and)f(by)g(instantiating)f
Fs(Y)i Fw(to)f Fs(1)p Fw(,)i(Prolog)e(uni\002es)564 1974
y Fs(j\(Y\))40 b Fw(with)h(the)g(f)o(act)g Fs(j\(1\))o
Fw(.)46 b(So)41 b(we)g(ha)n(v)o(e)g(found)e(a)i(solution.)p
0 TeXcolorgray 460 2187 a(5.)p 0 TeXcolorgray 41 w(But)k(we)f(can)f
(\002nd)h(more.)53 b(Prolog)43 b Ft(is)i Fw(free)e(to)h(try)g(another)e
(v)n(alue)i(for)f Fs(Y)o Fw(.)564 2286 y(So)j(it)g(backtracks)f(and)g
(sets)i Fs(Y)e Fw(to)h Fs(2)p Fw(,)h(thus)e(\002nding)g(a)h(second)f
(solution.)564 2386 y(And)d(in)f(f)o(act)h(it)h(can)e(\002nd)h(another)
e(solution:)47 b(on)41 b(backtracking)e(again,)i(it)564
2486 y(sets)h Fs(Y)f Fw(to)g Fs(3)p Fw(,)g(thus)g(\002nding)f(a)h
(third)g(solution.)p 0 TeXcolorgray 460 2698 a(6.)p 0
TeXcolorgray 41 w(But)g(those)f(are)f(all)i(alternati)n(v)o(es)e(for)g
Fs(j\(X\))o Fw(.)45 b(Backtracking)39 b(to)h(the)g(left)g(of)564
2798 y(the)c(cut)g(is)h(not)e(allo)n(wed,)h(so)g(it)h
Ft(can')n(t)f Fw(reset)g Fs(X)g Fw(to)g Fs(2)o Fw(,)i(so)e(it)g(w)o
(on')o(t)f(\002nd)h(the)564 2897 y(ne)o(xt)43 b(three)g(solutions)f
(that)i(the)f(cut-free)f(program)f(found.)51 b(Backtracking)564
2997 y(o)o(v)o(er)c(goals)h(that)g(were)h(reached)d(before)h
Fs(q\(X,Y\))g Fw(is)i(allo)n(wed)e(ho)n(we)n(v)o(er)m(,)564
3097 y(so)42 b(that)f(Prolog)f(will)h(\002nd)g(the)g(second)f(clause)h
(for)f Fs(s/2)o Fw(.)451 3326 y(Here')-5 b(s)41 b(the)g(corresponding)d
(search)i(tree:)p 0 TeXcolorgray 0 TeXcolorgray 889 5102
a @beginspecial 139 @llx 469 @lly 323 @urx 662 @ury 1840
@rwi @setspecial
%%BeginDocument: chap10-pspic6.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: chap10-pspic6.dvi
%%CreationDate: Mon Jan 28 11:55:40 2013
%%BoundingBox: 139 469 323 662
%%DocumentFonts: CMTT10 CMMI10 CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E chap10-pspic6.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.28:1155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /multiply put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D49063DBCB864620B95E609490BC8DF6000D7A5
719547C13EFEC5D493B96258219E24A8610B0ADB1C0A18A77C585E5A02ED28AA
ECA169B603EEFE1A3C6836BEEA24E3F0BCDFE6FA3453644EF95188093CD7E3B6
21AC046B26FCF95B35F367BA5A58349EECA87699F74AC66159628EB276D51557
249C7E03AB60CE064F592E23FF24C30EE4648FF6179287048EA059729C15897F
4BF1DA211BF432859F0AF4B59C16FD2A09093C887E8C3DE5943475C2C975E347
7362D2537884A78C5F4B5CA5BD5D4CB8008AB6FF586DB951CBDC319ED4B1390F
C46DE8986E5BC18BCF36F900BCA97E4D503C6B481B4C3EC751D4F9F32F04ED79
4990D5AC273E238F3BCDAF71322C0E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC8944C70F30925FB48A16342CC26D444F54CA15E5A624C4A2DAA2AEF8
404145BBA339F2A2D6FC2F3ECE54387761CA1213C8D56FF96E37C6147CA44B84
262EA87E7CC10D931E6B5B80D7F09813498497AA84ACB4AC69BC6C8481ED2953
084F560D7B1CF90555E69BD2AF7C5D944E8E3506165014652462BE1BC81CA341
E1B0725159D36DA0FFF3577D1DEBC5D91AE683FB0384
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /exclam put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 61 /equal put
dup 63 /question put
dup 71 /G put
dup 88 /X put
dup 89 /Y put
dup 105 /i put
dup 106 /j put
dup 113 /q put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB287028244A9F9FDEF8C2B36DF918584
C497B6EF38C81511BA8FF40D2167F61BF37EACD032AF374374666771E209FBF4
909749EF2864DAAFC234CE96AEEC2F362D222A5CEB4FEA889E98D7E8EC3D47A1
B791DC4533400B7F74D8945AD99BE46F67ADE1CF852DD818F07DE0AA5CFA497E
5760A0B5A7AB9916AF83CC04157B719DCFC9AF53C4BFB68D68E96228E2CB7825
85749780483D682D172A2CAF15C4D2B23690A853704241F8D1B2CF663368177B
9AF0F93491F6DC3F1E05A2048535A3660E391EBFA7E582B050E80376FA16D597
879F762BF7CE394D18DC76D2063012EEEF4E78760F8A25C60981E6372E49D716
14BB49632476F2CCA548F5131F2E9E392F4234435AC61CF10377BE5E51E570BD
135E3CD4C130FFD5EBA5C71476819A2F4556AA437BAD036E1931583807EE0A93
E84E169855DA91D630F30DF34012DE1F4C98E20602B36CDF7FAFA1C93E7C6C1E
357F3E111E41704C0F8A68C95F424C6DA581B49C709E1E98149FEAAB15DFE7F9
4023EFA8FC9237938FF8642BD551DF6E19A3D52FDFD918E347DE8BD4C3C7EF12
F4BAEEDA8DD594F9FDD3F6EE9C66AC18D5E9C36515B2BDD48481B0B8843277A8
D8F85CF61101D2FBB9CAFCD166EC2F56AE32A3728F0383932B1082FFFF19F0EF
F62BF2829B0317676F0F977EFEFBE4B0AC369070B3652B7542ED968F2FFE533C
CC1D8B7C35A5E29CBF897D9C8EF5A14FAB67FB0F77D9BC7ECA7FEA2B7A35DAE9
DF290446920B4C534715BEEF4819E438491C9DAB191FED40312E6AD740B0E8DC
830511BACBF4195AFB170B0879363CB5A6EFD84CBABDDA3912B02A6B2B3B7C1E
A96FA4236B559CF53D112DFDDD7FF4E0450EC05D7CE5569AB4015AB7EE48E8C9
A9FF38FAB1DB04D7E857CB98BD6EB89942D636B8C192807D64F545448A59934D
385554B18368BBBE292FF30EBAF2055448995FEC91991A3409A41865DFDE675D
073F415271514ACFA19D2B9D2E2D6B74355655EB64342E5FB6E18F2149FCF4C0
F743ABCF9B953972BCABAB06157DBFB18A3A746FA3102EAEEACCE12DFC18BBDB
6FD96D53CEB809BCEB184AF69E05F088F10DE2078E17FA0A86A5017656773E7A
78C61720415EA8334CC2F26CF23323EF301095C6E99EFD1612EC925F74956D7C
9B33DFE35B6F5B28F68AB7880F9F127C68FD1978342F0243E90FA83E34CF238C
F8C95A507E98CE91CDD1A857949EE4900E844103E4045752282535996BB5A11D
194DA347C0CBC91F06FE436C8F2641A0331A1B124FEF7F6297759E9893FE26C6
58B30905B56CCEDE37F37167FBCFA2CC9AF44D03B562DFEE4836C38AB1F2B58D
683AEB91505FAD2B2CCF4CFBA53477316D1F4EA0CBA36C3B9A4D6E654B976E73
6091D33F5E6D4508278FE8CB356B5B756BABB5AD2ACD4E749734781021CBF820
4C93E1E8BEEEBEAAE575B67C26D06A35A0D394EF1A332D55D8641DE41479CD3A
02BE03C555B0808D40B953D2EC56876077700E2A7FA861500A83FA40F7BEECD7
8B8AE3B5A39F69C84B6C55AE734229625C964C5B35F141AB733F8BB4A5B3301C
A9B795626F48588DD09D1AAF7BD6761DF5029011D8526850A8606A7EF26357BD
2707948C03FF764C914B4C11AEA7B23988D184F29AAC5C274A6EDB05374C2AAD
AA24486F9A831BA1179B2EA360281724BA210DFCE1D1388FDAA040A900CD88D7
39CAFEEBA00BC42B92571D1CB29505E041FB5D15E78F084969D4175F0202B68C
507C4C5DB9E33952A62D116F130A4E7FFFB11805152716480C8922794B1094DA
E152843319FFCD5AB8DD414AA8135C8E1DC0A4707D2549435B525F2651793E24
8B766B14312F79498447697ECDC84D3F29B4B1E6EDE30B7CCD28B6DE66C5F0C4
1B7206F9B62728FC8905C1004C71572FB537C859DBDB759D19A6F9ED2ED65CE6
C88304C1B997A491F8A791219C9BF8B526AB86059610EB26CEBF4B3683FCA929
E0834456AA879B90896E2F250369FC6B6F5504B4E002A992E25156A3224212F6
086D865C491EADBE21EF5DAEA5041C617268F63AF0978DDF59311FBD5C2A4352
9A894801EBF259D3C9DF710F88DDE482BD73951D43521475AA7F6A69BCBD3041
6E874194A2C4AA475A156096793EF1013BECEDFB1567439AF718D3B7B02416DF
5DECABA354B335C2D5487DDBDC27DCAA73799D9308C7344ECF730045CCE64066
306B98AED8E8A2C89898F7DFE1221DB2141FF3E6B825F8614676C7D0F98CF455
C5BA967E93DDD51184B814EDC24C3140E4EC906A5D1E4C58E6471FC04A20B0D1
8E5084C2EF591E9922AC5D7B7DC01070725DF295DAAF21DB214A7EB7317E5312
1418D9CE58CCD3407F05019CF493CEAAB36A6F25C04968AA801A46BCA9E0AE0B
C347E34E287A975CDD8C4D720EBDB7C7064D39ED4002559F8D4DFEF81A9B1FA7
62109D5886BF9CE95E9B6D4F8F652A67D2F5A6F86FFB094793BFC01FD4FE641E
BE81BC162C737FDD6FD4C3F6CF2688AD5470018A3A25DE52599A06FBDDC4081F
7A0A37E5B5DBE210ED390137714ED15192DA6AAA5BA61365E0BC1E2EA30E1471
75D400559FA3197B114E80C716E2A28DF7F3753A0E399368F112736EC85AE934
384BD2C37346F1C23170D055FEEC32CB76364270266C5FDD06CA4AFDB10985EB
8E446E6324976F54A91DEF5E9EACBB7F56025D56B5995584ABC44F621B061CC7
093730FE1C0B4AEDD95F8530968B43C07BDB026529287868F1A012D2896DFBD3
2164C5A8C686F4E4A3F2972382441633AB9F4342BF135B8336E5261C6E4CABBD
E97C779758F505CE4E67063193FE50EF77073E8139AE61B458FA634E90631952
E9128FB04BF7B01394A89239D468C505AEAB9ECB57017A78DB5FF45533DF0FA1
577850A0EFE5C777718B31171B71392DE09D9FB16645D354E54ED649EF82A224
B8AF8E824B3F230B8C53B0D7733902B7017DC77784962D85A4631666E9214C92
A30749916DD273081E3D44822179232D3D170AE122B30847B7C96842A28A78AD
38783BE43DCA3FA3FABD67C46C439DF0317AACB177916355D5A5931C3D690132
08D49D74D91DC85E362C68EC19B935E25579166039CF78596B1856385CDE745C
84EFB50EAF5445AA25C1647FE0B9F8BD8EF3042631BC9CDC26F17453B78C20E3
3D5399B4435543A8292CF01D08FC50BA012E8F040BEA7A884C3A7D1E27A707C9
10F41C1B3EC962E9A80B8A57DDD9101FA304AE6E3905EB214157E8422B834BCD
9C33DF3A105534729DB96EC1C36C72AA60D2757370D927D21EDF66CB6612B0B6
46D83FDA7099C92AB996EFBF3477A62270C2E611C8F3E4CCF14C9CEABC124378
B1464A1C76D9B9713313729774A088CDFFA58661ACA2B7A02854625A7959846B
06AD1B1D3117B34A90EAE231C146C59C30CEE170C29995A80D60672A349E2E47
68A8AFB5C3D024BC15396649666C1F5102F39DDCF8689055ED586664282FEA8F
64309385464FF9C45E79567899E689FC762E73DE1C8968B42E3A404C63F50E99
2D3F7D7494A3924EEDFF61D8947254747CF94C584B57C6130BD779B5DD9B5E50
1BBD8A2B9A1406B85D940D821D394DED28494847986A6834DC9EE33E9008EDE8
D4093BF1C73260137AD37A5F4A7BE92A57EBE7AB4D7540685E2F1155F981A49E
7ABB3BD9E3F2534532895BA944237C11E8EB6BF76A336190AC3A213D8EA28E4E
F4CA2CA1A6C5E54F8C42DE4EE5DF9E8478CF6A72E34561D6877AB01B6246B8B2
DEADDD475CAF867F02B429802E413953E70E3A5B9032D4964569826B180E20E9
321895CD2E0BE04C8ECA9272E3CF8DB50F6BD1B64A5E298E35D3720C2505EBA0
422489E3C3B8D394958C13C828984D935F13D5F020430951A1EAEB40AC3B59FB
3E97203B0D4E7D221F1B6B276437E6E54E99C1DB82AC245BE526EA38878DF077
A448ABDFAEA1B25249369C5AD54E6EED29376FEEF2759D0B04AB2216A6D37A01
B9923CA27605396F11A58F2307770F5ED379DC633A9E77EC4A3B10A2090566D7
99923F9B61B5C428901EDCC06D3E7D6F5FC092FD15BBB49C7596C81F85A1F732
052BB0C4C366C07ACD4E1D3690C00158004834794457A0B24947F97844CC05A2
B1B20403BDAAD1545B98D63879980D4A9D8862C30477E71CB0B330761A7F44A0
41F9B131C61F017B73CBC08E1FB5F48072BA8913761703E4A1D1F194428EBA15
F5163FCC2DE27644734C3E3AA61EABCF8B71772336C87C76A96CDAA196DF2285
4300CC099A553F57BFE1F80A31A261714E4F054FD1C9BE3BDECD0A2C6A076258
8EFDEC799DEA9B4295851C797CF7495E9766ECD3F1681ED6F41E86D2AB549E89
BBA3B130E4945ECB8CCC9F5ABFDB71AC67082F252DB60290DCE0797C6895FECB
D0BCB731FD7D07EC680A4DCAB2617C11DB7031DCE2910976EF68D68080E9F5CA
2E8783E9682CCB78CDA16B68FE96B7C4876F58C3BA6FE23B9E66F2EE604D6E06
2FB03D2D9C63037242A63FF3C8B5BE0B8FF0B15207131903DB883D20777D9892
29F5E28B5A67F94279FC298E0A818E9BFEA89589FA4AFD4DE3CEAB2B97B60614
F63E408ECA6CC76738DFDEDD10E05F5372B842F32D665F98F33BB2693F5A1184
D5B077A6E85FA5F27657E831336E2B646F57CBCD33A83860D906CA307C6404D9
010B71C8BEC8517DD3E54C52A82545F8657A02E63CA0895DCA62C1FEE6289C27
150CB7752734E0344766A67AF2BB4AF47EEEFD7682625620DF449047DB00A59B
8D621191EDDCA188CC179364F00E4602A87031F2D47AD4485275AC3DECE6FA17
40EE0F24B8AF248076A5B98750D5AB11026F1BCBDC399714D3AD42B31D84F0E1
3FD0775C422CF8799DA52B966E9E09278FF345AEE909E46D2739DFE41DCBD5B3
D3DEA7AAF087B3A6984C1A384866F51F736877EF69352E861A6B4AF98B59ACC7
2265CE3D109F2D68002E7730AFBE57EC2D519592D71E313FA86545018DBF3EC4
EB36270B82F5E9B992E3F854807AB5A896DA3FCCE819D2F1B3FCC5CFC58B8E80
1C6BDF8C43C885C57BC46533B404D3B6A0A23505050C20F3FF7B94492DE2283D
393AD8B4E88B027ADCD10E8F00818E52EB363165707D8E31FE9E670619E6ED5E
05B08E40282923A1C0727BF431DA6E0230317AE28BBC1551E491FDC6A9FEF125
69B9BDDC63F1CFDEF69F0FBADD31041A441ACA41B23D2A1A8A593E80A379A4E8
DE34CE7CEE8319D0D055E36F14610F27A6A74A667C6159DF26960ADFEBB8EA0E
852F922EA7937DC33F1435B0A8346970D68E1EC1CE211FF4376D58B36CAC177F
2D5BDC0F984CB3749D99492D5A87C4C4430DCFB2CD64CD1FE4314277D9B1C59F
3EE4C86D08200176677BBBFB4C2CBD461D9A3A6C8D2CA0EAED19D42C722EBDD9
736493B57A880BFE870CEFE00E71259C2E684783FCB987EAD2CFE312345CB85D
D4AAEEDD5216F3CBAE15C40E17C8862D66213E090E82EE2A7754A1D36FE0C700
128C1EA319B059CAEF9FA5F0A386909582C864324D89F5456D7221CC4156ED2F
1755310BC18637DC3E53EF1C4F1BA78CCDB451E76619E5AA02000F39551CA879
C2AAE8B81919564F7255FF525590454732FB29F08377D9E9F7C54829FBBB1AA1
4576432EAE09B7AA116845C6F4FFBEE486E4932B6B5F8474C6EF2435D730BCA8
DA7CEC668814C2EC5314131F519E23FBD119AE9ABEEB379EB88D7940016B50EE
72543369C2EFB547D5731C54AC287320D373C9DEAA02123676F25F172AAA2D33
586A69339B06C2579B20721FBD82E85118E887D969C76C60DC4A010548622C97
A3AF6E39461900F8B449C92FE90B7048192FB1BD168F0EC972FB43E53B12F03A
F9E3B10981286AB888FBF4B48E70AFC85D36849122443B0670D4BB4DA5884EBD
E0D34F26F71BF0DFAE35020AC75CFEAEFA42551A1BA782C99081A03F9750B3B9
9C5D45AEA9C0619D5EB4182F5090AC6C95A02C50F383D911ED9E7ABDDEBCF012
5D3BC94C571BF57598049040201CC790D12BFDA811356C43963B6B58DC91B3DD
04682A0FA178B0CA741C11BFAE5AC4166653429F8950CFFCA59B2D8BF3B41AFF
B66DB183C8DF63DE748AF01A125E2187433AC18BE5C51AAE0DD5DD282929EAB4
02BB70D28857AE44BFBD5107A2B1EAFD306E895E20D2194B7B0B2564A627C6BA
A89CF33E69FA363573501170CF7ADD8000F3B47C9767044373C12FE546A61107
E702CE6A1C420ABC52A9C736D875BFF30EA100ABA95A0DB7D099E39F4FB0CDD4
DC387119890A51D30FBED2E6752663F6CF0E5BBED15E30DD40CACD0EDBAACD11
3142A7E61A7B1AAF9BC73A97140EF92EFD91BC271B51A5AAC42D594D1ADFEC46
7D08989FF9BB86306AED041743296496B4F9FE7601B38EE0229CD32F8A0E6E9D
A93BF09257D2DF5CFE457B87320962395D65C4AF9376B68F69EB2687F54D0A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chap10-pspic6.dvi)
@start /Fa 253[134 2[{}1 172.188 /CMSY10 rf /Fb 197[23
58[{}1 83.022 /CMMI10 rf /Fc 140[44 1[44 6[44 44 15[44
44 16[44 7[44 1[44 7[44 44 44 44 44 44 2[44 44 2[44 44
6[44 33[{}20 83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1324 548 a
 tx@Dict begin tx@NodeDict begin {10.74445 5.18887 54.8496 27.42479
3.01385 } false /N@T-0 16 {InitRnode } NewNode end  end
 1324 548 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.18887
neg 51.04959 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial Fc(?-)43 b(s\(X,Y\))976 855 y
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 72.90941 36.4547
3.01385 } false /N@T-0-0 16 {InitRnode } NewNode end  end
 976 855 a
31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 69.1094 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fc(?-)g(q\()p
1231 855 27 4 v 31 w(G4,)p 1394 855 V 30 w(G5\))1279
830 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1279 830 a 1279 830 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 40.52963
def /r 40.52963 def /h 3.09726 def /d 4.40273 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1279 830 a 942 855 a Fc(X)g(=)p
1122 855 27 4 v 75 w(G4,)f(Y)h(=)p 1502 855 V 75 w(G5)1279
830 y
 tx@Dict begin PutEnd  end
 1279 830 a 867 1162 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 99.15918 49.57959
3.01385 } false /N@T-0-0-0 16 {InitRnode } NewNode end  end
 867 1162 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 95.35918 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fc(?-)g(i\()p 1122 1162 27 4
v 31 w(G4\),!,j\()p 1505 1162 V 28 w(G5\))1279 1137 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end

1279 1137 a 752 1469 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 63.8795 31.93974
3.01385 } false /N@T-0-0-0-0 16 {InitRnode } NewNode end  end
 752 1469 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 60.0795 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fc(?-)g(!,j\()p 1096 1469 27
4 v 29 w(G5\))1017 1444 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
 grestore end
 1017 1444 a 1017 1444 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 1017
1444 a 876 1469 27 4 v 902 1469 a Fc(G4)g(=)g(1)1017
1444 y
 tx@Dict begin PutEnd  end
 1017 1444 a 796 1776 a
 tx@Dict begin tx@NodeDict begin {10.74445 6.02223 53.3796 26.68979
3.01385 } false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end  end
 796 1776 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.02223
neg 49.57959 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial Fc(?-)g(j\()p 1051 1776 27 4
v 31 w(G5\))1017 1751 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1017 1751 a 639 2083 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-0-0-0 16 {InitRnode } NewNode end  end
 639 2083
a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 706 2058
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0-0 /N@T-0-0-0-0-0-0 InitNC { NCLine  } if end
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 706 2058 a 706 2058 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag true def HPutAdjust
LPutCoor end PutBegin  end
 706 2058 a 565 2083 27 4 v 591
2083 a Fc(G5)g(=)g(1)706 2058 y
 tx@Dict begin PutEnd  end
 706 2058 a 950 2083 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-0-0-1 16 {InitRnode } NewNode end  end

950 2083 a 32 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial
1017 2058 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0-0 /N@T-0-0-0-0-0-1 InitNC { NCLine  } if end
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1017 2058 a 1017 2058 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def LPutCoor end PutBegin
 end
 1017 2058 a 876 2083
27 4 v 902 2083 a Fc(G5)g(=)g(2)1017 2058 y
 tx@Dict begin PutEnd  end
 1017 2058
a 1262 2083 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-0-0-0-0-2 16 {InitRnode } NewNode end  end
 1262 2083 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end


@endspecial 1329 2058 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0-0-0 /N@T-0-0-0-0-0-2 InitNC { NCLine  } if end
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore  grestore end
 1329 2058 a 1329 2058 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 17.63983
def /r 17.63983 def /h 3.09726 def /d 3.01385 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 1329
2058 a 1187 2083 27 4 v 1213 2083 a Fc(G5)g(=)g(3)1329
2058 y
 tx@Dict begin PutEnd  end
 1329 2058 a 1460 1469 a
 tx@Dict begin tx@NodeDict begin {4.85555 3.8 19.26662 9.6333 3.01385
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end  end
 1460 1469 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 15.46661 4.85555 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap 5.0 3.0 0.0 0.0 2 DashLine  grestore end
 
@endspecial Fb(:)14 b(:)g(:)1540 1444 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap 5.0 3.0 0.0
0.0 0 0 add  DashLine  grestore  grestore end

1540 1444 a 1540 1444 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 8.06558 def
/r 8.06558 def /h 9.08449 def /d 4.74219 def LPutCoor end PutBegin
 end
 1540 1444 a 1473 1469 a Fa(\002)1540
1444 y
 tx@Dict begin PutEnd  end
 1540 1444 a 1758 855 a
 tx@Dict begin tx@NodeDict begin {12.19997 7.40004 16.13591 8.06795
3.01385 } false /N@T-0-1 16 {InitRnode } NewNode end  end
 1758 855 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.40004
neg 12.3359 12.19997 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore end
 
@endspecial 1825 830 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end  gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore  grestore
end
 1825 830 a 1825 830
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def /l 31.49973
def /r 31.49973 def /h 3.09726 def /d 4.40273 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 1825 830 a 1564 855 a Fc(X)43 b(=)g(0,)g(Y)g(=)g(0)1825
830 y
 tx@Dict begin PutEnd  end
 1825 830 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 192 204
TeXDict begin 192 203 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(192)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(2)99 b(Using)41 b(Cut)806
1180 y Fw(W)-7 b(ell,)52 b(we)d(no)n(w)g(kno)n(w)f(what)h(cut)g(is.)71
b(But)49 b(ho)n(w)g(do)g(we)g(use)g(it)h(in)f(practice,)806
1280 y(and)f(why)g(is)j(it)e(so)h(useful?)70 b(As)50
b(a)g(\002rst)g(e)o(xample,)f(let')-5 b(s)50 b(de\002ne)f(a)h
(\(cut-free\))806 1380 y(predicate)44 b Fs(max/3)g Fw(which)h(tak)o(es)
h(inte)o(gers)f(as)h(ar)o(guments)d(and)i(succeeds)h(if)f(the)806
1479 y(third)34 b(ar)o(gument)e(is)k(the)f(maximum)e(of)i(the)g
(\002rst)g(tw)o(o.)44 b(F)o(or)35 b(e)o(xample,)f(the)h(queries)971
1646 y Fs(?-)41 b(max\(2,3,3\).)900 1812 y Fw(and)971
1978 y Fs(?-)g(max\(3,2,3\).)900 2144 y Fw(and)971 2311
y Fs(?-)g(max\(3,3,3\).)900 2477 y Fw(should)f(succeed,)g(and)g(the)h
(queries)971 2643 y Fs(?-)g(max\(2,3,2\).)900 2809 y
Fw(and)971 2975 y Fs(?-)g(max\(2,3,5\).)806 3142 y Fw(should)47
b(f)o(ail.)68 b(And)48 b(of)g(course,)h(we)g(also)g(w)o(ant)f(the)h
(program)d(to)i(w)o(ork)g(when)806 3241 y(the)f(third)f(ar)o(gument)f
(is)j(a)f(v)n(ariable.)63 b(That)47 b(is,)j(we)d(w)o(ant)g(the)g
(program)e(to)j(be)806 3341 y(able)40 b(to)h(\002nd)g(the)g(maximum)e
(of)i(the)g(\002rst)h(tw)o(o)f(ar)o(guments)e(for)h(us:)971
3507 y Fs(?-)h(max\(2,3,Max\).)971 3706 y(Max)f(=)h(3)971
3806 y(yes)971 4005 y(?-)g(max\(2,1,Max\).)971 4205 y(Max)f(=)h(2)971
4304 y(yes)900 4470 y Fw(No)n(w)-5 b(,)55 b(it)f(is)g(easy)f(to)g
(write)g(a)g(program)e(that)i(does)f(this.)82 b(Here')-5
b(s)53 b(a)h(\002rst)806 4570 y(attempt:)971 4736 y Fs(max\(X,Y,Y\):-)
36 b(X)42 b(=<)e(Y.)971 4836 y(max\(X,Y,X\):-)c(X>Y.)806
5002 y Fw(This)j(is)i(a)f(perfectly)f(correct)f(program,)g(and)h(we)h
(might)f(be)h(tempted)f(simply)g(to)806 5102 y(stop)h(here.)46
b(But)41 b(we)g(shouldn')o(t:)j(it')-5 b(s)42 b(not)f(good)e(enough.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 193 205
TeXDict begin 193 204 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(10:)46 b(Cuts)41 b(and)g(Ne)o(gation)1357
b(193)p 0 TeXcolorgray 451 1051 a(What')-5 b(s)49 b(the)e(problem?)65
b(There)47 b(is)i(a)f(potential)f(inef)n(\002cienc)o(y)-5
b(.)63 b(Suppose)47 b(this)357 1151 y(de\002nition)52
b(is)i(used)f(as)h(part)e(of)h(a)h(lar)o(ger)e(program,)h(and)g(some)n
(where)f(along)357 1250 y(the)h(w)o(ay)h Fs(max\(3,4,Y\))c
Fw(is)k(called.)83 b(The)54 b(program)d(will)j(correctly)e(set)j
Fs(Y=4)n Fw(.)357 1350 y(But)41 b(no)n(w)e(consider)g(what)i(happens)e
(if)h(at)h(some)f(stage)g(backtracking)e(is)j(forced.)357
1449 y(The)g(program)d(will)k(try)f(to)h(re-satisfy)e
Fs(max\(3,4,Y\))e Fw(using)i(the)i(second)e(clause.)357
1549 y(This)k(is)i(completely)d(pointless:)53 b(the)45
b(maximum)d(of)j Fs(3)f Fw(and)g Fs(4)h Fw(is)h Fs(4)e
Fw(and)g(that')-5 b(s)357 1649 y(that.)63 b(There)46
b(is)i(no)e(second)g(solution)g(to)h(\002nd.)63 b(T)-7
b(o)47 b(put)f(it)i(another)d(w)o(ay:)58 b(the)357 1748
y(tw)o(o)51 b(clauses)g(in)g(the)g(abo)o(v)o(e)f(program)e(are)j
(mutually)f(e)o(xclusi)n(v)o(e:)65 b(if)51 b(the)g(\002rst)357
1848 y(succeeds,)36 b(the)g(second)f(must)h(f)o(ail)g(and)f(vice)h(v)o
(ersa.)43 b(So)37 b(attempting)d(to)i(re-satisfy)357
1948 y(this)41 b(clause)g(is)h(a)f(complete)f(w)o(aste)i(of)f(time.)451
2049 y(W)m(ith)53 b(the)g(help)g(of)f(cut,)k(this)d(is)h(easy)f(to)g
(\002x.)82 b(W)-7 b(e)54 b(need)e(to)h(insist)h(that)357
2149 y(Prolog)40 b(should)g(ne)n(v)o(er)f(try)i(both)f(clauses,)h(and)f
(the)h(follo)n(wing)f(code)g(does)h(this:)522 2320 y
Fs(max\(X,Y,Y\))c(:-)k(X)g(=<)g(Y,!.)522 2420 y(max\(X,Y,X\))c(:-)k
(X>Y.)451 2591 y Fw(Note)50 b(ho)n(w)g(this)h(w)o(orks.)74
b(Prolog)49 b(will)i(reach)f(the)g(cut)g(if)h Fs(max\(X,Y,Y\))c
Fw(is)357 2691 y(called)g(and)h Fs(X)41 b(=<)f(Y)49 b
Fw(succeeds.)66 b(In)47 b(this)i(case,)g(the)f(second)f(ar)o(gument)f
(is)j(the)357 2790 y(maximum,)d(and)h(that')-5 b(s)47
b(that,)h(and)f(the)g(cut)f(commits)h(us)g(to)g(this)h(choice.)63
b(On)357 2890 y(the)38 b(other)g(hand,)g(if)g Fs(X)j(=<)g(Y)e
Fw(f)o(ails,)g(then)f(Prolog)g(goes)g(onto)g(the)g(second)g(clause)357
2990 y(instead.)451 3091 y(Note)k(that)f(this)i(cut)e(does)h
Ft(not)g Fw(change)f(the)g(meaning)f(of)i(the)f(program.)46
b(Our)357 3191 y(ne)n(w)c(code)g(gi)n(v)o(es)g(e)o(xactly)g(the)g(same)
h(answers)g(as)g(the)g(old)f(one,)g(b)n(ut)h(it')-5 b(s)44
b(more)357 3290 y(ef)n(\002cient.)98 b(In)58 b(f)o(act,)63
b(the)c(program)e(is)i Ft(e)n(xactly)g Fw(the)f(same)h(as)h(the)e(pre)n
(vious)357 3390 y(v)o(ersion,)44 b(e)o(xcept)g(for)h(the)g(cut,)h(and)e
(this)i(is)g(a)f(pretty)g(good)e(sign)i(that)h(the)f(cut)357
3490 y(is)f(a)f(sensible)g(one.)52 b(Cuts)43 b(lik)o(e)h(this,)f(which)
g(don')o(t)e(change)h(the)h(meaning)f(of)g(a)357 3589
y(program,)c(ha)n(v)o(e)j(a)g(special)g(name:)k(the)o(y')l(re)40
b(called)g(green)g(cuts.)451 3691 y(But)49 b(some)g(readers)f(will)h
(dislik)o(e)g(this)h(code.)68 b(After)48 b(all,)j(isn')o(t)e(the)g
(second)357 3790 y(line)c(redundant?)56 b(If)45 b(we)h(ha)n(v)o(e)e(to)
h(use)h(this)g(line,)g(we)f(already)f(kno)n(w)g(that)i(the)357
3890 y(\002rst)53 b(ar)o(gument)e(is)j(bigger)d(that)i(the)g(second.)80
b(Couldn')o(t)51 b(we)j(squeeze)e(out)g(a)357 3990 y(little)43
b(more)f(ef)n(\002cienc)o(y)f(with)i(the)g(help)f(of)g(our)g(ne)n(w)h
(cut)f(construct?)50 b(Let')-5 b(s)44 b(try)-5 b(.)357
4089 y(Here')g(s)41 b(a)g(\002rst)h(\(f)o(aulty\))e(attempt:)522
4261 y Fs(max\(X,Y,Y\))d(:-)k(X)g(=<)g(Y,!.)522 4360
y(max\(X,Y,X\).)357 4532 y Fw(Note)48 b(that)g(is)g(the)g(same)g(as)h
(our)e(earlier)h(green)f(cut)g Fs(max/3)n Fw(,)j(e)o(xcept)d(that)h(we)
357 4631 y(ha)n(v)o(e)41 b(got)h(rid)g(of)f(the)h Fs(>)g
Fw(test)h(in)f(the)h(second)e(clause.)49 b(Ho)n(w)41
b(good)g(is)i(it?)50 b(W)-7 b(ell,)357 4731 y(for)47
b(some)g(queries)g(it')-5 b(s)49 b(\002ne.)65 b(In)48
b(particular)m(,)f(it)i(answers)e(correctly)f(when)h(we)357
4831 y(pose)40 b(queries)h(in)g(which)f(the)h(third)f(ar)o(gument)f(is)
j(a)f(v)n(ariable.)k(F)o(or)40 b(e)o(xample:)522 5002
y Fs(?-)h(max\(100,101,X\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 194 206
TeXDict begin 194 205 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(194)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(X)h(=)g(101)971 1151 y(yes)900
1316 y Fw(and)971 1482 y Fs(?-)g(max\(3,2,X\).)971 1682
y(X)g(=)g(3)971 1781 y(yes)900 1947 y Fw(Nonetheless,)54
b(it')-5 b(s)53 b Ft(not)g Fw(the)f(same)h(as)f(the)g(green)f(cut)i
(program:)66 b(the)52 b(ne)n(w)806 2047 y Fs(max/3)44
b Fw(does)h Ft(not)i Fw(w)o(ork)f(correctly)-5 b(.)58
b(Consider)45 b(what)h(happens)e(when)i(all)g(three)806
2147 y(ar)o(guments)38 b(are)j(instantiated.)k(F)o(or)c(e)o(xample,)e
(consider)h(the)h(query)971 2312 y Fs(?-)g(max\(2,3,2\).)806
2478 y Fw(Ob)o(viously)32 b(this)j(query)e(should)h(f)o(ail.)44
b(But)35 b(in)g(our)e(ne)n(w)i(v)o(ersion,)f(it)h(will)h(succeed!)806
2578 y(Why?)69 b(W)-7 b(ell,)52 b(this)e(query)d(simply)i(w)o(on')o(t)f
(unify)g(with)h(the)g(head)f(of)h(the)g(\002rst)806 2678
y(clause,)55 b(so)e(Prolog)e(goes)i(straight)f(to)g(the)h(second)f
(clause.)80 b(And)52 b(the)h(query)806 2777 y(will)40
b(unify)f(with)g(the)h(second)f(clause,)h(and)f(\(tri)n(vially\))f(the)
i(query)e(succeeds!)45 b(So)806 2877 y(maybe)39 b(getting)i(rid)f(of)h
(that)g Fs(>)g Fw(test)h(w)o(asn')o(t)e(quite)h(so)g(smart)g(after)g
(all.)900 2977 y(But)j(there)e(is)i(another)d(w)o(ay)-5
b(.)52 b(The)43 b(problem)e(with)i(the)g(ne)n(w)g(code)f(is)i(simply)
806 3076 y(that)58 b(we)h(carried)e(out)h(v)n(ariable)f(uni\002cation)g
Ft(befor)m(e)h Fw(we)h(tra)n(v)o(ersed)e(the)i(cut.)806
3176 y(Suppose)43 b(we)j(handle)e(our)g(v)n(ariables)g(a)i(little)g
(more)e(intelligently)g(\(using)g(three)806 3275 y(v)n(ariables)e
(instead)g(of)h(tw)o(o\))g(and)f(e)o(xplicitly)g(unify)f
Ft(after)46 b Fw(we)d(ha)n(v)o(e)f(crossed)g(the)806
3375 y(cut:)971 3541 y Fs(max\(X,Y,Z\))37 b(:-)k(X)g(=<)g(Y,!,)f(Y)h(=)
g(Z.)971 3641 y(max\(X,Y,X\).)806 3807 y Fw(As)h(the)f(reader)f(should)
g(check,)g(this)i(program)d(does)i(w)o(ork,)f(and)h(\(as)g(we)h(hoped)
806 3906 y(for\))f(it)i(a)n(v)n(oids)f(the)g(e)o(xplicit)g(comparison)e
(made)i(in)g(the)h(second)e(clause)h(of)g(our)806 4006
y(green)d(cut)i(v)o(ersion)f(of)h Fs(max/3)n Fw(.)900
4105 y(But)k(there)g(is)g(an)g(important)e(dif)n(ference)g(between)h
(the)h(ne)n(w)f(v)o(ersion)g(of)g(the)806 4205 y(program)h(and)h(the)i
(green)e(cut)h(v)o(ersion.)64 b(The)47 b(cut)g(in)g(the)h(ne)n(w)f
(program)e(is)j(a)806 4305 y(classic)c(e)o(xample)e(of)h(what)g(is)h
(kno)n(wn)e(as)i(a)f(red)g(cut.)53 b(As)44 b(this)g(terminology)d(is)
806 4404 y(supposed)d(to)i(suggest,)g(such)f(cuts)i(are)f(potentially)e
(dangerous.)43 b(Why?)i(Because)806 4504 y(if)40 b(we)g(tak)o(e)g(out)g
(such)f(a)i(cut,)f(we)g Ft(don')n(t)g Fw(get)g(an)g(equi)n(v)n(alent)e
(program.)43 b(That)d(is,)806 4604 y(if)d(we)g(remo)o(v)o(e)d(the)j
(cut,)g(the)g(resulting)f(code)g(does)g Ft(not)i Fw(compute)d(the)i
(maximum)806 4703 y(of)44 b(tw)o(o)i(numbers)d(an)o(y)h(more.)58
b(T)-7 b(o)45 b(put)g(it)g(another)f(w)o(ay)-5 b(,)46
b(the)f(presence)f(of)g(the)806 4803 y(cut)37 b(is)i
Ft(indispensable)d Fw(to)i(the)g(correct)f(functioning)e(of)j(the)g
(program.)k(\(This)c(w)o(as)806 4902 y(not)j(the)h(case)h(in)f(the)g
(green)f(cut)i(v)o(ersion)d(\227)j(the)f(cut)g(there)g(merely)f(impro)o
(v)o(ed)806 5002 y(ef)n(\002cienc)o(y)-5 b(.\))42 b(Because)c(red)f
(cuts)h(are)g(indispensable)e(cuts,)j(their)e(presence)g(means)806
5102 y(that)46 b(programs)e(containing)g(them)i(are)g(not)g(fully)f
(declarati)n(v)o(e.)60 b(No)n(w)-5 b(,)46 b(red)g(cuts)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 195 207
TeXDict begin 195 206 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(10:)46 b(Cuts)41 b(and)g(Ne)o(gation)1357
b(195)p 0 TeXcolorgray 357 1051 a(can)47 b(be)h(useful)f(on)g
(occasions,)i(b)n(ut)f(be)n(w)o(are!)65 b(Their)47 b(use)h(can)f(lead)h
(to)g(subtle)357 1151 y(programming)37 b(mistak)o(es)k(and)g(mak)o(e)f
(code)h(hard)f(to)h(deb)n(ug.)451 1259 y(So,)f(what)f(to)g(do?)45
b(It')-5 b(s)40 b(probably)c(best)k(to)f(w)o(ork)f(as)i(follo)n(ws.)45
b(T)m(ry)39 b(and)f(get)h(a)357 1358 y(good,)i(clear)m(,)i(cut-free)e
(program)f(w)o(orking,)i(and)g(only)g(then)g(try)g(to)h(impro)o(v)o(e)e
(its)357 1458 y(ef)n(\002cienc)o(y)47 b(by)h(using)g(cuts.)68
b(Use)49 b(green)f(cuts)g(whene)n(v)o(er)f(possible.)68
b(Red)48 b(cuts)357 1558 y(should)41 b(be)h(used)g(only)f(when)g
(absolutely)g(necessary)-5 b(,)41 b(and)h(it')-5 b(s)43
b(a)g(good)e(idea)h(to)357 1657 y(e)o(xplicitly)36 b(comment)h(on)g(an)
o(y)g(red)g(cuts)h(in)g(your)e(code.)44 b(W)-7 b(orking)37
b(this)h(w)o(ay)g(will)357 1757 y(maximise)48 b(your)f(chances)h(of)h
(striking)f(a)h(good)e(balance)h(between)g(declarati)n(v)o(e)357
1857 y(clarity)40 b(and)h(procedural)d(ef)n(\002cienc)o(y)-5
b(.)357 2076 y Fk(3)99 b(Negation)42 b(as)f(F)n(ailur)n(e)357
2217 y Fw(One)j(of)g(Prolog')-5 b(s)44 b(most)g(useful)g(features)g(is)
h(the)f(simple)h(w)o(ay)f(it)h(lets)g(us)g(state)357
2317 y(generalisations.)f(T)-7 b(o)41 b(say)g(that)g(V)-5
b(incent)41 b(enjo)o(ys)f(b)n(ur)o(gers)f(we)j(just)f(write:)522
2509 y Fs(enjoys\(vincent,X)o(\))36 b(:-)k(burger\(X\).)451
2701 y Fw(But)49 b(in)f(real)g(life)h(rules)f(ha)n(v)o(e)g(e)o
(xceptions.)65 b(Perhaps)48 b(V)-5 b(incent)48 b(doesn')o(t)e(lik)o(e)
357 2800 y(Big)c(Kahuna)f(b)n(ur)o(gers.)47 b(That)42
b(is,)h(perhaps)d(the)i(correct)f(rule)h(is)h(really:)k(V)-5
b(incent)357 2900 y(enjo)o(ys)42 b(b)n(ur)o(gers,)g Ft(e)n(xcept)i
Fw(Big)g(Kahuna)e(b)n(ur)o(gers.)50 b(Fine.)i(But)44
b(ho)n(w)e(do)h(we)g(state)357 2999 y(this)e(in)g(Prolog?)451
3108 y(As)i(a)g(\002rst)h(step,)f(let')-5 b(s)43 b(introduce)e(another)
g(b)n(uilt-in)h(predicate:)47 b Fs(fail/0)n Fw(.)k(As)357
3207 y(its)39 b(name)f(suggests,)h Fs(fail/0)d Fw(is)k(a)f(special)g
(symbol)e(that)i(will)g(immediately)e(f)o(ail)357 3307
y(when)46 b(Prolog)h(encounters)e(it)j(as)g(a)g(goal.)64
b(That)47 b(may)g(not)g(sound)f(too)h(useful,)357 3407
y(b)n(ut)i(remember:)62 b Ft(when)49 b(Pr)l(olo)o(g)g(fails,)k(it)d
(tries)h(to)e(bac)n(ktr)o(ac)n(k)p Fw(.)71 b(Thus)50
b Fs(fail/0)357 3506 y Fw(can)44 b(be)g(vie)n(wed)f(as)i(an)g
(instruction)e(to)h(force)f(backtracking.)53 b(And)44
b(when)g(used)357 3606 y(in)g(combination)d(with)j(cut,)h(which)e
Ft(bloc)n(ks)h Fw(backtracking,)e Fs(fail/0)g Fw(enables)h(us)357
3706 y(to)48 b(write)h(some)g(interesting)e(programs,)i(and)f(in)h
(particular)m(,)f(it)i(lets)f(us)g(de\002ne)357 3805
y(e)o(xceptions)39 b(to)i(general)f(rules.)451 3913 y(Consider)g(the)h
(follo)n(wing)f(code:)522 4105 y Fs(enjoys\(vincent,X)o(\))c(:-)k
(big_kahuna_burger)o(\(X)o(\),!)o(,f)o(ai)o(l.)522 4205
y(enjoys\(vincent,X)o(\))c(:-)k(burger\(X\).)522 4404
y(burger\(X\))e(:-)j(big_mac\(X\).)522 4504 y(burger\(X\))d(:-)j
(big_kahuna_burg)o(er)o(\(X\))o(.)522 4604 y(burger\(X\))d(:-)j
(whopper\(X\).)522 4803 y(big_mac\(a\).)522 4902 y(big_kahuna_burge)o
(r\(b)o(\).)522 5002 y(big_mac\(c\).)522 5102 y(whopper\(d\).)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 196 208
TeXDict begin 196 207 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(196)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(The)45 b(\002rst)h(tw)o(o)g(lines)g(describe)
e(V)-5 b(incent')g(s)46 b(preferences.)57 b(The)45 b(last)h(six)g
(lines)806 1151 y(describe)i(a)i(w)o(orld)f(containing)e(four)h(b)n(ur)
o(gers,)i Fs(a)o Fw(,)i Fs(b)p Fw(,)g Fs(c)o Fw(,)g(and)d
Fs(d)o Fw(.)72 b(W)-7 b(e')l(re)49 b(also)806 1250 y(gi)n(v)o(en)54
b(information)f(about)i(what)g(kinds)h(of)f(b)n(ur)o(gers)f(the)o(y)h
(are.)90 b(Gi)n(v)o(en)54 b(that)806 1350 y(the)43 b(\002rst)i(tw)o(o)f
(lines)h(really)e(do)h(describe)f(V)-5 b(incent')g(s)43
b(preferences)f(\(that)i(is,)h(that)806 1449 y(he)j(lik)o(es)h(all)h(b)
n(ur)o(gers)d(e)o(xcept)g(Big)j(Kahuna)d(b)n(ur)o(gers\))g(then)h(he)h
(should)e(enjo)o(y)806 1549 y(b)n(ur)o(gers)39 b Fs(a)o
Fw(,)j Fs(c)f Fw(and)f Fs(d)p Fw(,)h(b)n(ut)g(not)g Fs(b)o
Fw(.)46 b(And)41 b(indeed,)f(this)h(is)h(what)f(happens:)971
1704 y Fs(?-)g(enjoys\(vincent,)o(a\).)971 1803 y(yes)971
2003 y(?-)g(enjoys\(vincent,)o(b\).)971 2102 y(no)971
2302 y(?-)g(enjoys\(vincent,)o(c\).)971 2401 y(yes)971
2600 y(?-)g(enjoys\(vincent,)o(d\).)971 2700 y(yes)900
2855 y Fw(Ho)n(w)36 b(does)g(this)h(w)o(ork?)44 b(The)36
b(k)o(e)o(y)g(is)h(the)f(combination)e(of)j Fs(!)f Fw(and)g
Fs(fail/0)e Fw(in)806 2954 y(the)39 b(\002rst)i(line)e(\(this)h(e)n(v)o
(en)f(has)h(a)g(name:)k(it')-5 b(s)41 b(called)f(the)f(cut-f)o(ail)g
(combination\).)806 3054 y(When)52 b(we)h(pose)g(the)g(query)e
Fs(enjoys\(vincent,b)o(\))-6 b Fw(,)56 b(the)d(\002rst)h(rule)e
(applies,)806 3154 y(and)44 b(we)h(reach)f(the)h(cut.)58
b(This)45 b(commits)g(us)g(to)g(the)g(choices)g(we)g(ha)n(v)o(e)f
(made,)806 3253 y(and)51 b(in)g(particular)m(,)i(blocks)e(access)h(to)g
(the)g(second)e(rule.)78 b(But)52 b(then)f(we)h(hit)806
3353 y Fs(fail/0)m Fw(.)57 b(This)45 b(tries)g(to)g(force)f
(backtracking,)e(b)n(ut)j(the)g(cut)f(blocks)g(it,)i(and)e(so)806
3453 y(our)c(query)f(f)o(ails.)900 3552 y(This)c(is)h(interesting,)e(b)
n(ut)h(it')-5 b(s)36 b(not)e(ideal.)44 b(F)o(or)34 b(a)i(start,)g(note)
e(that)h(the)g(ordering)806 3652 y(of)46 b(the)h(rules)f(is)i(crucial:)
57 b(if)47 b(we)g(re)n(v)o(erse)f(the)g(\002rst)i(tw)o(o)f(lines,)h(we)
f Ft(don')n(t)f Fw(get)806 3751 y(the)g(beha)n(viour)f(we)i(w)o(ant.)63
b(Similarly)-5 b(,)47 b(the)g(cut)g(is)g(crucial:)57
b(if)47 b(we)g(remo)o(v)o(e)e(it,)806 3851 y(the)e(program)e(doesn')o
(t)h(beha)n(v)o(e)g(in)h(the)h(same)f(w)o(ay)g(\(so)h(this)g(is)g(a)g
Ft(r)m(ed)h Fw(cut\).)53 b(In)806 3951 y(short,)41 b(we')l(v)o(e)f(got)
i(tw)o(o)f(mutually)g(dependent)e(clauses)j(that)g(mak)o(e)f(intrinsic)
g(use)806 4050 y(of)46 b(the)h(procedural)d(aspects)j(of)f(Prolog.)62
b(Something)45 b(useful)h(is)i(clearly)e(going)806 4150
y(on)d(here,)g(b)n(ut)g(it)i(w)o(ould)d(be)i(better)f(if)g(we)h(could)f
(e)o(xtract)g(the)g(useful)g(part)g(and)806 4250 y(package)c(it)j(in)f
(a)g(more)f(rob)n(ust)h(w)o(ay)-5 b(.)900 4349 y(And)60
b(we)h(can.)104 b(The)60 b(crucial)f(observ)n(ation)g(is)i(that)g(the)f
(\002rst)h(clause)g(is)806 4449 y(essentially)38 b(a)g(w)o(ay)g(of)g
(saying)f(that)h(V)-5 b(incent)38 b(does)g Ft(not)h Fw(enjo)o(y)e(X)i
(if)f(X)h(is)g(a)f(Big)806 4548 y(Kahuna)f(b)n(ur)o(ger)-5
b(.)44 b(That)39 b(is,)h(the)f(cut-f)o(ail)f(combination)f(seems)i(to)g
(be)g(of)n(fering)e(us)806 4648 y(some)48 b(form)f(of)h(ne)o(gation.)66
b(And)48 b(indeed,)h(this)g(is)g(the)f(crucial)g(generalisation:)806
4748 y(the)37 b(cut-f)o(ail)g(combination)e(lets)j(us)g(de\002ne)e(a)i
(form)e(of)h(ne)o(gation)f(called)h(ne)o(gation)806 4847
y(as)k(f)o(ailure.)k(Here')-5 b(s)41 b(ho)n(w:)971 5002
y Fs(neg\(Goal\))d(:-)i(Goal,!,fail.)971 5102 y(neg\(Goal\).)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 197 209
TeXDict begin 197 208 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(10:)46 b(Cuts)41 b(and)g(Ne)o(gation)1357
b(197)p 0 TeXcolorgray 357 1051 a(F)o(or)36 b(an)o(y)g(Prolog)g(goal,)h
Fs(neg\(Goal\))d Fw(will)k(succeed)e(precisely)g(if)h
Fs(Goal)f Fw(does)h Ft(not)357 1151 y Fw(succeed.)451
1250 y(Using)f(our)g(ne)n(w)g Fs(neg/1)e Fw(predicate,)i(we)g(can)g
(describe)g(V)-5 b(incent')g(s)36 b(preferences)357 1350
y(in)41 b(a)g(much)f(clearer)g(w)o(ay:)522 1485 y Fs(enjoys\(vincent,X)
o(\))c(:-)k(burger\(X\),)1435 1584 y(neg\(big_kahuna_bu)o(rg)o(er\()o
(X\))o(\).)357 1719 y Fw(That)g(is,)i(V)-5 b(incent)40
b(enjo)o(ys)h(X)g(if)g(X)h(is)g(a)f(b)n(ur)o(ger)e(and)h(X)i(is)g(not)e
(a)h(Big)h(Kahuna)357 1819 y(b)n(ur)o(ger)-5 b(.)80 b(This)53
b(is)h(quite)e(close)h(to)g(our)f(original)g(statement:)70
b(V)-5 b(incent)52 b(enjo)o(ys)357 1919 y(b)n(ur)o(gers,)39
b(e)o(xcept)h(Big)h(Kahuna)f(b)n(ur)o(gers.)451 2018
y(Ne)o(gation)d(as)i(f)o(ailure)g(is)g(an)g(important)e(tool.)44
b(Not)39 b(only)f(does)g(it)i(of)n(fer)d(useful)357 2118
y(e)o(xpressi)n(vity)43 b(\(notably)-5 b(,)43 b(the)i(ability)g(to)g
(describe)f(e)o(xceptions\))e(it)k(also)f(of)n(fers)f(it)357
2217 y(in)h(a)h(relati)n(v)o(ely)e(safe)i(form.)57 b(By)46
b(w)o(orking)e(with)h(ne)o(gation)f(as)i(f)o(ailure)e(\(instead)357
2317 y(of)49 b(with)g(the)g(lo)n(wer)g(le)n(v)o(el)f(cut-f)o(ail)h
(combination\))d(we)k(ha)n(v)o(e)e(a)i(better)f(chance)357
2417 y(of)38 b(a)n(v)n(oiding)g(the)h(programming)d(errors)i(that)h
(often)g(accompan)o(y)d(the)j(use)g(of)g(red)357 2516
y(cuts.)63 b(In)47 b(f)o(act,)h(ne)o(gation)d(as)i(f)o(ailure)g(is)g
(so)g(useful)g(that)g(it)g(comes)g(b)n(uilt-in)f(as)357
2616 y(part)38 b(of)g(standard)f(Prolog,)g(so)i(we)f(don')o(t)f(ha)n(v)
o(e)h(to)g(de\002ne)g(it)h(at)g(all.)45 b(In)38 b(standard)357
2716 y(Prolog)48 b(the)h(operator)f Fs(\\+)h Fw(means)g(ne)o(gation)e
(as)k(f)o(ailure,)f(so)g(we)g(could)e(de\002ne)357 2815
y(V)-5 b(incent')g(s)40 b(preferences)g(as)h(follo)n(ws:)522
2950 y Fs(enjoys\(vincent,X)o(\))36 b(:-)k(burger\(X\),)1435
3050 y(\\+)h(big_kahuna_burge)o(r\(X)o(\).)451 3185 y
Fw(Nonetheless,)i(a)h(couple)e(of)h(w)o(ords)g(of)g(w)o(arning)f(are)h
(in)h(order:)49 b Ft(don')n(t)43 b Fw(mak)o(e)357 3284
y(the)k(mistak)o(e)h(of)f(thinking)f(that)h(ne)o(gation)e(as)k(f)o
(ailure)d(w)o(orks)h(just)h(lik)o(e)g(logical)357 3384
y(ne)o(gation.)43 b(It)e(doesn')o(t.)k(Consider)40 b(again)g(our)g(b)n
(ur)o(ger)f(w)o(orld:)522 3528 y Fs(burger\(X\))f(:-)j(big_mac\(X\).)
522 3627 y(burger\(X\))d(:-)j(big_kahuna_burg)o(er)o(\(X\))o(.)522
3727 y(burger\(X\))d(:-)j(whopper\(X\).)522 3926 y(big_mac\(a\).)522
4026 y(big_kahuna_burge)o(r\(b)o(\).)522 4126 y(big_mac\(c\).)522
4225 y(whopper\(d\).)451 4369 y Fw(If)33 b(we)g(pose)g(the)f(query)g
Fs(enjoys\(vincent,X)o(\))27 b Fw(we)33 b(get)g(the)g(correct)f
(sequence)357 4469 y(of)40 b(responses:)522 4604 y Fs(X)h(=)g(a)g(;)522
4803 y(X)g(=)g(c)g(;)522 5002 y(X)g(=)g(d)g(;)522 5102
y(no)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 198 210
TeXDict begin 198 209 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(198)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(But)h(no)n(w)g(suppose)f(we)h(re)n(write)g
(the)g(\002rst)g(line)g(as)h(follo)n(ws:)971 1203 y Fs
(enjoys\(vincent,X)o(\))35 b(:-)41 b(\\+)g(big_kahuna_burge)o(r\()o
(X\))o(,)36 b(burger\(X\).)806 1354 y Fw(Note)65 b(that)h(from)f(a)h
(declarati)n(v)o(e)e(point)h(of)g(vie)n(w)-5 b(,)72 b(this)66
b(should)f(mak)o(e)g(no)806 1454 y(dif)n(ference:)46
b(after)41 b(all,)i Ft(b)n(ur)m(g)o(er\(x\))e(and)h(not)f(big)h(kahuna)
e(b)n(ur)m(g)o(er\(x\))h Fw(is)i(logically)806 1554 y(equi)n(v)n(alent)
37 b(to)i Ft(not)g(big)f(kahuna)f(b)n(ur)m(g)o(er\(x\))h(and)g(b)n(ur)m
(g)o(er\(x\))p Fw(.)44 b(That)39 b(is,)h(no)f(matter)806
1653 y(what)e(the)g(v)n(ariable)f Ft(x)i Fw(denotes,)f(it)h(is)g
(impossible)f(for)g(one)f(of)h(these)h(e)o(xpressions)806
1753 y(to)45 b(be)g(true)g(and)g(the)g(other)g(f)o(alse.)59
b(Nonetheless,)46 b(here')-5 b(s)45 b(what)g(happens)f(when)806
1852 y(we)d(pose)g(the)f(same)i(query:)971 2017 y Fs(?-)f
(enjoys\(vincent,)o(X\).)971 2216 y(no)900 2381 y Fw(What')-5
b(s)57 b(going)f(on?)92 b(W)-7 b(ell,)61 b(in)c(the)f(modi\002ed)g
(database,)j(the)e(\002rst)g(thing)806 2481 y(that)44
b(Prolog)f(has)i(to)g(check)e(is)j(whether)d Fs(\\+)e(big_kahuna_burg)o
(er\()o(X\))d Fw(holds,)806 2580 y(which)43 b(means)g(that)h(it)h(must)
f(check)f(whether)g Fs(big_kahuna_burge)o(r\()o(X\))38
b Fw(f)o(ails.)806 2680 y(But)61 b(this)h(succeeds.)106
b(After)61 b(all,)66 b(the)c(database)e(contains)h(the)g(information)
806 2780 y Fs(big_kahuna_burg)o(er)o(\(b\))-7 b Fw(.)125
b(So)67 b(the)g(query)f Fs(\\+)40 b(big_kahuna_burger)o(\(X)o(\))806
2879 y Fw(f)o(ails,)47 b(and)f(hence)f(the)h(original)f(query)g(does)g
(too.)61 b(In)46 b(a)g(nutshell,)h(the)f(crucial)806
2979 y(dif)n(ference)40 b(between)h(the)i(tw)o(o)f(programs)f(is)i
(that)g(in)f(the)h(original)e(v)o(ersion)g(\(the)806
3079 y(one)51 b(that)h(w)o(orks)g(right\))f(we)h(use)h
Fs(\\+)f Fw(only)f Ft(after)j Fw(we)f(ha)n(v)o(e)e(instantiated)g(the)
806 3178 y(v)n(ariable)46 b Fs(X)o Fw(.)65 b(In)47 b(the)g(ne)n(w)g(v)o
(ersion)f(\(which)g(goes)h(wrong\))e(we)j(use)f Fs(\\+)g
Fw(before)806 3278 y(we)41 b(ha)n(v)o(e)f(done)g(this.)46
b(The)41 b(dif)n(ference)e(is)j(crucial.)900 3377 y(Summing)52
b(up,)k(we)e(ha)n(v)o(e)f(seen)g(that)h(ne)o(gation)d(as)j(f)o(ailure)f
(is)i(not)e(logical)806 3477 y(ne)o(gation,)34 b(and)h(that)h(it)g(has)
g(a)g(procedural)e(dimension)g(that)i(must)g(be)f(understood.)806
3577 y(Nonetheless,)42 b(it)i(is)g(an)e(important)g(programming)d
(construct:)49 b(it)44 b(is)g(generally)d(a)806 3676
y(better)j(idea)h(to)h(try)f(use)g(ne)o(gation)e(as)j(f)o(ailure)f
(than)f(to)i(write)f(code)f(containing)806 3776 y(hea)n(vy)36
b(use)i(of)g(red)f(cuts.)45 b(Nonetheless,)38 b(\223generally\224)e
(does)h(not)g(mean)h(\223al)o(w)o(ays\224.)806 3876 y(There)i
Ft(ar)m(e)h Fw(times)g(when)f(it)i(is)g(better)f(to)g(use)g(red)f
(cuts.)900 3975 y(F)o(or)57 b(e)o(xample,)j(suppose)c(that)i(we)f(need)
g(to)h(write)f(code)g(to)g(capture)f(the)806 4075 y(follo)n(wing)37
b(condition:)44 b Ft(p)39 b(holds)g(if)h(a)g(and)e(b)i(hold,)e(or)i(if)
g(a)g(does)f(not)g(hold)f(and)806 4174 y(c)44 b(holds)g(too)p
Fw(.)56 b(This)45 b(can)f(be)g(captured)f(with)i(the)f(help)g(of)h(ne)o
(gation)d(as)j(f)o(ailure)806 4274 y(v)o(ery)39 b(directly:)971
4439 y Fs(p)i(:-)g(a,b.)971 4638 y(p)g(:-)g(\\+)f(a,)h(c.)900
4803 y Fw(But)48 b(suppose)f(that)h Fs(a)g Fw(is)g(a)g(v)o(ery)f
(complicated)f(goal,)j(a)f(goal)f(that)h(tak)o(es)g(a)806
4902 y(lot)d(of)f(time)h(to)g(compute.)56 b(Programming)42
b(it)j(this)g(w)o(ay)g(means)g(we)g(may)f(ha)n(v)o(e)806
5002 y(to)38 b(compute)g Fs(a)h Fw(twice,)g(and)f(this)i(may)e(mean)g
(that)h(we)h(ha)n(v)o(e)e(unacceptably)e(slo)n(w)806
5102 y(performance.)42 b(If)f(so,)g(it)h(w)o(ould)e(be)h(better)f(to)i
(use)f(the)g(follo)n(wing)e(program:)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 199 211
TeXDict begin 199 210 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(10:)46 b(Cuts)41 b(and)g(Ne)o(gation)1357
b(199)p 0 TeXcolorgray 522 1051 a Fs(p)41 b(:-)g(a,!,b.)522
1250 y(p)g(:-)g(c.)451 1436 y Fw(Note)j(that)g(this)h(is)g(a)f(red)f
(cut:)52 b(remo)o(ving)42 b(it)j(changes)e(the)h(meaning)e(of)i(the)357
1536 y(program.)451 1636 y(When)f(all')-5 b(s)45 b(said)f(and)f(done,)f
(there)h(are)h(no)f(uni)n(v)o(ersal)f(guidelines)g(that)i(will)357
1736 y(co)o(v)o(er)c(all)i(the)g(situations)g(you)f(are)g(lik)o(ely)h
(to)g(run)f(across.)48 b(Programming)39 b(is)k(as)357
1835 y(much)c(an)h(art)g(as)h(a)g(science:)k(that')-5
b(s)41 b(what)f(mak)o(es)g(it)h(so)f(interesting.)45
b(Y)-9 b(ou)39 b(need)357 1935 y(to)k(kno)n(w)f(as)h(much)f(as)i
(possible)e(about)g(the)h(language)e(you)h(are)h(w)o(orking)f(with)357
2035 y(\(whether)50 b(it')-5 b(s)53 b(Prolog,)f(Ja)n(v)n(a,)j(Perl,)f
(or)d(whate)n(v)o(er\),)h(understand)e(the)h(problem)357
2134 y(you)36 b(are)g(trying)g(to)h(solv)o(e,)g(and)f(kno)n(w)f(what)i
(counts)f(as)i(an)e(acceptable)g(solution.)357 2234 y(And)k(then:)46
b(go)40 b(ahead)g(and)h(try)f(your)g(best!)357 2427 y
Fk(4)99 b(Exer)n(cises)357 2591 y Fv(Exer)o(cise)40 b(10.1.)95
b Fw(Suppose)40 b(we)h(ha)n(v)o(e)f(the)h(follo)n(wing)f(database:)p
0 TeXcolorgray 3286 2498 118 4 v 3286 2616 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 3290 2616 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 883 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401 2616 4 118
v 3286 2619 118 4 v 0 TeXcolorgray 522 2760 a Fs(p\(1\).)522
2859 y(p\(2\))g(:-)h(!.)522 2959 y(p\(3\).)451 3127 y
Fw(Write)h(all)f(of)g(Prolog')-5 b(s)40 b(answers)h(to)g(the)g(follo)n
(wing)f(queries:)522 3296 y Fs(?-)h(p\(X\).)522 3495
y(?-)g(p\(X\),p\(Y\).)522 3694 y(?-)g(p\(X\),!,p\(Y\).)357
3896 y Fv(Exer)o(cise)f(10.2.)95 b Fw(First,)41 b(e)o(xplain)f(what)h
(the)g(follo)n(wing)e(program)g(does:)p 0 TeXcolorgray
3286 3803 V 3286 3921 4 118 v 0 0 0 0.05 TeXcolorcmyk
0 0 0 0.05 TeXcolorcmyk 3290 3921 112 118 v 0 0 0 0.05
TeXcolorcmyk 0 TeXcolorgray 649 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 3401 3921 4 118 v 3286 3924 118 4 v 0
TeXcolorgray 522 4064 a Fs(class\(Number,pos)o(iti)o(ve)o(\))c(:-)41
b(Number)e(>)i(0.)522 4164 y(class\(0,zero\).)522 4264
y(class\(Number,neg)o(ati)o(ve)o(\))35 b(:-)41 b(Number)e(<)i(0.)451
4432 y Fw(Second,)f(impro)o(v)o(e)f(it)i(by)g(adding)e(green)h(cuts.)
357 4566 y Fv(Exer)o(cise)e(10.3.)93 b Fw(W)m(ithout)38
b(using)g(cut,)h(write)f(a)h(predicate)e Fs(split/3)f
Fw(that)j(splits)p 0 TeXcolorgray 3286 4473 V 3286 4591
4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk
3290 4591 112 118 v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray
359 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 3401
4591 4 118 v 3286 4594 118 4 v 0 TeXcolorgray 357 4665
a Fw(a)48 b(list)g(of)f(inte)o(gers)g(into)g(tw)o(o)h(lists:)61
b(one)47 b(containing)e(the)j(positi)n(v)o(e)e(ones)i(\(and)357
4765 y(zero\),)39 b(the)i(other)g(containing)e(the)i(ne)o(gati)n(v)o(e)
d(ones.)46 b(F)o(or)40 b(e)o(xample:)688 4933 y Fs(split\([3,4,-5,-1)o
(,0,)o(4,)o(-9])o(,P)o(,N\))357 5102 y Fw(should)g(return:)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 200 212
TeXDict begin 200 211 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(200)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 1137 1051 a Fs(P)h(=)g([3,4,0,4])1137
1250 y(N)g(=)g([-5,-1,-9].)806 1434 y Fw(Then)d(impro)o(v)o(e)e(this)k
(program,)d(without)h(changing)f(its)j(meaning,)e(with)h(the)g(help)806
1533 y(of)h(the)h(cut.)806 1672 y Fv(Exer)o(cise)f(10.4.)p
0 TeXcolorgray 357 1579 118 4 v 357 1697 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 1697 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -928 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 1697 4 118
v 357 1700 118 4 v 0 TeXcolorgray 900 1777 a Fw(Recall)56
b(that)f(in)g(Ex)o(ercise)f(3.3)g(we)h(ga)n(v)o(e)f(you)g(the)h(follo)n
(wing)f(kno)n(wledge)806 1877 y(base:)971 2060 y Fs(directTrain\(saar)o
(br)o(uec)o(ke)o(n,d)o(ud)o(we)o(ile)o(r\))o(.)971 2160
y(directTrain\(forb)o(ac)o(h,s)o(aa)o(rbr)o(ue)o(ck)o(en\))o(.)971
2259 y(directTrain\(frey)o(mi)o(ng,)o(fo)o(rba)o(ch)o(\).)971
2359 y(directTrain\(stAv)o(ol)o(d,f)o(re)o(ymi)o(ng)o(\).)971
2459 y(directTrain\(fahl)o(qu)o(emo)o(nt)o(,st)o(Av)o(ol)o(d\).)971
2558 y(directTrain\(metz)o(,f)o(ahl)o(qu)o(emo)o(nt)o(\).)971
2658 y(directTrain\(nanc)o(y,)o(met)o(z\))o(.)806 2841
y Fw(W)-7 b(e)44 b(ask)o(ed)e(you)h(to)g(write)g(a)g(recursi)n(v)o(e)f
(predicate)g Fs(travelFromTo/2)c Fw(that)43 b(told)806
2941 y(us)e(when)f(we)h(could)f(tra)n(v)o(el)h(by)g(train)f(between)g
(tw)o(o)i(to)n(wns.)900 3046 y(No)n(w)-5 b(,)47 b(it')-5
b(s)47 b(plausible)f(to)g(assume)g(that)g(whene)n(v)o(er)f(it)h(is)i
(possible)d(to)i(tak)o(e)f(a)806 3146 y(direct)c(train)g(from)f(A)i(to)
g(B,)g(it)g(is)h(also)f(possible)f(to)h(tak)o(e)f(a)h(direct)f(train)h
(from)806 3246 y(B)k(to)h(A.)f(Add)f(this)i(information)c(to)k(the)f
(database.)63 b(Then)46 b(write)h(a)h(predicate)806 3345
y Fs(route/3)39 b Fw(which)i(gi)n(v)o(es)h(you)e(a)j(list)g(of)e(to)n
(wns)h(that)g(are)f(visited)h(by)g(taking)e(the)806 3445
y(train)g(from)g(one)g(to)n(wn)h(to)g(another)-5 b(.)45
b(F)o(or)40 b(instance:)971 3651 y Fs(?-)h(route\(forbach,m)o(etz)o(,R)
o(ou)o(te\))o(.)971 3750 y(Route)e(=)i([forbach,freyming)o(,st)o(Av)o
(ol)o(d,f)o(ah)o(lqu)o(em)o(ont)o(,m)o(et)o(z])806 3989
y Fv(Exer)o(cise)f(10.5.)95 b Fw(Recall)41 b(the)g(de\002nition)f(of)h
(jealousy)f(gi)n(v)o(en)g(in)h(Chapter)f(1.)p 0 TeXcolorgray
357 3896 V 357 4014 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 361 4014 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray -2904 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 471 4014 4 118 v 357 4017 118 4 v 0 TeXcolorgray
971 4173 a Fs(jealous\(X,Y\):-)c(loves\(X,Z\),)h(loves\(Y,Z\).)806
4356 y Fw(In)i(a)h(w)o(orld)f(where)g(both)g(V)-5 b(incent)39
b(and)g(Marsellus)h(lo)o(v)o(e)f(Mia,)h(V)-5 b(incent)39
b(will)i(be)806 4456 y(jealous)h(of)g(Marsellus,)h(and)f(Marsellus)h
(of)f(V)-5 b(incent.)50 b(But)43 b(Marsellus)g(will)g(also)806
4555 y(be)f(jealous)g(of)g(himself,)g(and)g(so)g(will)h(V)-5
b(incent.)49 b(Re)n(vise)43 b(the)f(Prolog)g(de\002nition)806
4655 y(of)e(jealousy)g(in)i(such)e(a)i(w)o(ay)f(that)g(people)e(can')o
(t)h(be)h(jealous)g(of)g(themselv)o(es.)806 4865 y Fk(5)99
b(Practical)41 b(Session)806 5002 y Fw(The)47 b(purpose)f(of)h(this)h
(session)g(is)g(to)g(help)f(you)g(get)g(f)o(amiliar)g(with)h(cuts)g
(and)806 5102 y(ne)o(gation)38 b(as)k(f)o(ailure.)j(First)d(some)f(k)o
(e)o(yboard)d(e)o(x)o(ercises:)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 201 213
TeXDict begin 201 212 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(10:)46 b(Cuts)41 b(and)g(Ne)o(gation)1357
b(201)p 0 TeXcolorgray 0 TeXcolorgray 460 1051 a(1.)p
0 TeXcolorgray 41 w(T)m(ry)48 b(out)h(all)g(three)f(v)o(ersions)f(of)i
(the)f Fs(max/3)f Fw(predicate)g(de\002ned)h(in)h(the)564
1151 y(te)o(xt:)59 b(the)47 b(cut-free)f(v)o(ersion,)h(the)h(green)e
(cut)h(v)o(ersion,)h(and)e(the)i(red)f(cut)564 1250 y(v)o(ersion.)c(As)
36 b(usual,)g(\223try)f(out\224)g(means)g(\223run)g(traces)h(on\224,)f
(and)g(you)g(should)564 1350 y(mak)o(e)41 b(sure)g(that)h(you)e(trace)i
(queries)e(in)i(which)f(all)h(three)e(ar)o(guments)g(are)564
1449 y(instantiated)51 b(to)h(inte)o(gers,)h(and)f(queries)f(where)g
(the)g(third)g(ar)o(gument)f(is)564 1549 y(gi)n(v)o(en)40
b(as)i(a)f(v)n(ariable.)p 0 TeXcolorgray 460 1722 a(2.)p
0 TeXcolorgray 41 w(Ok,)48 b(time)f(for)f(a)h(b)n(ur)o(ger)-5
b(.)61 b(T)m(ry)47 b(out)f(all)h(the)g(methods)e(discussed)i(in)g(the)
564 1821 y(te)o(xt)52 b(for)f(coping)f(with)i(V)-5 b(incent')g(s)52
b(preferences.)76 b(That)52 b(is,)j(try)c(out)h(the)564
1921 y(program)f(that)h(uses)h(a)g(cut-f)o(ail)f(combination,)h(the)f
(program)f(that)h(uses)564 2021 y(ne)o(gation)46 b(as)j(f)o(ailure)e
(correctly)-5 b(,)48 b(and)f(also)i(the)f(program)e(that)i(mucks)f(it)
564 2120 y(up)41 b(by)f(using)h(ne)o(gation)e(in)i(the)g(wrong)e
(place.)451 2309 y(No)n(w)i(for)f(some)h(programming:)p
0 TeXcolorgray 460 2499 a(1.)p 0 TeXcolorgray 41 w(De\002ne)49
b(a)h(predicate)e Fs(nu/2)g Fw(\(\224not)g(uni\002able\224\))g(which)h
(tak)o(es)g(tw)o(o)h(terms)564 2598 y(as)j(ar)o(guments)d(and)i
(succeeds)g(if)g(the)h(tw)o(o)f(terms)g(do)g(not)g(unify)-5
b(.)78 b(F)o(or)564 2698 y(e)o(xample:)896 2870 y Fs(nu\(foo,foo\).)896
2970 y(no)896 3169 y(nu)40 b(\(foo,blob\).)896 3269 y(yes)896
3468 y(nu\(foo,X\).)896 3568 y(no)564 3740 y Fw(Y)-9
b(ou)41 b(should)f(de\002ne)g(this)h(predicate)f(in)h(three)g(dif)n
(ferent)e(w)o(ays:)p 0 TeXcolorgray 613 3913 a(\(a\))p
0 TeXcolorgray 41 w(First)j(\(and)e(easiest\))h(write)g(it)h(with)f
(the)g(help)g(of)f Fs(=)h Fw(and)g Fs(\\+)o Fw(.)p 0
TeXcolorgray 609 4049 a(\(b\))p 0 TeXcolorgray 40 w(Second)f(write)h
(it)h(with)f(the)g(help)f(of)h Fs(=)o Fw(,)h(b)n(ut)f(don')o(t)e(use)i
Fs(\\+)o Fw(.)p 0 TeXcolorgray 613 4185 a(\(c\))p 0 TeXcolorgray
41 w(Third,)f(write)i(it)h(using)e(a)h(cut-f)o(ail)f(combination.)k
(Don')o(t)c(use)g Fs(=)h Fw(and)747 4285 y(don')o(t)d(use)i
Fs(\\+)p Fw(.)p 0 TeXcolorgray 460 4458 a(2.)p 0 TeXcolorgray
41 w(De\002ne)46 b(a)g(predicate)e Fs(unifiable\(List1,T)o(er)o(m,L)o
(is)o(t2)o(\))c Fw(where)45 b Fs(List2)564 4557 y Fw(is)50
b(the)f(list)i(of)d(all)i(members)e(of)h Fs(List1)f Fw(that)h(unify)f
(with)h Fs(Term)n Fw(.)71 b(The)564 4657 y(elements)50
b(of)g Fs(List2)f Fw(should)g Ft(not)j Fw(be)e(instantiated)g(by)g(the)
g(uni\002cation.)564 4756 y(F)o(or)41 b(e)o(xample)896
4929 y Fs(unifiable\([X,b,)o(t\(Y)o(\)])o(,t\()o(a\))o(,L)o(ist)o(])564
5102 y Fw(should)f(yield)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 202 214
TeXDict begin 202 213 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(202)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 1344 1051 a Fs(List)g(=)h([X,t\(Y\)].)1013
1217 y Fw(Note)i(that)g Fs(X)g Fw(and)f Fs(Y)h Fw(are)f(still)i
Ft(not)g Fw(instantiated.)51 b(So)43 b(the)f(trick)o(y)g(part)g(is:)
1013 1317 y(ho)n(w)i(do)g(we)g(check)g(that)g(the)o(y)g(unify)f(with)i
Fs(t\(a\))e Fw(without)g(instantiating)1013 1416 y(them?)1013
1549 y(\(Hint:)j(consider)40 b(using)g(tests)i(of)f(the)g(form)f
Fs(\\+)g(term1)g(=)h(term2)n Fw(.)46 b(Why?)1013 1649
y(Think)i(about)g(it.)71 b(Y)-9 b(ou)49 b(might)f(also)i(lik)o(e)f(to)h
(think)e(about)g(tests)j(of)d(the)1013 1748 y(form)40
b Fs(\\+)h(\\+)f(term1)g(=)h(term2)n Fw(.\))p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 203 215
TeXDict begin 203 214 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2053 1855
a Fn(Chapter)42 b(11)519 2603 y Fm(Database)g(Manipulation)h(and)1204
2852 y(Collecting)f(Solutions)p 357 3034 2599 24 v 0
TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray 714 4554
a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
115.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial 797 3848 a Fl(This)f(chapter)h
(has)g(t)m(w)m(o)g(main)g(goals:)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 887 3997 a(1.)p 0 TeXcolorgray 41 w(T)-8
b(o)41 b(discuss)i(database)f(manipulation)f(in)g(Prolog.)p
0 TeXcolorgray 887 4180 a(2.)p 0 TeXcolorgray 41 w(T)-8
b(o)72 b(discuss)i(built-in)f(p)m(redicates)h(that)f(let)h(us)1004
4296 y(collect)36 b(all)e(solutions)i(to)f(a)f(p)m(roblem)i(into)f(a)g
(single)1004 4413 y(list.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 204 216
TeXDict begin 204 215 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(204)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Database)41 b(Manipulation)806
1180 y Fw(Prolog)e(has)h(four)f(database)h(manipulation)e(commands:)44
b(assert,)d(retract,)e(asserta,)806 1280 y(and)47 b(assertz.)69
b(Let')-5 b(s)49 b(see)g(ho)n(w)f(these)g(are)g(used.)68
b(Suppose)47 b(we)i(start)g(with)g(an)806 1380 y(empty)40
b(database.)45 b(So)c(if)g(we)g(gi)n(v)o(e)g(the)g(command:)971
1519 y Fs(?-)g(listing.)806 1658 y Fw(then)f(Prolog)g(will)i(simply)e
(respond)g(yes;)h(the)g(listing)g(\(of)f(course\))g(is)i(empty)-5
b(.)900 1758 y(Suppose)40 b(we)h(no)n(w)g(gi)n(v)o(e)f(this)h(command:)
971 1897 y Fs(?-)g(assert\(happy\(mi)o(a\)\))o(.)900
2036 y Fw(This)52 b(succeeds)g(\()p Fs(assert/1)c Fw(commands)j
Ft(always)h Fw(succeed\).)77 b(But)53 b(what)f(is)806
2135 y(important)58 b(is)j(not)f(that)g(it)h(succeeds,)j(b)n(ut)c(the)g
(side-ef)n(fect)f(it)i(has)f(on)f(the)806 2235 y(database.)45
b(F)o(or)40 b(if)h(we)h(no)n(w)e(gi)n(v)o(e)g(the)h(command)971
2374 y Fs(?-)g(listing.)806 2513 y Fw(we)g(get:)971 2652
y Fs(happy\(mia\).)806 2791 y Fw(That)k(is,)j(the)e(database)f(is)i(no)
f(longer)f(empty:)55 b(it)46 b(no)n(w)g(contains)f(the)h(f)o(act)g(we)
806 2891 y(asserted.)900 2991 y(Suppose)40 b(we)h(then)g(made)f(four)g
(more)g(assert)h(commands:)971 3130 y Fs(?-)g(assert\(happy\(vi)o(nce)o
(nt)o(\)\))o(.)971 3229 y(yes)971 3429 y(?-)g(assert\(happy\(ma)o(rce)o
(ll)o(us)o(\)\).)971 3528 y(yes)971 3728 y(?-)g(assert\(happy\(bu)o
(tch)o(\)\))o(.)971 3827 y(yes)971 4026 y(?-)g(assert\(happy\(vi)o(nce)
o(nt)o(\)\))o(.)971 4126 y(yes)806 4265 y Fw(and)f(then)g(ask)i(for)e
(a)h(listing:)971 4404 y Fs(?-)g(listing.)971 4604 y(happy\(mia\).)971
4703 y(happy\(vincent\).)971 4803 y(happy\(marcellus\))o(.)971
4902 y(happy\(butch\).)971 5002 y(happy\(vincent\).)971
5102 y(yes)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 205 217
TeXDict begin 205 216 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(11:)46 b(Database)40 b(Manipulation)f(and)i
(Collecting)f(Solutions)319 b(205)p 0 TeXcolorgray 357
1051 a(All)52 b(the)f(f)o(acts)g(we)h(asserted)f(are)g(no)n(w)g(in)g
(the)g(kno)n(wledge)e(base.)76 b(Note)52 b(that)357 1151
y Fs(happy\(vincent\))47 b Fw(is)53 b(in)f(the)g(kno)n(wledge)e(base)i
(twice.)80 b(As)52 b(we)h(asserted)f(it)357 1250 y(twice,)41
b(this)g(seems)h(sensible.)451 1355 y(The)47 b(database)g
(manipulations)e(we)j(ha)n(v)o(e)e(been)h(making)f(ha)n(v)o(e)g
(changed)g(the)357 1454 y(meaning)32 b(of)h(the)g(predicate)g
Fs(happy/1)m Fw(.)43 b(More)33 b(generally)-5 b(,)33
b(database)g(manipulation)357 1554 y(commands)k(gi)n(v)o(e)h(us)h(the)g
(ability)g(to)g(change)f(the)h(meaning)e(of)i(predicates)f(while)357
1654 y(we)52 b(are)h(running)d(programs.)78 b(Predicates)53
b(whose)f(de\002nitions)f(change)g(during)357 1753 y(run-time)32
b(are)i(called)g(dynamic)e(predicates,)i(as)h(opposed)d(to)i(the)g
(static)h(predicates)357 1853 y(that)45 b(we)h(ha)n(v)o(e)f(pre)n
(viously)f(dealt)h(with.)60 b(Most)45 b(Prolog)g(interpreters)f(insist)
j(that)357 1953 y(we)j(e)o(xplicitly)e(declare)h(the)h(predicates)f
(that)h(we)g(wish)g(to)g(be)f(dynamic.)71 b(W)-7 b(e)357
2052 y(will)52 b(soon)g(e)o(xamine)e(an)i(e)o(xample)e(in)m(v)n(olving)
g(dynamic)g(predicates,)k(b)n(ut)e(let')-5 b(s)357 2152
y(\002rst)41 b(complete)f(our)g(discussion)h(of)g(the)g(database)f
(manipulation)f(commands.)451 2257 y(So)h(f)o(ar)e(we)i(ha)n(v)o(e)e
(only)h(asserted)g(f)o(acts)g(into)g(the)g(database,)g(b)n(ut)g(we)g
(can)g(also)357 2356 y(assert)i(ne)n(w)f(rules.)46 b(Suppose)39
b(we)i(w)o(ant)g(to)g(assert)g(the)g(rule)f(that)h(e)n(v)o(eryone)d
(who)357 2456 y(is)k(happ)o(y)d(is)j(nai)n(v)o(e.)j(That)40
b(is,)i(suppose)e(we)h(w)o(ant)h(to)f(assert)g(that:)522
2637 y Fs(naive\(X\):-)c(happy\(X\).)357 2818 y Fw(W)-7
b(e)42 b(can)f(do)f(this)i(as)f(follo)n(ws:)522 3000
y Fs(assert\()e(\(naive\(X\):-)e(happy\(X\)\))g(\).)357
3181 y Fw(Note)j(the)g(syntax)f(of)h(this)h(command:)j
Ft(the)c(rule)g(we)h(ar)m(e)f(asserting)h(is)g(enclosed)357
3281 y(in)g(a)g(pair)g(of)g(br)o(ac)n(k)o(ets)p Fw(.)46
b(If)40 b(we)i(no)n(w)e(ask)h(for)g(a)g(listing)g(we)g(get:)522
3462 y Fs(happy\(mia\).)522 3562 y(happy\(vincent\).)522
3661 y(happy\(marcellus\))o(.)522 3761 y(happy\(butch\).)522
3860 y(happy\(vincent\).)522 4060 y(naive\(A\):-)647
4159 y(happy\(A\).)451 4341 y Fw(No)n(w)i(that)g(we)h(kno)n(w)e(ho)n(w)
h(to)g(assert)h(ne)n(w)f(information)d(into)j(the)h(database,)357
4440 y(we)51 b(should)f(also)h(learn)f(ho)n(w)g(to)h(remo)o(v)o(e)e
(information)f(when)i(we)i(no)e(longer)357 4540 y(need)40
b(it.)46 b(There)40 b(is)h(an)g(in)m(v)o(erse)e(predicate)g(to)i
Fs(assert/1)m Fw(,)g(namely)e Fs(retract/1)l Fw(.)357
4640 y(F)o(or)55 b(e)o(xample,)j(if)e(we)g(carry)f(straight)h(on)f
(from)g(the)g(pre)n(vious)g(e)o(xample)f(by)357 4739
y(gi)n(ving)39 b(the)i(command:)522 4920 y Fs(?-)g(retract\(happy\(ma)o
(rc)o(el)o(lus)o(\)\))o(.)357 5102 y Fw(and)f(then)h(list)h(the)f
(database,)f(we)h(get:)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 206 218
TeXDict begin 206 217 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(206)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(happy\(mia\).)971 1151 y
(happy\(vincent\).)971 1250 y(happy\(butch\).)971 1350
y(happy\(vincent\).)971 1549 y(naive\(A\))e(:-)1137 1649
y(happy\(A\).)806 1815 y Fw(That)i(is,)i(the)f(f)o(act)g
Fs(happy\(marcellus\))35 b Fw(has)41 b(been)f(remo)o(v)o(ed.)900
1914 y(Suppose)g(we)h(go)g(on)f(further)m(,)f(and)h(say)971
2080 y Fs(?-)h(retract\(happy\(v)o(inc)o(en)o(t\))o(\).)806
2246 y Fw(and)f(then)g(ask)i(for)e(a)h(listing.)46 b(W)-7
b(e)42 b(get:)971 2412 y Fs(happy\(mia\).)971 2512 y(happy\(butch\).)
971 2612 y(happy\(vincent\).)971 2811 y(naive\(A\))c(:-)1137
2911 y(happy\(A\).)806 3077 y Fw(Note)51 b(that)h(the)f(\002rst)i
(occurrence)c(of)i Fs(happy\(vincent\))-6 b Fw(,)55 b(and)c
Ft(only)g Fw(the)h(\002rst)806 3176 y(occurrence,)38
b(w)o(as)k(remo)o(v)o(ed.)900 3276 y(T)-7 b(o)47 b(remo)o(v)o(e)e(all)j
(of)e(our)g(assertions)h(contrib)n(uting)e(to)i(the)g(de\002nition)f
(of)g(the)806 3376 y(predicate)39 b Fs(happy/1)g Fw(we)i(can)g(use)g(a)
h(v)n(ariable:)971 3542 y Fs(?-)f(retract\(happy\(X)o(\)\).)971
3741 y(X)g(=)g(mia)f(;)971 3940 y(X)h(=)g(butch)f(;)971
4139 y(X)h(=)g(vincent)e(;)971 4239 y(no)806 4405 y Fw(A)51
b(listing)h(re)n(v)o(eals)f(that)g(the)g(database)g(is)h(no)n(w)f
(empty)-5 b(,)52 b(e)o(xcept)f(for)f(the)i(rule)806 4505
y Fs(naive\(A\))38 b(:-)i(happy\(A\))m Fw(.)971 4671
y Fs(?-)h(listing.)971 4770 y(naive\(A\))d(:-)1137 4870
y(happy\(A\).)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 207 219
TeXDict begin 207 218 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(11:)46 b(Database)40 b(Manipulation)f(and)i
(Collecting)f(Solutions)319 b(207)p 0 TeXcolorgray 451
1051 a(If)45 b(we)h(w)o(ant)f(more)g(control)f(o)o(v)o(er)g(where)g
(the)h(asserted)h(material)e(is)j(placed,)357 1151 y(there)40
b(are)h(tw)o(o)g(v)n(ariants)g(of)f Fs(assert/1)m Fw(,)h(namely:)p
0 TeXcolorgray 460 1321 a(1.)p 0 TeXcolorgray 41 w(assertz.)46
b(Places)c(asserted)f(material)g(at)g(the)g Ft(end)i
Fw(of)d(the)h(database.)p 0 TeXcolorgray 460 1493 a(2.)p
0 TeXcolorgray 41 w(asserta.)46 b(Places)c(asserted)f(material)g(at)g
(the)g Ft(be)m(ginning)d Fw(of)j(the)g(database.)451
1663 y(F)o(or)i(e)o(xample,)f(suppose)g(we)i(start)f(with)h(an)f(empty)
f(database,)h(and)g(then)f(we)357 1763 y(gi)n(v)o(e)e(the)h(follo)n
(wing)e(command:)522 1933 y Fs(assert\()g(p\(b\))h(\),)g(assertz\()e
(p\(c\))i(\),)h(asserta\()d(p\(a\))i(\).)357 2104 y Fw(Then)g(a)h
(listing)g(re)n(v)o(eals)g(that)g(we)g(no)n(w)f(ha)n(v)o(e)h(the)g
(follo)n(wing)e(database:)522 2274 y Fs(?-)i(listing.)522
2473 y(p\(a\).)522 2573 y(p\(b\).)522 2672 y(p\(c\).)522
2772 y(yes)451 2942 y Fw(Database)c(manipulation)e(is)j(a)g(useful)f
(technique.)42 b(It)c(is)g(especially)f(useful)f(for)357
3042 y(storing)42 b(the)h(results)g(to)g(computations,)f(so)h(that)g
(if)g(we)h(need)e(to)h(ask)g(the)h(same)357 3142 y(question)37
b(in)h(the)h(future,)e(we)i(don')o(t)d(need)i(to)g(redo)g(the)g(w)o
(ork:)44 b(we)39 b(just)g(look)e(up)357 3241 y(the)43
b(asserted)f(f)o(act.)52 b(This)43 b(technique)e(is)j(called)e
(memoisation,)g(or)g(caching,)g(and)357 3341 y(in)k(some)f
(applications)g(it)i(can)e(greatly)g(increase)h(ef)n(\002cienc)o(y)-5
b(.)58 b(Here')-5 b(s)46 b(a)h(simple)357 3441 y(e)o(xample)39
b(of)i(this)g(technique)f(at)h(w)o(ork:)522 3629 y Fs(:-)g(dynamic)d
(lookup/3.)522 3828 y(add_and_square\(X)o(,Y,)o(Re)o(s\):)o(-)647
3928 y(lookup\(X,Y,Res\))o(,)d(!.)522 4127 y(add_and_square\(X)o(,Y,)o
(Re)o(s\):)o(-)647 4227 y(Res)40 b(is)h(\(X+Y\)*\(X+Y\),)647
4326 y(assert\(lookup\(X)o(,Y,)o(Re)o(s\))o(\).)451 4515
y Fw(What)46 b(does)f(this)h(program)d(do?)59 b(Basically)-5
b(,)47 b(it)f(tak)o(es)g(tw)o(o)f(numbers)f(X)i(and)357
4614 y(Y)-11 b(,)41 b(adds)g(X)g(to)g(Y)-11 b(,)42 b(and)e(then)h
(squares)f(the)h(result.)46 b(F)o(or)41 b(e)o(xample)e(we)i(ha)n(v)o
(e:)522 4803 y Fs(?-)g(add_and_square\(3)o(,7)o(,X)o(\).)522
5002 y(X)g(=)g(100)522 5102 y(yes)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 208 220
TeXDict begin 208 219 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(208)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(But)k(the)g(important)e(point)i(is:)52
b Ft(how)44 b Fw(does)g(it)g(do)g(this?)55 b(First,)45
b(note)e(that)h(we)806 1151 y(ha)n(v)o(e)39 b(declared)g
Fs(lookup/3)f Fw(as)j(a)g(dynamic)d(predicate.)45 b(W)-7
b(e)41 b(need)f(to)g(do)g(this)h(as)806 1250 y(we)h(plan)f(to)i(change)
d(the)i(de\002nition)f(of)h Fs(lookup/3)d Fw(during)h(run-time.)48
b(Second,)806 1350 y(note)37 b(that)g(there)g(are)h(tw)o(o)g(clauses)f
(de\002ning)g Fs(add_and_square/)o(3)-6 b Fw(.)45 b(The)37
b(second)806 1449 y(clause)42 b(performs)e(the)j(required)d(arithmetic)
h(calculation)g(and)h(asserts)h(the)f(result)806 1549
y(to)i(the)g(Prolog)g(database)g(using)f(the)i(predicate)e
Fs(lookup/3)f Fw(\(that)i(is,)i(it)f(caches)806 1649
y(the)50 b(result\).)75 b(The)51 b(\002rst)g(clause)g(checks)f(the)h
(Prolog)f(database)g(to)h(see)g(if)g(the)806 1748 y(calculation)k(has)i
(already)f(been)h(made)f(in)h(the)g(past.)94 b(If)57
b(it)g(has)g(been,)j(the)806 1848 y(program)40 b(simply)i(returns)f
(the)i(result,)g(and)e(the)i(cut)f(pre)n(v)o(ents)f(it)i(from)f
(entering)806 1948 y(the)e(second)h(clause.)900 2047
y(Here')-5 b(s)43 b(an)g(e)o(xample)f(of)g(the)h(program)e(at)i(w)o
(ork.)51 b(Suppose)42 b(we)h(gi)n(v)o(e)g(Prolog)806
2147 y(another)c(query)971 2311 y Fs(?-)82 b(add_and_square\(3)o(,4,)o
(Y\))o(.)971 2510 y(Y)41 b(=)g(49)971 2610 y(yes)806
2774 y Fw(If)f(we)i(no)n(w)e(ask)h(for)g(a)g(listing)g(we)g(see)h(that)
f(the)g(database)f(no)n(w)h(contains)971 2938 y Fs(lookup\(3,)d(7,)i
(100\).)971 3037 y(lookup\(3,)e(4,)i(49\).)806 3201 y
Fw(Should)51 b(we)j(later)f(ask)g(Prolog)f(to)h(add)f(and)h(square)f(3)
h(and)f(4,)k(it)d(w)o(ouldn')o(t)806 3301 y(perform)33
b(the)j(calculations)f(again.)43 b(Rather)m(,)36 b(it)h(w)o(ould)e
(just)h(return)f(the)g(pre)n(viously)806 3401 y(calculated)40
b(result.)900 3549 y(Question:)45 b(ho)n(w)40 b(do)g(we)h(remo)o(v)o(e)
d(all)j(these)f(ne)n(w)h(f)o(acts)f(when)g(we)h(no)f(longer)806
3649 y(w)o(ant)h(them?)k(After)c(all,)g(if)g(we)h(gi)n(v)o(e)e(the)h
(command)971 3813 y Fs(?-)g(retract\(lookup\()o(X,Y)o(,Z)o(\)\))o(.)806
3977 y Fw(Prolog)e(will)i(go)f(through)f(all)i(the)f(f)o(acts)h(one)f
(by)g(one)g(and)g(ask)h(us)g(whether)e(we)806 4076 y(w)o(ant)i(to)h
(remo)o(v)o(e)d(them!)47 b(But)42 b(there')-5 b(s)41
b(a)h(much)f(simpler)g(w)o(ay)-5 b(.)47 b(Simply)41 b(use)g(the)806
4176 y(command)971 4340 y Fs(?-)g(retractall\(look)o(up\()o(_,)o(_,)o
(_\)\))o(.)806 4504 y Fw(This)g(will)g(remo)o(v)o(e)e(all)j(f)o(acts)f
(about)f Fs(lookup/3)e Fw(from)i(the)h(database.)900
4604 y(T)-7 b(o)63 b(conclude)d(our)i(discussion)g(of)g(database)g
(manipulation,)j(a)e(w)o(ord)f(of)806 4703 y(w)o(arning.)68
b(Although)47 b(it)j(is)g(a)f(useful)g(technique,)g(database)f
(manipulation)f(can)806 4803 y(lead)55 b(to)g(dirty)-5
b(,)58 b(hard)c(to)i(understand,)g(code.)89 b(If)55 b(you)f(use)i(it)g
(hea)n(vily)f(in)g(a)806 4902 y(program)42 b(with)j(lots)h(of)f
(backtracking,)e(understanding)f(what)j(is)g(going)f(on)h(can)806
5002 y(be)i(a)i(nightmare.)65 b(It)48 b(is)h(a)g(non-declarati)n(v)o
(e,)d(non)h(logical,)i(feature)e(of)h(Prolog)806 5102
y(that)41 b(should)e(be)i(used)g(cautiously)-5 b(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 209 221
TeXDict begin 209 220 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(11:)46 b(Database)40 b(Manipulation)f(and)i
(Collecting)f(Solutions)319 b(209)p 0 TeXcolorgray 357
1051 a Fk(2)99 b(Collecting)41 b(Solutions)357 1181 y
Fw(There)g(may)g(be)g(man)o(y)g(solutions)g(to)h(a)g(query)-5
b(.)46 b(F)o(or)c(e)o(xample,)e(suppose)h(we)h(are)357
1281 y(w)o(orking)d(with)i(the)g(database)522 1449 y
Fs(child\(martha,cha)o(rlo)o(tt)o(e\).)522 1549 y(child\(charlotte,)o
(car)o(ol)o(ine)o(\).)522 1649 y(child\(caroline,l)o(aur)o(a\))o(.)522
1748 y(child\(laura,rose)o(\).)522 1948 y(descend\(X,Y\))c(:-)j
(child\(X,Y\).)522 2147 y(descend\(X,Y\))d(:-)j(child\(X,Z\),)1228
2246 y(descend\(Z,Y\).)357 2415 y Fw(Then)g(if)h(we)g(pose)g(the)g
(query)522 2583 y Fs(descend\(martha,X)o(\).)357 2752
y Fw(there)47 b(are)g(four)f(solutions)h(\(namely)f Fs(X=charlotte)-5
b Fw(,)49 b Fs(X=caroline)l Fw(,)g Fs(X=laura)m Fw(,)357
2851 y(and)40 b Fs(X=rose)n Fw(\).)451 2952 y(Ho)n(we)n(v)o(er)h
(Prolog)g(generates)g(these)h(solutions)f(one)h(by)f(one.)49
b(Sometimes)41 b(we)357 3051 y(w)o(ould)c(lik)o(e)h(to)h(ha)n(v)o(e)e
Ft(all)h Fw(the)h(solutions)e(to)h(a)h(query)-5 b(,)36
b(and)i(we)g(w)o(ould)g(lik)o(e)g(them)357 3151 y(handed)e(to)i(us)g
(in)f(a)h(neat,)g(usable,)g(form.)44 b(Prolog)36 b(has)i(three)f(b)n
(uilt-in)h(predicates)357 3250 y(that)49 b(do)g(this:)64
b(\002ndall,)51 b(bagof)d(and)h(setof.)71 b(In)49 b(essence,)j(all)e
(these)g(predicates)357 3350 y(collect)40 b(all)i(the)f(solutions)f(to)
h(a)g(query)f(and)g(put)h(them)f(in)h(a)g(single)g(list)h(\227)g(b)n
(ut)357 3450 y(there)e(are)h(important)e(dif)n(ferences)h(between)g
(them,)g(as)i(we)f(shall)g(see.)357 3607 y Fv(The)h Fs(findall/3)37
b Fv(pr)o(edicate)357 3730 y Fw(The)j(query)522 3898
y Fs(?-)h(findall\(Object,G)o(oa)o(l,)o(Lis)o(t\))o(.)357
4067 y Fw(produces)52 b(a)i(list)g Fs(List)f Fw(of)g(all)h(the)g
(objects)f Fs(Object)f Fw(that)i(satisfy)g(the)f(goal)357
4166 y Fs(Goal)n Fw(.)f(Often)43 b Fs(Object)e Fw(is)j(simply)f(a)g(v)n
(ariable,)f(in)h(which)g(case)g(the)g(query)f(can)357
4266 y(be)i(read)h(as:)54 b Ft(Give)45 b(me)h(a)f(list)g(containing)e
(all)i(the)g(instantiations)e(of)58 b Fs(Object)357 4366
y Ft(whic)o(h)40 b(satisfy)i Fs(Goal)n Fw(.)451 4466
y(Here')-5 b(s)47 b(an)f(e)o(xample.)59 b(Suppose)45
b(we')l(re)h(w)o(orking)e(with)j(the)f(abo)o(v)o(e)e(database)357
4566 y(\(that)32 b(is,)j(with)d(the)h(information)d(about)h
Fs(child)g Fw(and)h(the)g(de\002nition)f(of)i Fs(descend)m
Fw(\).)357 4665 y(Then)40 b(if)h(we)g(pose)g(the)g(query)522
4834 y Fs(?-)g(findall\(X,descen)o(d\()o(ma)o(rth)o(a,)o(X\),)o(Z\))o
(.)357 5002 y Fw(we)50 b(are)g(asking)f(for)g(a)h(list)h
Fs(Z)f Fw(containing)e(all)j(the)e(v)n(alues)h(of)f Fs(X)h
Fw(that)g(satisfy)357 5102 y Fs(descend\(martha,)o(X\))-6
b Fw(.)46 b(Prolog)40 b(will)i(respond)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 210 222
TeXDict begin 210 221 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(210)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(X)h(=)g(_7489)971 1151 y(Z)g(=)g
([charlotte,carol)o(ine)o(,l)o(aur)o(a,)o(ro)o(se])900
1326 y Fw(But)f Fs(Object)d Fw(doesn')o(t)h(ha)n(v)o(e)h(to)g(be)g(a)h
(v)n(ariable,)e(it)i(may)f(be)g(a)h(comple)o(x)e(term)806
1425 y(that)k(just)i(contains)e(a)h(v)n(ariable)e(that)i(also)g(occurs)
f(in)h Fs(Goal)o Fw(.)51 b(F)o(or)43 b(e)o(xample,)e(we)806
1525 y(might)e(decide)g(that)i(we)f(w)o(ant)g(to)h(b)n(uild)e(a)i(ne)n
(w)f(predicate)f Fs(fromMartha/1)c Fw(that)806 1625 y(is)k(true)e(only)
g(of)h(descendants)f(of)h(Martha.)44 b(W)-7 b(e)39 b(could)e(do)h(this)
g(with)h(the)f(query:)971 1800 y Fs(?-)j(findall\(fromMar)o(tha)o(\(X)o
(\),)o(des)o(ce)o(nd\()o(ma)o(rt)o(ha,)o(X\))o(,Z\))o(.)806
1975 y Fw(That)47 b(is,)j(we)e(are)g(asking)f(for)g(a)h(list)h
Fs(Z)f Fw(containing)e(all)i(the)g(instantiations)f(of)806
2074 y Fs(fromMartha\(X\))40 b Fw(that)45 b(satisfy)h(the)f(goal)g
Fs(descend\(martha,)o(X\))-6 b Fw(.)59 b(Prolog)44 b(will)806
2174 y(respond)971 2349 y Fs(X)d(=)g(_7616)971 2449 y(Z)g(=)g
([fromMartha\(char)o(lot)o(te)o(\),f)o(ro)o(mM)o(art)o(ha)o(\(ca)o(ro)o
(lin)o(e\))o(,)1677 2548 y(fromMartha\(laur)o(a\),)o(fr)o(om)o(Mar)o
(th)o(a\(r)o(os)o(e\))o(])900 2724 y Fw(What)g(happens)f(if)h(we)g(ask)
h(the)f(follo)n(wing)e(query?)971 2899 y Fs(?-)i(findall\(X,desce)o
(nd\()o(ma)o(ry)o(,X\))o(,Z)o(\).)806 3074 y Fw(As)69
b(there)g(are)g(no)f(solutions)g(for)h(the)g(goal)f Fs
(descend\(mary,X\))63 b Fw(in)69 b(the)806 3173 y(kno)n(wledge)38
b(base.)46 b Fs(findall/3)38 b Fw(returns)i(an)h(empty)f(list.)900
3276 y(Note)52 b(that)g(the)g(\002rst)h(tw)o(o)f(ar)o(guments)e(of)i
Fs(findall/3)d Fw(typically)i(ha)n(v)o(e)g(\(at)806 3376
y(least\))e(one)f(v)n(ariable)g(in)i(common.)68 b(When)49
b(using)f Fs(findall/3)l Fw(,)k(we)d(normally)806 3475
y(w)o(ant)h(to)h(kno)n(w)e(what)h(solutions)g(Prolog)f(\002nds)i(for)f
(certain)f(v)n(ariables)h(in)g(the)806 3575 y(goal,)e(and)f(we)h(tell)g
(Prolog)e(which)h(v)n(ariables)g(in)h(Goal)f(we)h(are)f(interested)g
(in)806 3675 y(by)40 b(b)n(uilding)g(them)g(into)h(the)g(\002rst)h(ar)o
(gument)c(of)j Fs(findall/3)l Fw(.)900 3777 y(Y)-9 b(ou)64
b(might)f(encounter)f(situations,)70 b(ho)n(we)n(v)o(er)m(,)d(where)d
Fs(findall/3)d Fw(does)806 3877 y(useful)43 b(w)o(ork)h(although)f(the)
h(\002rst)i(tw)o(o)e(ar)o(guments)f(don')o(t)g(share)h(an)o(y)g(v)n
(ariables.)806 3976 y(F)o(or)i(e)o(xample,)h(if)g(you)f(are)h(not)f
(interested)h(in)g(who)f(e)o(xactly)g(is)i(a)f(descendant)806
4076 y(of)41 b(Martha,)f(b)n(ut)i(only)f(in)g(ho)n(w)g(man)o(y)g
(descendants)f(Martha)h(has,)g(you)g(can)g(use)806 4176
y(the)f(follo)n(wing)g(query)f(to)i(\002nd)g(out:)971
4351 y Fs(?-)g(findall\(Y,desce)o(nd\()o(ma)o(rt)o(ha,)o(X\))o(,Z\))o
(,)35 b(length\(Z,N\).)806 4526 y Fv(The)41 b Fs(bagof/3)e
Fv(pr)o(edicate)806 4652 y Fw(The)47 b Fs(findall/3)e
Fw(predicate)i(is)i(useful,)g(b)n(ut)f(in)g(certain)g(respects)g(it)g
(is)h(rather)806 4751 y(crude.)44 b(F)o(or)d(e)o(xample,)e(suppose)h
(we)h(pose)g(the)g(query)971 4927 y Fs(?-)g(findall\(Child,d)o(esc)o
(en)o(d\()o(Mot)o(he)o(r,C)o(hi)o(ld)o(\),L)o(is)o(t\).)806
5102 y Fw(W)-7 b(e)42 b(get)f(the)g(response)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 211 223
TeXDict begin 211 222 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(11:)46 b(Database)40 b(Manipulation)f(and)i
(Collecting)f(Solutions)319 b(211)p 0 TeXcolorgray 522
1051 a Fs(Child)39 b(=)j(_6947)522 1151 y(Mother)d(=)i(_6951)522
1250 y(List)f(=)h([charlotte,carol)o(ine)o(,l)o(au)o(ra,)o(ro)o(se,)o
(ca)o(rol)o(in)o(e,)854 1350 y(laura,rose,laura,)o(ro)o(se)o(,ro)o(se)o
(])357 1495 y Fw(No)n(w)-5 b(,)55 b(this)e(is)h(correct,)g(b)n(ut)f
(sometimes)f(it)i(w)o(ould)e(be)h(useful)f(if)h(we)g(had)f(a)357
1595 y(separate)40 b(list)i(for)f(each)f(of)h(the)g(dif)n(ferent)e
(instantiations)h(of)h Fs(Mother)n Fw(.)451 1694 y(This)g(is)h(what)f
Fs(bagof/3)e Fw(lets)j(us)f(do.)k(If)c(we)g(pose)g(the)g(query)522
1839 y Fs(?-)g(bagof\(Child,desc)o(en)o(d\()o(Mot)o(he)o(r,C)o(hi)o(ld)
o(\),L)o(is)o(t\).)357 1985 y Fw(we)g(get)g(the)g(response)522
2130 y Fs(Child)e(=)j(_7736)522 2229 y(Mother)d(=)i(caroline)522
2329 y(List)f(=)h([laura,rose])c(;)522 2528 y(Child)i(=)j(_7736)522
2628 y(Mother)d(=)i(charlotte)522 2728 y(List)f(=)h([caroline,laura,)o
(ros)o(e])35 b(;)522 2927 y(Child)k(=)j(_7736)522 3027
y(Mother)d(=)i(laura)522 3126 y(List)f(=)h([rose])e(;)522
3325 y(Child)g(=)j(_7736)522 3425 y(Mother)d(=)i(martha)522
3525 y(List)f(=)h([charlotte,carol)o(ine)o(,l)o(au)o(ra,)o(ro)o(se])35
b(;)522 3624 y(no)451 3769 y Fw(That)47 b(is,)i Fs(bagof/3)44
b Fw(is)k(more)d(\002ne-grained)g(than)h Fs(findall/3)l
Fw(.)64 b(It)47 b(gi)n(v)o(es)f(us)357 3869 y(the)41
b(opportunity)e(to)j(e)o(xtract)f(the)h(information)d(we)j(w)o(ant)g
(in)g(a)g(more)f(structured)357 3969 y(w)o(ay)-5 b(.)45
b(Moreo)o(v)o(er)m(,)37 b Fs(bagof/3)i Fw(can)h(also)h(do)f(the)h(same)
g(job)f(as)h Fs(findall/3)m Fw(,)g(with)357 4068 y(the)g(help)f(of)h(a)
g(special)g(piece)g(of)g(syntax,)f(namely)g Fs(^)o Fw(:)522
4214 y Fs(?-)h(bagof\(Child,Moth)o(er)o(^d)o(esc)o(en)o(d\(M)o(ot)o(he)
o(r,C)o(hi)o(ld\))o(,L)o(ist)o(\).)357 4359 y Fw(This)64
b(says:)92 b Ft(give)64 b(me)g(a)g(list)h(of)f(all)g(the)g(values)g(of)
76 b Fs(Child)63 b Ft(suc)o(h)g(that)357 4458 y Fs(descend\(Mother,)o
(Chi)o(ld)o(\))-6 b Fw(,)44 b Ft(and)f(put)g(the)g(r)m(esult)h(in)g(a)f
(list,)i(b)n(ut)e(don')n(t)f(worry)357 4558 y(about)i(g)o(ener)o(ating)
g(a)i(separ)o(ate)f(list)i(for)f(eac)o(h)f(value)g(of)58
b Fs(Mother)m Fw(.)j(So)46 b(posing)357 4658 y(this)41
b(query)f(yields:)522 4803 y Fs(Child)f(=)j(_7870)522
4902 y(Mother)d(=)i(_7874)522 5002 y(List)f(=)h([charlotte,carol)o(ine)
o(,l)o(au)o(ra,)o(ro)o(se,)o(ca)o(rol)o(in)o(e,)854 5102
y(laura,rose,laura,)o(ro)o(se)o(,ro)o(se)o(])p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 212 224
TeXDict begin 212 223 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(212)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(Note)g(that)g(this)h(is)g(e)o(xactly)e(the)h
(response)f(that)i Fs(findall/3)c Fw(w)o(ould)i(ha)n(v)o(e)h(gi)n(v)o
(en)806 1151 y(us.)45 b(Still,)40 b(if)f(this)g(is)h(the)e(kind)g(of)h
(query)e(you)h(w)o(ant)h(to)g(mak)o(e)f(\(and)g(it)h(often)f(is\))806
1250 y(it')-5 b(s)48 b(simpler)e(to)h(use)h Fs(findall/3)l
Fw(,)h(because)d(then)h(you)f(don')o(t)f(ha)n(v)o(e)i(to)g(bother)806
1350 y(e)o(xplicitly)39 b(write)j(do)n(wn)d(the)i(conditions)f(using)g
Fs(^)p Fw(.)900 1451 y(There)k(is)i(one)e(important)f(dif)n(ference)g
(between)h Fs(findall/3)e Fw(and)i Fs(bagof/3)m Fw(,)806
1550 y(namely)51 b(that)i Fs(bagof/3)d Fw(f)o(ails)k(if)e(the)h(goal)f
(that)h(is)h(speci\002ed)e(in)h(its)g(second)806 1650
y(ar)o(gument)43 b(is)j(not)f(satis\002ed)h(\(remember)m(,)e(that)h
Fs(findall/3)d Fw(returns)j(the)g(empty)806 1749 y(list)e(in)f(such)f
(cases\).)49 b(So)42 b(the)g(query)f Fs(bagof\(X,descend\()o(ma)o(ry,)o
(X\))o(,Z\))36 b Fw(yields)806 1849 y Fs(no)o Fw(.)900
1950 y(One)41 b(\002nal)g(remark.)j(Consider)d(again)f(the)g(query)971
2120 y Fs(?-)h(bagof\(Child,des)o(cen)o(d\()o(Mo)o(the)o(r,)o(Chi)o(ld)
o(\),)o(Lis)o(t\))o(.)806 2289 y Fw(As)55 b(we)h(sa)o(w)f(abo)o(v)o(e,)
i(this)f(has)f(four)f(solutions.)88 b(But,)59 b(once)54
b(again,)k(Prolog)806 2389 y(generates)50 b(them)h(one)g(by)g(one.)76
b(W)-7 b(ouldn')o(t)50 b(it)i(be)g(nice)f(if)g(we)h(could)f(collect)806
2489 y(them)40 b(all)i(into)e(one)h(list?)900 2589 y(And)f(we)i(can.)j
(The)c(simplest)g(w)o(ay)g(is)h(to)f(use)g Fs(findall/3)m
Fw(.)46 b(The)40 b(query)971 2759 y Fs(?-)h(findall\(List,)1427
2859 y(bagof\(Child,desce)o(nd\()o(Mo)o(the)o(r,)o(Ch)o(ild)o(\),)o
(Lis)o(t\))o(,)1427 2958 y(Z\).)806 3128 y Fw(collects)g(all)g(of)g
Fs(bagof/3)m Fw(')-5 b(s)42 b(responses)e(into)h(one)f(list:)971
3298 y Fs(List)g(=)h(_8293)971 3397 y(Child)e(=)i(_8297)971
3497 y(Mother)e(=)i(_8301)971 3596 y(Z)g(=)g([[laura,rose],[c)o(aro)o
(li)o(ne,)o(la)o(ur)o(a,r)o(os)o(e],)o([r)o(ose)o(],)1718
3696 y([charlotte,carol)o(ine)o(,l)o(aur)o(a,)o(ro)o(se])o(])806
3866 y Fw(Another)e(w)o(ay)i(to)g(do)g(it)g(is)h(with)f
Fs(bagof/3)m Fw(:)971 4035 y Fs(?-)g(bagof\(List,)1095
4135 y(Child^Mother^bago)o(f\(C)o(hi)o(ld)o(,de)o(sc)o(end)o(\(M)o(oth)
o(er)o(,C)o(hil)o(d\))o(,Li)o(st)o(\),)1095 4235 y(Z\).)971
4434 y(List)f(=)h(_2648)971 4534 y(Child)e(=)i(_2652)971
4633 y(Mother)e(=)i(_2655)971 4733 y(Z)g(=)g([[laura,rose],[c)o(aro)o
(li)o(ne,)o(la)o(ur)o(a,r)o(os)o(e],)o([r)o(ose)o(],)1718
4832 y([charlotte,carol)o(ine)o(,l)o(aur)o(a,)o(ro)o(se])o(])806
5002 y Fw(This)48 b(may)h(not)f(be)g(the)h(sort)g(of)f(thing)g(you)g
(need)g(to)h(do)f(v)o(ery)g(often,)h(b)n(ut)g(it)806
5102 y(does)40 b(sho)n(w)h(the)g(\003e)o(xibility)f(and)g(po)n(wer)g
(of)n(fered)f(by)i(these)g(predicates.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 213 225
TeXDict begin 213 224 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(11:)46 b(Database)40 b(Manipulation)f(and)i
(Collecting)f(Solutions)319 b(213)p 0 TeXcolorgray 357
1051 a Fv(The)42 b Fs(setof/3)c Fv(pr)o(edicate)357 1173
y Fw(The)57 b Fs(setof/3)f Fw(predicate)h(is)i(basically)f(the)g(same)g
(as)h Fs(bagof/3)m Fw(,)j(b)n(ut)d(with)357 1273 y(one)48
b(useful)g(dif)n(ference:)59 b(the)48 b(lists)i(it)f(contains)f(are)h
Ft(or)m(der)m(ed)h Fw(and)e(contain)f Ft(no)357 1372
y(r)m(edundancies)38 b Fw(\(that)j(is,)h(no)e(list)i(contains)f
(repeated)e(items\).)451 1472 y(F)o(or)i(e)o(xample,)e(suppose)h(we)h
(ha)n(v)o(e)g(the)g(follo)n(wing)e(database)522 1632
y Fs(age\(harry,13\).)522 1731 y(age\(draco,14\).)522
1831 y(age\(ron,13\).)522 1930 y(age\(hermione,13\))o(.)522
2030 y(age\(dumbledore,6)o(0\).)522 2130 y(age\(hagrid,30\).)451
2290 y Fw(No)n(w)47 b(suppose)g(we)g(w)o(ant)h(a)f(list)i(of)d(e)n(v)o
(eryone)f(whose)i(age)g(is)h(recorded)e(in)357 2389 y(the)41
b(database.)k(W)-7 b(e)42 b(can)f(do)f(this)i(with)f(the)g(query:)522
2549 y Fs(?-)g(findall\(X,age\(X,)o(Y\))o(,O)o(ut\))o(.)522
2748 y(X)g(=)g(_8443)522 2848 y(Y)g(=)g(_8448)522 2947
y(Out)f(=)h([harry,draco,ron,)o(her)o(mi)o(on)o(e,d)o(um)o(ble)o(do)o
(re,)o(ha)o(gr)o(id])451 3107 y Fw(But)f(maybe)e(we)h(w)o(ould)f(lik)o
(e)i(the)f(list)h(to)f(be)g(ordered.)k(W)-7 b(e)40 b(can)f(achie)n(v)o
(e)f(this)357 3207 y(with)j(the)g(follo)n(wing)e(query:)522
3367 y Fs(?-)i(setof\(X,Y^age\(X,)o(Y\))o(,O)o(ut\))o(.)357
3526 y Fw(\(Note)57 b(that,)k(just)d(as)g(with)g Fs(bagof/3)m
Fw(,)k(we)c(ha)n(v)o(e)f(to)g(tell)h Fs(setof/3)d Fw(not)j(to)357
3626 y(generate)44 b(separate)i(lists)h(for)e(each)h(v)n(alue)f(of)g
Fs(Y)p Fw(,)i(and)f(again)e(we)j(do)e(this)i(with)357
3726 y(the)41 b Fs(^)g Fw(symbol.\))j(This)d(query)f(yields:)522
3886 y Fs(X)h(=)g(_8711)522 3985 y(Y)g(=)g(_8715)522
4085 y(Out)f(=)h([draco,dumbledore)o(,ha)o(gr)o(id)o(,ha)o(rr)o(y,h)o
(er)o(mio)o(ne)o(,r)o(on])357 4245 y Fw(Note)g(that)g(the)g(list)h(is)g
(alphabetically)d(ordered.)451 4344 y(No)n(w)56 b(suppose)e(we)i(are)f
(interested)g(in)h(collecting)e(together)g(all)i(the)g(ages)357
4444 y(which)45 b(are)h(recorded)e(in)i(the)g(database.)60
b(Of)46 b(course,)g(we)h(could)e(do)g(this)i(with)357
4543 y(the)41 b(follo)n(wing)e(query:)522 4703 y Fs(?-)i
(findall\(Y,age\(X,)o(Y\))o(,O)o(ut\))o(.)522 4902 y(Y)g(=)g(_8847)522
5002 y(X)g(=)g(_8851)522 5102 y(Out)f(=)h([13,14,13,13,60,3)o(0])p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 214 226
TeXDict begin 214 225 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(214)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(But)33 b(this)f(output)f(is)i(rather)e(messy)
-5 b(.)42 b(It)33 b(is)g(unordered)c(and)i(contains)h(repetitions.)806
1151 y(By)41 b(using)f Fs(setof/3)f Fw(we)i(get)g(the)g(same)g
(information)e(in)i(a)g(neater)g(form:)971 1314 y Fs(?-)g
(setof\(Y,X^age\(X)o(,Y\))o(,O)o(ut)o(\).)971 1513 y(Y)g(=)g(_8981)971
1613 y(X)g(=)g(_8985)971 1713 y(Out)f(=)h([13,14,30,60])900
1876 y Fw(Between)35 b(them,)g(these)g(three)f(predicates)g(of)n(fer)f
(us)i(a)g(great)f(deal)h(of)f(\003e)o(xibility)806 1976
y(when)43 b(it)h(comes)f(to)h(collecting)f(solutions.)53
b(F)o(or)44 b(man)o(y)e(purposes,)h(all)h(we)g(need)806
2076 y(is)k Fs(findall/3)l Fw(,)i(b)n(ut)d(if)h(we)g(need)f(more,)h
Fs(bagof/3)d Fw(and)i Fs(setof/3)e Fw(are)j(there)806
2175 y(w)o(aiting)i(to)i(help)e(us)i(out.)75 b(But)52
b(bear)f(in)g(mind)f(that)h(there)g(is)h(an)f(important)806
2275 y(dif)n(ference)62 b(between)h Fs(findall/3)f Fw(on)i(the)g(one)g
(hand)f(and)h Fs(bagof/3)e Fw(and)806 2374 y Fs(setof/3)39
b Fw(on)i(the)h(other:)47 b Fs(findall/3)38 b Fw(will)43
b(return)d(an)i(empty)e(list)j(if)f(the)g(goal)806 2474
y(has)k(no)f(solutions,)h(whereas)g Fs(bagof/3)d Fw(and)j
Fs(setof/3)d Fw(w)o(ould)i(f)o(ail)h(in)g(such)g(a)806
2574 y(situation.)806 2764 y Fk(3)99 b(Exer)n(cises)806
2927 y Fv(Exer)o(cise)37 b(11.1.)93 b Fw(Suppose)36 b(we)i(start)g
(with)f(an)h(empty)e(database.)44 b(W)-7 b(e)38 b(then)f(gi)n(v)o(e)p
0 TeXcolorgray 357 2834 118 4 v 357 2952 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 2952 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -3020 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 2952 4 118
v 357 2955 118 4 v 0 TeXcolorgray 806 3026 a Fw(the)j(command:)971
3190 y Fs(assert\(q\(a,b\)\),)35 b(assertz\(q\(1,2\)\),)g
(asserta\(q\(foo,bl)o(ug\))o(\).)806 3354 y Fw(What)41
b(does)g(the)f(database)h(no)n(w)f(contain?)900 3453
y(W)-7 b(e)42 b(then)f(gi)n(v)o(e)f(the)h(command:)971
3617 y Fs(retract\(q\(1,2\)\),)35 b(assertz\()j(\(p\(X\))h(:-)83
b(h\(X\)\))39 b(\).)806 3781 y Fw(What)i(does)g(the)f(database)h(no)n
(w)f(contain?)900 3880 y(W)-7 b(e)42 b(then)f(gi)n(v)o(e)f(the)h
(command:)971 4044 y Fs(retractall\(q\(_,_)o(\)\))o(.)806
4208 y Fw(What)g(does)g(the)f(database)h(no)n(w)f(contain?)806
4340 y Fv(Exer)o(cise)g(11.2.)95 b Fw(Suppose)39 b(we)j(ha)n(v)o(e)e
(the)h(follo)n(wing)e(database:)p 0 TeXcolorgray 357
4247 V 357 4365 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 361 4365 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray -2494 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 471 4365 4 118 v 357 4368 118 4 v 0 TeXcolorgray
971 4504 a Fs(q\(blob,blug\).)971 4604 y(q\(blob,blag\).)971
4703 y(q\(blob,blig\).)971 4803 y(q\(blaf,blag\).)971
4902 y(q\(dang,dong\).)971 5002 y(q\(dang,blug\).)971
5102 y(q\(flab,blob\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 215 227
TeXDict begin 215 226 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(11:)46 b(Database)40 b(Manipulation)f(and)i
(Collecting)f(Solutions)319 b(215)p 0 TeXcolorgray 451
1051 a(What)42 b(is)f(Prolog')-5 b(s)41 b(response)f(to)h(the)g
(queries:)522 1228 y Fs(findall\(X,q\(blob)o(,X\))o(,L)o(ist)o(\).)522
1328 y(findall\(X,q\(X,bl)o(ug\))o(,L)o(ist)o(\).)522
1427 y(findall\(X,q\(X,Y\))o(,Li)o(st)o(\).)522 1527
y(bagof\(X,q\(X,Y\),L)o(ist)o(\).)522 1626 y(setof\(X,Y^q\(X,Y\))o(,Li)
o(st)o(\).)357 1837 y Fv(Exer)o(cise)h(11.3.)100 b Fw(Write)44
b(a)f(predicate)f Fs(sigma/2)f Fw(that)i(tak)o(es)g(an)g(inte)o(ger)e
Fj(n)24 b(>)g Ff(0)p 0 TeXcolorgray 3286 1744 118 4 v
3286 1862 4 118 v 0 0 0 0.05 TeXcolorcmyk 0 0 0 0.05
TeXcolorcmyk 3290 1862 112 118 v 0 0 0 0.05 TeXcolorcmyk
0 TeXcolorgray 358 w Fi(E)p 0 0 0 0.05 TeXcolorcmyk 0
TeXcolorgray 3401 1862 4 118 v 3286 1865 118 4 v 0 TeXcolorgray
357 1936 a Fw(and)40 b(calculates)h(the)g(sum)g(of)f(all)i(inte)o(gers)
e(from)g(1)h(to)g Fj(n)p Fw(.)46 b(F)o(or)41 b(e)o(xample:)522
2134 y Fs(?-)g(sigma\(3,X\).)522 2233 y(X)g(=)g(6)522
2333 y(yes)522 2433 y(?-)g(sigma\(5,X\).)522 2532 y(X)g(=)g(15)522
2632 y(yes)451 2829 y Fw(Write)50 b(the)f(predicate)e(so)j(that)f
(results)g(are)g(stored)f(in)h(the)g(database)g(\(there)357
2929 y(should)g(ne)n(v)o(er)f(be)i(more)g(than)f(one)h(entry)f(in)h
(the)g(database)g(for)f(each)h(v)n(alue\))357 3028 y(and)c(are)g
(reused)g(whene)n(v)o(er)e(possible.)63 b(F)o(or)46 b(e)o(xample,)g
(suppose)g(we)h(mak)o(e)f(the)357 3128 y(follo)n(wing)39
b(query:)522 3305 y Fs(?-)i(sigma\(2,X\).)522 3405 y(X)g(=)g(3)522
3504 y(yes)522 3604 y(?-)g(listing.)522 3704 y(sigmares\(2,3\).)357
3881 y Fw(Then,)f(if)h(we)g(go)g(on)f(to)h(ask)522 4058
y Fs(?-)g(sigma\(3,X\).)357 4235 y Fw(Prolog)d(should)h(not)g
(calculate)g(e)n(v)o(erything)e(ne)n(w)-5 b(,)39 b(b)n(ut)g(should)g
(get)g(the)h(result)f(for)357 4334 y Fs(sigma\(2,3\))i
Fw(from)j(the)h(database)g(and)f(only)g(add)h(3)g(to)g(that.)58
b(It)45 b(should)f(then)357 4434 y(answer:)522 4611 y
Fs(X)d(=)g(6)522 4711 y(yes)522 4810 y(?-)g(listing.)522
4910 y(sigmares\(2,3\).)522 5010 y(sigmares\(3,6\).)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 216 228
TeXDict begin 216 227 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(216)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(4)99 b(Practical)41 b(Session)806
1180 y Fw(T)m(ry)f(the)h(follo)n(wing)e(tw)o(o)i(programming)d(e)o(x)o
(ercises:)p 0 TeXcolorgray 909 1363 a(1.)p 0 TeXcolorgray
41 w(Sets)54 b(can)f(be)g(thought)f(of)g(as)i(lists)h(that)e(don')o(t)e
(contain)h(an)o(y)h(repeated)1013 1463 y(elements.)63
b(F)o(or)46 b(e)o(xample,)g Fs([a,4,6])f Fw(is)i(a)g(set,)i(b)n(ut)e
Fs([a,4,6,a])c Fw(is)48 b(not)1013 1562 y(\(as)k(it)g(contains)f(tw)o
(o)g(occurrences)f(of)h Fs(a\))o Fw(.)77 b(Write)52 b(a)g(Prolog)f
(program)1013 1662 y Fs(subset/2)j Fw(that)i(is)h(satis\002ed)g(when)f
(the)g(\002rst)h(ar)o(gument)d(is)j(a)f(subset)1013 1762
y(of)47 b(the)g(second)f(ar)o(gument)f(\(that)i(is,)i(when)e(e)n(v)o
(ery)e(element)i(of)g(the)g(\002rst)1013 1861 y(ar)o(gument)39
b(is)j(a)f(member)e(of)i(the)g(second)f(ar)o(gument\).)j(F)o(or)e(e)o
(xample:)1178 2027 y Fs(?-)g(subset\([a,b],[a,)o(b,c)o(]\))1178
2127 y(yes)1178 2326 y(?-)g(subset\([c,b],[a,)o(b,c)o(]\))1178
2426 y(yes)1178 2625 y(?-)g(subset\([],[a,b,c)o(]\))1178
2725 y(yes)1013 2891 y Fw(Y)-9 b(our)49 b(program)f(should)h(be)h
(capable)f(of)g(generating)f(all)j(subsets)f(of)g(an)1013
2990 y(input)40 b(set)i(by)f(backtracking.)i(F)o(or)d(e)o(xample,)f(if)
j(you)e(gi)n(v)o(e)g(it)i(as)f(input)1178 3156 y Fs(?-)g
(subset\(X,[a,b,c])o(\))1013 3322 y Fw(it)h(should)e(successi)n(v)o
(ely)g(generate)g(all)h(eight)g(subsets)g(of)g Fs([a,b,c])m
Fw(.)p 0 TeXcolorgray 909 3488 a(2.)p 0 TeXcolorgray
41 w(Using)c(the)g Fs(subset)e Fw(predicate)h(you)g(ha)n(v)o(e)g(just)h
(written,)h(and)e Fs(findall/3)l Fw(,)1013 3588 y(write)h(a)g
(predicate)f Fs(powerset/2)d Fw(that)k(tak)o(es)g(a)g(set)g(as)h(its)g
(\002rst)f(ar)o(gument,)1013 3688 y(and)k(returns)g(the)g(po)n(werset)g
(of)g(this)h(set)h(as)f(the)f(second)g(ar)o(gument.)k(\(The)1013
3787 y(po)n(werset)40 b(of)h(a)g(set)h(is)g(the)f(set)h(of)e(all)i(its)
g(subsets.\))j(F)o(or)c(e)o(xample:)1178 3953 y Fs(?-)g
(powerset\([a,b,c])o(,P\))1013 4119 y Fw(should)f(return)1178
4285 y Fs(P)i(=)f([[],[a],[b],[c])o(,[a)o(,b)o(],[)o(a,)o(c])o(,[b)o
(,c)o(],[)o(a,)o(b,)o(c]])1013 4451 y Fw(It)h(doesn')o(t)e(matter)i(if)
g(the)g(sets)g(are)g(returned)e(in)i(some)g(other)f(order)-5
b(.)47 b(F)o(or)1013 4551 y(e)o(xample,)1178 4717 y Fs(P)42
b(=)f([[a],[b],[c],[a)o(,b,)o(c])o(,[])o(,[)o(a,)o(b],)o([a)o(,c])o(,[)
o(b,)o(c]])1013 4883 y Fw(is)h(\002ne)f(too.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 217 229
TeXDict begin 217 228 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2053 1855
a Fn(Chapter)42 b(12)1239 2603 y Fm(W)-15 b(orking)41
b(W)l(ith)g(Files)p 357 2785 2599 24 v 0 TeXcolorgray
0.95 TeXcolorgray 0 TeXcolorgray 714 4657 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0.2 true 0.0 0.0 270.0
170.0 .5 Frame  gsave 0.95  setgray fill grestore gsave 1.0 SLW 0 
setgray 0 setlinecap stroke  grestore end
 
@endspecial 797 3495 a Fl(This)48 b(chapter)h(is)g
(concerned)g(with)g(va)m(rious)f(asp)s(ect)i(of)797 3611
y(\014le)d(handling)g(and)h(mo)s(dula)m(rit)m(y)-8 b(.)70
b(W)m(e)47 b(will)h(lea)m(rn)g(three)797 3728 y(things:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 887 3877
a(1.)p 0 TeXcolorgray 41 w(Ho)m(w)29 b(p)m(redicate)g(de\014nitions)g
(can)f(b)s(e)g(sp)m(read)h(across)1004 3993 y(di\013erent)43
b(\014les.)p 0 TeXcolorgray 887 4176 a(2.)p 0 TeXcolorgray
41 w(Ho)m(w)f(to)g(write)g(mo)s(dula)m(r)g(soft)m(w)m(a)m(re)h
(systems.)p 0 TeXcolorgray 887 4359 a(3.)p 0 TeXcolorgray
41 w(Ho)m(w)38 b(to)g(write)g(results)h(to)e(\014les)h(and)g(ho)m(w)f
(to)h(read)1004 4475 y(input)k(from)f(\014les.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 218 230
TeXDict begin 218 229 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(218)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fk(1)99 b(Splitting)42 b(Pr)n(ograms)f(o)o(v)
o(er)h(Files)806 1181 y Fw(By)h(this)g(stage)g(you)f(ha)n(v)o(e)h
(written)f(lots)i(of)e(programs)f(that)i(use)g(the)g(predicates)806
1281 y Fs(append/3)35 b Fw(and)j Fs(member/2)m Fw(.)45
b(What)39 b(you)e(probably)f(did)i(each)g(time)g(you)g(needed)806
1381 y(one)44 b(of)h(them)g(w)o(as)i(to)e(go)g(back)g(to)g(the)g
(de\002nition)g(and)f(cop)o(y)h(it)h(o)o(v)o(er)e(to)h(the)806
1480 y(\002le)g(where)f(you)f(w)o(anted)h(to)h(use)g(it.)57
b(And)44 b(maybe,)g(after)g(ha)n(ving)g(done)f(that)i(a)806
1580 y(fe)n(w)52 b(times,)k(you)c(started)h(thinking)e(that)i(it)h(w)o
(as)g(quite)e(anno)o(ying)f(ha)n(ving)g(to)806 1680 y(cop)o(y)37
b(the)h(same)g(predicate)f(de\002nitions)g(o)o(v)o(er)g(and)h(o)o(v)o
(er)e(again)i(\227)g(ho)n(w)g(pleasant)806 1779 y(it)45
b(w)o(ould)f(be)g(if)h(you)e(could)h(de\002ne)g(them)g(some)n(where)f
(once)h(and)g(for)g(all)h(and)806 1879 y(then)e(simply)g(access)i(them)
e(whene)n(v)o(er)f(you)h(needed)f(them.)54 b(W)-7 b(ell,)45
b(that)f(sounds)806 1978 y(lik)o(e)d(a)i(pretty)d(sensible)i(thing)f
(to)h(ask)g(for)f(and,)g(of)g(course,)g(Prolog)g(of)n(fers)f(you)806
2078 y(w)o(ays)h(of)f(doing)g(it.)806 2235 y Fv(Reading)g(in)i(pr)o
(ograms)806 2358 y Fw(In)h(f)o(act,)i(you)e(already)g(kno)n(w)g(a)h(w)o
(ay)g(of)g(telling)g(Prolog)f(to)h(read)g(in)g(predicate)806
2458 y(de\002nitions)c(that)h(are)g(stored)f(in)h(a)g(\002le,)h(namely)
e(the)971 2626 y Fs([FileName1])806 2795 y Fw(command.)63
b(Y)-9 b(ou)47 b(ha)n(v)o(e)h(been)f(using)g(queries)g(of)g(this)h
(form)f(all)h(along)f(to)h(tell)806 2894 y(Prolog)37
b(to)i(consult)g(\002les.)46 b(But)39 b(there)g(are)f(tw)o(o)i(more)e
(useful)g(things)h(you)f(should)806 2994 y(kno)n(w)h(about)h(it.)47
b(First,)41 b(you)f(can)h(consult)f(man)o(y)g(\002les)i(at)g(once)e(by)
g(saying)971 3162 y Fs([FileName1,FileN)o(am)o(e2,)o(..)o(.,F)o(il)o
(eN)o(ame)o(N])806 3331 y Fw(instead.)66 b(Second,)48
b(and)f(more)h(importantly)-5 b(,)47 b(\002le)h(consultation)e(does)i
Ft(not)h Fw(ha)n(v)o(e)806 3430 y(to)41 b(be)f(performed)f(interacti)n
(v)o(ely)-5 b(.)43 b(If)e(you)f(put)971 3599 y Fs(:-)h([FileName1,File)
o(Nam)o(e2)o(,.)o(..,)o(Fi)o(leN)o(am)o(eN)o(].)806 3767
y Fw(at)f(the)g(top)g(of)f(your)g(program)f(\002le)j(\(say)e
Fs(main.pl)m Fw(\))i(you)e(are)h(telling)f(Prolog)g(to)806
3867 y(\002rst)k(consult)g(the)g(listed)g(\002les)h(before)e(going)g
(on)g(to)i(read)e(in)h(the)g(rest)h(of)f(your)806 3966
y(program.)900 4067 y(This)61 b(feature)f(gi)n(v)o(es)g(us)h(a)g
(simple)g(w)o(ay)g(of)f(re-using)g(de\002nitions.)104
b(F)o(or)806 4166 y(e)o(xample,)36 b(suppose)g(that)i(you)e(k)o(eep)h
(all)h(the)f(predicate)f(de\002nitions)g(for)h(basic)g(list)806
4266 y(processing)k(\(such)h(as)i Fs(append/3)m Fw(,)g
Fs(member/2)l Fw(,)g Fs(reverse/2)l Fw(,)g(and)e(so)i(on\))e(in)h(a)806
4366 y(\002le)e(called)g Fs(listPredicates.p)o(l)-6 b
Fw(.)46 b(If)41 b(you)f(w)o(ant)h(to)g(use)g(them,)g(simply)f(put)971
4534 y Fs(:-)h([listPredicates)o(].)806 4702 y Fw(at)48
b(the)g(top)f(of)h(the)f(\002le)i(containing)d(the)i(program)d(that)j
(needs)g(them.)66 b(Prolog)806 4802 y(will)56 b(consult)g
Fs(listPredicates)51 b Fw(when)k(reading)g(in)h(that)g(\002le,)k(and)c
(all)g(the)806 4902 y(predicate)39 b(de\002nitions)h(in)i
Fs(listPredicates)35 b Fw(become)40 b(a)n(v)n(ailable.)900
5002 y(There')-5 b(s)51 b(one)g(practical)g(point)g(you)g(should)g(be)g
(a)o(w)o(are)h(of.)77 b(When)52 b(Prolog)806 5102 y(loads)e(\002les,)j
(it)f(doesn')o(t)d(normally)f(check)i(whether)g(the)g(\002les)h(really)
g(need)e(to)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 219 231
TeXDict begin 219 230 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(12:)46 b(W)-7 b(orking)40 b(W)m(ith)h(Files)
1322 b(219)p 0 TeXcolorgray 357 1051 a(be)48 b(consulted.)68
b(If)49 b(the)g(predicate)f(de\002nitions)g(pro)o(vided)e(by)i(one)g
(of)h(the)g(\002les)357 1151 y(are)g(already)f(in)h(the)g(database)g
(because)f(that)i(\002le)f(w)o(as)h(consulted)e(pre)n(viously)-5
b(,)357 1250 y(Prolog)43 b(will)i(still)h(consult)e(it)h(again,)f
(although)e(it)j(doesn')o(t)e(need)h(to.)56 b(This)45
b(can)357 1350 y(be)c(anno)o(ying)d(if)j(you)g(are)f(consulting)g(v)o
(ery)g(lar)o(ge)g(\002les.)451 1449 y(The)e(b)n(uilt-in)g(predicate)f
Fs(ensure_loaded/1)c Fw(beha)n(v)o(es)38 b(more)f(intelligently)h(in)
357 1549 y(this)f(respect.)44 b(It)37 b(w)o(orks)f(as)i(follo)n(ws.)44
b(On)36 b(encountering)e(the)j(follo)n(wing)e(directi)n(v)o(e)522
1701 y Fs(:-)41 b(ensure_loaded\([l)o(is)o(tP)o(red)o(ic)o(ate)o(s])o
(\).)357 1853 y Fw(Prolog)51 b(checks)h(whether)f(the)i(\002le)g
Fs(listPredicates.)o(pl)47 b Fw(has)52 b(already)f(been)357
1953 y(loaded)40 b(and)g(only)g(loads)h(it)g(again)f(if)i(it)f(has)g
(changed)f(since)h(the)g(last)h(loading.)357 2107 y Fv(Modules)357
2229 y Fw(No)n(w)54 b(imagine)g(that)g(you)g(are)g(writing)g(a)h
(program)d(that)i(manages)g(a)h(mo)o(vie)357 2328 y(database.)68
b(Y)-9 b(ou)48 b(ha)n(v)o(e)g(designed)f(a)i(predicate)e
Fs(printActors)e Fw(which)j(displays)357 2428 y(all)54
b(actors)g(starring)f(in)h(a)h(particular)e(\002lm,)k(and)c(a)i
(predicate)e Fs(printMovies)357 2528 y Fw(which)58 b(displays)h(all)h
(mo)o(vies)e(directed)g(by)h(a)g(particular)f(\002lmmak)o(er)-5
b(.)100 b(Both)357 2627 y(de\002nitions)55 b(are)i(stored)f(in)h(dif)n
(ferent)e(\002les,)61 b(namely)56 b Fs(printActors.pl)51
b Fw(and)357 2727 y Fs(printMovies.pl)-6 b Fw(,)47 b(and)e(both)g(use)h
(an)f(auxiliary)f(predicate)h Fs(displayList/1)-6 b Fw(.)357
2826 y(Here')h(s)41 b(the)g(\002rst)h(\002le:)522 2991
y Fs(\045)f(This)f(is)h(the)f(file:)f(printActors.pl)522
3191 y(printActors\(Film)o(\):-)647 3290 y(setof\(Actor,sta)o(rri)o(ng)
o(\(A)o(cto)o(r,)o(Fil)o(m\))o(,Li)o(st)o(\),)647 3390
y(displayList\(Lis)o(t\).)522 3589 y(displayList\([]\):)o(-)d(nl.)522
3689 y(displayList\([X|L)o(]\):)o(-)647 3788 y(write\(X\),)h(tab\(1\),)
647 3888 y(displayList\(L\).)357 4053 y Fw(And)j(here')-5
b(s)41 b(the)g(second:)522 4205 y Fs(\045)g(This)f(is)h(the)f(file:)f
(printMovies.pl)522 4404 y(printMovies\(Dire)o(cto)o(r\))o(:-)647
4504 y(setof\(Film,dire)o(cte)o(d\()o(Di)o(rec)o(to)o(r,F)o(il)o(m\),)o
(Li)o(st)o(\),)647 4604 y(displayList\(Lis)o(t\).)522
4803 y(displayList\([]\):)o(-)d(nl.)522 4902 y(displayList\([X|L)o
(]\):)o(-)647 5002 y(write\(X\),)h(nl,)647 5102 y(displayList\(L\).)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 220 232
TeXDict begin 220 231 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(220)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(Note)50 b(that)g Fs(displayList/1)45
b Fw(has)50 b(dif)n(ferent)f(de\002nitions)g(in)h(the)g(tw)o(o)g
(\002les:)806 1151 y(the)40 b(actors)h(are)f(printed)g(in)g(a)h(ro)n(w)
g(\(using)e Fs(tab/1)n Fw(\),)i(and)f(the)h(\002lms)g(are)g(printed)806
1250 y(in)k(a)h(column)e(\(using)h Fs(nl/0)n Fw(\).)59
b(W)m(ill)47 b(this)f(lead)f(to)h(con\003icts)f(in)h(Prolog?)58
b(Let')-5 b(s)806 1350 y(see.)46 b(W)-7 b(e')o(ll)42
b(load)e(both)g(programs)g(by)g(placing)g(the)h(statements)971
1540 y Fs(\045)g(This)f(is)h(the)f(file:)f(main.pl)971
1739 y(:-)i([printActors].)971 1839 y(:-)g([printMovies].)806
2028 y Fw(at)56 b(the)g(top)g(of)f(the)h(main)g(\002le.)91
b(Consulting)55 b(the)h(main)g(\002le)g(will)h(e)n(v)n(ok)o(e)e(a)806
2128 y(message)40 b(that)h(looks)g(something)e(lik)o(e)i(the)g(follo)n
(wing:)971 2318 y Fs(?-)g([main].)971 2418 y({consulting)c(main.pl...})
971 2517 y({consulting)g(printActors.pl..)o(.})971 2617
y({printActors.pl)e(consulted,)j(10)i(msec)g(296)g(bytes})971
2716 y({consulting)d(printMovies.pl..)o(.})971 2816 y(The)j(procedure)e
(displayList/1)e(is)41 b(being)e(redefined.)1137 2916
y(Old)h(file:)g(printActors.pl)1137 3015 y(New)g(file:)g
(printMovies.pl)971 3115 y(Do)h(you)f(really)f(want)h(to)g(redefine)f
(it?)h(\(y,)g(n,)h(p,)f(or)h(?\))900 3305 y Fw(What)67
b(has)f(happened?)120 b(W)-7 b(ell,)74 b(as)67 b(both)f(\002les)h
Fs(printActors.pl)61 b Fw(and)806 3404 y Fs(printMovies.pl)29
b Fw(de\002ne)34 b(a)h(predicate)f(called)g Fs(displayList/1)-5
b Fw(,)36 b(Prolog)e(needs)806 3504 y(to)66 b(choose)g(one)g(of)g(the)h
(tw)o(o)g(de\002nitions)f(\(it)h(can')o(t)e(ha)n(v)o(e)h(tw)o(o)h(dif)n
(ferent)806 3604 y(de\002nitions)40 b(for)g(one)g(predicate)g(in)h(its)
h(kno)n(wledge)d(base\).)900 3705 y(What)51 b(to)g(do?)76
b(W)-7 b(ell,)54 b(perhaps)c(in)h(some)g(of)g(these)g(situations)g(you)
f(really)806 3805 y(do)44 b(w)o(ant)i(to)f(rede\002ne)f(a)i(predicate.)
57 b(But)46 b(here)e(you)g(don')o(t)g(\227)i(you)e(w)o(ant)h(tw)o(o)806
3904 y(dif)n(ferent)37 b(de\002nitions)i(because)f(you)g(w)o(ant)i(mo)o
(vies)e(and)h(actors)g(to)h(be)f(displayed)806 4004 y(dif)n(ferently)-5
b(.)44 b(One)e(w)o(ay)f(of)h(dealing)e(with)i(this)g(is)g(to)g(gi)n(v)o
(e)f(a)h(dif)n(ferent)d(name)i(to)806 4104 y(one)e(of)g(the)h(tw)o(o)f
(predicates.)45 b(But)40 b(let')-5 b(s)41 b(f)o(ace)e(it,)i(this)f(is)g
(clumsy)-5 b(.)45 b(Y)-9 b(ou)39 b(w)o(ant)g(to)806 4203
y(think)e(of)h(each)g(\002le)h(as)g(a)g(conceptually)d(self-contained)g
(entity;)j(you)f(don')o(t)e(w)o(ant)806 4303 y(to)45
b(w)o(aste)h(time)g(and)e(ener)o(gy)g(thinking)f(about)i(ho)n(w)f(you)h
(named)f(predicates)g(in)806 4403 y(some)53 b(other)f(\002le.)83
b(And)53 b(the)g(most)g(natural)f(w)o(ay)i(of)f(achie)n(ving)e(the)i
(desired)806 4502 y(conceptual)39 b(independence)f(is)k(to)f(use)g
(Prolog')-5 b(s)40 b(module)g(system.)900 4604 y(Modules)45
b(essentially)i(allo)n(w)f(you)g(to)g(hide)g(predicate)f
(de\002nitions.)61 b(Y)-9 b(ou)46 b(are)806 4703 y(allo)n(wed)k(to)i
(decide)f(which)g(predicates)f(should)h(be)g(public)g(\(that)g(is,)k
(callable)806 4803 y(from)f(parts)h(of)g(the)h(program)d(that)i(are)g
(stored)g(in)h(other)e(\002les\))i(and)f(which)806 4902
y(predicates)60 b(should)h(be)g(pri)n(v)n(ate)g(\(that)g(is,)68
b(callable)61 b(only)g(from)f(within)h(the)806 5002 y(module)53
b(itself\).)88 b(Thus)55 b(you)f(will)i(not)f(be)g(able)g(to)g(call)g
(pri)n(v)n(ate)f(predicates)806 5102 y(from)47 b(outside)h(the)h
(module)e(in)i(which)f(the)o(y)g(are)h(de\002ned,)g(b)n(ut)g(there)f
(will)i(be)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 221 233
TeXDict begin 221 232 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(12:)46 b(W)-7 b(orking)40 b(W)m(ith)h(Files)
1322 b(221)p 0 TeXcolorgray 357 1051 a(no)42 b(con\003icts)g(if)h(tw)o
(o)f(modules)g(internally)f(de\002ne)h(the)g(same)h(predicate.)48
b(In)42 b(our)357 1151 y(e)o(xample,)52 b Fs(displayList/1)46
b Fw(is)52 b(a)f(good)f(candidate)g(for)g(becoming)f(a)j(pri)n(v)n(ate)
357 1250 y(predicate;)47 b(it)g(plays)f(a)g(simple)g(auxiliary)f(role)h
(in)g(both)f Fs(printActors/1)c Fw(and)357 1350 y Fs(printMovies/1,)f
Fw(and)45 b(the)h(details)g(of)f(the)h(role)f(it)h(plays)g(for)f(one)g
(predicate)357 1449 y(are)c(not)f(rele)n(v)n(ant)g(to)h(the)g(other)-5
b(.)451 1549 y(Y)c(ou)40 b(can)g(turn)f(a)i(\002le)g(into)f(a)g(module)
f(by)h(putting)f(a)i(module)e(declaration)f(at)357 1649
y(the)j(top.)k(Module)40 b(declarations)f(are)i(of)g(the)g(form)522
1821 y Fs(:-)g(module\(ModuleNam)o(e,)937 1921 y(List_of_Predicate)o
(s_)o(to)o(_be)o(_E)o(xpo)o(rt)o(ed)o(\).)357 2093 y
Fw(Such)f(declarations)f(specify)g(the)i(name)e(of)i(the)f(module)f
(and)h(the)g(list)h(of)g(public)357 2193 y(predicates,)h(that)g(is,)i
(the)f(list)h(of)e(predicates)g(that)g(you)g(w)o(ant)h(to)g(e)o(xport.)
49 b(These)357 2293 y(will)41 b(be)g(the)g(only)f(predicates)g(that)h
(are)g(accessible)g(from)f(outside)h(the)g(module.)451
2392 y(Let')-5 b(s)58 b(modularise)d(our)h(mo)o(vie)g(database)g
(programs.)92 b(W)-7 b(e)58 b(only)e(need)h(to)357 2492
y(include)40 b(the)h(follo)n(wing)e(line)i(at)g(the)g(top)g(of)g(the)g
(\002rst)g(\002le:)522 2664 y Fs(\045)g(This)f(is)h(the)f(file:)f
(printActors.pl)522 2864 y(:-)i(module\(printActo)o(rs)o(,[)o(pri)o(nt)
o(Act)o(or)o(s/)o(1]\))o(.)522 3063 y(printActors\(Film)o(\):-)647
3163 y(setof\(Actor,sta)o(rri)o(ng)o(\(A)o(cto)o(r,)o(Fil)o(m\))o(,Li)o
(st)o(\),)647 3262 y(displayList\(Lis)o(t\).)522 3461
y(displayList\([]\):)o(-)36 b(nl.)522 3561 y(displayList\([X|L)o(]\):)o
(-)647 3661 y(write\(X\),)h(tab\(1\),)647 3760 y(displayList\(L\).)357
3933 y Fw(Here)f(we)h(ha)n(v)o(e)f(introduced)e(a)j(module)e(called)i
Fs(printActors)-5 b Fw(,)38 b(with)f(one)f(public)357
4033 y(predicate)h Fs(printActors/1)-5 b Fw(.)45 b(The)38
b(predicate)f Fs(displayList/1)d Fw(is)40 b(only)d(kno)n(wn)357
4132 y(in)42 b(the)h(scope)f(of)g(the)h(module)e Fs(printActors)l
Fw(,)i(so)g(its)g(de\002nition)f(w)o(on')o(t)f(af)n(fect)357
4232 y(an)o(y)f(other)g(modules.)451 4331 y(Lik)o(e)n(wise)h(we)g(can)g
(turn)f(the)h(second)f(\002le)i(into)f(a)g(module:)522
4504 y Fs(\045)g(This)f(is)h(the)f(file:)f(printMovies.pl)522
4703 y(:-)i(module\(printMovi)o(es)o(,[)o(pri)o(nt)o(Mov)o(ie)o(s/)o
(1]\))o(.)522 4902 y(printMovies\(Dire)o(cto)o(r\))o(:-)647
5002 y(setof\(Film,dire)o(cte)o(d\()o(Di)o(rec)o(to)o(r,F)o(il)o(m\),)o
(Li)o(st)o(\),)647 5102 y(displayList\(Lis)o(t\).)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 222 234
TeXDict begin 222 233 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(222)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1151 a Fs(displayList\([]\):)o(-)35
b(nl.)971 1250 y(displayList\([X|L)o(]\))o(:-)1095 1350
y(write\(X\),)j(nl,)1095 1449 y(displayList\(L\).)806
1626 y Fw(Again,)g(the)h(de\002nition)f(of)h(the)g Fs(displayList/1)34
b Fw(is)40 b(only)e(kno)n(wn)g(in)h(the)g(scope)806 1726
y(of)h(the)g(module)f Fs(printMovies)l Fw(,)h(so)h(there)f(w)o(on')o(t)
g(be)g(an)o(y)f(clash)i(when)f(loading)806 1826 y(both)g(modules)g(at)h
(the)g(same)g(time.)900 1925 y(Modules)52 b(can)g(be)h(loaded)f(with)g
(the)h(b)n(uilt-in)f(predicates)g Fs(use_module/1)-5
b Fw(.)806 2025 y(This)34 b(will)h(import)f(all)h(predicates)e(that)i
(were)f(de\002ned)f(as)i(public)f(by)g(the)g(module.)806
2124 y(In)44 b(other)g(w)o(ords,)h(all)h(public)e(predicates)g(will)h
(be)g(accessible.)57 b(T)-7 b(o)45 b(do)g(this)g(we)806
2224 y(need)40 b(to)h(change)e(the)i(main)g(\002le)h(as)f(follo)n(ws:)
971 2401 y Fs(\045)g(This)f(is)h(the)f(file:)f(main.pl)971
2600 y(:-)i(use_module\(prin)o(tAc)o(to)o(rs)o(\).)971
2700 y(:-)g(use_module\(prin)o(tMo)o(vi)o(es)o(\).)900
2877 y Fw(If)h(you)g(don')o(t)f(w)o(ant)h(to)h(use)f(all)h(public)f
(predicates)g(of)g(a)h(module,)e(b)n(ut)h(only)806 2976
y(some)37 b(of)f(them,)i(you)e(can)h(use)h(the)f(tw)o(o-place)f(v)o
(ersion)g(of)h Fs(use_module)l Fw(,)h(which)806 3076
y(tak)o(es)j(a)h(list)h(of)e(predicates)g(that)h(you)e(actually)h(w)o
(ant)h(to)g(import)e(as)j(its)f(second)806 3176 y(ar)o(gument.)h(So,)e
(by)f(putting)971 3353 y Fs(\045)h(This)f(is)h(the)f(file:)f(main.pl)
971 3552 y(:-)i(use_module\(prin)o(tAc)o(to)o(rs)o(,[p)o(ri)o(ntA)o(ct)
o(or)o(s/1)o(]\))o(.)971 3651 y(:-)g(use_module\(prin)o(tMo)o(vi)o(es)o
(,[p)o(ri)o(ntM)o(ov)o(ie)o(s/1)o(]\))o(.)806 3828 y
Fw(at)47 b(the)f(top)h(of)f(the)h(main)f(\002le,)j(we)e(ha)n(v)o(e)f(e)
o(xplicitly)g(stated)h(that)g(we)g(can)f(use)806 3928
y Fs(printActors/1)j Fw(and)55 b Fs(printMovies/1)-6
b Fw(,)59 b(and)54 b(nothing)f(else)i(\(in)g(this)g(case,)806
4028 y(of)50 b(course,)h(the)g(declaration)e(is)i(unnecessary)e(as)i
(there)f(are)g(no)g(other)f(public)806 4127 y(predicates)h(that)h(we)h
(could)e(use\).)76 b(Needless)52 b(to)f(say)-5 b(,)54
b(you)c(can)h(only)g(import)806 4227 y(predicates)40
b(that)h(are)g(actually)f(e)o(xported)f(by)h(the)h(rele)n(v)n(ant)f
(module.)806 4382 y Fv(Libraries)806 4504 y Fw(Man)o(y)47
b(of)i(the)g(most)g(common)e(predicates)g(are)i(pro)o(vided)e
(prede\002ned,)h(in)h(one)806 4604 y(w)o(ay)36 b(or)g(another)m(,)f(by)
h(most)g(Prolog)g(implementations.)42 b(If)36 b(you)g(ha)n(v)o(e)f
(been)h(using)806 4703 y(SWI)j(Prolog,)g(for)f(e)o(xample,)g(you)g
(will)i(probably)d(ha)n(v)o(e)i(noticed)f(that)h(predicates)806
4803 y(lik)o(e)52 b Fs(append/3)e Fw(and)i Fs(member/2)e
Fw(come)i(as)h(part)g(of)f(the)h(system.)80 b(That')-5
b(s)53 b(a)806 4902 y(speciality)43 b(of)g(SWI,)g(ho)n(we)n(v)o(er)-5
b(.)51 b(Other)43 b(Prolog)g(implementations,)e(lik)o(e)j(SICStus)806
5002 y(for)49 b(e)o(xample,)i(don')o(t)e(ha)n(v)o(e)h(them)g(b)n
(uilt-in,)i(b)n(ut)e(pro)o(vide)f(them)h(as)h(part)f(of)g(a)806
5102 y(library)-5 b(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 223 235
TeXDict begin 223 234 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(12:)46 b(W)-7 b(orking)40 b(W)m(ith)h(Files)
1322 b(223)p 0 TeXcolorgray 451 1051 a(Libraries)40 b(are)g(modules)f
(de\002ning)g(common)f(predicates,)h(and)h(can)g(be)g(loaded)357
1151 y(using)52 b(the)g(normal)f(commands)g(for)h(importing)e(modules.)
79 b(When)52 b(specifying)357 1250 y(the)45 b(name)h(of)f(the)h
(library)e(that)i(you)f(w)o(ant)h(to)g(use,)h(you)d(ha)n(v)o(e)h(to)h
(tell)h(Prolog)357 1350 y(that)h(this)g(module)e(is)j(a)f(library)-5
b(,)48 b(so)g(that)g(Prolog)e(kno)n(ws)h(where)h(to)f(look)g(for)357
1449 y(it)55 b(\(namely)-5 b(,)56 b(in)e(the)h(place)f(where)g(Prolog)g
(k)o(eeps)g(its)i(libraries,)h(not)d(in)h(the)357 1549
y(directory)39 b(where)h(your)g(other)g(code)g(is\).)47
b(F)o(or)40 b(e)o(xample,)f(putting)h(the)h(directi)n(v)o(e)522
1694 y Fs(:-)g(use_module\(libra)o(ry)o(\(l)o(ist)o(s\))o(\).)357
1840 y Fw(at)57 b(the)f(top)g(of)g(your)g(\002le)h(tells)g(Prolog)e(to)
i(load)f(a)h(library)e(called)h Fs(lists)n Fw(.)357 1939
y(In)c(SICStus)i(Prolog,)g(this)g(library)d(contains)h(a)h(set)h(of)f
(commonly)d(used)j(list)357 2039 y(processing)39 b(predicates.)451
2139 y(Libraries)47 b(can)h(be)g(v)o(ery)f(useful)g(and)h(the)o(y)f
(can)h(sa)n(v)o(e)g(you)f(a)i(lot)f(of)g(w)o(ork.)357
2238 y(Moreo)o(v)o(er)m(,)e(the)i(code)f(in)h(libraries)g(has)g
(typically)f(been)g(written)h(by)g(e)o(xcellent)357 2338
y(programmers,)64 b(and)e(is)i(lik)o(ely)e(to)h(be)f(highly)f(ef)n
(\002cient)h(and)g(problem-free.)357 2437 y(Ho)n(we)n(v)o(er)f(the)j(w)
o(ay)f(that)g(libraries)g(are)g(or)o(ganised)e(and)h(the)i(in)m(v)o
(entory)c(of)357 2537 y(predicates)55 b(pro)o(vided)f(by)h(libraries)h
(are)g(by)g(no)g(means)g(standardised)f(across)357 2637
y(dif)n(ferent)f(Prolog)h(implementations.)90 b(This)56
b(means)g(that)h(if)f(you)g(w)o(ant)g(your)357 2736 y(program)e(to)j
(run)f(with)g(dif)n(ferent)f(Prolog)h(implementations,)i(it)f(is)h
(probably)357 2836 y(easier)33 b(and)g(f)o(aster)h(to)f(de\002ne)g
(your)f(o)n(wn)h(library)g(modules)f(\(using)h(the)g(techniques)357
2936 y(that)57 b(we)g(sa)o(w)g(in)g(the)g(last)h(section\))e(rather)g
(than)h(to)g(try)f(to)h(w)o(ork)g(around)357 3035 y(the)62
b(incompatibilities)f(between)g(the)h(library)g(systems)g(of)g(dif)n
(ferent)f(Prolog)357 3135 y(implementations.)357 3321
y Fk(2)99 b(Writing)41 b(to)h(Files)357 3451 y Fw(Man)o(y)f
(applications)f(require)h(that)h(output)f(be)h(written)g(to)g(a)g
(\002le)h(rather)e(than)h(to)357 3550 y(the)f(screen.)k(In)c(this)g
(section)g(we)g(will)h(e)o(xplain)d(ho)n(w)i(to)g(do)g(this)g(in)g
(Prolog.)451 3650 y(In)d(order)g(to)g(write)h(to)f(a)h(\002le)g(we)g
(ha)n(v)o(e)f(to)h(create)f(one)g(\(or)g(open)f(an)h(e)o(xisting)357
3749 y(one\))57 b(and)h(associate)h(a)f(stream)h(with)f(it.)99
b(Y)-9 b(ou)58 b(can)g(think)f(of)h(streams)h(as)357
3849 y(connections)50 b(to)i(\002les.)79 b(In)52 b(Prolog,)h(streams)f
(are)g(blessed)g(with)g(names)f(in)h(a)357 3949 y(rather)g(user)n
(-unfriendly)d(format,)55 b(such)d(as)i Fs('\\$stream'\(18336)o(8\))-6
b Fw(.)81 b(Luckily)-5 b(,)357 4048 y(you)39 b(ne)n(v)o(er)h(ha)n(v)o
(e)g(to)g(bother)g(about)f(the)i(e)o(xact)f(names)g(of)h(streams)f
(\227)i(although)357 4148 y(Prolog)47 b(assigns)h(these)g(names)g
(internally)-5 b(,)48 b(you)f(can)g(use)i(Prolog')-5
b(s)47 b(uni\002cation)357 4248 y(to)i(match)f(the)h(name)g(to)g(a)g(v)
n(ariable)f(and)g(mak)o(e)h(use)g(of)g(the)g(v)n(ariable)f(rather)357
4347 y(than)40 b(the)h(name)f(of)h(the)g(stream)g(itself.)451
4447 y(Say)35 b(you)f(w)o(ant)h(to)g(print)f(the)h(string)f('Hogw)o
(arts')g(to)h(the)g(\002le)g Fs(hogwarts.txt)-5 b Fw(.)357
4546 y(This)41 b(is)h(done)e(as)h(follo)n(ws:)647 4703
y Fs(...)647 4803 y(open\('hogwarts.)o(txt)o(',)o(wr)o(ite)o(,S)o(tre)o
(am)o(\),)647 4902 y(write\(Stream,'H)o(ogw)o(ar)o(ts)o('\),)35
b(nl\(Stream\),)647 5002 y(close\(Stream\),)647 5102
y(...)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 224 236
TeXDict begin 224 235 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(224)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 900 1051 a(What')-5 b(s)50 b(happening)d(here?)70
b(W)-7 b(ell,)53 b(\002rst)d(the)f(b)n(uilt-in)g(predicate)f
Fs(open/3)g Fw(is)806 1151 y(used)41 b(to)h(create)f(the)h(\002le)h
Fs(hogwarts.txt)-5 b Fw(.)48 b(The)42 b(second)f(ar)o(gument)e(of)i
Fs(open/3)806 1250 y Fw(indicates)h(that)g(we)h(w)o(ant)g(to)g(open)e
(a)i(ne)n(w)f(\002le)i(\(o)o(v)o(erwriting)39 b(an)o(y)j(e)o(xisting)g
(\002le)806 1350 y(with)i(the)h(same)g(name\).)56 b(The)44
b(third)g(ar)o(gument)e(of)j Fs(open/3)e Fw(returns)g(the)i(name)806
1449 y(of)g(the)h(stream.)60 b(Secondly)-5 b(,)44 b(we)j(write)e('Hogw)
o(arts')g(on)g(the)h(stream)g(and)f(issue)806 1549 y(a)52
b(ne)n(wline)f(command)e(as)k(well.)78 b(After)51 b(this)h(we)g(are)g
(ready)-5 b(,)53 b(and)e(close)g(the)806 1649 y(stream,)40
b(using)h(the)f(b)n(uilt-in)h Fs(close/1)m Fw(.)900 1748
y(And)g(that')-5 b(s)42 b(more)f(or)g(less)h(all)g(there)f(is)i(to)e
(it.)48 b(As)43 b(promised,)d(we)h(were)h(not)806 1848
y(interested)k(in)i(the)g(name)f(of)g(the)h(stream)f(\227)h(we)g(used)f
(the)h(v)n(ariable)e Fs(Stream)806 1948 y Fw(to)f(pass)h(it)g(around.)
58 b(Also)46 b(note)f(that)g(the)h Fs(write/2)d Fw(predicate)h(we)i
(used)f(here)806 2047 y(is)d(basically)g(a)g(more)f(general)g(form)g
(of)g(the)h Fs(write/1)e Fw(predicates)h(we)h(used)f(in)806
2147 y(Chapter)f(9)h(for)f(writing)h(to)g(the)g(screen.)900
2246 y(What)d(if)h(you)e(don')o(t)f(w)o(ant)i(to)g(o)o(v)o(erwrite)e
(an)i(e)o(xisting)g(\002le)g(b)n(ut)g(append)e(to)j(an)806
2346 y(e)o(xisting)i(one?)50 b(This)42 b(is)i(done)d(by)h(choosing)f(a)
i(dif)n(ferent)d(mode)i(when)f(opening)806 2446 y(the)c(\002le:)45
b(instead)37 b(of)h Fs(write)n Fw(,)g(use)g Fs(append)e
Fw(as)i(v)n(alue)f(for)g(the)g(second)g(ar)o(gument)806
2545 y(of)j Fs(open/3)n Fw(.)46 b(If)40 b(a)i(\002le)f(of)f(the)h(gi)n
(v)o(en)f(name)g(doesn')o(t)f(e)o(xist,)i(it)g(will)h(be)f(created.)806
2732 y Fk(3)99 b(Reading)42 b(fr)n(om)g(Files)806 2862
y Fw(In)48 b(this)i(section)f(we)g(sho)n(w)g(ho)n(w)f(to)h(read)g(from)
f(\002les.)71 b(Reading)48 b(information)806 2962 y(from)58
b(\002les)j(is)g(straightforw)o(ard)c(in)j(Prolog)f(\227)h(or)f(at)i
(least,)k(it)60 b(is)h(if)f(this)806 3061 y(information)37
b(is)k(gi)n(v)o(en)d(in)i(the)g(form)f(of)g(Prolog)g(terms)h(follo)n
(wed)e(by)i(full)f(stops.)806 3161 y(Consider)h(the)h(\002le)g
Fs(houses.txt)l Fw(:)971 3322 y Fs(gryffindor.)971 3422
y(hufflepuff.)971 3522 y(ravenclaw.)971 3621 y(slytherin.)806
3783 y Fw(Here)36 b(is)i(a)f(Prolog)e(program)g(that)h(opens)g(this)h
(\002le,)h(reads)f(the)f(information)f(from)806 3882
y(it,)41 b(and)f(displays)h(it)h(on)e(the)h(screen:)971
4044 y Fs(main:-)1095 4143 y(open\('houses.txt')o(,re)o(ad)o(,S)o(tr\))
o(,)1095 4243 y(read\(Str,House1\),)1095 4343 y(read\(Str,House2\),)
1095 4442 y(read\(Str,House3\),)1095 4542 y(read\(Str,House4\),)1095
4641 y(close\(Str\),)1095 4741 y(write\([House1,Hou)o(se2)o(,H)o(ou)o
(se3)o(,H)o(ous)o(e4)o(]\),)35 b(nl.)806 4902 y Fw(This)f(opens)f(a)i
(\002le)f(in)h(reading)d(mode,)i(then)g(reads)g(four)f(Prolog)g(terms)h
(using)f(the)806 5002 y(b)n(uilt-in)45 b(predicate)f
Fs(read/2)n Fw(,)j(closes)g(the)f(stream,)g(and)g(prints)f(the)h
(information)806 5102 y(as)41 b(a)h(list.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 225 237
TeXDict begin 225 236 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(12:)46 b(W)-7 b(orking)40 b(W)m(ith)h(Files)
1322 b(225)p 0 TeXcolorgray 451 1051 a(All)45 b(v)o(ery)e(straightforw)
o(ard.)54 b(Nonetheless,)44 b(the)h Fs(read/2)d Fw(predicate)i(needs)g
(to)357 1151 y(be)53 b(handled)e(with)j(care.)82 b(First)54
b(of)f(all,)j(it)e(only)e(is)i(able)f(to)h(handle)e(Prolog)357
1250 y(terms)39 b(\(we')o(ll)h(say)f(more)g(about)f(this)i(problem)e
(shortly\).)44 b(And)39 b(secondly)-5 b(,)38 b(it)i(will)357
1350 y(cause)46 b(a)g(run-time)f(error)g(if)h(we)g(use)h(it)g(to)f
(read)f(from)g(a)i(stream)f(when)f(there)357 1449 y(is)51
b(nothing)f(to)h(read.)74 b(Is)52 b(there)e(an)h(ele)o(gant)e(w)o(ay)i
(to)g(o)o(v)o(ercome)d(this)k(second)357 1549 y(problem?)451
1649 y(There)38 b(is.)46 b(The)38 b(b)n(uilt-in)g(predicate)f
Fs(at_end_of_stream)o(/1)c Fw(checks)38 b(whether)357
1748 y(the)j(end)f(of)h(a)h(stream)f(has)g(been)g(reached,)e(and)i(can)
g(be)g(used)g(as)g(a)h(safety-net.)357 1848 y(F)o(or)i(a)i(stream)f
Fs(X)o Fw(,)i Fs(at_end_of_stream)o(\(X)o(\))39 b Fw(will)46
b(e)n(v)n(aluate)e(to)i(true)e(when)h(the)357 1948 y(end)f(of)g(the)g
(stream)g Fs(X)h Fw(is)g(reached)e(\(in)i(other)e(w)o(ords,)i(when)f
(all)h(terms)f(in)h(the)357 2047 y(corresponding)37 b(\002le)42
b(ha)n(v)o(e)e(been)g(read\).)451 2147 y(The)53 b(follo)n(wing)e(code)h
(is)i(a)f(modi\002ed)e(v)o(ersion)h(of)g(our)h(earlier)f(reading-in)357
2246 y(program,)38 b(which)j(sho)n(ws)g(ho)n(w)f Fs(at_end_of_stream)o
(/1)35 b Fw(can)41 b(be)g(incorporated:)522 2429 y Fs(main:-)647
2528 y(open\('houses.tx)o(t',)o(re)o(ad)o(,St)o(r\))o(,)647
2628 y(read_houses\(Str)o(,Ho)o(us)o(es)o(\),)647 2728
y(close\(Str\),)647 2827 y(write\(Houses\),)35 b(nl.)522
3027 y(read_houses\(Stre)o(am,)o([])o(\):-)647 3126 y(at_end_of_strea)o
(m\(S)o(tr)o(ea)o(m\).)522 3325 y(read_houses\(Stre)o(am,)o([X)o(|L])o
(\):)o(-)647 3425 y(\\+)40 b(at_end_of_stream\()o(St)o(rea)o(m\))o(,)
647 3525 y(read\(Stream,X\),)647 3624 y(read_houses\(Str)o(eam)o(,L)o
(\).)451 3807 y Fw(No)n(w)d(for)f(the)h(nastier)g(problem.)43
b(Recall)38 b(that)f Fs(read/2)e Fw(only)h(reads)h(in)g(Prolog)357
3906 y(terms.)88 b(If)55 b(you)f(w)o(ant)h(to)g(read)g(in)g(arbitrary)e
(input,)58 b(things)d(become)f(rather)357 4006 y(unpleasant,)g(as)g
(Prolog)e(forces)h(you)f(to)h(read)g(information)d(on)j(the)g(le)n(v)o
(el)g(of)357 4105 y(characters.)85 b(The)54 b(predicate)g(that)g(you)g
(need)g(in)h(this)g(case)g(is)g Fs(get_code/2)357 4205
y Fw(which)45 b(reads)h(the)g(ne)o(xt)f(a)n(v)n(ailable)h(character)e
(from)h(a)i(stream.)60 b(Characters)46 b(are)357 4305
y(represented)41 b(in)j(Prolog)e(by)h(their)g(inte)o(ger)f(codes.)52
b(F)o(or)43 b(e)o(xample,)f Fs(get_code/2)357 4404 y
Fw(will)f(return)f Fs(97)h Fw(if)g(the)g(ne)o(xt)f(character)g(on)g
(the)h(stream)g(is)h(an)f Fs(a)p Fw(.)451 4504 y(Usually)60
b(we)h(are)f(not)g(interested)g(in)g(these)g(inte)o(ger)g(codes,)k(b)n
(ut)c(in)h(the)357 4604 y(characters)41 b(\227)i(or)f(rather)m(,)g(in)h
(the)f(atoms)g(that)h(are)f(made)g(up)g(of)g(lists)i(of)f(these)357
4703 y(characters.)g(Ho)n(w)38 b(do)f(we)h(get)g(our)f(hands)f(on)i
(these)f(\(lists)i(of\))e(characters?)44 b(One)357 4803
y(w)o(ay)j(is)i(to)f(use)g(the)f(b)n(uilt-in)g(predicate)g
Fs(atom_codes/2)c Fw(that)48 b(we)g(introduced)357 4902
y(in)e(Chapter)f(9)h(to)h(con)m(v)o(ert)d(a)i(list)h(of)f(inte)o(gers)f
(into)h(the)g(corresponding)c(atom.)357 5002 y(W)-7 b(e')o(ll)40
b(use)f(this)g(technique)f(in)h(the)g(follo)n(wing)e(e)o(xample,)h(a)h
(predicate)f(that)h(reads)357 5102 y(in)i(a)g(w)o(ord)f(from)g(a)i
(stream.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 226 238
TeXDict begin 226 237 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(226)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(readWord\(InStrea)o(m,)o(W\):)o(-)1095
1151 y(get_code\(InStream)o(,Ch)o(ar)o(\),)1095 1250
y(checkCharAndReadR)o(est)o(\(C)o(ha)o(r,C)o(ha)o(rs,)o(In)o(Str)o(ea)o
(m\))o(,)1095 1350 y(atom_codes\(W,Char)o(s\).)971 1649
y(checkCharAndRead)o(Re)o(st\()o(10)o(,[])o(,_)o(\):)o(-)c(!.)971
1848 y(checkCharAndRead)o(Re)o(st\()o(32)o(,[])o(,_)o(\):)o(-)g(!.)971
2047 y(checkCharAndRead)o(Re)o(st\()o(-1)o(,[])o(,_)o(\):)o(-)g(!.)971
2246 y(checkCharAndRead)o(Re)o(st\()o(en)o(d_o)o(f_)o(fi)o(le,)o([])o
(,_\))o(:-)f(!.)971 2446 y(checkCharAndRead)o(Re)o(st\()o(Ch)o(ar,)o
([C)o(ha)o(r|C)o(ha)o(rs])o(,I)o(nS)o(tre)o(am)o(\):-)1095
2545 y(get_code\(InStream)o(,Ne)o(xt)o(Ch)o(ar\))o(,)1095
2645 y(checkCharAndReadR)o(est)o(\(N)o(ex)o(tCh)o(ar)o(,Ch)o(ar)o(s,I)o
(nS)o(tr)o(eam)o(\).)900 2894 y Fw(Ho)n(w)k(does)f(this)h(w)o(ork?)45
b(It)39 b(reads)f(in)h(a)g(character)f(and)g(then)g(checks)h(whether)
806 2994 y(this)44 b(character)f(is)i(a)g(blank)e(\(inte)o(ger)f(code)i
(32\),)g(a)g(ne)n(w)g(line)g(\(10\))f(or)h(the)g(end)806
3093 y(of)j(the)g(stream)h(\()p Fh(\000)p Ff(1)p Fw(\).)64
b(In)47 b(an)o(y)g(of)g(these)h(cases)g(a)g(complete)f(w)o(ord)f(has)i
(been)806 3193 y(read,)40 b(otherwise)g(the)h(ne)o(xt)f(character)g(is)
i(read.)806 3438 y Fk(4)99 b(Exer)n(cises)806 3623 y
Fv(Exer)o(cise)44 b(12.1.)167 b Fw(Write)45 b(code)g(that)g(creates)g
Fs(hogwart.houses)-6 b Fw(,)47 b(a)f(\002le)f(that)p
0 TeXcolorgray 357 3530 118 4 v 357 3648 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 3648 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -3019 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 3648 4 118
v 357 3651 118 4 v 0 TeXcolorgray 806 3723 a Fw(that)c(looks)f(lik)o(e)
h(this:)1261 3938 y Fs(gryffindor)971 4038 y(hufflepuff)203
b(ravenclaw)1261 4138 y(slytherin)806 4353 y Fw(Y)-9
b(ou)38 b(can)g(use)i(the)e(b)n(uilt-in)h(predicates)f
Fs(open/3)m Fw(,)i Fs(close/1)m Fw(,)g Fs(tab/2)m Fw(,)g
Fs(nl/1)n Fw(,)g(and)806 4453 y Fs(write/2)m Fw(.)806
4602 y Fv(Exer)o(cise)50 b(12.2.)200 b Fw(Write)51 b(a)g(Prolog)f
(program)f(that)i(reads)f(in)h(a)g(plain)g(te)o(xt)p
0 TeXcolorgray 357 4509 V 357 4627 4 118 v 0 0 0 0.05
TeXcolorcmyk 0 0 0 0.05 TeXcolorcmyk 361 4627 112 118
v 0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray -3020 w Fi(E)p
0 0 0 0.05 TeXcolorcmyk 0 TeXcolorgray 471 4627 4 118
v 357 4630 118 4 v 0 TeXcolorgray 806 4702 a Fw(\002le)45
b(w)o(ord)g(by)f(w)o(ord,)h(and)g(asserts)h(all)f(read)g(w)o(ords)f
(and)h(their)g(frequenc)o(y)d(into)806 4802 y(the)f(Prolog)f(database.)
47 b(Y)-9 b(ou)41 b(may)g(use)g(the)h(predicate)e Fs(readWord/2)e
Fw(to)j(read)g(in)806 4901 y(w)o(ords.)54 b(Use)45 b(a)g(dynamic)d
(predicate)h Fs(word/2)f Fw(to)j(store)f(the)g(w)o(ords,)g(where)f(the)
806 5001 y(\002rst)j(ar)o(gument)d(is)j(a)g(w)o(ord,)g(and)f(the)g
(second)g(ar)o(gument)e(is)k(the)e(frequenc)o(y)e(of)806
5101 y(that)e(w)o(ord.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 227 239
TeXDict begin 227 238 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(12:)46 b(W)-7 b(orking)40 b(W)m(ith)h(Files)
1322 b(227)p 0 TeXcolorgray 357 1051 a Fk(5)99 b(Practical)41
b(Session)357 1183 y Fw(In)53 b(this)h(practical)f(session,)k(we)d(w)o
(ant)g(to)f(combine)f(what)i(we)g(ha)n(v)o(e)f(learned)357
1283 y(about)48 b(\002le)i(handling)e(with)h(some)h(topics)f(we)h(met)f
(in)h(earlier)f(chapters.)70 b(The)357 1383 y(goal)42
b(is)i(to)f(write)h(a)f(program)e(for)i(running)d(a)k(DCG)g(grammar)d
(on)i(a)g(testsuite,)357 1482 y(so)e(that)g(the)g(performance)d(of)j
(the)g(grammar)e(can)i(be)g(check)o(ed.)451 1584 y(What)46
b(is)g(a)g(testsuite?)59 b(It)45 b(is)h(a)g(\002le)g(that)f(contains)g
(lots)g(of)g(possible)g(inputs)357 1684 y(\(and)58 b(e)o(xpected)g
(outputs\))h(for)g(some)g(program.)100 b(In)59 b(this)h(case,)65
b(a)60 b(testsuite)357 1783 y(will)43 b(be)g(a)h(\002le)f(that)h(has)f
(lists)h(representing)d(grammatical)h(and)g(ungrammatical)357
1883 y(sentences,)55 b(such)e(as)h Fs([the,woman,shoot)o(s,)o(the)o(,c)
o(ow,)o(un)o(de)o(r,t)o(he)o(,sh)o(ow)o(er])357 1983
y Fw(or)c Fs([him,shoots,wom)o(an])-7 b Fw(.)74 b(The)50
b(test)h(program)d(should)h(tak)o(e)h(this)h(\002le,)h(run)357
2082 y(the)44 b(grammar)f(on)h(each)g(of)g(the)g(sentences,)h(and)e
(store)i(the)f(results)h(in)f(another)357 2182 y(\002le.)120
b(W)-7 b(e)67 b(can)f(then)f(look)g(at)h(the)g(output)f(\002le)h(to)g
(check)f(whether)g(the)357 2281 y(grammar)36 b(answered)i(e)n(v)o
(erywhere)d(the)k(w)o(ay)f(it)h(should)e(ha)n(v)o(e.)44
b(When)38 b(de)n(v)o(eloping)357 2381 y(grammars,)44
b(testsuites)h(lik)o(e)g(this)h(are)e(e)o(xtremely)f(useful)i(for)f
(making)f(sure)i(that)357 2481 y(an)o(y)38 b(modi\002cations)g(we)h
(mak)o(e)g(to)g(the)g(grammar)f(don')o(t)f(ha)n(v)o(e)i(unw)o(anted)e
(ef)n(fects.)357 2641 y Fv(Step)k(1)357 2766 y Fw(T)-7
b(ak)o(e)44 b(the)g(DCG)g(that)g(you)f(b)n(uilt)i(in)f(the)g(practical)
f(session)h(of)g(Chapter)f(8)h(and)357 2865 y(turn)c(it)i(into)f(a)h
(module,)e(e)o(xporting)e(the)k(predicate)e Fs(s/3)o
Fw(,)h(that)h(is,)g(the)f(predicate)357 2965 y(that)59
b(lets)g(you)f(parse)h(sentences)f(and)g(returns)g(the)h(parse)g(tree)g
(as)g(its)h(\002rst)357 3065 y(ar)o(gument.)357 3225
y Fv(Step)41 b(2)357 3350 y Fw(In)46 b(the)g(practical)g(session)h(of)f
(Chapter)g(9,)i(you)e(had)g(to)g(write)h(a)g(program)d(for)357
3449 y(pretty)g(printing)g(parse)h(trees)g(onto)f(the)h(screen.)58
b(T)l(urn)45 b(that)g(into)g(a)g(module)f(as)357 3549
y(well.)357 3709 y Fv(Step)d(3)357 3834 y Fw(No)n(w)f(modify)e(the)i
(program)e(so)i(that)h(it)f(prints)g(the)g(tree)g(not)g(to)g(the)g
(screen)g(b)n(ut)357 3934 y(to)48 b(a)h(gi)n(v)o(en)d(stream.)68
b(That)48 b(means)f(that)i(the)f(predicate)f Fs(pptree)f
Fw(should)h(no)n(w)357 4033 y(be)40 b(a)g(tw)o(o-place)f(predicate)g
(taking)g(the)h(Prolog)f(representation)f(of)i(a)g(parse)g(tree)357
4133 y(and)g(a)h(stream)g(as)h(ar)o(guments.)357 4293
y Fv(Step)f(4)357 4418 y Fw(Import)j(both)g(modules)h(into)g(a)h
(\002le)g(and)f(de\002ne)g(a)h(tw)o(o-place)e(predicate)h
Fs(test)357 4518 y Fw(which)39 b(tak)o(es)g(a)h(list)h(representing)c
(a)j(sentence)e(\(such)h(as)h Fs([a,woman,shoots])-6
b Fw(\),)357 4617 y(parses)60 b(it,)65 b(and)60 b(writes)g(the)h
(result)f(to)g(the)g(\002le)h(speci\002ed)f(by)f(the)i(second)357
4717 y(ar)o(gument)38 b(of)j Fs(test)n Fw(.)47 b(Check)40
b(that)h(e)n(v)o(erything)d(is)k(w)o(orking)e(as)h(it)h(should.)357
4877 y Fv(Step)f(5)357 5002 y Fw(Finally)-5 b(,)37 b(modify)g
Fs(test/2)m Fw(,)i(so)f(that)g(it)g(tak)o(es)g(a)h(\002lename)e
(instead)h(of)f(a)h(sentence)357 5102 y(as)g(its)g(\002rst)g(ar)o
(gument,)e(reads)h(in)h(the)f(sentences)g(gi)n(v)o(en)f(in)i(the)f
(\002le)i(one)d(by)h(one,)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 228 240
TeXDict begin 228 239 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(228)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(parses)45 b(them,)h(and)f(writes)h(the)f
(sentence)g(as)h(well)g(as)g(the)g(parsing)e(result)i(into)806
1151 y(the)40 b(output)g(\002le.)47 b(F)o(or)40 b(e)o(xample,)f(if)j
(your)d(input)i(\002le)g(look)o(ed)f(lik)o(e)h(this:)971
1312 y Fs([the,cow,under,t)o(he)o(,ta)o(bl)o(e,s)o(ho)o(ot)o(s].)971
1511 y([a,dead,woman,li)o(ke)o(s,h)o(e])o(.)900 1672
y Fw(the)g(output)f(\002le)h(should)f(look)g(something)g(lik)o(e)h
(this:)971 1833 y Fs([the,)e(cow,)h(under,)f(the,)h(table,)f(shoots])
1095 2032 y(s\()1220 2132 y(np\()1344 2232 y(det\(the\))1344
2331 y(nbar\()1469 2431 y(n\(cow\)\))1344 2530 y(pp\()1469
2630 y(prep\(under\))1469 2730 y(np\()1594 2829 y(det\(the\))1594
2929 y(nbar\()1718 3029 y(n\(table\)\)\)\)\))1220 3128
y(vp\()1344 3228 y(v\(shoots\)\)\))971 3527 y([a,)h(dead,)g(woman,)f
(likes,)g(he])971 3726 y(no)806 3887 y Fv(Step)i(6)806
4009 y Fw(No)n(w)d(\(if)h(you)e(are)i(in)g(for)f(some)g(real)h(Prolog)e
(hacking\))g(try)h(to)h(write)g(a)g(module)806 4109 y(that)h(reads)g
(in)h(sentences)f(terminated)f(by)h(a)h(full)f(stop)h(or)f(a)h(line)f
(break)g(from)f(a)806 4208 y(\002le,)i(so)g(that)g(you)f(can)h(gi)n(v)o
(e)f(your)g(testsuite)i(as)971 4369 y Fs(the)e(cow)g(under)g(the)g
(table)g(shoots)f(.)971 4569 y(a)i(dead)f(woman)f(likes)h(he)g(.)900
4730 y Fw(instead)h(of)971 4891 y Fs([the,cow,under,t)o(he)o(,ta)o(bl)o
(e,s)o(ho)o(ot)o(s].)971 5090 y([a,dead,woman,li)o(ke)o(s,h)o(e])o(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 229 241
TeXDict begin 229 240 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Chapter)40 b(12:)46 b(W)-7 b(orking)40 b(W)m(ith)h(Files)
1322 b(229)p 0 TeXcolorgray 357 1051 a Fv(Step)41 b(7)357
1173 y Fw(Mak)o(e)36 b(the)g(testsuite)h(en)m(vironment)c(more)i
(sophisticated,)h(by)f(adding)g(information)357 1273
y(to)51 b(the)f(input)h(\002le)g(about)f(the)h(e)o(xpected)e(output)g
(\(in)i(this)g(case,)j(whether)c(the)357 1372 y(sentences)k(has)h(a)g
(parse)g(or)f(not\).)87 b(Then)54 b(modify)f(the)h(program)f(so)i(that)
g(it)357 1472 y(checks)40 b(whether)g(the)h(e)o(xpected)e(output)h
(matches)h(the)g(obtained)e(output.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 230 242
TeXDict begin 230 241 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 231 243
TeXDict begin 231 242 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1141 1424
a Fu(Answers)43 b(to)f(the)g(Exer)m(cises)451 1906 y
Fw(Y)-8 b(es,)39 b(yes,)g(you')l(re)d(right.)44 b(W)-7
b(e)40 b Ft(did)g Fw(put)e(in)g(the)h(answers)f(to)g(all)h(the)g(e)o(x)
o(ercises.)357 2006 y(Reluctantly)63 b(and)g(against)g(our)g(better)h
(judgement.)112 b(F)o(oolishly)63 b(bo)n(wing)g(to)357
2105 y(immense)40 b(pressure.)45 b(And)40 b(no)n(w)h(you')l(v)o(e)d
(gone)i(and)h(found)e(them.)12 b(.)g(.)451 2205 y(But)49
b(just)g(because)f(we')l(v)o(e)g(done)f(something)g(dumb,)i(it)h
(doesn')o(t)d(mean)h(you)357 2305 y(ha)n(v)o(e)40 b(to)i(too.)47
b(Once)41 b(you)f(ha)n(v)o(e)h(seen)g(the)h(answer)f(to)g(an)h(e)o(x)o
(ercise,)e(you')o(ll)g(lose)357 2404 y(fore)n(v)o(er)g(the)h(chance)g
(of)h(w)o(orking)e(it)j(out)f(yourself.)47 b(But)42 b(you')l(v)o(e)e
(still)j(got)f(time)357 2504 y(to)f(put)f(things)h(right.)k(So)c(don')o
(t)e(turn)i(this)g(page!)k(Go)c(back)f(and)h(try)f(again!)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 232 244
TeXDict begin 232 243 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(232)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 233 245
TeXDict begin 233 244 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(233)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
912 2904 a Fb(Didn')n(t)41 b(you)g(hear)h(what)f(we)h(just)f(said?)893
3020 y(This)g(really)g(is)g(your)g(v)o(ery)g(last)g(chance!)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 234 246
TeXDict begin 234 245 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(234)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 235 247
TeXDict begin 235 246 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(235)p 0 TeXcolorgray 357 1051 a Fv(Answer)41 b(1.1)p
0 TeXcolorgray 460 1177 a Fw(1.)p 0 TeXcolorgray 41 w
Fs(vINCENT)e Fw(is)j(an)f(atom:)k(it)d(starts)g(with)f(a)g(lo)n(wer)n
(-case)g(letter)-5 b(.)p 0 TeXcolorgray 460 1356 a(2.)p
0 TeXcolorgray 41 w Fs(Footmassage)37 b Fw(is)42 b(a)f(v)n(ariable:)k
(it)d(starts)g(with)f(an)g(upper)n(-case)e(letter)-5
b(.)p 0 TeXcolorgray 460 1535 a(3.)p 0 TeXcolorgray 41
w Fs(variable23)38 b Fw(is)k(an)e(atom:)46 b(it)c(starts)f(with)h(a)f
(lo)n(wer)n(-case)f(letter)-5 b(.)p 0 TeXcolorgray 460
1714 a(4.)p 0 TeXcolorgray 41 w Fs(Variable2000)37 b
Fw(is)42 b(a)f(v)n(ariable:)k(it)d(starts)f(with)h(an)e(uppercase)g
(letter)-5 b(.)p 0 TeXcolorgray 460 1893 a(5.)p 0 TeXcolorgray
41 w Fs(big)p 701 1893 27 4 v 30 w(kahuna)p 995 1893
V 29 w(burger)39 b Fw(is)j(an)f(atom:)46 b(it)41 b(starts)h(with)f(a)h
(lo)n(wer)n(-case)e(letter)-5 b(.)p 0 TeXcolorgray 460
2072 a(6.)p 0 TeXcolorgray 41 w Fs('big)33 b(kahuna)f(burger')g
Fw(is)j(an)f(atom:)42 b(it)35 b(is)g(between)e(tw)o(o)i(single)f
(quotes.)p 0 TeXcolorgray 460 2251 a(7.)p 0 TeXcolorgray
41 w Fs(big)j(kahuna)f(burger)g Fw(is)j(neither:)44 b(v)n(ariables)37
b(can)g(ne)n(v)o(er)g(contain)g(spaces,)564 2351 y(and)h(atoms)h
(cannot)f(either)g(\227)i(unless)f(the)f(atom)h(starts)g(and)g(ends)f
(with)h(a)564 2451 y(single)i(quote.)p 0 TeXcolorgray
460 2630 a(8.)p 0 TeXcolorgray 41 w Fs('Jules')e Fw(is)j(an)f(atom:)k
(it)d(is)g(enclosed)e(between)g(single)h(quotes.)p 0
TeXcolorgray 460 2809 a(9.)p 0 TeXcolorgray 569 2809
V 73 w Fs(Jules)e Fw(is)j(a)f(v)n(ariable:)k(it)d(starts)g(with)f(an)g
(underscore.)p 0 TeXcolorgray 419 2988 a(10.)p 0 TeXcolorgray
40 w Fs(')p 613 2988 V 31 w(Jules')e Fw(is)j(an)f(atom:)46
b(it)41 b(is)h(enclosed)e(between)g(single)h(quotes.)357
3184 y Fv(Answer)g(1.2)p 0 TeXcolorgray 460 3310 a Fw(1.)p
0 TeXcolorgray 41 w Fs(loves\(Vincent,mia)o(\))48 b Fw(is)54
b(a)g(comple)o(x)d(term.)83 b(Its)53 b(functor)f(is)i
Fs(loves)564 3409 y Fw(and)41 b(its)h(arity)e(is)i(2.)p
0 TeXcolorgray 460 3588 a(2.)p 0 TeXcolorgray 41 w Fs
('loves\(Vincent,mi)o(a\))o(')34 b Fw(is)41 b(an)f(atom:)45
b(it)c(is)g(enclosed)e(between)g(single)564 3688 y(quotes.)p
0 TeXcolorgray 460 3867 a(3.)p 0 TeXcolorgray 41 w Fs(Butch\(boxer\))45
b Fw(is)50 b(not)e(a)i(term.)69 b(It)49 b(starts)h(with)f(an)g(upper)n
(-case)f(letter)564 3967 y(and)j(therefore)e(cannot)h(be)g(an)h(atom)g
(or)g(a)g(comple)o(x)e(term.)76 b(It)51 b(cannot)564
4066 y(be)43 b(a)h(v)n(ariable)d(either)i(because)f(v)n(ariables)g(are)
h(not)g(supposed)f(to)h(contain)564 4166 y(parentheses.)p
0 TeXcolorgray 460 4345 a(4.)p 0 TeXcolorgray 41 w Fs(boxer\(Butch\))i
Fw(is)51 b(a)f(comple)o(x)e(term.)71 b(Its)50 b(functor)e(is)j
Fs(boxer)d Fw(and)h(its)564 4445 y(arity)41 b(is)h(1.)p
0 TeXcolorgray 460 4624 a(5.)p 0 TeXcolorgray 41 w Fs
(and\(big\(burger\),k)o(ah)o(una)o(\(b)o(ur)o(ger)o(\)\))63
b Fw(is)69 b(a)g(comple)o(x)e(term.)129 b(Its)564 4723
y(functor)36 b(is)h Fs(and)g Fw(and)f(its)i(arity)f(is)h(2.)44
b(The)37 b(ar)o(guments)e(are)i(again)e(comple)o(x)564
4823 y(terms.)p 0 TeXcolorgray 460 5002 a(6.)p 0 TeXcolorgray
41 w Fs(and\(big\(X\),kahuna)o(\(X)o(\)\))43 b Fw(is)50
b(a)f(comple)o(x)e(term.)70 b(Its)49 b(functor)e(is)j
Fs(and)564 5102 y Fw(and)41 b(its)h(arity)e(2.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 236 248
TeXDict begin 236 247 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(236)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 909 1051 a(7.)p 0 TeXcolorgray
1018 1051 27 4 v 72 w Fs(and\(big\(X\),kahuna)o(\(X\))o(\))64
b Fw(is)70 b(not)f(a)h(term.)130 b(It)70 b(starts)g(with)g(an)1013
1151 y(underscore)43 b(and)h(can)h(therefore)e(not)h(be)h(an)g(atom)f
(or)h(a)g(comple)o(x)e(term.)1013 1250 y(It)k(cannot)f(be)g(a)h(v)n
(ariable)f(either)g(because)g(v)n(ariables)g(are)h(not)f(supposed)1013
1350 y(to)41 b(contain)f(parentheses)g(or)h(commas.)p
0 TeXcolorgray 909 1513 a(8.)p 0 TeXcolorgray 41 w Fs(\(Butch)48
b(kills)g(Vincent\))g Fw(is)i(not)g(a)g(term.)72 b(It)51
b(contains)e(parentheses)1013 1613 y(and)55 b(empty)f(spaces)h(and)f
(therefore)f(can)i(neither)f(be)h(an)g(atom)g(nor)f(a)1013
1713 y(v)n(ariable.)91 b(It)57 b(doesn')o(t)e(ha)n(v)o(e)h(the)h(right)
f(format)f(for)h(a)h(comple)o(x)e(term)1013 1812 y(either;)41
b(in)g(particular)m(,)e(it)j(has)f(no)f(functor)-5 b(.)p
0 TeXcolorgray 909 1976 a(9.)p 0 TeXcolorgray 41 w Fs(kills\(Butch)36
b(Vincent\))h Fw(is)j(not)f(a)i(term.)k(Ho)n(we)n(v)o(er)m(,)37
b(adding)h(a)j(comma)1013 2076 y(between)f(Butch)h(and)f(V)-5
b(incent)41 b(w)o(ould)f(mak)o(e)h(it)g(into)g(a)g(comple)o(x)e(term.)p
0 TeXcolorgray 868 2239 a(10.)p 0 TeXcolorgray 40 w Fs
(kills\(Butch,Vinc)o(ent)f Fw(is)46 b(not)e(a)g(term.)56
b(Ho)n(we)n(v)o(er)m(,)43 b(adding)g(a)i(closing)1013
2339 y(parenthesis)40 b(at)i(the)f(end)f(w)o(ould)g(mak)o(e)h(it)g
(into)g(a)g(comple)o(x)f(term.)806 2516 y Fv(Answer)h(1.3)806
2638 y Fw(There)d(are)i(three)f(f)o(acts)h(and)f(four)f(rules)i(in)f
(this)h(kno)n(wledge)e(base.)45 b(This)40 b(means)806
2737 y(that)51 b(there)g(are)g(se)n(v)o(en)f(clauses.)77
b(The)51 b(heads)g(of)g(the)g(rules)h(are)f Fs(person\(X\))p
Fw(,)806 2837 y Fs(loves\(X,Y\))p Fw(,)k(and)j Fs(father\(Y,Z\))d
Fw(\(e)n(v)o(erything)h(on)i(the)h(left-hand)f(side)h(of)806
2937 y(the)f(rules\),)k(the)c(goals)g(are)g Fs(man\(X\))p
Fw(,)e Fs(woman\(X\))p Fw(,)g Fs(father\(X,Y\))p Fw(,)e
Fs(man\(Y\))p Fw(,)806 3036 y Fs(son\(Z,Y\))p Fw(,)47
b(and)j Fs(daughter\(Z,Y\))45 b Fw(\(e)n(v)o(erything)i(on)j(the)g
(right)g(hand)f(side)i(of)806 3136 y(the)36 b(rules\).)44
b(This)37 b(kno)n(wledge)e(base)i(de\002nes)g(\002)n(v)o(e)g
(predicates,)f(namely)g Fs(woman/1)p Fw(,)806 3236 y
Fs(man/1)p Fw(,)j Fs(person/1)p Fw(,)f Fs(loves/2)p Fw(,)g(and)i
Fs(father/2)p Fw(.)806 3391 y Fv(Answer)h(1.4)806 3513
y Fw(Here)50 b(is)i(an)f(e)o(xample)e(of)h(what)h(your)f(answers)g
(could)g(look)g(lik)o(e.)75 b(The)o(y)-5 b(,)52 b(of)806
3612 y(course,)43 b(don')o(t)g(ha)n(v)o(e)h(to)g(look)f
Ft(e)n(xactly)h Fw(lik)o(e)h(that.)55 b(F)o(or)44 b(e)o(xample,)f(the)h
(\002rst)h(f)o(act)806 3712 y(could)g(also)i(be)g Fs(killer\('Butch'\))
41 b Fw(or)47 b Fs(killer\(b\))c Fw(or)k(e)n(v)o(en)e
Fj(k)s Ff(\(50\))p Fw(,)j(if)f(you)806 3812 y(decide)c(to)h(represent)e
(Butch)i(by)g(the)f(number)f Fs(50)i Fw(and)f(the)h(property)e(of)h
(being)806 3911 y(a)e(killer)g(by)f(the)h(predicate)f
Fs(k/1)o Fw(.)p 0 TeXcolorgray 909 4088 a(1.)p 0 TeXcolorgray
206 w Fs(killer\(butch\).)p 0 TeXcolorgray 909 4267 a
Fw(2.)p 0 TeXcolorgray 206 w Fs(married\(mia,)d(marsellus\).)p
0 TeXcolorgray 909 4446 a Fw(3.)p 0 TeXcolorgray 206
w Fs(dead\(zed\).)p 0 TeXcolorgray 909 4625 a Fw(4.)p
0 TeXcolorgray 206 w Fs(kill\(marsellus,X\))o(:-)e(give\(X,mia,Y\),)h
(footmassage\(Y\).)p 0 TeXcolorgray 909 4805 a Fw(5.)p
0 TeXcolorgray 206 w Fs(love\(mia,X\):-)h(good_dancer\(X\).)p
0 TeXcolorgray 909 4984 a Fw(6.)p 0 TeXcolorgray 206
w Fs(eat\(jules,X\):-)f(nutritious\(X\).)1178 5083 y(eat\(jules,X\):-)g
(tasty\(X\).)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 237 249
TeXDict begin 237 248 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(237)p 0 TeXcolorgray 357 1051 a Fv(Answer)41 b(1.5)p
0 TeXcolorgray 460 1173 a Fw(1.)p 0 TeXcolorgray 207
w Fs(?-)f(wizard\(ron\).)730 1273 y(yes)p 0 TeXcolorgray
460 1457 a Fw(2.)p 0 TeXcolorgray 207 w Fs(?-)g(witch\(ron\).)730
1557 y(no)564 1741 y Fw(or)730 1908 y Fs(ERROR:)f(Undefined)e
(procedure:)h(witch/1)p 0 TeXcolorgray 460 2075 a Fw(3.)p
0 TeXcolorgray 207 w Fs(?-)i(wizard\(hermione\).)730
2175 y(no)p 0 TeXcolorgray 460 2359 a Fw(4.)p 0 TeXcolorgray
207 w Fs(?-)g(witch\(hermione\).)730 2458 y(no)564 2642
y Fw(or)730 2810 y Fs(ERROR:)f(Undefined)e(procedure:)h(witch/1)p
0 TeXcolorgray 460 2977 a Fw(5.)p 0 TeXcolorgray 207
w Fs(?-)i(wizard\(harry\).)730 3076 y(yes)p 0 TeXcolorgray
460 3261 a Fw(6.)p 0 TeXcolorgray 207 w Fs(?-)g(wizard\(Y\).)730
3360 y(Y)h(=)g(ron)f(;)730 3460 y(Y)h(=)g(harry)e(;)730
3559 y(no)p 0 TeXcolorgray 460 3743 a Fw(7.)p 0 TeXcolorgray
207 w Fs(?-)h(witch\(Y\).)730 3843 y(no)564 4027 y Fw(or)730
4194 y Fs(ERROR:)f(Undefined)e(procedure:)h(witch/1)357
4378 y Fv(Answer)j(2.1)p 0 TeXcolorgray 460 4501 a Fw(1.)p
0 TeXcolorgray 41 w Fs(bread)f(=)h(bread)e Fw(uni\002es.)p
0 TeXcolorgray 460 4668 a(2.)p 0 TeXcolorgray 41 w Fs('Bread')g(=)i
(bread)e Fw(doesn')o(t)h(unify)-5 b(.)p 0 TeXcolorgray
460 4835 a(3.)p 0 TeXcolorgray 41 w Fs('bread')39 b(=)i(bread)e
Fw(uni\002es.)p 0 TeXcolorgray 460 5002 a(4.)p 0 TeXcolorgray
41 w Fs(Bread)44 b(=)i(bread)e Fw(uni\002es;)k(the)e(v)n(ariable)e
Fs(Bread)h Fw(gets)h(instantiated)f(with)564 5102 y(the)c(atom)g
Fs(bread)p Fw(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 238 250
TeXDict begin 238 249 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(238)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 909 1051 a(5.)p 0 TeXcolorgray
41 w Fs(bread)g(=)h(sausage)d Fw(doesn')o(t)i(unify)-5
b(.)p 0 TeXcolorgray 909 1215 a(6.)p 0 TeXcolorgray 41
w Fs(food\(bread\))37 b(=)k(bread)f Fw(doesn')o(t)f(unify)-5
b(.)p 0 TeXcolorgray 909 1378 a(7.)p 0 TeXcolorgray 41
w Fs(food\(bread\))37 b(=)k(X)g Fw(uni\002es;)g Fs(X)g
Fw(gets)h(instantiated)e(with)h Fs(food\(bread\))p Fw(.)p
0 TeXcolorgray 909 1542 a(8.)p 0 TeXcolorgray 41 w Fs(food\(X\))e(=)i
(food\(bread\))c Fw(uni\002es;)k Fs(X)g Fw(gets)g(instantiated)f(with)i
Fs(bread)p Fw(.)p 0 TeXcolorgray 909 1705 a(9.)p 0 TeXcolorgray
41 w Fs(food\(bread,X\))47 b(=)53 b(food\(Y,sausage\))46
b Fw(uni\002es;)58 b Fs(X)53 b Fw(gets)f(instantiated)1013
1805 y(with)41 b Fs(sausage)e Fw(and)h Fs(Y)h Fw(gets)h(instantiated)e
(with)h Fs(bread)p Fw(.)p 0 TeXcolorgray 868 1969 a(10.)p
0 TeXcolorgray 40 w Fs(food\(bread,X,bee)o(r\))59 b(=)64
b(food\(Y,sausage,X\))58 b Fw(doesn')o(t)63 b(unify;)75
b Fs(X)1013 2068 y Fw(cannot)40 b(be)h(instantiated)f(with)h
Fs(sausage)e Fw(as)j(well)f(as)h Fs(beer)p Fw(.)p 0 TeXcolorgray
868 2232 a(11.)p 0 TeXcolorgray 40 w Fs(food\(bread,X,bee)o(r\))48
b(=)54 b(food\(Y,kahuna)p 2527 2232 27 4 v 26 w(burger\))e
Fw(doesn')o(t)h(unify;)1013 2332 y(the)41 b(functors)f(are)g(of)h(dif)n
(ferent)e(arity)-5 b(.)p 0 TeXcolorgray 868 2495 a(12.)p
0 TeXcolorgray 40 w Fs(food\(X\))55 b(=)i(X)g Fw(is)h(trickier)-5
b(.)94 b(According)55 b(to)i(the)g(basic)g(de\002nition)f(of)1013
2595 y(uni\002cation)e(gi)n(v)o(en)f(in)i(the)g(te)o(xt,)j(these)d(tw)o
(o)g(terms)g(do)g(not)f(unify)-5 b(,)57 b(as)1013 2695
y(no)c(matter)g(what)h(\(\002nite\))f(term)g(we)h(instantiate)f
Fs(X)h Fw(to,)j(the)c(tw)o(o)h(sides)1013 2794 y(w)o(on')o(t)38
b(be)h(identical.)44 b(Ho)n(we)n(v)o(er)38 b(\(as)h(we)g(mentioned)e
(in)i(the)g(te)o(xt\))f(modern)1013 2894 y(Prolog)e(interpreters)g
(will)h(detect)g(that)g(there)g(is)g(a)h(problem)d(here)h(and)h(will)
1013 2993 y(instantiate)f Fs(X)g Fw(with)h(the)f(`in\002nite)g(term')f
Fs(food\(food\(food\(..)o(.\))o(\)\))p Fw(,)c(and)1013
3093 y(report)55 b(that)i(uni\002cation)e(succeeds.)91
b(In)56 b(short,)j(there)d(is)h(no)f(`correct')1013 3193
y(answer)37 b(to)f(this)i(question;)f(it')-5 b(s)38 b(essentially)f(a)g
(matter)f(of)h(con)m(v)o(ention.)k(The)1013 3292 y(important)g(point)h
(is)h(to)g(understand)d(why)i(such)g(uni\002cations)g(need)g(to)h(be)
1013 3392 y(handled)c(with)j(care.)p 0 TeXcolorgray 868
3556 a(13.)p 0 TeXcolorgray 40 w Fs(meal\(food\(bread\))o(,dr)o(in)o
(k\(b)o(ee)o(r\))o(\))47 b(=)52 b(meal\(X,Y\))d Fw(uni\002es;)58
b Fs(X)52 b Fw(gets)1013 3655 y(instantiated)40 b(with)i
Fs(food\(bread\))36 b Fw(and)41 b Fs(Y)g Fw(with)g Fs(drink\(beer\))p
Fw(.)p 0 TeXcolorgray 868 3819 a(14.)p 0 TeXcolorgray
40 w Fs(meal\(food\(bread\))o(,X\))34 b(=)41 b(meal\(X,drink\(beer)o
(\)\))35 b Fw(doesn')o(t)k(unify;)g Fs(X)1013 3918 y
Fw(cannot)h(get)h(instantiated)f(twice)i(with)f(dif)n(ferent)e(things.)
806 4095 y Fv(Answer)i(2.2)p 0 TeXcolorgray 909 4217
a Fw(1.)p 0 TeXcolorgray 206 w Fs(?-)g(magic\(house_elf\))o(.)77
b(no)p 0 TeXcolorgray 909 4396 a Fw(2.)p 0 TeXcolorgray
206 w Fs(?-)41 b(wizard\(harry\).)1178 4496 y(no)1013
4675 y Fw(or)1178 4838 y Fs(ERROR:)e(undefined)f(procedure)g(wizard/1)p
0 TeXcolorgray 909 5002 a Fw(3.)p 0 TeXcolorgray 206
w Fs(?-)j(magic\(wizard\).)1178 5102 y(no)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 239 251
TeXDict begin 239 250 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(239)p 0 TeXcolorgray 0 TeXcolorgray 460 1051 a(4.)p
0 TeXcolorgray 207 w Fs(?-)40 b(magic\('McGonagall)o('\))o(.)730
1151 y(yes)p 0 TeXcolorgray 460 1340 a Fw(5.)p 0 TeXcolorgray
207 w Fs(?-)g(magic\(Hermione\).)730 1440 y(Hermione)e(=)j(dobby)e(;)
730 1539 y(Hermione)f(=)j(hermione)d(;)730 1639 y(Hermione)g(=)j
('McGonagall')36 b(;)730 1739 y(Hermione)i(=)j(rita_skeeter)36
b(;)730 1838 y(no)564 2028 y Fw(The)41 b(search)f(tree)h(for)g(the)g
(last)g(query)f(is:)1311 2199 y Fs(?-)g(magic\(Hermione\))1311
2299 y(/)207 b(|)332 b(\\)730 2399 y(Hermione=_G65)77
b(Hermione=_G76)h(Hermione=_G87)1186 2498 y(/)332 b(|)415
b(\\)730 2598 y(?-)40 b(house_elf\(_G65\))c(|)456 b(\\)1145
2698 y(|)373 b(|)498 b(\\)813 2797 y(_G65=dobby)79 b(?-)40
b(wizard\(_G76\))161 b(\\)1145 2897 y(|)373 b(|)581 b(|)1145
2996 y(|)373 b(|)249 b(?-)40 b(witch\(_G87\))979 3096
y(success)204 b(fail)i(/)249 b(|)166 b(\\)1809 3196 y(/)332
b(|)207 b(\\)1435 3295 y(_G87=hermione)161 b(|)249 b(\\)1809
3395 y(|)332 b(|)290 b(\\)1809 3495 y(|)41 b(_G87='McGonag')36
b(\\)1809 3594 y(|)290 b(|)415 b(\\)1809 3694 y(|)290
b(|)83 b(_G87=r_skeeter)1809 3793 y(|)290 b(|)415 b(|)1643
3893 y(success)80 b(success)163 b(success)357 4081 y
Fv(Answer)41 b(2.3)522 4205 y Fs(?-)g(sentence\(W1,W2,W)o(3,)o(W4)o
(,W5)o(\).)522 4305 y(W1)g(=)g(a,)522 4404 y(W2)g(=)g(criminal,)522
4504 y(W3)g(=)g(eats,)522 4604 y(W4)g(=)g(a,)522 4703
y(W5)g(=)g(criminal)d(;)522 4902 y(W1)j(=)g(a,)522 5002
y(W2)g(=)g(criminal,)522 5102 y(W3)g(=)g(eats,)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 240 252
TeXDict begin 240 251 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(240)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(W4)h(=)g(a,)971 1151 y(W5)g(=)g('big)f
(kahuna)f(burger')f(;)971 1350 y(W1)j(=)g(a,)971 1449
y(W2)g(=)g(criminal,)971 1549 y(W3)g(=)g(eats,)971 1649
y(W4)g(=)g(every,)971 1748 y(W5)g(=)g(criminal)d(;)971
1948 y(W1)j(=)g(a,)971 2047 y(W2)g(=)g(criminal,)971
2147 y(W3)g(=)g(eats,)971 2246 y(W4)g(=)g(every,)971
2346 y(W5)g(=)g('big)f(kahuna)f(burger')f(;)971 2545
y(W1)j(=)g(a,)971 2645 y(W2)g(=)g(criminal,)971 2745
y(W3)g(=)g(likes,)971 2844 y(W4)g(=)g(a,)971 2944 y(W5)g(=)g(criminal)d
(;)971 3143 y(W1)j(=)g(a,)971 3243 y(W2)g(=)g(criminal,)971
3342 y(W3)g(=)g(likes,)971 3442 y(W4)g(=)g(a,)971 3542
y(W5)g(=)g('big)f(kahuna)f(burger')f(;)971 3741 y(W1)j(=)g(a,)971
3840 y(W2)g(=)g(criminal,)971 3940 y(W3)g(=)g(likes,)971
4040 y(W4)g(=)g(every,)971 4139 y(W5)g(=)g(criminal)d(;)971
4339 y(W1)j(=)g(a,)971 4438 y(W2)g(=)g(criminal,)971
4538 y(W3)g(=)g(likes,)971 4637 y(W4)g(=)g(every,)971
4737 y(W5)g(=)g('big)f(kahuna)f(burger')f(;)971 4936
y(W1)j(=)g(a,)971 5036 y(W2)g(=)g('big)f(kahuna)f(burger',)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 241 253
TeXDict begin 241 252 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(241)p 0 TeXcolorgray 522 1051 a Fs(W3)41 b(=)g(eats,)522
1151 y(W4)g(=)g(a,)522 1250 y(W5)g(=)g(criminal)d(;)854
1449 y(.)854 1549 y(.)854 1649 y(.)522 1848 y(W1)j(=)g(every,)522
1948 y(W2)g(=)g('big)f(kahuna)f(burger',)522 2047 y(W3)i(=)g(likes,)522
2147 y(W4)g(=)g(every,)522 2246 y(W5)g(=)g('big)f(kahuna)f(burger')f(;)
522 2346 y(no)357 2519 y Fv(Answer)j(2.4)522 2641 y Fs
(crossword\(V1,V2,)o(V3,)o(H1)o(,H2)o(,H)o(3\))o(:-)647
2741 y(word\(V1,_,A,_,B)o(,_,)o(C,)o(_\))o(,)647 2840
y(word\(V2,_,D,_,E)o(,_,)o(F,)o(_\))o(,)647 2940 y(word\(V3,_,G,_,H)o
(,_,)o(I,)o(_\))o(,)647 3039 y(word\(H1,_,A,_,D)o(,_,)o(G,)o(_\))o(,)
647 3139 y(word\(H2,_,B,_,E)o(,_,)o(H,)o(_\))o(,)647
3239 y(word\(H3,_,C,_,F)o(,_,)o(I,)o(_\))o(.)357 3412
y Fv(Answer)g(3.1)357 3534 y Fw(No,)58 b(it')-5 b(s)56
b(not)e(a)i(good)d(idea)i(to)g(reformulate)d Fs(descend/2)g
Fw(in)j(that)g(w)o(ay:)74 b(it)357 3633 y(will)53 b(get)g(in)g(an)g
(in\002nite)g(loop)f(for)g(certain)g(queries.)81 b(F)o(or)53
b(e)o(xample,)h(if)f(one)357 3733 y(queries)45 b Fs(?-)g
(descend\(rose,X\))p Fw(,)40 b(the)45 b(\002rst)i(clause)e(will)h(f)o
(ail,)h(b)n(ut)f(the)g(second)357 3833 y(clause)51 b(applies.)77
b(But)52 b(the)g(second)e(clause)i(tries)g(to)f(\002nd)h(a)f(solution)g
(for)g Fs(?-)357 3932 y(descend\(rose,Z\))o Fw(,)36 b(and)k(so)h(on.)
357 4087 y Fv(Answer)g(3.2)522 4209 y Fs(directlyIn\(irina)o(,na)o(ta)o
(sha)o(\).)522 4309 y(directlyIn\(natas)o(ha,)o(ol)o(ga\))o(.)522
4408 y(directlyIn\(olga,)o(kat)o(ar)o(ina)o(\).)522 4608
y(in\(X,Y\):-)d(directlyIn\(X,Y\).)522 4707 y(in\(X,Y\):-)g
(directlyIn\(X,Z\),)d(in\(Z,Y\).)357 4880 y Fv(Answer)41
b(3.3)522 5002 y Fs(travelFromTo\(X,Y)o(\):-)647 5102
y(directTrain\(X,Y)o(\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 242 254
TeXDict begin 242 253 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(242)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1151 a Fs(travelFromTo\(X,Y)o(\):)o(-)1095
1250 y(directTrain\(X,Z\),)1095 1350 y(travelFromTo\(Z,Y\))o(.)806
1522 y Fv(Answer)h(3.4)971 1644 y Fs(greater_than\(suc)o(c\()o(X\),)o
(0\))o(.)971 1744 y(greater_than\(suc)o(c\()o(X\),)o(su)o(cc\()o(Y\))o
(\):)o(-)36 b(greater_than\(X,)o(Y\).)806 1916 y Fv(Answer)41
b(3.5)971 2038 y Fs(swap\(leaf\(X\),lea)o(f\()o(X\)\))o(.)971
2138 y(swap\(tree\(B1,B2\))o(,t)o(ree)o(\(B)o(2Sw)o(ap)o(pe)o(d,B)o(1S)
o(wap)o(pe)o(d\))o(\):-)1095 2237 y(swap\(B1,B1Swapped)o(\),)1095
2337 y(swap\(B2,B2Swapped)o(\).)806 2509 y Fv(Answer)g(4.1)p
0 TeXcolorgray 909 2631 a Fw(1.)p 0 TeXcolorgray 206
w Fs(?-)g([a,b,c,d])d(=)j([a,[b,c,d]].)1178 2731 y(No)1013
2908 y Fw(\(The)f(\002rst)i(list)g(has)f(four)f(elements;)h(the)g
(second)f(only)g(tw)o(o.\))p 0 TeXcolorgray 909 3069
a(2.)p 0 TeXcolorgray 206 w Fs(?-)h([a,b,c,d])d(=)j([a|[b,c,d]].)1178
3169 y(Yes)p 0 TeXcolorgray 909 3346 a Fw(3.)p 0 TeXcolorgray
206 w Fs(?-)g([a,b,c,d])d(=)j([a,b,[c,d]].)1178 3445
y(No)p 0 TeXcolorgray 909 3622 a Fw(4.)p 0 TeXcolorgray
206 w Fs(?-)g([a,b,c,d])d(=)j([a,b|[c,d]].)1178 3721
y(Yes)p 0 TeXcolorgray 909 3898 a Fw(5.)p 0 TeXcolorgray
206 w Fs(?-)g([a,b,c,d])d(=)j([a,b,c,[d]].)1178 3997
y(No)p 0 TeXcolorgray 909 4174 a Fw(6.)p 0 TeXcolorgray
206 w Fs(?-)g([a,b,c,d])d(=)j([a,b,c|[d]].)1178 4273
y(Yes)p 0 TeXcolorgray 909 4450 a Fw(7.)p 0 TeXcolorgray
206 w Fs(?-)g([a,b,c,d])d(=)j([a,b,c,d,[]].)1178 4550
y(No)p 0 TeXcolorgray 909 4726 a Fw(8.)p 0 TeXcolorgray
206 w Fs(?-)g([a,b,c,d])d(=)j([a,b,c,d|[]].)1178 4826
y(Yes)p 0 TeXcolorgray 909 5002 a Fw(9.)p 0 TeXcolorgray
206 w Fs(?-)g([])g(=)g(_.)1178 5102 y(Yes)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 243 255
TeXDict begin 243 254 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(243)p 0 TeXcolorgray 0 TeXcolorgray 419 1051 a(10.)p
0 TeXcolorgray 206 w Fs(?-)40 b([])h(=)g([_].)730 1151
y(No)564 1311 y Fw(\(The)g(\002rst)g(list)h(is)g(empty;)e(the)h(second)
f(list)i(has)g(one)e(element.\))p 0 TeXcolorgray 419
1463 a(11.)p 0 TeXcolorgray 206 w Fs(?-)g([])h(=)g([_|[]].)730
1562 y(No)564 1723 y Fw(\(The)g(\002rst)g(list)h(is)g(empty;)e(the)h
(second)f(list)i(has)g(one)e(element.\))357 1869 y Fv(Answer)h(4.2)p
0 TeXcolorgray 460 1991 a Fw(1.)p 0 TeXcolorgray 41 w
Fs([1|[2,3,4]])c Fw(is)42 b(correct.)j(The)40 b(list)i(has)g(four)d
(elements.)p 0 TeXcolorgray 460 2142 a(2.)p 0 TeXcolorgray
41 w Fs([1,2,3|[]])f Fw(is)k(correct.)i(The)d(list)h(has)f(three)g
(elements.)p 0 TeXcolorgray 460 2294 a(3.)p 0 TeXcolorgray
41 w Fs([1|2,3,4])e Fw(is)j(not)f(correct.)47 b(The)41
b(tail,)h(that)g(is,)g(what')-5 b(s)42 b(right)f(of)g
Fs(|)p Fw(,)g(has)564 2393 y(to)g(be)g(a)h(list)g(\(as)f(in)g(the)g
(\002rst)h(e)o(xample\))d(b)n(ut)i(it')-5 b(s)42 b(not.)p
0 TeXcolorgray 460 2545 a(4.)p 0 TeXcolorgray 41 w Fs([1|[2|[3|[4]]]])
36 b Fw(is)41 b(correct.)k(The)c(list)h(has)f(four)f(elements.)p
0 TeXcolorgray 460 2696 a(5.)p 0 TeXcolorgray 41 w Fs([1,2,3,4|[]])d
Fw(is)42 b(correct.)i(The)d(list)h(has)f(four)f(elements.)p
0 TeXcolorgray 460 2848 a(6.)p 0 TeXcolorgray 41 w Fs([[]|[]])k
Fw(is)j(correct.)59 b(The)46 b(list)h(has)f(one)f(element,)i(namely)e
(the)h(empty)564 2947 y(list.)p 0 TeXcolorgray 460 3099
a(7.)p 0 TeXcolorgray 41 w Fs([[1,2]|4])38 b Fw(is)k(not)f(correct.)j
(The)d(tail)g(is)h(not)f(a)g(list.)p 0 TeXcolorgray 460
3250 a(8.)p 0 TeXcolorgray 41 w Fs([[1,2],[3,4]|[5,6)o(,7)o(]])35
b Fw(is)42 b(correct.)j(The)40 b(list)i(has)f(\002)n(v)o(e)g(elements.)
357 3396 y Fv(Answer)g(4.3)522 3518 y Fs(second\(X,[_,X|_])o(\).)357
3664 y Fv(Answer)g(4.4)522 3786 y Fs(swap12\([H1,H2|T])o(,[H)o(2,)o
(H1|)o(T])o(\).)357 3932 y Fv(Answer)g(4.5)357 4054 y
Fw(The)j(base)i(clause:)54 b(the)45 b(input)f(list)i(is)g(empty)-5
b(.)57 b(There)45 b(is)h(nothing)d(to)i(translate,)357
4154 y(so)c(the)g(output)f(list)i(is)g(empty)e(as)h(well.)522
4300 y Fs(listtran\([],[]\).)451 4446 y Fw(The)j(recursi)n(v)o(e)e
(clause:)52 b(we)44 b(translate)g(the)g(head)f Fs(G)h
Fw(of)f(the)h(input)f(list)i(using)357 4546 y(the)52
b(predicate)f Fs(tran/2)p Fw(.)77 b(The)52 b(result)g(is)h
Fs(E)f Fw(and)f(becomes)g(the)i(head)e(of)h(the)357 4645
y(output)f(list.)81 b(Then)51 b(we)i(recursi)n(v)o(ely)d(translate)i
(the)h(rest)g(of)f(the)g(input.)79 b(The)357 4745 y(result)41
b(becomes)f(the)h(rest)g(of)g(the)g(output.)522 4891
y Fs(listtran\([G|GT],)o([E|)o(ET)o(]\):)o(-)647 4991
y(tran\(G,E\),)647 5090 y(listtran\(GT,ET\))o(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 244 256
TeXDict begin 244 255 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(244)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fv(Answer)h(4.6)806 1173 y
Fw(The)e(base)h(clause:)45 b(the)40 b(input)f(list)i(is)g(empty)-5
b(.)44 b(So)c(there)f(is)i(nothing)d(to)i(write)g(to)806
1273 y(the)g(output)g(list.)47 b(So)41 b(that)g(is)h(empty)e(as)i
(well.)971 1442 y Fs(twice\([],[]\).)900 1612 y Fw(The)53
b(recursi)n(v)o(e)e(clause:)71 b(the)53 b(\002rst)h(tw)o(o)f(elements)g
(of)g(the)g(output)f(list)j(are)806 1711 y(both)47 b(identical)g(to)h
(the)h(head)e(of)h(the)g(input)f(list.)68 b(The)48 b(recursi)n(v)o(e)e
(call)j(simply)806 1811 y(produces)39 b(the)i(tail)g(of)g(the)g(output)
f(list)i(from)e(the)h(tail)g(of)g(the)g(input)f(list.)971
1980 y Fs(twice\([H|TIn],[H)o(,H)o(|TO)o(ut)o(]\):)o(-)1095
2080 y(twice\(TIn,)e(TOut\).)806 2250 y Fv(Answer)j(4.7)971
2372 y Fs(?-)g(member\(a,[c,b,a)o(,y])o(\).)1427 2471
y(|)971 2571 y(?-)g(member\(a,[b,a,y)o(]\))1427 2671
y(|)1012 2770 y(?-)g(member\(a,[a,y]\))1427 2870 y(|)1303
2969 y(success)971 3139 y(?-)g(member\(x,[a,b,c)o(]\).)1344
3239 y(|)971 3338 y(?-)g(member\(x,[b,c]\))o(.)1344 3438
y(|)1012 3537 y(?-)g(member\(x,[c]\).)1344 3637 y(|)1054
3737 y(?-)g(member\(x,[]\).)1344 3836 y(|)1303 3936 y(fail)971
4105 y(?-)g(member\(X,[a,b,c)o(]\).)1095 4205 y(/)415
b(\\)971 4305 y(X=a)497 b(X=_G65)1054 4404 y(|)h(|)971
4504 y(success)122 b(?-member\(_G65,[)o(b,)o(c]\))o(.)1386
4604 y(/)705 b(\\)1178 4703 y(_G65=b)164 b(?-)41 b(member\(_G65,[c])o
(\))1386 4803 y(|)747 b(|)1220 4902 y(success)454 b(_G65=c)2175
5002 y(|)2050 5102 y(success)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 245 257
TeXDict begin 245 256 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(245)p 0 TeXcolorgray 357 1051 a Fv(Answer)41 b(5.1)p
0 TeXcolorgray 460 1177 a Fw(1.)p 0 TeXcolorgray 41 w(Prolog)56
b(answers:)78 b Fs(X)57 b(=)g(3*4)p Fw(.)93 b(V)-9 b(ariable)56
b Fs(X)h Fw(is)h(instantiated)f(with)g(the)564 1277 y(comple)o(x)39
b(term)i Fs(3*4)p Fw(.)p 0 TeXcolorgray 460 1457 a(2.)p
0 TeXcolorgray 41 w(Prolog)f(answers:)46 b Fs(X)41 b(=)g(12)p
Fw(.)p 0 TeXcolorgray 460 1638 a(3.)p 0 TeXcolorgray
41 w(Prolog)30 b(answers:)42 b(ERR)m(OR:)32 b(Ar)o(guments)d(are)i(not)
g(suf)n(\002ciently)g(instantiated.)p 0 TeXcolorgray
460 1818 a(4.)p 0 TeXcolorgray 41 w(Prolog)40 b(answers:)46
b Fs(X)41 b(=)g(Y)p Fw(.)p 0 TeXcolorgray 460 1998 a(5.)p
0 TeXcolorgray 41 w(Prolog)f(answers:)46 b(yes.)p 0 TeXcolorgray
460 2178 a(6.)p 0 TeXcolorgray 41 w(Prolog)40 b(answers:)46
b(yes.)p 0 TeXcolorgray 460 2359 a(7.)p 0 TeXcolorgray
41 w(Prolog)30 b(answers:)42 b(ERR)m(OR:)32 b(Ar)o(guments)d(are)i(not)
g(suf)n(\002ciently)g(instantiated.)p 0 TeXcolorgray
460 2539 a(8.)p 0 TeXcolorgray 41 w(Prolog)40 b(answers:)46
b Fs(X)41 b(=)g(3)p Fw(.)p 0 TeXcolorgray 460 2719 a(9.)p
0 TeXcolorgray 41 w(Prolog)k(answers:)55 b(no.)k(Prolog)44
b(e)n(v)n(aluates)h(the)h(arithmetic)f(e)o(xpression)f(to)564
2819 y(the)g(right)e(of)i Fs(is/2)p Fw(.)52 b(Then)42
b(it)i(tries)g(to)g(unify)e(the)h(result)h(with)g(the)f(term)564
2919 y(to)c(the)g(left)g(of)g Fs(is/2)p Fw(.)k(This)c(f)o(ails)h(as)f
(the)g(number)e Fs(3)i Fw(does)g(not)f(unify)g(the)564
3018 y(comple)o(x)h(term)i Fs(1+2)p Fw(.)p 0 TeXcolorgray
419 3198 a(10.)p 0 TeXcolorgray 40 w(Prolog)f(answers:)46
b Fs(X)41 b(=)g(3)p Fw(.)p 0 TeXcolorgray 419 3379 a(11.)p
0 TeXcolorgray 40 w(Prolog)48 b(answers:)63 b(yes.)70
b Fs(3+2)49 b Fw(and)f Fs(+\(3,2\))f Fw(are)j(tw)o(o)f(w)o(ays)g(of)g
(writing)564 3478 y(the)41 b(same)g(term.)p 0 TeXcolorgray
419 3659 a(12.)p 0 TeXcolorgray 40 w(Prolog)f(answers:)46
b(yes.)p 0 TeXcolorgray 419 3839 a(13.)p 0 TeXcolorgray
40 w(Prolog)40 b(answers:)46 b(yes.)p 0 TeXcolorgray
419 4019 a(14.)p 0 TeXcolorgray 40 w(Prolog)40 b(answers:)46
b(yes.)p 0 TeXcolorgray 419 4200 a(15.)p 0 TeXcolorgray
40 w(Prolog)40 b(answers:)46 b(no.)p 0 TeXcolorgray 419
4380 a(16.)p 0 TeXcolorgray 40 w(Prolog)40 b(answers:)46
b(yes.)357 4577 y Fv(Answer)41 b(5.2)522 4703 y Fs(increment\(X,Y\):-)
647 4803 y(Y)g(is)f(X)h(+)h(1.)522 5002 y(sum\(X,Y,Z\):-)647
5102 y(Z)f(is)f(X)h(+)h(Y.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 246 258
TeXDict begin 246 257 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(246)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fv(Answer)h(5.3)971 1173 y
Fs(addone\([],[]\).)971 1372 y(addone\([H|T],[H1)o(|T)o(1]\))o(:-)1095
1472 y(H1)g(is)g(H)g(+)g(1,)1095 1571 y(addone\(T,T1\).)806
1725 y Fv(Answer)g(6.1)971 1847 y Fs(doubled\(L\):-)1095
1947 y(append\(L1,L1,L\).)806 2100 y Fv(Answer)g(6.2)806
2222 y Fw(A)g(solution)f(using)g Fs(rev/2)p Fw(:)971
2376 y Fs(palindrome\(L\):-)1095 2476 y(rev\(L,L\).)806
2629 y Fw(A)h(solution)f(that)h(is)h(not)f(using)f(a)h(re)n(v)o(erse)f
(predicate:)971 2783 y Fs(palindrome\(L\):-)1095 2883
y(check_palindrome\()o(L,[)o(]\))o(.)971 3082 y(check_palindrome)o(\(L)
o(,L\))o(.)971 3281 y(check_palindrome)o(\([)o(_|L)o(],)o(L\).)971
3480 y(check_palindrome)o(\([)o(H|T)o(],)o(LPa)o(l\))o(:-)1095
3580 y(check_palindrome\()o(T,[)o(H|)o(LP)o(al])o(\).)806
3734 y Fv(Answer)h(6.3)971 3856 y Fs(toptail\([H|TInLi)o(st)o(],O)o(ut)
o(Lis)o(t\))o(:-)1095 3955 y(append\(OutList,[_)o(],T)o(In)o(Li)o(st\))
o(.)806 4109 y Fv(Answer)g(6.4)806 4231 y Fw(A)g(solution)f(using)g
Fs(reverse/2)p Fw(:)971 4384 y Fs(last\(L,X\):-)1095
4484 y(reverse\(L,[X|_]\).)806 4638 y Fw(An)g(alternati)n(v)o(e)g
(solution:)971 4791 y Fs(last\([X],X\).)971 4991 y(last\([_|L],X\):-)
1095 5090 y(last\(L,X\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 247 259
TeXDict begin 247 258 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(247)p 0 TeXcolorgray 357 1051 a Fv(Answer)41 b(6.5)357
1173 y Fw(A)g(solution)f(using)h Fs(append/3)p Fw(:)522
1333 y Fs(swapfl\([H1|T1],[)o(H2|)o(T2)o(]\):)o(-)647
1432 y(append\(Middle,[)o(H2])o(,T)o(1\))o(,)647 1532
y(append\(Middle,[)o(H1])o(,T)o(2\))o(.)357 1692 y Fw(An)g(alternati)n
(v)o(e)e(solution:)522 1867 y Fs(swapfl\([First,La)o(st])o(,[)o(Las)o
(t,)o(Fi)o(rst)o(]\))o(.)522 2066 y(swapfl\([First,Ne)o(xt|)o(L1)o(],[)
o(La)o(st)o(,Ne)o(xt)o(|L2)o(]\))o(:-)647 2166 y(swapfl\([First|L)o
(1],)o([L)o(as)o(t|L)o(2])o(\).)357 2340 y Fv(Answer)i(6.6)357
2463 y Fw(In)d(this)h(solution)f(the)h(street)g(is)g(represented)e(as)j
(list)f(of)g(three)f(houses.)44 b(A)39 b(house)357 2562
y(is)k(represented)d(as)i(a)h(3-place)e(\(colour)m(,)f(nationality)-5
b(,)40 b(pet\))i(comple)o(x)e(term.)48 b(W)m(ith)357
2662 y(the)d(help)f(of)h Fs(member/2)d Fw(and)j Fs(sublist/2)d
Fw(we)j(check)f(the)i(constraints)e(of)h(the)357 2761
y(puzzle.)522 2936 y Fs(zebra\(N\))38 b(:-)564 3036 y(Street)h(=)i
([House1,House2,)o(Hou)o(se)o(3],)564 3136 y(member\(house\(re)o(d,_)o
(,_)o(\),)o(Str)o(ee)o(t\),)564 3235 y(member\(house\(bl)o(ue,)o(_,)o
(_\))o(,St)o(re)o(et\))o(,)564 3335 y(member\(house\(gr)o(een)o(,_)o
(,_)o(\),S)o(tr)o(eet)o(\),)564 3434 y(member\(house\(re)o(d,e)o(ng)o
(li)o(sh,)o(_\))o(,St)o(re)o(et)o(\),)564 3534 y(member\(house\(_,)o
(spa)o(ni)o(sh)o(,ja)o(gu)o(ar\))o(,S)o(tr)o(eet)o(\),)564
3634 y(sublist\([house\()o(_,_)o(,s)o(na)o(il\))o(,h)o(ous)o(e\()o(_,)o
(jap)o(an)o(ese)o(,_)o(\)],)o(St)o(re)o(et\))o(,)564
3733 y(sublist\([house\()o(blu)o(e,)o(_,)o(_\),)o(ho)o(use)o(\(_)o(,_)o
(,sn)o(ai)o(l\)])o(,S)o(tre)o(et)o(\),)564 3833 y(member\(house\(_,)o
(N,z)o(eb)o(ra)o(\),S)o(tr)o(eet)o(\).)357 4008 y Fv(Answer)g(7.1)357
4130 y Fw(The)c(internal)g(representation)f(of)i(the)f(DCG)i(rules)f
(that)g(Prolog)f(will)h(w)o(ork)f(with:)522 4305 y Fs(s\(A,B\))i(:-)i
(foo\(A,C\),)d(bar\(C,D\),)f(wiggle\(D,B\).)522 4404
y(foo\([choo|A],A\).)522 4504 y(foo\(A,B\))h(:-)j(foo\(A,C\),)d
(foo\(C,B\).)522 4604 y(bar\(A,B\))g(:-)j(mar\(A,C\),)d(zar\(C,B\).)522
4703 y(mar\(A,B\))g(:-)j(me\(A,C\),)d(my\(C,B\).)522
4803 y(me\([i|A],A\).)522 4902 y(my\([am|A],A\).)522
5002 y(zar\(A,B\))g(:-)j(blar\(A,C\),)c(car\(C,B\),)522
5102 y(blar\([a|A],A\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 248 260
TeXDict begin 248 259 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(248)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(car\([train|A],A\))o(.)971
1151 y(wiggle\([toot|A],)o(A\))o(.)971 1250 y(wiggle\(A,B\))d(:-)k
(wiggle\(A,C\),)36 b(wiggle\(C,B\).)900 1429 y Fw(The)41
b(\002rst)g(three)g(sentences)f(that)h(Prolog)f(will)i(generate:)p
0 TeXcolorgray 909 1593 a(1.)p 0 TeXcolorgray 41 w(choo)e(i)i(am)f(a)g
(train)g(toot)p 0 TeXcolorgray 909 1758 a(2.)p 0 TeXcolorgray
41 w(choo)f(i)i(am)f(a)g(train)g(toot)f(toot)p 0 TeXcolorgray
909 1922 a(3.)p 0 TeXcolorgray 41 w(choo)g(i)i(am)f(a)g(train)g(toot)f
(toot)h(toot)806 2086 y Fv(Answer)g(7.2)971 2208 y Fs(s)g(-->)f([a,b].)
971 2307 y(s)h(-->)f(a,)h(s,)g(b.)971 2407 y(a)g(-->)f([a].)971
2507 y(b)h(-->)f([b].)806 2686 y Fv(Answer)h(7.3)971
2808 y Fs(s)g(-->)f([].)971 2907 y(s)h(-->)f(a,)h(s,)g(b.)971
3007 y(a)g(-->)f([a].)971 3107 y(b)h(-->)f([b,b].)806
3286 y Fv(Answer)h(8.1)971 3408 y Fs(s)g(-->)f(np\(Num\),vp\(Num\).)971
3607 y(np\(Num\))e(-->)j(det\(Num\),n\(Num\).)971 3807
y(vp\(Num\))d(-->)j(v\(Num\),np\(_\).)971 3906 y(vp\(Num\))d(-->)j
(v\(Num\).)971 4105 y(det\(_\))e(-->)h([the].)971 4205
y(det\(sg\))e(-->)j([a].)971 4404 y(n\(sg\))e(-->)i([woman].)971
4504 y(n\(pl\))e(-->)i([women].)971 4604 y(n\(sg\))e(-->)i([man].)971
4703 y(n\(pl\))e(-->)i([men].)971 4803 y(n\(sg\))e(-->)i([apple].)971
4902 y(n\(pl\))e(-->)i([apples].)971 5002 y(n\(sg\))e(-->)i([pear].)971
5102 y(n\(pl\))e(-->)i([pears].)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 249 261
TeXDict begin 249 260 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(249)p 0 TeXcolorgray 522 1151 a Fs(v\(sg\))39 b(-->)i([eats].)522
1250 y(v\(pl\))e(-->)i([eat].)357 1408 y Fv(Answer)g(8.2)522
1530 y Fs(kanga\(A,B,C,D,E\))o(:-)647 1629 y(roo\(A,B,D,F\),)647
1729 y(jumps\(C,C,F,G\),)647 1829 y(marsupial\(A,B,C)o(\),)647
1928 y(E=G.)357 2086 y Fv(Answer)g(9.1)p 0 TeXcolorgray
460 2208 a Fw(1.)p 0 TeXcolorgray 41 w(The)g(query)e
Fs(?-)i(12)g(is)f(2*6.)45 b Fw(succeeds.)p 0 TeXcolorgray
460 2364 a(2.)p 0 TeXcolorgray 41 w(The)c(query)e Fs(?-)i(14)g(=\\=)f
(2*6.)g Fw(succeeds.)p 0 TeXcolorgray 460 2520 a(3.)p
0 TeXcolorgray 41 w(The)h(query)e Fs(?-)i(14)g(=)g(2*7.)k
Fw(f)o(ails.)p 0 TeXcolorgray 460 2676 a(4.)p 0 TeXcolorgray
41 w(The)c(query)e Fs(?-)i(14)g(==)f(2*7.)45 b Fw(f)o(ails.)p
0 TeXcolorgray 460 2832 a(5.)p 0 TeXcolorgray 41 w(The)c(query)e
Fs(?-)i(14)g(\\==)f(2*7.)g Fw(succeeds.)p 0 TeXcolorgray
460 2988 a(6.)p 0 TeXcolorgray 41 w(The)h(query)e Fs(?-)i(14)g(=:=)f
(2*7.)45 b Fw(succeeds.)p 0 TeXcolorgray 460 3144 a(7.)p
0 TeXcolorgray 41 w(The)c(query)e Fs(?-)i([1,2,3|[d,e]])36
b(==)41 b([1,2,3,d,e].)g Fw(succeeds.)p 0 TeXcolorgray
460 3300 a(8.)p 0 TeXcolorgray 41 w(The)g(query)e Fs(?-)i(2+3)f(==)h
(3+2.)k Fw(f)o(ails.)p 0 TeXcolorgray 460 3456 a(9.)p
0 TeXcolorgray 41 w(The)c(query)e Fs(?-)i(2+3)f(=:=)h(3+2.)j
Fw(succeeds.)p 0 TeXcolorgray 419 3612 a(10.)p 0 TeXcolorgray
40 w(The)d(query)e Fs(?-)i(7-2)f(=\\=)h(9-2.)e Fw(succeeds.)p
0 TeXcolorgray 419 3768 a(11.)p 0 TeXcolorgray 40 w(The)i(query)e
Fs(?-)i(p)g(==)g('p'.)f Fw(succeeds.)p 0 TeXcolorgray
419 3924 a(12.)p 0 TeXcolorgray 40 w(The)h(query)e Fs(?-)i(p)g(=\\=)f
('p'.)g Fw(yields)h(an)g(error)-5 b(.)p 0 TeXcolorgray
419 4080 a(13.)p 0 TeXcolorgray 40 w(The)41 b(query)e
Fs(?-)i(vincent)e(==)h(VAR.)g Fw(f)o(ails.)p 0 TeXcolorgray
419 4236 a(14.)p 0 TeXcolorgray 40 w(The)h(query)e Fs(?-)i
(vincent=VAR,)c(VAR==vincent.)k Fw(succeeds.)357 4394
y Fv(Answer)g(9.2)p 0 TeXcolorgray 460 4516 a Fw(1.)p
0 TeXcolorgray 41 w(The)g(query)e Fs(?-)i(.\(a,.\(b,.\(c,[]\)\))o(\))36
b(=)41 b([a,b,c].)i Fw(succeeds.)p 0 TeXcolorgray 460
4672 a(2.)p 0 TeXcolorgray 41 w(The)e(query)e Fs(?-)i
(.\(a,.\(b,.\(c,[]\)\))o(\))36 b(=)41 b([a,b|[c]].)h
Fw(succeeds.)p 0 TeXcolorgray 460 4828 a(3.)p 0 TeXcolorgray
41 w(The)47 b(query)f Fs(?-)h(.\(.\(a,[]\),.\(.\(b,)o([])o(\),.)o(\(.)o
(\(c)o(,[])o(\),)o([]\))o(\)\))o(=X)o(.)42 b Fw(suc-)564
4928 y(ceeds)f(and)g(and)f(X)h(=)h([[a],[b],[c]].)p 0
TeXcolorgray 460 5084 a(4.)p 0 TeXcolorgray 41 w(The)f(query)e
Fs(?-)i(.\(a,.\(b,.\(.\(c,[])o(\),[)o(]\))o(\)\))35 b(=)41
b([a,b|[c]].)i Fw(f)o(ails.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 250 262
TeXDict begin 250 261 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(250)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fv(Answer)h(9.3)971 1173 y
Fs(termtype\(Term,va)o(ri)o(abl)o(e\))o(:-)1095 1273
y(var\(Term\).)971 1472 y(termtype\(Term,at)o(om)o(\):-)1095
1571 y(atom\(Term\).)971 1771 y(termtype\(Term,nu)o(mb)o(er\))o(:-)1095
1870 y(number\(Term\).)971 2070 y(termtype\(Term,co)o(ns)o(tan)o(t\))o
(:-)1095 2169 y(atomic\(Term\).)971 2368 y(termtype\(Term,si)o(mp)o
(le_)o(te)o(rm\))o(:-)1095 2468 y(atomic\(Term\).)971
2667 y(termtype\(Term,si)o(mp)o(le_)o(te)o(rm\))o(:-)1095
2767 y(var\(Term\).)971 2966 y(termtype\(Term,co)o(mp)o(lex)o(_t)o(erm)
o(\):)o(-)1095 3066 y(nonvar\(Term\),)1095 3165 y(functor\(Term,_,Ar)o
(ity)o(\),)1095 3265 y(Arity)f(>)h(0.)971 3464 y(termtype\(Term,te)o
(rm)o(\):-)1095 3564 y(termtype\(Term,sim)o(ple)o(_t)o(er)o(m\).)971
3763 y(termtype\(Term,te)o(rm)o(\):-)1095 3863 y(termtype\(Term,com)o
(ple)o(x_)o(te)o(rm\))o(.)806 4029 y Fv(Answer)g(9.4)806
4152 y Fw(First,)g(a)g(solution)f(that)i(doesn')o(t)d(use)i(uni)n(v:)
971 4305 y Fs(groundterm\(Term\))o(:-)1095 4404 y(atomic\(Term\).)971
4604 y(groundterm\(Term\))o(:-)1095 4703 y(nonvar\(Term\),)1095
4803 y(functor\(Term,_,Ar)o(ity)o(\),)1095 4902 y(groundterms\(Term,)o
(Ari)o(ty)o(\).)971 5102 y(groundterms\(_,0\))o(.)p 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 251 263
TeXDict begin 251 262 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(251)p 0 TeXcolorgray 522 1151 a Fs(groundterms\(Comp)o(lex)o(Te)o
(rm,)o(Ar)o(g\))o(:-)647 1250 y(Arg)40 b(>)h(0,)647 1350
y(arg\(Arg,Complex)o(Ter)o(m,)o(Te)o(rm\))o(,)647 1449
y(groundterm\(Term)o(\),)647 1549 y(NextArg)d(is)j(Arg)f(-)h(1,)647
1649 y(groundterms\(Com)o(ple)o(xT)o(er)o(m,N)o(ex)o(tAr)o(g\))o(.)451
1813 y Fw(And)g(here)f(is)i(a)f(solution)f(that)h(does)g(use)g(uni)n
(v:)522 1977 y Fs(groundterm\(Term\))35 b(:-)854 2077
y(atomic\(Term\).)522 2176 y(groundterm\(Term\))g(:-)854
2276 y(nonvar\(Term\),)854 2375 y(Term)40 b(=..)g([_|Args],)854
2475 y(groundterms\(Args\))o(.)522 2674 y(groundterms\([]\).)522
2774 y(groundterms\([H|T)o(]\))35 b(:-)854 2874 y(groundterm\(H\),)854
2973 y(groundterms\(T\).)357 3137 y Fv(Answer)41 b(9.5)357
3259 y Fw(Gi)n(v)o(en)f(these)h(operator)e(de\002nitions,)p
0 TeXcolorgray 460 3424 a(1.)p 0 TeXcolorgray 41 w Fs(X)i(is)p
742 3424 27 4 v 31 w(a)g(witch)e Fw(corresponds)g(to)i(the)g(Prolog)f
(term)h Fs(is)p 2354 3424 V 30 w(a\(X,witch\))p Fw(;)p
0 TeXcolorgray 460 3589 a(2.)p 0 TeXcolorgray 41 w Fs(harry)46
b(and)g(ron)h(and)f(hermione)e(are)j(friends)e Fw(corresponds)f(to)k
(the)564 3688 y(Prolog)40 b(term)h Fs(are\(and\(harry,an)o(d\()o(ron)o
(,h)o(erm)o(io)o(ne)o(\)\),)o(fr)o(ien)o(ds)o(\))p Fw(;)p
0 TeXcolorgray 460 3853 a(3.)p 0 TeXcolorgray 41 w Fs(harry)f(is)p
917 3853 V 30 w(a)h(wizard)e(and)h(likes)f(quidditch)f
Fw(is)j(not)g(a)g(Prolog)f(term;)p 0 TeXcolorgray 460
4019 a(4.)p 0 TeXcolorgray 41 w Fs(dumbledore)d(is)p
1134 4019 V 31 w(a)k(famous)d(wizard)h Fw(corresponds)f(to)j(the)f
(Prolog)g(term)564 4118 y Fs(isa)p 701 4118 V 30 w(a\(dumbledore,famo)o
(us\()o(wi)o(za)o(rd\))o(\))p Fw(.)357 4282 y Fv(Answer)h(10.1)522
4404 y Fs(?-)g(p\(X\).)522 4504 y(X)g(=)g(1)g(;)522 4604
y(X)g(=)g(2)g(;)522 4703 y(No)522 4902 y(?-)g(p\(X\),)e(p\(Y\).)522
5002 y(X)i(=)g(1)522 5102 y(Y)g(=)g(1)g(;)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 252 264
TeXDict begin 252 263 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(252)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1051 a Fs(X)h(=)g(1)971 1151 y(Y)g(=)g(2)g(;)971
1250 y(X)g(=)g(2)971 1350 y(Y)g(=)g(1)g(;)971 1449 y(X)g(=)g(2)971
1549 y(Y)g(=)g(2)g(;)971 1649 y(No)971 1848 y(?-)g(p\(X\),)e(!,)i
(p\(Y\).)971 1948 y(X)g(=)g(1)971 2047 y(Y)g(=)g(1)g(;)971
2147 y(X)g(=)g(1)971 2246 y(Y)g(=)g(2)g(;)971 2346 y(No)806
2532 y Fv(Answer)g(10.2)806 2655 y Fw(The)64 b(original)f(program)g
(tells)j(whether)d(a)j(number)d(is)i(positi)n(v)o(e,)70
b(zero,)g(or)806 2755 y(ne)o(gati)n(v)o(e.)42 b(It)37
b(does)f(that)h(using)f(three)h(clauses.)44 b(But)37
b(if)g(one)g(of)f(the)h(three)f(clauses)806 2854 y(succeeds)41
b(in)h(solving)f(a)h(goal,)f(the)h(others)f(do)g(not)g(apply)-5
b(.)47 b(Hence)41 b(we)i(can)e(add)806 2954 y(green)e(cuts:)971
3140 y Fs(class\(Number,pos)o(it)o(ive)o(\):)o(-)c(Number)k(>)j(0,)e
(!.)971 3239 y(class\(0,zero\):-)35 b(!.)971 3339 y(class\(Number,neg)o
(at)o(ive)o(\):)o(-)g(Number)k(<)j(0,)e(!.)806 3525 y
Fv(Answer)h(10.3)806 3648 y Fw(A)g(v)o(ersion)f(of)g
Fs(split/3)f Fw(without)h(using)h(the)g(cut:)971 3833
y Fs(split\([],[],[]\).)971 4033 y(split\([Number|L])o(,[)o(X|P)o(os)o
(],N)o(eg)o(\):)o(-)1095 4132 y(Number)e(>=)i(0,)1095
4232 y(split\(L,Pos,Neg\).)971 4431 y(split\([Number|L])o(,P)o(os,)o
([X)o(|Ne)o(g])o(\):)o(-)1095 4531 y(Number)e(<)j(0,)1095
4630 y(split\(L,Pos,Neg\).)900 4816 y Fw(A)f(v)o(ersion)f(of)h
Fs(split/3)d Fw(using)j(the)g(cut:)971 5002 y Fs(split\([],[],[]\):)o
(-)35 b(!.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 253 265
TeXDict begin 253 264 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(253)p 0 TeXcolorgray 522 1051 a Fs(split\([Number|L])o(,[X)o(|P)o
(os])o(,N)o(eg)o(\):-)647 1151 y(Number)39 b(>)i(0,)f(!,)647
1250 y(split\(L,Pos,Neg)o(\).)522 1449 y(split\([Number|L])o(,[X)o(|P)o
(os])o(,N)o(eg)o(\):-)647 1549 y(Number)f(=)i(0,)f(!,)647
1649 y(split\(L,Pos,Neg)o(\).)522 1848 y(split\([Number|L])o(,Po)o(s,)o
([X|)o(Ne)o(g])o(\):-)647 1948 y(Number)f(<)i(0,)f(!,)647
2047 y(split\(L,Pos,Neg)o(\).)357 2220 y Fv(Answer)h(10.4)522
2342 y Fs(directTrain\(saar)o(bru)o(ec)o(ken)o(,d)o(ud)o(wei)o(le)o
(r\).)522 2442 y(directTrain\(forb)o(ach)o(,s)o(aar)o(br)o(ue)o(cke)o
(n\))o(.)522 2541 y(directTrain\(frey)o(min)o(g,)o(for)o(ba)o(ch)o(\).)
522 2641 y(directTrain\(stAv)o(old)o(,f)o(rey)o(mi)o(ng)o(\).)522
2741 y(directTrain\(fahl)o(que)o(mo)o(nt,)o(st)o(Av)o(old)o(\).)522
2840 y(directTrain\(metz)o(,fa)o(hl)o(que)o(mo)o(nt)o(\).)522
2940 y(directTrain\(nanc)o(y,m)o(et)o(z\).)522 3139 y
(trainConnection\()o(A,B)o(\):)o(-)35 b(directTrain\(A,B\).)522
3239 y(trainConnection\()o(A,B)o(\):)o(-)g(directTrain\(B,A\).)522
3438 y(route\(A,B,Route\))o(:-)647 3538 y(route\(B,A,[B],R)o(out)o(e\))
o(.)522 3737 y(route\(A,B,Route,)o([B|)o(Ro)o(ute)o(]\))o(:-)647
3837 y(trainConnection)o(\(A,)o(B\))o(,)647 3936 y(\\+)40
b(member\(B,Route\).)522 4136 y(route\(A,C,SoFar,)o(Rou)o(te)o(\):-)647
4235 y(trainConnection)o(\(A,)o(B\))o(,)647 4335 y(\\+)g
(member\(B,SoFar\),)647 4434 y(route\(B,C,[B|So)o(Far)o(],)o(Ro)o(ute)o
(\).)357 4607 y Fv(Answer)h(11.1)357 4729 y Fw(After)f(the)h(\002rst)h
(query)e(the)h(database)f(contains:)522 4902 y Fs(q\(foo,blug\).)522
5002 y(q\(a,b\).)522 5102 y(q\(1,2\).)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 254 266
TeXDict begin 254 265 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(254)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a(After)g(the)h(second)f(command)f(the)i
(database)f(contains:)971 1229 y Fs(q\(foo,blug\).)971
1329 y(q\(a,b\).)971 1429 y(p\(X\):-)f(h\(X\).)806 1607
y Fw(After)h(the)h(third)f(command)f(the)i(database)g(contains:)971
1786 y Fs(p\(X\):-)e(h\(X\).)806 1964 y Fv(Answer)i(11.2)p
0 TeXcolorgray 909 2086 a Fw(1.)p 0 TeXcolorgray 206
w Fs(List)f(=)h([blug,blag,blig])35 b(;)1178 2186 y(No)p
0 TeXcolorgray 909 2366 a Fw(2.)p 0 TeXcolorgray 206
w Fs(List)40 b(=)h([blob,dang])c(;)1178 2466 y(No)p 0
TeXcolorgray 909 2646 a Fw(3.)p 0 TeXcolorgray 206 w
Fs(List)j(=)h([blob,blob,blob,b)o(laf)o(,d)o(an)o(g,d)o(an)o(g,f)o(la)o
(b])35 b(;)1178 2746 y(No)p 0 TeXcolorgray 909 2926 a
Fw(4.)p 0 TeXcolorgray 206 w Fs(List)40 b(=)h([blob])e(;)1178
3025 y(Y)j(=)f(blag)1178 3125 y(List)f(=)h([blob,blaf])c(;)1178
3225 y(Y)42 b(=)f(dong)1178 3324 y(List)f(=)h([dang])e(;)1178
3424 y(Y)j(=)f(blug)1178 3523 y(List)f(=)h([blob,dang])c(;)1178
3623 y(Y)42 b(=)f(blob)1178 3723 y(List)f(=)h([flab])e(;)1178
3822 y(No)p 0 TeXcolorgray 909 4003 a Fw(5.)p 0 TeXcolorgray
206 w Fs(List)h(=)h([blaf,blob,dang,f)o(lab)o(])35 b(;)1178
4102 y(No)806 4282 y Fv(Answer)41 b(11.3)971 4404 y Fs(:-)g(dynamic)d
(sigmares/2.)971 4604 y(sigmares\(0,0\).)971 4803 y(sigma\(Number,Sum)o
(\):)o(-)1095 4902 y(sigmares\(Number,S)o(um\))o(.)971
5102 y(sigma\(Number,Tot)o(al)o(\):-)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 255 267
TeXDict begin 255 266 bop 0 TeXcolorgray 0 TeXcolorgray
357 818 a Fw(Answers)41 b(to)g(the)g(Ex)o(ercises)1575
b(255)p 0 TeXcolorgray 647 1051 a Fs(Number)39 b(>)i(0,)647
1151 y(\\+)f(sigmares\(Number,T)o(ot)o(al\))o(,)647 1250
y(NewNumber)d(is)k(Number)e(-)i(1,)647 1350 y(sigma\(NewNumber)o(,Su)o
(bT)o(ot)o(al\))o(,)647 1449 y(Total)e(is)i(SubTotal)d(+)j(Number,)647
1549 y(assert\(sigmares)o(\(Nu)o(mb)o(er)o(,To)o(ta)o(l\)\))o(.)357
1709 y Fv(Answer)g(12.1)522 1831 y Fs(piece_of_code:-)647
1931 y(open\('hogwart.h)o(ous)o(es)o(',)o(wri)o(te)o(,St)o(re)o(am\))o
(,)647 2030 y(tab\(Stream,6\),)647 2130 y(write\(Stream,gr)o(yff)o(in)o
(do)o(r\),)647 2229 y(nl\(Stream\),)647 2329 y(write\(Stream,hu)o(ffl)o
(ep)o(uf)o(\),)647 2429 y(tab\(Stream,6\),)647 2528 y(write\(Stream,ra)
o(ven)o(cl)o(aw)o(\),)647 2628 y(nl\(Stream\),)647 2728
y(tab\(Stream,6\),)647 2827 y(write\(Stream,sl)o(yth)o(er)o(in)o(\),)
647 2927 y(nl\(Stream\),)647 3027 y(close\(Stream\).)357
3186 y Fv(Answer)g(12.2)522 3308 y Fs(:-)g(dynamic)d(word/2.)522
3508 y(readWord\(Stream,)o(W,S)o(ta)o(tus)o(\):)o(-)647
3607 y(get_code\(Stream)o(,Ch)o(ar)o(\),)647 3707 y(checkCharAndRea)o
(dRe)o(st)o(\(C)o(har)o(,C)o(har)o(s,)o(Str)o(ea)o(m,)o(Sta)o(tu)o
(s\),)647 3807 y(atom_codes\(W,Ch)o(ars)o(\).)522 4006
y(checkCharAndRead)o(Res)o(t\()o(10,)o([])o(,_)o(,ok)o(\):)o(-)d(!.)522
4105 y(checkCharAndRead)o(Res)o(t\()o(32,)o([])o(,_)o(,ok)o(\):)o(-)g
(!.)522 4205 y(checkCharAndRead)o(Res)o(t\()o(-1,)o([])o(,_)o(,eo)o
(f\))o(:-)g(!.)522 4305 y(checkCharAndRead)o(Res)o(t\()o(end)o(_o)o(f_)
o(fil)o(e,)o([],)o(_,)o(eo)o(f\):)o(-)g(!.)522 4404 y(checkCharAndRead)
o(Res)o(t\()o(Cha)o(r,)o([C)o(har)o(|C)o(har)o(s])o(,S)o(tre)o(am)o
(,St)o(at)o(us\))o(:-)647 4504 y(get_code\(Stream)o(,Ne)o(xt)o(Ch)o
(ar\))o(,)647 4604 y(checkCharAndRea)o(dRe)o(st)o(\(N)o(ext)o(Ch)o(ar,)
o(Ch)o(ars)o(,S)o(tr)o(eam)o(,S)o(tat)o(us)o(\).)522
4803 y(read_text\(File\):)o(-)647 4902 y(open\(File,read,)o(Str)o(ea)o
(m\))o(,)647 5002 y(read_words\(Stre)o(am,)o(ok)o(\),)647
5102 y(close\(Stream\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 256 268
TeXDict begin 256 267 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(256)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 971 1151 a Fs(read_words\(_,eof)o(\).)971
1350 y(read_words\(Strea)o(m,)o(Pre)o(vS)o(tat)o(us)o(\):)o(-)1095
1449 y(\\+)h(PrevStatus)c(=)42 b(eof,)1095 1549 y(readWord\(Stream,W)o
(ord)o(,S)o(ta)o(tus)o(\),)1095 1649 y(addWord\(Word\),)1095
1748 y(read_words\(Stream)o(,St)o(at)o(us)o(\).)971 1948
y(addWord\(Word\):-)1095 2047 y(word\(Word,Freq\),)35
b(!,)1095 2147 y(retract\()k(word\(Word,Freq\))c(\),)1095
2246 y(NewFreq)k(is)i(Freq)f(+)h(1,)1095 2346 y(assert\()e
(word\(Word,NewFre)o(q\))c(\).)971 2545 y(addWord\(Word\):-)1095
2645 y(assert\()k(word\(Word,1\))e(\).)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 257 269
TeXDict begin 257 268 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1718 1430
a Fu(Further)43 b(Reading)451 1917 y Fw(While)i(we)g(think)e
Ft(Learn)i(Pr)l(olo)o(g)e(Now!)57 b Fw(is)45 b(a)g(good)e(\002rst)i
(book)e(on)h(Prolog,)357 2016 y(it)51 b(certainly)f(shouldn')o(t)e(be)j
(the)g(last)g(one)f(you)g(look)g(at.)76 b(T)-7 b(o)51
b(help)f(you)g(tak)o(e)357 2116 y(the)i(ne)o(xt)f(step,)56
b(we)c(ha)n(v)o(e)g(listed,)j(with)d(comments,)i(some)e(of)g(our)g(f)o
(a)n(v)n(ourite)357 2216 y(Prolog)43 b(te)o(xtbooks,)g(and)h
(Prolog-based)e(books)i(on)g(Arti\002cial)g(Intelligence)f(\(AI\))357
2315 y(and)d(Natural)h(Language)d(Processing)j(\(NLP\).)357
2473 y Fv(Pr)o(olog)e(textbooks)p 0 TeXcolorgray 481
2597 a Fh(\017)p 0 TeXcolorgray 41 w Fw(Bratk)o(o)66
b(\(1990\):)95 b Ft(Pr)l(olo)o(g)66 b(Pr)l(o)o(gr)o(amming)e(for)j
(Arti\002cial)f(Intellig)o(ence)p Fw(.)564 2697 y(Addison-W)-7
b(esle)o(y)i(.)59 b(W)-7 b(e)47 b(strongly)d(recommend)g(this)i(book.)
59 b(If)46 b(you)f(lik)o(ed)564 2796 y Ft(Learn)i(Pr)l(olo)o(g)f(Now!)
63 b Fw(we)47 b(think)e(you')o(ll)h(\002nd)g(this)h(a)g(natural)f
(follo)n(wup.)564 2896 y(Its)56 b(strong)d(point)h(is)i(the)f(wide)f(v)
n(ariety)g(of)h(programming)c(styles)k(and)564 2995 y(applications)41
b(it)i(considers.)48 b(This)42 b(is)h(a)g(big)f(book,)e(and)i(it)h
(will)f(tak)o(e)h(you)564 3095 y(quite)37 b(a)h(while)f(to)h(w)o(ork)e
(through)g(it.)45 b(But)38 b(if)f(you)g(do)f(so,)j(you')o(ll)d(soon)h
(be)564 3195 y(writing)h(v)o(ery)g(substantial)g(Prolog)f(programs)g
(indeed,)h(and)g(you')o(ll)f(learn)h(a)564 3294 y(lot)j(about)f(AI)i
(along)d(the)i(w)o(ay)-5 b(.)p 0 TeXcolorgray 481 3465
a Fh(\017)p 0 TeXcolorgray 41 w Fw(Clocksin)46 b(\(2003\):)54
b Ft(Clause)46 b(and)f(Ef)o(fect:)55 b(Pr)l(olo)o(g)46
b(Pr)l(o)o(gr)o(amming)e(for)j(the)564 3565 y(W)-8 b(orking)53
b(Pr)l(o)o(gr)o(ammer)p Fw(.)82 b(Springer)-5 b(.)81
b(Strongly)52 b(recommended.)79 b(If)53 b(you)564 3664
y(w)o(ant)59 b(a)h(concise)e(practically)g(oriented)g(follo)n(w)g(up)g
(to)h Ft(Learn)g(Pr)l(olo)o(g)564 3764 y(Now!)50 b Fw(that)42
b(will)h(really)e(hone)g(your)g(Prolog)g(skills,)i(you)e(can')o(t)g(do)
h(better)564 3864 y(than)h(this.)55 b(It)44 b(e)o(xplains)e(some)i
(interesting)e(theory)-5 b(,)43 b(b)n(ut)g(its)i(real)f(strength)564
3963 y(is)51 b(that)e(it)i(is)f(based)f(around)f(a)i(collection)f(of)g
(w)o(orksheets.)71 b(Solv)o(e)49 b(the)564 4063 y(problems)40
b(the)o(y)g(contain,)g(and)g(you')o(ll)g(soon)g(be)h(\003ying.)p
0 TeXcolorgray 481 4234 a Fh(\017)p 0 TeXcolorgray 41
w Fw(Clocksin)51 b(and)g(Mellish)h(\(1987\):)64 b Ft(Pr)l(o)o(gr)o
(amming)50 b(in)i(Pr)l(olo)o(g)p Fw(.)76 b(Springer)-5
b(.)564 4333 y(This)37 b(w)o(as)h(one)e(of)h(the)g(earliest,)h(if)f
(not)g(the)g(earliest,)g(te)o(xtbook)e(on)i(Prolog)564
4433 y(programming.)63 b(It)48 b(w)o(on')o(t)f(tak)o(e)h(you)f(f)o(ar)h
(be)o(yond)d Ft(Learn)j(Pr)l(olo)o(g)f(Now!)p Fw(,)564
4532 y(b)n(ut)d(it)h(is)g(clearly)f(written,)h(and)e(its)i(discussions)
f(of)g(DCGs,)i(and)e(of)g(the)564 4632 y(link)37 b(between)e(logic)h
(and)g(Prolog,)h(are)f(accessible)h(and)f(w)o(orth)g(looking)e(at.)p
0 TeXcolorgray 481 4803 a Fh(\017)p 0 TeXcolorgray 41
w Fw(O'K)n(eefe)49 b(\(1990\):)61 b Ft(Cr)o(aft)50 b(of)g(Pr)l(olo)o(g)
p Fw(.)71 b(MIT)49 b(Press.)72 b(This)50 b(is)h(the)e(book)564
4902 y(you)d(should)g(read)g(when)g(you')l(re)f(con)m(vinced)f(that)j
(you)f(kno)n(w)f(all)j(about)564 5002 y(Prolog)53 b(and)h(ha)n(v)o(e)g
(nothing)e(left)j(to)f(learn.)85 b(Unless)55 b(you)e(truly)h(are)g(a)
564 5102 y(Prolog)40 b(guru,)f(you)g(will)j(swiftly)e(learn)g(that)h
(there)f(are)g(f)o(ar)g(deeper)g(le)n(v)o(els)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 258 270
TeXDict begin 258 269 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(258)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 1013 1051 a(of)45 b(Prolog)g(e)o(xpertise)f(than)h(you)f
(suspected,)i(and)f(that)g(you)g(still)h(ha)n(v)o(e)f(a)1013
1151 y(great)c(deal)f(to)h(master)-5 b(.)46 b(Superb)m(.)p
0 TeXcolorgray 930 1311 a Fh(\017)p 0 TeXcolorgray 41
w Fw(Sterling)65 b(\(1994\):)92 b Ft(The)65 b(Art)h(of)f(Pr)l(olo)o(g)p
Fw(.)117 b(MIT)65 b(Press.)119 b(In)65 b Ft(Learn)1013
1410 y(Pr)l(olo)o(g)44 b(Now!)55 b Fw(we)45 b(don')o(t)d(say)i(much)f
(about)g(the)h(abstract)g(idea)g(of)g(logic)1013 1510
y(programming.)e(If)d(the)g(little)h(we)f(ha)n(v)o(e)g(said)g(has)h(w)o
(ak)o(ened)e(your)g(interest,)1013 1610 y(this)45 b(is)h(the)f(book)e
(to)i(go)f(for)g(ne)o(xt.)56 b(Clearly)45 b(written,)g(it)g(will)h(gi)n
(v)o(e)d(you)1013 1709 y(a)k(good)e(grounding)e(in)j(the)h(basic)f
(theory)f(of)h(logic)g(programming,)e(and)1013 1809 y(link)d(it)g(to)h
(the)e(practical)h(w)o(orld)f(of)h(Prolog.)806 1977 y
Fv(A)n(pplying)g(Pr)o(olog)e(in)j(AI)f(and)h(NLP)p 0
TeXcolorgray 930 2099 a Fh(\017)p 0 TeXcolorgray 41 w
Fw(Blackb)n(urn)68 b(and)h(Bos)h(\(2005\):)100 b Ft(Repr)m(esentation)
68 b(and)g(Infer)m(ence)g(for)1013 2199 y(Natur)o(al)54
b(Langua)o(g)o(e)o(.)84 b(A)55 b(F)l(ir)o(st)h(Cour)o(se)f(in)f
(Computational)f(Semantics)p Fw(.)1013 2299 y(CSLI)d(Lecture)f(Notes.)
72 b(Introduces)47 b(natural)i(language)f(semantics)i(from)1013
2398 y(a)59 b(computational)c(perspecti)n(v)o(e)i(using)h(Prolog)f(as)i
(the)f(implementation)1013 2498 y(language.)73 b Ft(Learn)50
b(Pr)l(olo)o(g)g(Now!)75 b Fw(w)o(as)52 b(originally)c(intended)h(to)i
(be)g(an)1013 2597 y(appendix)39 b(to)i(this)h(book.)p
0 TeXcolorgray 930 2758 a Fh(\017)p 0 TeXcolorgray 41
w Fw(Co)o(vington)77 b(\(1994\):)120 b Ft(Natur)o(al)79
b(Langua)o(g)o(e)e(Pr)l(ocessing)i(for)h(Pr)l(olo)o(g)1013
2857 y(Pr)l(o)o(gr)o(ammer)o(s)p Fw(.)51 b(Prentice-Hall.)f(Solid,)43
b(well-written)f(book)f(on)h(NLP)h(that)1013 2957 y(uses)j(Prolog)f(as)
h(the)f(implementation)e(language.)58 b(If)45 b(you)g(ha)n(v)o(en')o(t)
f(done)1013 3057 y(an)o(y)g(NLP)h(before,)f(and)g(w)o(ant)h(to)g(put)f
(your)g(Prolog)g(to)g(w)o(ork,)h(this)g(is)h(a)1013 3156
y(good)40 b(place)g(to)h(start.)p 0 TeXcolorgray 930
3317 a Fh(\017)p 0 TeXcolorgray 41 w Fw(Pereira)35 b(and)h(Shieber)e
(\(1987\):)42 b Ft(Pr)l(olo)o(g)35 b(and)g(Natur)o(al)g(Langua)o(g)o(e)
f(Analysis)p Fw(.)1013 3416 y(CSLI)63 b(Lecture)e(Notes.)109
b(A)63 b(classic.)110 b(Se)n(v)o(eral)61 b(generations)g(of)g(PhD)1013
3516 y(students)41 b(ha)n(v)o(e)f(cut)h(their)g(teeth)g(on)f(this)i
(one.)j(Required)40 b(reading.)p 0 TeXcolorgray 930 3676
a Fh(\017)p 0 TeXcolorgray 41 w Fw(Reiter)64 b(\(2001\):)88
b Ft(Knowledg)o(e)63 b(in)g(Action:)90 b(Lo)o(gical)62
b(F)-9 b(oundations)61 b(for)1013 3776 y(Specifying)41
b(and)h(Implementing)f(Dynamical)h(Systems)p Fw(.)51
b(MIT)42 b(Press.)52 b(This)1013 3875 y(book)i(e)o(xamines,)k(e)o
(xtends,)f(and)e(implements)f(the)i(Situation)f(Calculus,)1013
3975 y(a)47 b(well)g(kno)n(wn)e(AI)i(formalism)e(for)h(representing)f
(and)h(reasoning)e(about)1013 4075 y(changing)53 b(information.)84
b(It')-5 b(s)55 b(an)g(important)e(book,)j(and)e(may)g(not)h(be)1013
4174 y(completely)29 b(accessible)h(if)g(you)f(don')o(t)f(ha)n(v)o(e)i
(some)f(theoretical)g(background.)1013 4274 y(But)49
b(as)h(an)e(e)o(xample)f(of)i(ho)n(w)f(Prolog)f(can)i(be)f(put)g(to)h
(w)o(ork,)h(it)f(tak)o(es)1013 4373 y(some)41 b(beating.)p
0 TeXcolorgray 930 4534 a Fh(\017)p 0 TeXcolorgray 41
w Fw(Shoham)76 b(\(1994\):)116 b Ft(Arti\002cial)77 b(Intellig)o(ence)f
(T)-8 b(ec)o(hniques)76 b(in)h(Pr)l(olo)o(g)p Fw(.)1013
4633 y(Mor)o(gan)56 b(Kaufman.)97 b(Discusses)60 b(and)e(implements)g
(a)h(wide)f(range)g(of)1013 4733 y(AI)51 b(problem-solving)d
(techniques)i(and)h(concepts,)h(including)e(depth-\002rst)1013
4833 y(search,)56 b(breadth-\002rst)c(search,)k(best-\002rst)e(search,)
i(alpha-beta)c(minimax,)1013 4932 y(forw)o(ard)e(chaining,)j
(production)c(systems,)55 b(reasoning)50 b(with)i(uncertainty)-5
b(,)1013 5032 y(and)40 b(STRIPS.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 259 271
TeXDict begin 259 270 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1396 1424
a Fu(Pr)m(olog)42 b(En)-7 b(vir)m(onments)451 1906 y
Fw(Se)n(v)o(eral)41 b(Prolog)g(en)m(vironments)e(are)j(a)n(v)n
(ailable,)f(and)g(probably)f(the)i(best)g(idea)357 2006
y(is)g(simply)f(to)h(google)e(what')-5 b(s)42 b(a)n(v)n(ailable.)k(But)
c(we)g(list)h(here)e(four)f(of)h(the)h(more)357 2105
y(widely)e(used)h(systems.)p 0 TeXcolorgray 481 2288
a Fh(\017)p 0 TeXcolorgray 41 w Fv(SWI-Pr)o(olog)564
2388 y Fw(A)56 b(Free)f(Softw)o(are)f(Prolog)g(en)m(vironment,)h
(licensed)f(under)g(the)g(Lesser)564 2487 y(GNU)38 b(public)e(license.)
44 b(This)37 b(popular)e(interpreter)h(w)o(as)h(de)n(v)o(eloped)e(by)h
(Jan)564 2587 y(W)m(ielemak)o(er)-5 b(.)564 2686 y Fs(http://www.swi-)t
(pr)o(olo)o(g.)o(or)o(g/)p 0 TeXcolorgray 481 2852 a
Fh(\017)p 0 TeXcolorgray 41 w Fv(SICStus)42 b(Pr)o(olog)564
2952 y Fw(Industrial)49 b(strength)f(Prolog)h(en)m(vironment)d(from)j
(the)g(Swedish)h(Institute)564 3052 y(of)41 b(Computer)f(Science.)564
3151 y Fs(http://www.sics.s)o(e/)o(sic)o(st)o(us)o(/)p
0 TeXcolorgray 481 3317 a Fh(\017)p 0 TeXcolorgray 41
w Fv(Y)-9 b(AP)41 b(Pr)o(olog)564 3417 y Fw(A)55 b(Prolog)e(compiler)g
(de)n(v)o(eloped)f(at)i(the)h(Uni)n(v)o(ersidade)d(do)i(Porto)f(and)564
3517 y(Uni)n(v)o(ersidade)42 b(Federa)h(do)g(Rio)h(de)f(Janeiro.)53
b(Free)43 b(for)g(use)h(in)g(academic)564 3616 y(en)m(vironments.)564
3716 y Fs(http://www.ncc.up)o(.p)o(t/)1486 3694 y Fa(\030)1531
3716 y Fs(vsc/Yap/)p 0 TeXcolorgray 481 3882 a Fh(\017)p
0 TeXcolorgray 41 w Fv(Ciao)d(Pr)o(olog)564 3982 y Fw(Another)30
b(Prolog)h(en)m(vironment)d(a)n(v)n(ailable)j(under)f(the)h(GNU)h
(public)f(license,)564 4081 y(de)n(v)o(eloped)39 b(at)i(the)g(Uni)n(v)o
(ersidad)e(Polit)5 b(\264)-33 b(ecnica)41 b(de)f(Madrid.)564
4181 y Fs(http://clip.dia.f)o(i.)o(upm)o(.e)o(s/)o(Sof)o(tw)o(are)o(/C)
o(iao)o(/)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 260 272
TeXDict begin 260 271 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(260)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 261 273
TeXDict begin 261 272 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1575 1525 a Fm(Pr)l(edicate)41
b(Index)p 0 TeXcolorgray 357 1943 a Fv(Symbols)357 2043
y Fs(,/2)p Fw(,)f(6)357 2143 y Fs(./2)p Fw(,)g(164)357
2243 y Fs(;/2)p Fw(,)g(7)357 2343 y Fs(</2)p Fw(,)g(97)357
2443 y Fs(=../2)p Fw(,)f(172)357 2543 y Fs(=/2)p Fw(,)h(24)357
2642 y Fs(=:=/2)p Fw(,)f(97)357 2742 y Fs(=</2)p Fw(,)g(97)357
2842 y Fs(==/2)p Fw(,)g(160)357 2942 y Fs(=\\=/2)p Fw(,)g(97)357
3042 y Fs(>/2)p Fw(,)h(97)357 3142 y Fs(>=/2)p Fw(,)f(97)357
3242 y Fs(\\=/2)p Fw(,)g(42)357 3342 y Fs(\\==/2)p Fw(,)g(161)357
3529 y Fv(A)357 3629 y Fs(append/3)p Fw(,)f(106)357 3729
y Fs(arg/3)p Fw(,)h(172)357 3828 y Fs(assert/1)p Fw(,)f(204)357
3928 y Fs(asserta/1)p Fw(,)f(207)357 4028 y Fs(assertz/1)p
Fw(,)g(207)357 4128 y Fs(at)p 450 4128 27 4 v 30 w(end)p
612 4128 V 30 w(of)p 730 4128 V 31 w(stream/1)p Fw(,)h(225)357
4228 y Fs(atom/1)p Fw(,)g(167)357 4328 y Fs(atom)p 538
4328 V 29 w(codes/2)p Fw(,)h(173,)h(225)357 4428 y Fs(atomic/1)p
Fw(,)e(167)357 4615 y Fv(B)357 4715 y Fs(bagof/3)p Fw(,)g(211)357
4902 y Fv(C)357 5002 y Fs('C'/3)p Fw(,)h(130,)h(136)357
5102 y Fs(close/1)p Fw(,)e(223)p 0 TeXcolorgray 0 TeXcolorgray
1697 1943 a Fv(D)1697 2044 y Fs(display/1)p Fw(,)g(179)1697
2237 y Fv(E)1697 2337 y Fs(ensure)p 1966 2337 V 29 w(loaded/1)p
Fw(,)g(219)1697 2531 y Fv(F)1697 2631 y Fs(findall/3)p
Fw(,)g(209)1697 2731 y Fs(float/1)p Fw(,)h(167)1697 2831
y Fs(functor/3)p Fw(,)f(170)1697 3025 y Fv(G)1697 3125
y Fs(get)p 1834 3125 V 31 w(code/2)p Fw(,)g(225)1697
3319 y Fv(I)1697 3419 y Fs(integer/1)p Fw(,)g(167)1697
3519 y Fs(is/2)p Fw(,)i(90)1697 3712 y Fv(L)1697 3813
y Fs(listing/0)p Fw(,)e(17)1697 4006 y Fv(M)1697 4106
y Fs(max/3)p Fw(,)i(192)1697 4207 y Fs(member/2)p Fw(,)e(76)1697
4307 y Fs(module/2)p Fw(,)g(221)1697 4500 y Fv(N)1697
4601 y Fs(nl/0)p Fw(,)i(182,)g(220)1697 4701 y Fs(nl/1)p
Fw(,)g(223)1697 4801 y Fs(nonvar/1)p Fw(,)e(167)1697
4901 y Fs(notrace/0)p Fw(,)g(45)1697 5001 y Fs(number/1)p
Fw(,)g(167)1697 5102 y Fs(number)p 1966 5102 V 29 w(codes/2)p
Fw(,)h(174)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 262 274
TeXDict begin 262 273 bop 0 TeXcolorgray 0 TeXcolorgray
806 818 a Fw(262)1787 b(Learn)40 b(Prolog)g(No)n(w!)p
0 TeXcolorgray 806 1051 a Fv(O)806 1151 y Fs(op/3)p Fw(,)f(176)806
1250 y Fs(open/3)p Fw(,)f(223,)i(224)806 1433 y Fv(R)806
1532 y Fs(read/2)p Fw(,)e(224)806 1632 y Fs(retract/1)p
Fw(,)f(204)806 1732 y Fs(retractall/3)p Fw(,)f(208)806
1914 y Fv(S)806 2014 y Fs(setof/3)p Fw(,)i(213)806 2197
y Fv(T)806 2296 y Fs(tab/1)p Fw(,)h(182,)h(220)806 2396
y Fs(trace/0)p Fw(,)e(43)806 2579 y Fv(U)806 2678 y Fs(unify)p
1031 2678 27 4 v 29 w(with)p 1236 2678 V 30 w(occurs)p
1530 2678 V 28 w(check/2)p Fw(,)h(31)806 2778 y Fs(use)p
943 2778 V 30 w(module/1)p Fw(,)f(222)806 2877 y Fs(use)p
943 2877 V 30 w(module/2)p Fw(,)g(222)806 3060 y Fv(V)806
3160 y Fs(var/1)p Fw(,)h(167)806 3342 y Fv(W)806 3442
y Fs(write/1)p Fw(,)f(180)806 3542 y Fs(write/2)p Fw(,)g(223)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 263 275
TeXDict begin 263 274 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 264 276
TeXDict begin 264 275 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 265 277
TeXDict begin 265 276 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 266 278
TeXDict begin 266 277 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 267 279
TeXDict begin 267 278 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
